<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Presentation</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Cryptography.SymmetricAlgorithm">
            <summary>
            Represents the abstract base class from which all implementations of symmetric algorithms must inherit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric decryptor object
            with the specified Key property and initialization vector (IV).
            </summary>
            <param name="rgbKey"></param>
            <param name="rgbIV"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, creates a symmetric encryptor object
            with the specified Key property and initialization vector (IV).
            </summary>
            <param name="rgbKey"></param>
            <param name="rgbIV"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.GenerateIV">
            <summary>
            When overridden in a derived class, generates a random initialization vector
            (IV) to use for the algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.GenerateKey">
            <summary>
            When overridden in a derived class, generates a random key (Key) to use for the algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.CreateDecryptor">
            <summary>
            Creates a symmetric decryptor object with the current Key property and initialization vector (IV).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.CreateEncryptor">
            <summary>
            Creates a symmetric encryptor object with the current Key property and initialization vector (IV).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.Dispose">
            <summary>
            Releases all resources used by the current instance of the SymmetricAlgorithm class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.Clear">
            <summary>
            Releases all resources used by the SymmetricAlgorithm class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
            <summary>
            Determines whether the specified key size is valid for the current algorithm.
            </summary>
            <param name="bitLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SymmetricAlgorithm and optionally
            releases the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.BlockSizeValue">
            <summary>
            Represents the block size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
            <summary>
            Represents the feedback size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.IVValue">
            <summary>
            Represents the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.KeySizeValue">
            <summary>
            Represents the size, in bits, of the secret key used by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.KeyValue">
            <summary>
            Represents the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
            <summary>
            Specifies the block sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
            <summary>
            Specifies the key sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.ModeValue">
            <summary>
            Represents the cipher mode used in the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.SymmetricAlgorithm.PaddingValue">
            <summary>
            Represents the padding mode used in the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.BlockSize">
            <summary>
            Gets or sets the block size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.FeedbackSize">
            <summary>
            Gets or sets the feedback size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.KeySize">
            <summary>
            Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
            <summary>
            Gets the block sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.LegalKeySizes">
            <summary>
            Gets the key sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.SymmetricAlgorithm.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.ICryptoTransform">
            <summary>
            Defines the basic operations of cryptographic transformations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting
            transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <param name="outputBuffer"></param>
            <param name="outputOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Cryptography.ICryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.ICryptoTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.ICryptoTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Compression.ENCompressionLevel">
            <summary>
            Enumerates the most commonly used gzip compression levels.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Compression.ENCompressionLevel.NoCompression">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Compression.ENCompressionLevel.BestSpeed">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Compression.ENCompressionLevel.MediumCompression">
            <summary>
            This level is a compromise between speed and compression ratio.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Compression.ENCompressionLevel.BestCompression">
            <summary>
            The best and slowest compression level. This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Compression.NCompression">
            <summary>
            Provides various compression and decompression routines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressZlib(System.IO.Stream,System.IO.Stream,Nevron.Nov.Compression.ENCompressionLevel)">
            <summary>
            Compresses the given input stream with the zlib algorithm to the specified output
            stream and closes the output stream.
            </summary>
            <param name="input">The stream that contains the data to compress.</param>
            <param name="output">The stream to write the compressed data to.</param>
            <param name="compressionLevel">The compression level to apply.</param>
            <remarks>
            The zlib algorithm is an abstraction of the deflate algorithm used by the gzip compression
            and has become very popular because of its great performance. It is used in many file formats
            such as ZIP, PNG, PDF, flash movies (SWF), etc. and is a crucial part of many platforms like
            Linux, Mac OS X, iOS, XBox, Playstation, Wii and so on.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressZlib(System.IO.Stream,System.IO.Stream,Nevron.Nov.Compression.ENCompressionLevel,System.Boolean)">
            <summary>
            Compresses the given input stream with the zlib algorithm to the specified output stream.
            </summary>
            <param name="input">The stream that contains the data to compress.</param>
            <param name="output">The stream to write the compressed data to.</param>
            <param name="compressionLevel">The compression level to apply.</param>
            <param name="closeOutputStream">Determines whether to close the output stream when the compression has finished or not.</param>
            <remarks>
            The zlib algorithm is an abstraction of the deflate algorithm used by the gzip compression
            and has become very popular because of its great performance. It is used in many file formats
            such as ZIP, PNG, PDF, flash movies (SWF), etc. and is a crucial part of many platforms like
            Linux, Mac OS X, iOS, XBox, Playstation, Wii and so on.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressZlib(System.Byte[],System.Int32,System.Int32,System.IO.Stream,Nevron.Nov.Compression.ENCompressionLevel,System.Boolean)">
            <summary>
            Compresses the given bytes with the zlib algorithm.
            </summary>
            <param name="input">An array of bytes to compress.</param>
            <param name="startIndex">The index in the byte array the compression algorith should start working at.</param>
            <param name="count">The total number of bytes from the byte array that should be compressed.</param>
            <param name="output">The stream to write the compressed data to.</param>
            <param name="compressionLevel">The compression level to apply.</param>
            <param name="closeOutputStream">Determines whether to close the output stream when the compression has finished or not.</param>
            <remarks>
            The zlib algorithm is an abstraction of the deflate algorithm used by the gzip compression
            and has become very popular because of its great performance. It is used in many file formats
            such as ZIP, PNG, PDF, flash movies (SWF), etc. and is a crucial part of many platforms like
            Linux, Mac OS X, iOS, XBox, Playstation, Wii and so on.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressZlib(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the given input stream with the zlib algorithm to the specified output stream.
            This method automatically detects whether the given zlib compressed input stream has a header
            or not and decompresses it accordingly.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="output">The stream to write the decompressed data to.</param>
            <remarks>
            The zlib algorithm is an abstraction of the deflate algorithm used by the gzip compression
            and has become very popular because of its great performance. It is used in many file formats
            such as ZIP, PNG, PDF, flash movies (SWF), etc. and is a crucial part of many platforms like
            Linux, Mac OS X, iOS, XBox, Playstation, Wii and so on.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressZlib(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decompresses the given input stream with the zlib algorithm to the specified output stream.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="output">The stream to write the decompressed data to.</param>
            <param name="hasHeader">Specifies whether the compressed input stream has header and footer or not.</param>
            <remarks>
            The zlib algorithm is an abstraction of the deflate algorithm used by the gzip compression
            and has become very popular because of its great performance. It is used in many file formats
            such as ZIP, PNG, PDF, flash movies (SWF), etc. and is a crucial part of many platforms like
            Linux, Mac OS X, iOS, XBox, Playstation, Wii and so on.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressGZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the given input stream with the gzip algorithm to the specified output stream.
            </summary>
            <param name="input">The stream to compress.</param>
            <param name="output">The stream to write the compressed data to.</param>
            <remarks>
            Gzip is based on the Deflate algorithm, which is a combination of LZ77 and Huffman coding.
            Although its file format also allows for multiple compressed streams to be concatenated, gzip is
            normally used to compress just single files. Compressed archives are typically created by
            assembling collections of files into a single tar archive, and then compressing that archive
            with gzip. The final .tar.gz or .tgz file is usually called a tarball.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressGZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the given input stream with the gzip algorithm to the specified output stream.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="output">The stream to write the decompressed data to.</param>
            Gzip is based on the Deflate algorithm, which is a combination of LZ77 and Huffman coding.
            Although its file format also allows for multiple compressed streams to be concatenated, gzip is
            normally used to compress just single files. Compressed archives are typically created by
            assembling collections of files into a single tar archive, and then compressing that archive
            with gzip. The final .tar.gz or .tgz file is usually called a tarball.
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressBZip2(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the given input stream with the bzip2 algorithm to the specified output stream.
            </summary>
            <param name="input">The stream to compress.</param>
            <param name="output">The stream to write the compressed data to.</param>
            <remarks>
            Bzip2 is a file compressor that uses the Burrows�Wheeler algorithm. Like gzip
            it is only a compressor for single files and not a full archiver. Bzip2 compresses
            most files more effectively than the older LZW (.Z) and Deflate (.zip and .gz)
            compression algorithms, but is considerably slower.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressBZip2(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the given input stream with the bzip2 algorithm to the specified output stream.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="output">The stream to write the decompressed data to.</param>
            <remarks>
            Bzip2 is a file compressor that uses the Burrows�Wheeler algorithm. Like gzip
            it is only a compressor for single files and not a full archiver. Bzip2 compresses
            most files more effectively than the older LZW (.Z) and Deflate (.zip and .gz)
            compression algorithms, but is considerably slower.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressZip(System.IO.Stream,Nevron.Nov.Compression.ENCompressionLevel,Nevron.Nov.Compression.INZipCompressor)">
            <summary>
            Compresses the streams provided by the zipCompressor interface implementation in ZIP format
            to the specified output stream.
            </summary>
            <param name="output">The stream to write the compressed data to.</param>
            <param name="compressionLevel">The compression level to apply.</param>
            <param name="zipCompressor">An interface implementation that should determine the streams to compress and their names.</param>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.CompressZip(System.IO.Stream,Nevron.Nov.Compression.ENCompressionLevel,System.String,Nevron.Nov.Compression.INZipCompressor)">
            <summary>
            Compresses the streams provided by the zipCompressor interface implementation in ZIP format
            to the specified output stream and encrypts the archive using the classic PKZIP encryption algorithm.
            </summary>
            <param name="output">The stream to write the compressed data to.</param>
            <param name="password">The password to encrypt the ZIP stream with. Pass null if you don't want to encrypt the ZIP archive.</param>
            <param name="compressionLevel">The compression level to apply.</param>
            <param name="zipCompressor">An interface implementation that should determine the streams to compress and their names.</param>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressZip(System.IO.Stream,Nevron.Nov.Compression.INZipDecompressor)">
            <summary>
            Decompresses the given zip stream.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="zipDecompressor">An interface ipmlementation that should receive the decompressed streams and their names.</param>
        </member>
        <member name="M:Nevron.Nov.Compression.NCompression.DecompressZip(System.IO.Stream,System.String,Nevron.Nov.Compression.INZipDecompressor)">
            <summary>
            Decompresses the given zip stream.
            </summary>
            <param name="input">The stream to decompress.</param>
            <param name="password">The password to decrypt the ZIP stream with. Pass null if the ZIP archive is not encrypted.</param>
            <param name="zipDecompressor">An interface ipmlementation that should receive the decompressed streams and their names.</param>
        </member>
        <member name="T:Nevron.Nov.Compression.INZipCompressor">
            <summary>
            Interface used in zip compression.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Compression.INZipCompressor.GetStreamsToCompress">
            <summary>
            Gets the name and the data of the streams that should be compressed in the zip stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Compression.INZipCompressor.OnEntryCompressed(System.String,System.IO.Stream)">
            <summary>
            Called when a stream has been compressed into a zip item. You can use this method to safely
            close the stream and dismiss any used resources.
            </summary>
            <param name="entryName"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Nevron.Nov.Compression.INZipDecompressor">
            <summary>
            Interface used in zip decompression.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Compression.INZipDecompressor.Filter(System.String)">
            <summary>
            Determines whether the entry with the given name should be processed or not.
            </summary>
            <param name="entryName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Compression.INZipDecompressor.OnEntryDecompressed(System.String,System.IO.MemoryStream)">
            <summary>
            Called when a zip entry has been decompressed.
            </summary>
            <param name="entryName"></param>
            <param name="decompressedStream"></param>
        </member>
        <member name="T:Nevron.Nov.INDeeplyCloneable">
            <summary>
            Implemented by objects which can create deep clonings
            </summary>
        </member>
        <member name="M:Nevron.Nov.INDeeplyCloneable.DeepClone">
            <summary>
            Creates an identical copy of the current object.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="T:Nevron.Nov.Cryptography.CryptoStream">
            <summary>
            Represents a crypto stream.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.#ctor(System.IO.Stream,Nevron.Nov.Cryptography.ICryptoTransform,Nevron.Nov.Cryptography.CryptoStreamMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="stream"></param>
            <param name="transform"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Clear">
            <summary>
            Disposes the stream.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.FlushFinalBlock">
            <summary>
            Flushes the final block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overriden to throw a not supported exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.SetLength(System.Int64)">
            <summary>
            Overriden to throw a not supported exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptoStream.Dispose(System.Boolean)">
            <summary>
            Disposes the stream.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.CanRead">
            <summary>
            Indicates whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.CanSeek">
            <summary>
            Indicates whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.CanWrite">
            <summary>
            Indicates whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.Length">
            <summary>
            Overriden to throw a not supported exception.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.Position">
            <summary>
            Overriden to throw a not supported exception.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.CryptoStream.HasFlushedFinalBlock">
            <summary>
            Indicates whether the final block of the stream has been flushed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.CryptoStreamMode">
            <summary>
            Enumerates the crypto stream modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CryptoStreamMode.Read">
            <summary>
            Read mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CryptoStreamMode.Write">
            <summary>
            Write mode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.CipherMode">
            <summary>
            Enumerates the cipher modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CipherMode.CBC">
            <summary>
            Cipher Block Chaining.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CipherMode.ECB">
            <summary>
            Electronic Codebook.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CipherMode.OFB">
            <summary>
            Output Feedback.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CipherMode.CFB">
            <summary>
            Cipher Feedback.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.CipherMode.CTS">
            <summary>
            Cipher Text Stealing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.PaddingMode">
            <summary>
            Enumerates the padding modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.PaddingMode.None">
            <summary>
            None mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.PaddingMode.PKCS7">
            <summary>
            PKCS7 mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.PaddingMode.Zeros">
            <summary>
            Zeroes mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.PaddingMode.ANSIX923">
            <summary>
            ANSIX923 mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.PaddingMode.ISO10126">
            <summary>
            ISO10126 mode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.CryptographicException">
            <summary>
            Represents a cryptographic exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicException.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="hr"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicException.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicException.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="format"></param>
            <param name="insert"></param>
        </member>
        <member name="T:Nevron.Nov.Cryptography.HashAlgorithm">
            <summary>
            Represents the base class from which all implementations of cryptographic hash algorithms must derive.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.Clear">
            <summary>
            Releases all resources used by the hash algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified Stream object.
            </summary>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.Dispose">
            <summary>
            Releases all resources used by the current instance of the HashAlgorithm class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the hash value for the specified region of the input byte array and
            copies the specified region of the input byte array to the specified region
            of the output byte array.
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <param name="outputBuffer"></param>
            <param name="outputOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer"></param>
            <param name="inputOffset"></param>
            <param name="inputCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object
            into the hash algorithm for computing the hash.
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after
            the last data is processed by the cryptographic stream object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the HashAlgorithm class.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Nevron.Nov.Cryptography.HashAlgorithm.m_HashValue">
            <summary>
            Represents the value of the computed hash code.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.HashAlgorithm.m_HashSizeValue">
            <summary>
            Represents the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Cryptography.HashAlgorithm.m_State">
            <summary>
            Represents the state of the hash computation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.HashAlgorithm.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.KeySizes">
            <summary>
            Determines the set of valid key sizes for the symmetric cryptographic algorithms.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the KeySizes class with the specified key values.
            </summary>
            <param name="minSize"></param>
            <param name="maxSize"></param>
            <param name="skipSize"></param>
        </member>
        <member name="P:Nevron.Nov.Cryptography.KeySizes.MaxSize">
            <summary>
            Specifies the maximum key size in bits.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.KeySizes.MinSize">
            <summary>
            Specifies the minimum key size in bits.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Cryptography.KeySizes.SkipSize">
            <summary>
            Specifies the interval between valid key sizes in bits.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Cryptography.MD5">
            <summary>
            Represents the abstract class from which all implementations of the MD5 hash algorithm inherit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5.Create">
            <summary>
            Creates an instance of the default implementation of the MD5 hash algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the MD5 hash algorithm.
            </summary>
            <param name="algName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Cryptography.MD5CryptoServiceProvider">
            <summary>
            Computes the MD5 hash value for the input data using the implementation provided
            by the cryptographic service provider (CSP). This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5CryptoServiceProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of MD5CryptoServiceProvider.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the HashAlgorithm class.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.MD5CryptoServiceProvider.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Cryptography.CryptographicUnexpectedOperationException">
            <summary>
            Represents a cryptographic unexpected operation exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicUnexpectedOperationException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Nevron.Nov.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="format"></param>
            <param name="insert"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INArray`1">
            <summary>
            Combines the features of INIndexedMultiSet and INWritableIndexedSet
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INIndexedMultiSet`1">
            <summary>
            Represents an indexed set, in which certain items can possibly appear more than once.
            </summary>
            <remarks>
            This interface extends its base INIndexedSet with the following operations:
            <list type="bullet">
            	<item>
            		<term>First and Last Occurance Queries</term>
            		<description>
            		Both types of queries have options to specify the starting index, and are derivative of Count and GetAt. 
            		In forward (first occurrence) queries the query proceeds from the start index towards the end of the set.
            		In reverse (last occurrence) queries the query proceeds from the start index towards the start of the set.
            		</description>
            	</item>
            </list>
            An INIndexedMultiSet by itself is fixed in size, readonly and allows duplicate entires. 
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INIndexedSet`1">
            <summary>
            Represents a finite set, with support for random access read at arbitrary indices.
            </summary>
            <remarks>
            This interface extends its base INSet with the following operations:
            <list type="bullet">
            	<item>
            		<term>GetAt</term>
            		<description>
            		Gets the object at a random index. 
            		INIndexedSet implementations that allow item substitution at random index should also implement INWritableArraySet.
            		</description>
            	</item>
            	<item>
            		<term>Reverse Iteration</term> 
            		<description>
            		This is derivative operation of Count and GetAt, exposed by the INReverseIterable interface.
            		</description>
            	</item>
            	<item>
            		<term>First Occurance Query</term> 
            		<description>
            		This is a derivative operation of Count and GetAt, exposed by the IndexOf method of the interface.
            		INIndexedSet implementations that allow duplicate entries, should also implement the INArrayMultiSet interface.
            		</description>
            	</item>
            </list>
            <para>
            An array set by itself is fixed in size, readonly, and allows no duplicate entires. 
            Indexed sets that support item addtion/removal, writing at index or duplicate entries, should also implement other set interfaces.
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INSet`1">
            <summary>
            Represents a fininite set of items.
            </summary>
            <remarks>
            This interface defines the basic operations with finite sets which are:
            <list type="bullet">
            	<item>
            		<term>Get the count of items in the set</term>
            	</item>
            	<item>
            		<term>Query whether the set contains an item</term>
            	</item>
            	<item>
            		<term>Iterate through the items of the set</term>
            	</item>
            	<item>
            		<term>Copy all set items to an array</term>
            	</item>
            </list>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INCountable`1">
            <summary>
            Implemented by objects that can provide a count for a specific type of items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INCountable`1.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INContains`1">
            <summary>
            Implemented by objects that can be threated as finite or infinite sets of specific items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INContains`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INIterable`1">
            <summary>
            Implemented by objects that can provide forward iterators (i.e. support sequential access in first-to-last order).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIterable`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INReverseIterable`1">
            <summary>
            Implemented by objects that can provide reverse iterators (i.e. support sequential access in last-to-first order).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INReverseIterable`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIndexedSet`1.IndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INIndexedSet`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIndexedMultiSet`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIndexedMultiSet`1.LastIndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the last time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIndexedMultiSet`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which the item appears in the set for the last time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INWritableIndexedSet`1">
            <summary>
            Represents an indexed set, with support for random access write (set item at arbitrary index)
            </summary>
            <remarks>
            A INWritableIndexedSet by itself is fixed in size, writable at index and allows no duplicate entires. 
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INWritableIndexedSet`1.Item(System.Int32)">
            <summary>
            Gets/set the item at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NCLRAdapt`1">
            <summary>
            Provides helper methods for adapting NOV Data Structurures interfaces to .NET Common Language Runtime (CLR) interfaces and vice versa.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCLRAdapt`1.ToINIterator(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates an INIterator wrapper for the specified CLR enumerator.
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCLRAdapt`1.ToINIterable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an INIterable wrapper for the specified CLR enumerable.
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCLRAdapt`1.ToINArray(`0[])">
            <summary>
            Creates an INArray wrapper for the items in the specified CLR array. 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCLRAdapt`1.ToIEnumerator(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a CLR IEnumerator wrapper for the specified INIterator.
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCLRAdapt`1.ToIEnumerable(Nevron.Nov.DataStructures.INIterable{`0})">
            <summary>
            Creates a CLR IEnumerable wrapper for the specified INIterator.
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INIterator`1">
            <summary>
            Represents an interator, which exposes sequential access to a set of items of the specified type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next item of the set.
            </summary>
            <returns>true if the iterator was successfully advanced to the next item. false if the iterator has passed the end of the set.</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INIterator`1.Reset">
            <summary>
            Resets the iterator to its initial position, which is before the first item in the set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INIterator`1.Current">
            <summary>
            Gets the current item. Valid only if MoveNext() returned true prior to getting the current value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NDynamicArrayRing`1">
            <summary>
            Serves as base class for array ring based implementations of INDeque and INQueue. 
            Implements the INArray and INClearable interfaces.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INClearable">
            <summary>
            Implemented by objects from which you can remove all content (items).
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INClearable.Clear">
            <summary>
            Removes all content (items)
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor(System.Int32)">
            <summary>
            Creates a new array ring with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new array ring, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new array ring, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new array ring, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new array ring, which is initialized with the items of the specified array.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.IndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.LastIndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the last time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which the item appears in the set for the last time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Clear">
            <summary>
            Removes all items
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.ToArray">
            <summary>
            Creates an array and populates it with the items of this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Sort">
            <summary>
            Sorts the entire list by using a default comparer and the quick sort algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Sort(Nevron.Nov.DataStructures.INGreaterThanComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts only a portion of the list using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Count">
            <summary>
            Gets the count of items in this set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.HeadIndex">
            <summary>
            Gets the head index. Valid only if Count is not zero.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.TailIndex">
            <summary>
            Gets the tail index. Valid only if Count is not zero.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Capacity">
            <summary>
            Gets or sets the capacity of the backing array.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArrayRing`1.Items">
            <summary>
            Gets the internal items backing array.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NStack`1">
            <summary>
            Represents an INStack implementation that is based on a zero based array.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NDynamicArray`1">
            <summary>
            Serves as base class for different INSet implementations that are based on a zero based array of generic items.
            </summary>
            <remarks>
            Zero based arrays are practically useful for array lists and array stacks.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor">
            <summary>
            Creates an empty array
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(System.Int32)">
            <summary>
            Creates an empty array with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new array that holds the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new array that holds the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new array that holds the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(`0[])">
            <summary>
            Creates a new array that holds the specified items.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new array that holds the first items of the specified items array.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.GetIterator">
            <summary>
            Gets an iterator that iterates throw the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the items in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.Contains(`0)">
            <summary>
            Returns true if this list contains the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.IndexOf(`0)">
            <summary>
            Gets the index at which an item appears for the first time.
            Returns -1 if the item does not appear in this list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.LastIndexOf(`0)">
            <summary>
            Gets the last index of the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the last index of the specified item, starting from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.Clear">
            <summary>
            Clears this array, by resetting it's count to zero and settings the Items array values to their defaults (depending on type)
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that this dynamic array has the capacity to handle the specified amount of items.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDynamicArray`1.ToArray">
            <summary>
            Creates an array and populates it with the items of this dynamic array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArray`1.Count">
            <summary>
            Gets the count of items in this set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArray`1.Capacity">
            <summary>
            Gets or sets the amount of items that this dynamic can hold, without resizing the Items array.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NDynamicArray`1.Items">
            <summary>
            Gets the internal items backing array.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INStack`1">
            <summary>
            Represents a finite set, with LIFO (Last-In First-Out) items access.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INStack`1.Push(`0)">
            <summary>
            Inserts the item at the top of the stack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INStack`1.Pop">
            <summary>
            Removes and returns the top item of the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INStack`1.Peek">
            <summary>
            Returns the top item of the stack without returning it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor">
            <summary>
            Creates an empty stack
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(System.Int32)">
            <summary>
            Creates a new stack with the specified initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new stack that holds the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new stack that holds the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new stack with the specified initial capacity, that holds the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(`0[])">
            <summary>
            Creates a new stack that holds the items of the specified array. 
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new stack that holds the first items of the specified items array.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.Push(`0)">
            <summary>
            Inserts the item at the top of the stack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.Pop">
            <summary>
            Removes and returns the top item of the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.Peek">
            <summary>
            Returns the top item of the stack without returning it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStack`1.EnforceDepth(System.Int32)">
            <summary>
            
            </summary>
            <param name="depth"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NDeque`1">
            <summary>
            Represents an INDeque implementation, that is based on an array ring.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INDeque`1">
            <summary>
            Represents a finite set, with double-ended queue access (provides access and modifications to both its head and tail).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PopFront">
            <summary>
            Removes and returns the first item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PopBack">
            <summary>
            Removes and returns the last item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PeekFront">
            <summary>
            Returns the first item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INDeque`1.PeekBack">
            <summary>
            Returns the last item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INList`1">
            <summary>
            Represents a collection in which items can appear multiple times.
            </summary>
            <remarks>
            This interface extends its bases INCollection and INArray with the following operations:
            <list>
            	<item>
            		<term>Remove a specific item</term>
            		<description>
            		Because items can appear more than once in a list this operation has two versions - forward and reverse.
            		</description>
            	</item>
            	<item>
            		<term>Remove specific items before and after an index</term>
            		<description>
            		Because items can appear more than once in a list this operation has two versions - forward and reverse.
            		Both types of methods return the index at which the item was removed, and have an option to specify the next starting index.
            		This is sufficient to implement a remove items iteration that starts from the last removed item.
            		</description>
            	</item>
            	<item>
            		<term>Remove all occurrences of a specific item</term>
            		<description>
            		</description>
            	</item>
            </list>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INCollection`1">
            <summary>
            Represents a dynamic, writable array set, in which you can also insert and remove items at arbitrary indices.
            </summary>
            This interface extends its bases INDymanicSet and INWritableArraySet with the following operations:
            <remarks>
            <list type="bullet">
            	<item>
            		<term>Insert at aribtrary index</term>
            		<description>
            		</description>
            	</item>
            	<item>
            		<term>Remove at aribtrary index</term>
            		<description>
            		</description>
            	</item>
            	<item>
            		<term>Remove a specific item</term>
            		<description>
            		</description>
            	</item>
            	<item>
            		<term>Remove all items</term>
            		<description>
            		This is derivative operation of Count and RemoveAt.
            		</description>
            	</item>
            	<item>
            		<term>Add to end</term>
            		<description>
            		This is derivative operation of Count and Insert.
            		</description>
            	</item>
            </list>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INDynamicSet`1">
            <summary>
            Represents a finite set, in which you can add new items and remove existing ones.
            </summary>
            <remarks>
            This interface defines the basic operations with dynamic sets which are:
            <list type="bullet">
            	<item>
            		<term>Add items</term>
            	</item>
            	<item>
            		<term>Remove items</term>
            	</item>
            	<item>
            		<term>Remove all items (clear the set)</term>
            	</item>
            </list>
            An INDynamicSet by itself is dynamic in size, unordered, and does not allow duplicate entires.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INAddable`1">
            <summary>
            Implemented by objects in which you can add items from a specific type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INAddable`1.Add(`0)">
            <summary>
            Adds the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INRemovable`1">
            <summary>
            Implemented by objects from which you can remove items from a specific type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INRemovable`1.Remove(`0)">
            <summary>
            Removes the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index">index at which to insert item</param>
            <param name="item">item to insert</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">index of item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INList`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurrence of the specified item in list, by starting the lookup from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INList`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of the specified item (if any)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INList`1.RemoveLast(`0,System.Int32)">
            <summary>
            Removes the last occurrence of the specified item, by staring the look from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INList`1.RemoveAll(`0)">
            <summary>
            Removes all occurrence of the specified item.
            </summary>
            <param name="item"></param>
            <returns>true if at least one occurrence was removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor">
            <summary>
            Default deque constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor(System.Int32)">
            <summary>
            Creates a new deque with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new queue, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new deque, which is initialized with the items of the specified array.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PopFront">
            <summary>
            Removes and returns the first item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PopBack">
            <summary>
            Removes and returns the last item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PeekFront">
            <summary>
            Returns the first item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.PeekBack">
            <summary>
            Returns the last item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index">index at which to insert item</param>
            <param name="item">item to insert</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">index of item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.Add(`0)">
            <summary>
            Adds the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.Remove(`0)">
            <summary>
            Removes the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurrence of the specified item in list, by starting the lookup from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of the specified item (if any)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.RemoveLast(`0,System.Int32)">
            <summary>
            Removes the last occurrence of the specified item, by staring the look from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NDeque`1.RemoveAll(`0)">
            <summary>
            Removes all occurrence of the specified item.
            </summary>
            <param name="item"></param>
            <returns>true if at least one occurrence was removed, otherwise false</returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NQueue`1">
            <summary>
            Represents an INQueue implementation, that is based on an array ring.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INQueue`1">
            <summary>
            Represents a finite set, with FIFO (First-In First-Out) items access.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INQueue`1.Enqueue(`0)">
            <summary>
            Enqueue (appends) the item at the end of the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the beginning of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INQueue`1.Peek">
            <summary>
            Returns the first item of the queue without removing it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor">
            <summary>
            Default queue constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new queue with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new queue, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new queue, which is initialized with the items of the specified array.
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.Enqueue(`0)">
            <summary>
            Enqueue (appends) the item at the end of the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the beginning of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NQueue`1.Peek">
            <summary>
            Returns the first item of the queue without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBlocksDeque`1">
            <summary>
            Represents an implementation of the INDeque interface, that is based on fixed size array blocks organized in a ring.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBlocksRing`1">
            <summary>
            Serves as base class for blocks ring based implementations of INDeque and INQueue. 
            </summary>
            <remarks>
            The blocks ring is a circular chain of generic type array blocks of fixed size. 
            The size of the blocks is specified at creation time and cannot be changed.
            <para>
            The advantage of the blocks ring is that the addition and removal of items at the head and the tail of the blocks ring is always performed in constant time.
            This makes this implementation suitable for decks and queues.
            </para>
            <para>
            The disadvantage the blocks ring is that items in the middle are accessed at O(n) time,
            which is a common disadvantage of all chain based implementations.
            </para>
            <para>
            The blocks ring is ever growing with a constant step that is equal to the block size with which it is initalized.
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.IndexOf(`0)">
            <summary>
            Gets the index at which an item appears for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.LastIndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the last time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which the item appears in the set for the last time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksRing`1.Clear">
            <summary>
            Removes all items from this object
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBlocksRing`1.Count">
            <summary>
            Gets the count of items
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBlocksRing`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor">
            <summary>
            Creates a new deque with a default block size
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor(System.Int32)">
            <summary>
            Creates a new deque with the specified block size
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new deque, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new deque, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new deque, with the specified block size and initialized with the remaining items of the specified iterator.
            </summary>
            <param name="blockSize"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new deque, with the specified block size and initialized with the items of the specified set.
            </summary>
            <param name="blockSize"></param>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PopFront">
            <summary>
            Removes and returns the first item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PopBack">
            <summary>
            Removes and returns the last item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PeekFront">
            <summary>
            Returns the first item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.PeekBack">
            <summary>
            Returns the last item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.Remove(`0)">
            <summary>
            Removes the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurrence of the specified item in list, by starting the lookup from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of the specified item (if any)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.RemoveLast(`0,System.Int32)">
            <summary>
            Removes the last occurrence of the specified item, by staring the look from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.RemoveAll(`0)">
            <summary>
            Removes all occurrence of the specified item.
            </summary>
            <param name="item"></param>
            <returns>true if at least one occurrence was removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">index of item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index">index at which to insert item</param>
            <param name="item">item to insert</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksDeque`1.Add(`0)">
            <summary>
            Adds the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBlocksQueue`1">
            <summary>
            Represents an INQueue implementation, that is based on fixed size array blocks organized in a ring.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor">
            <summary>
            Default queue constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new queue with the specified blocks size.
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new queue, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new queue, with the specified block size and initialized with the remaining items of the specified iterator.
            </summary>
            <param name="blockSize"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new queue, with the specified block size and initialized with the items of the specified set.
            </summary>
            <param name="blockSize"></param>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.Enqueue(`0)">
            <summary>
            Enqueue (appends) the item at the end of the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the beginning of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksQueue`1.Peek">
            <summary>
            Returns the first item of the queue without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBlocksStack`1">
            <summary>
            Represents an INStack implementation, that is based on fixed size array blocks organized in a ring.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor">
            <summary>
            Default stack constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor(System.Int32)">
            <summary>
            Creates a new stack with the specified blocks size.
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new stack, which is initialized with the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new stack, which is initialized with the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new stack, with the specified block size and initialized with the remaining items of the specified iterator.
            </summary>
            <param name="blockSize"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new stack, with the specified block size and initialized with the items of the specified set.
            </summary>
            <param name="blockSize"></param>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.Push(`0)">
            <summary>
            Inserts the item at the top of the stack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.Pop">
            <summary>
            Removes and returns the top item of the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.Peek">
            <summary>
            Returns the top item of the stack without returning it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBlocksStack`1.EnforceDepth(System.Int32)">
            <summary>
            Enforces a certain depth of the stack by removing the first objects, until the stack count reaches the specified one
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NCompositeComparer`1">
            <summary>
            Represents a comparer that defines an order based on a set of other comparer.
            It compares the values with the first comparer first, if the values are not equal it uses the comparison as result, otherwise it uses the next comparer in the list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCompositeComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="comparers"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCompositeComparer`1.Compare(`0,`0)">
            <summary>
            Returns the inverse of the inner comparer value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NReverseComparer`1">
            <summary>
            Represents a comparer that reverses the order defined by its inner comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializer constructor
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReverseComparer`1.Compare(`0,`0)">
            <summary>
            Returns the inverse of the inner comparer value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NFilter`1">
            <summary>
            A filter that uses a delegate function to filter items.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INFilter`1">
            <summary>
            Represents a filter for objects of a certain type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INFilter`1.Filter(`0)">
            <summary>
            Returns true if the item passes the filter, otherwise returns false.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFilter`1.#ctor(Nevron.Nov.FunctionResult{System.Boolean,`0})">
            <summary>
            Initializer constructor
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFilter`1.Filter(`0)">
            <summary>
            Returns true if the item passes the filter function passed in the constructor.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTypeEqualsFilter`2">
            <summary>
            Filter objects of type T, the type of which exactly matches TTargetType.
            You cannot create instances of this type and must always use the Instance singleton.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TTargetType"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTypeEqualsFilter`2.Filter(`0)">
            <summary>
            Returns true if the item type is equal to TTargetType.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NTypeEqualsFilter`2.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NAsFilter`2">
            <summary>
            Filters items that are instances of the TTargetType generic argument and pass a specific inner filter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TTargetType"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAsFilter`2.#ctor(Nevron.Nov.DataStructures.INFilter{`1})">
            <summary>
            Creates a new AS filter with the specified inner filter.
            </summary>
            <param name="innerFilter"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAsFilter`2.Filter(`0)">
            <summary>
            Returns true if the item is an instance of TTargetType generic argument and passes the inner filter.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAsFilter`2.InnerFilter">
            <summary>
            Gets or sets the contained filter
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NObjectEqualsFilter`1">
            <summary>
            A filter objects that are object equal to another object. Uses the Object.Equals method.
            </summary>
            <remarks>
            The NObjectEqualsFilter is fundamentally different from the NEqualsToFilter, 
            because the latter is only available for types that implement the IComparable interface 
            and actually uses another method to check for equality.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectEqualsFilter`1.#ctor(`0)">
            <summary>
            Creates a new equals filter that checks the items for equality with the specified other item
            </summary>
            <param name="other">other item to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectEqualsFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is equal to the specified item.
            This operation uses the item Object.Equals virtual method.
            </summary>
            <param name="item">object to filter</param>
            <returns>true if the contained filter returned false, false if the contained filter returned true</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NObjectEqualsFilter`1.Other">
            <summary>
            Gets or sets the item to check with
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGreaterThanOrEqualToFilter`1">
            <summary>
            A filter that returns true, if the item is GreaterThanOrEqualTo to another item.
            Checked with the CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NComparisonFilter`1">
            <summary>
            Provides facility methods for creating filters that provide different comparision operators, 
            such as Equals, LessThan, GreaterThan, LessThanOrEqual and GreaterThanOrEqual.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NComparisonFilter`1.Value">
            <summary>
            Gets or sets the value to check with
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGreaterThanOrEqualToFilter`1.#ctor(`0)">
            <summary>
            Creates a new GreaterThanOrEqualTo filter that checks with the specified other value
            </summary>
            <param name="value">value to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGreaterThanOrEqualToFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is GreaterThanOrEqualTo the Value item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NEqualsToFilter`1">
            <summary>
            A filter that returns true if the item is equal to another item.
            The equality is checked with the Compare method.
            </summary>
            <remarks>
            The NEqualsToFilter is fundamentally different from the NObjectEqualsFilter, 
            because the latter is uses the build in each .NET object Equals method, 
            and actually uses another method to check for equality.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NEqualsToFilter`1.#ctor(`0)">
            <summary>
            Creates a new EqualTo filter that checks with the specified other value
            </summary>
            <param name="value">value to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NEqualsToFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is EqualTo the Value item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGreaterThanFilter`1">
            <summary>
            A filter that returns true, if the item is GreaterThan to another item.
            Checked with the CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGreaterThanFilter`1.#ctor(`0)">
            <summary>
            Creates a new GreaterThan filter that checks with the specified other value
            </summary>
            <param name="value">value to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGreaterThanFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is GreaterThan the Value item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NLessThanFilter`1">
            <summary>
            A filter that returns true, if the item is LessThan to another item.
            Checked with the CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NLessThanFilter`1.#ctor(`0)">
            <summary>
            Creates a new LessThan filter that checks with the specified other value
            </summary>
            <param name="value">value to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NLessThanFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is LessThan the Value item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NLessThanOrEqualToFilter`1">
            <summary>
            A filter that returns true, if the item is LessThanOrEqualTo to another item.
            Checked with the CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NLessThanOrEqualToFilter`1.#ctor(`0)">
            <summary>
            Creates a new LessThanOrEqualTo filter that checks with the specified other value
            </summary>
            <param name="value">value to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NLessThanOrEqualToFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is LessThanOrEqualTo the Value item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NIsFilter`2">
            <summary>
            Filters objects that are instances of the specified type.
            You cannot create instances of this type and must always use the Instance singleton.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TTargetType"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIsFilter`2.Filter(`0)">
            <summary>
            Returns true if item is instance of TTargetType
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NIsFilter`2.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INGreaterThanComparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INGreaterThanComparer`1.IsGreaterThan(`0,`0)">
            <summary>
            Returns true if a is greater than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NIteratorHelpers`1">
            <summary>
            Provides helper methods for working with iterators
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIteratorHelpers`1.CopyTo(Nevron.Nov.DataStructures.INIterator{`0},`0[],System.Int32)">
            <summary>
            Flushes the specified iterator to the specified array, starting from the specified index.
            </summary>
            <param name="it"></param>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.INMap`2">
            <summary>
            Represents a dynamic set of key-value pairs, where each key is unique for the set.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INMap`2.Get(`0)">
            <summary>
            Gets the value that corresponds to the specified key.
            Throws an exception, if item for this key does not exist.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INMap`2.TryGet(`0,`1@)">
            <summary>
            Tries to get the value for the specified key.
            </summary>
            <param name="key">key to look for</param>
            <param name="value">value corresponding to key. Valid only if true is returned.</param>
            <returns>true if the map contained a value for the specified key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INMap`2.Set(`0,`1)">
            <summary>
            Sets the value for the specified key. 
            If key-value association already exists, the value is replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.INMap`2.Add(`0,`1)">
            <summary>
            Adds a new item with the specified key and value.
            Throws an exception, if item for this key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INMap`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            The getter implementation throws an exception, if item for the key does not exist.
            The setter implementation replaces the value, if item for the key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INMap`2.Keys">
            <summary>
            Gets the set of keys
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.INMap`2.Values">
            <summary>
            Gets the set of values
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NArrayReverseIterator`1">
            <summary>
            Represents a reverse iterator, that can be initialized to iterate through an entire indexed set or only a range of the it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayReverseIterator`1.#ctor(`0[])">
            <summary>
            Creates an iterator that iterates through the entire array
            </summary>
            <param name="items">items to enumerate</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayReverseIterator`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, in reverse order.
            </summary>
            <param name="items">items to enumerate</param>
            <param name="count">count of items to enumerate, starting from zero</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayReverseIterator`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from the specified index.
            </summary>
            <param name="items"></param>
            <param name="start">start enumeration index</param>
            <param name="count">count of items to enumerate, starting from start</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayReverseIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next child node in the container, which satifies the specified filter
            </summary>
            <returns>true if advance succeeded, false if the end of the container was reached</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayReverseIterator`1.Reset">
            <summary>
            Resets the iterator (positions it before the first child node in the container)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NArrayReverseIterator`1.Current">
            <summary>
            Gets the current item
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NAsIterator`2">
            <summary>
            An iterator, which aggregates another iterator and casts it output to the specified type.
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAsIterator`2.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Initializer constructor.
            </summary>
            <param name="it">the iterator to aggregate</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAsIterator`2.MoveNext">
            <summary>
            Advances the iterator to the next element of the collection.
            </summary>
            <returns>true if the iterator was successfully advanced to the next element; false if the iterator has passed the end of the collection.</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAsIterator`2.Reset">
            <summary>
            Sets the iterator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAsIterator`2.Current">
            <summary>
            Gets the element in the collection at the current position of the iterator.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NFilterIterator`1">
            <summary>
            An iterator, which aggregates another iterator and filters its output
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFilterIterator`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0},Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Initializer constructor
            </summary>
            <param name="iterator">the iterator to aggregate</param>
            <param name="filter">the filter to use</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFilterIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next element of the collection.
            </summary>
            <returns>true if the iterator was successfully advanced to the next element; false if the iterator has passed the end of the collection.</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFilterIterator`1.Reset">
            <summary>
            Sets the iterator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NFilterIterator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the iterator.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NEmptyIterator`1">
            <summary>
            An iterator which is always at the end (e.g. ended).
            You cannot create instances of this class, and you must always use the Instance singleton.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NEmptyIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next element of the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NEmptyIterator`1.Reset">
            <summary>
            Resets the iterator
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NEmptyIterator`1.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NEmptyIterator`1.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.ENSetOperator">
            <summary>
            Represents a boolen set operation between sets.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENSetOperator.Union">
            <summary>
            Union - result set contains item, if item is present in either left set or right set.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENSetOperator.Subtraction">
            <summary>
            Subtraction - result set contains item, if item is present in left set and is not present in right set.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENSetOperator.Intersection">
            <summary>
            Intersection - result set contains item, if item is present in both left set and right set.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENSetOperator.ExclusiveOr">
            <summary>
            ExclusiveOr - result set contains item, if item is present in one of the set and is not present in the other set.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphAdapter">
            <summary>
            The NGraphAdapter class is used to abstract users 
            from the actual way in which the specified objects form graphs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.GetType(System.Object)">
            <summary>
            Gets the graph part type, which the object must represent (in case it is a graph part)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.GetEdgeSource(System.Object)">
            <summary>
            For an edge object, returns its source
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.GetEdgeDestination(System.Object)">
            <summary>
            For an edge object, returns its destination
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.GetIncomingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its incomming edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphAdapter.GetOutgoingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its outgoing edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphBuilder">
            <summary>
            The NGraphBuilder class is used for the construction of a graph,
            which represents a single or multiple connected object regions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphBuilder.#ctor(Nevron.Nov.DataStructures.NGraphAdapter,Nevron.Nov.DataStructures.NGraphPartFactory)">
            <summary>
            Initializer constructor
            </summary>
            <param name="adapter"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphBuilder.BuildGraph(System.Object,Nevron.Nov.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds a graph, which represents the connected region of the specified vertex object
            </summary>
            <param name="obj">object from which the graph must be built</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>graph</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphBuilder.BuildGraphs(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds graphs, which represent the connected regions of the specified objects
            </summary>
            <param name="objects">objects</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>array of graphs</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphBuilder.BuildTree(System.Object,Nevron.Nov.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds a tree, which represents the subtree of the specified object
            </summary>
            <param name="obj">root object</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>tree</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphBuilder.BuildTrees(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds trees from the connected regions of the specified objects
            </summary>
            <param name="objects">list of objects from which to build the tree</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>array of trees</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphBuilder.Adapter">
            <summary>
            Gets or sets the adapter, which the builder uses to reveal the objects graph relations
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphBuilder.PartFactory">
            <summary>
            Gets or sets the factory, which the builder uses to create graph parts
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphPartFactory">
            <summary>
            The NGraphPartFactory class is used by the graph builder 
            for the actual construction of graph parts
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartFactory.CreateGraphVertex(System.Object)">
            <summary>
            Called to create a graph vertex associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartFactory.CreateGraphEdge(System.Object)">
            <summary>
            Called to create a graph edge associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartFactory.CreateTreeVertex(System.Object)">
            <summary>
            Called to create a tree vertex associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartFactory.CreateTreeEdge(System.Object)">
            <summary>
            Called to create a tree edge associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NObjectGraphPartMap">
            <summary>
            The NObjectGraphPartMap class, represents a mapping between a logical object and a graph part.
            An instance of this class is produced by graph and tree builders.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.Map(System.Object,Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Creates a mapping, which links the specified object with the specified part
            </summary>
            <param name="obj"></param>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.GetPartFromObject(System.Object)">
            <summary>
            Gets the graph part representing the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.GetObjectFromPart(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Gets the object represented by the specified part
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.ContainsObject(System.Object)">
            <summary>
            Determines whether the specified object is contained in the map
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.ContainsPart(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Determines whether the specified part is contained in the map
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.RemoveObject(System.Object)">
            <summary>
            Removes an object from the map and destroys the object-part association
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.RemovePart(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Removes a part from the map and destroys the part-object association
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.GetPartsIterator">
            <summary>
            Gets an enumerator for the contained parts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NObjectGraphPartMap.GetObjectsIterator">
            <summary>
            Gets an enumerator for the contained objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.ENGraphPartType">
            <summary>
            Enumerates the possible graph part types
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENGraphPartType.None">
            <summary>
            Not a graph part type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENGraphPartType.Vertex">
            <summary>
            Graph vertex.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENGraphPartType.Edge">
            <summary>
            Graph edge.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.ENGraphType">
            <summary>
            Enumerates the possible graph types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENGraphType.Directed">
            <summary>
            Directed (digraph) - edge direction is taken into account
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.ENGraphType.Undirected">
            <summary>
            Undirected - edge direction is not taken into account
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NAccumulatingVisitor">
            <summary>
            The NAccumulatingVisitor class is used to accumulate the visited graph parts 
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphPartVisitor">
            <summary>
            The NGraphPartVisitor class is used to visit the parts of graphs and trees 
            and serves as base class for all types of graph part visitors
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartVisitor.Visit(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Must override to visit the part
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPartVisitor.VisitEdges">
            <summary>
            Determines whether edges should be visited or not. By default set to true
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAccumulatingVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAccumulatingVisitor.Visit(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Overriden to accumulate the graph part in the respective array
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAccumulatingVisitor.Vertices">
            <summary>
            Gets the visited vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAccumulatingVisitor.Edges">
            <summary>
            Gets the visited edges
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBicomp">
            <summary>
            Decomposes a graph into its biconnected components and builds it
            block-cut tree, in which each node is a cut vertex or a biconnected component.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBicomp.#ctor(Nevron.Nov.DataStructures.NGraph)">
            <summary>
            Initializing ctor.
            </summary>
            <param name="graph">The graph which block-cut tree to build.</param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBicomp.Tree">
            <summary>
            Gets the block-cut tree of the graph, in which each node is a cut vertex or
            a biconnected component.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NCountingVisitor">
            <summary>
            The NCountingVisitor is used to count the visited graph parts
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCountingVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NCountingVisitor.Visit(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Overriden to increase the respective graph part counter
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NCountingVisitor.VertexCount">
            <summary>
            Gets the count of visited vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NCountingVisitor.EdgeCount">
            <summary>
            Gets the count of visited edges
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraph">
            <summary>
            The NGraph class represents a graph
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphPartContainer">
            <summary>
            The NGraphPartContainer class serves as base class for graphs and trees
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.GetPartById(System.Int32)">
            <summary>
            Gets the graph part by its id
            </summary>
            <param name="id">graph part id</param>
            <returns>graph part, or null if there is no part with this id</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.GetPartsIterator">
            <summary>
            Gets a parts iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.BeginUpdate">
            <summary>
            Begins the graph part container update
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.EndUpdate">
            <summary>
            Ends the graph part container update
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.InvalidateCashe">
            <summary>
            Invalidates all cashed information in the container and its parts
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.RegisterPart(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Adds a part to the container
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPartContainer.UnregisterPart(Nevron.Nov.DataStructures.NGraphPart)">
            <summary>
            Removes a part from the container
            </summary>
            <param name="part"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPartContainer.IsUpdating">
            <summary>
            Determines whether the graph part container is currently being updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPartContainer.Cashe">
            <summary>
            Cashe for time consuming graph part container checks
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPartContainer.CurAutoId">
            <summary>
            Gets or sets the current auto id which 
            will be assigned to the next part 
            added to the container
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.AddVertex(Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Adds a vertex to the graph
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.RemoveVertex(Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Removes the vertex from the graph
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.AddEdge(Nevron.Nov.DataStructures.NGraphEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.RemoveEdge(Nevron.Nov.DataStructures.NGraphEdge)">
            <summary>
            Removes the edge from the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.RemoveCycles">
            <summary>
            Removes the cycles in a cyclic directed graph by reversing some of the edges
            </summary>
            <returns>The reversed edges</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.ReverseEdges(Nevron.Nov.DataStructures.NGraphEdgeList)">
            <summary>
            Reverses the specified list of edges
            </summary>
            <param name="edges">the edges to be reversed</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.FindEdge(Nevron.Nov.DataStructures.ENGraphType,Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Finds the edge, which connects the specified vertices
            </summary>
            <param name="graphType"></param> 
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <returns>edge which connects the specified vetices, or null if such does not exist</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.DepthFirstTraversal(Nevron.Nov.DataStructures.ENGraphType,Nevron.Nov.DataStructures.NGraphPartVisitor,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Performs a depth first traversal visiting of the graph parts in this graph, starting from the specified vertex
            </summary>
            <param name="graphType">specifies the graph type</param>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.BreadthFirstTraversal(Nevron.Nov.DataStructures.ENGraphType,Nevron.Nov.DataStructures.NGraphPartVisitor,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Performs a breath first traversal visiting of the graph parts in this graph, starting from the specified vertex
            </summary>
            <param name="graphType">specifies the graph type</param>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.TopologicalOrderTraversal(Nevron.Nov.DataStructures.NGraphPartVisitor)">
            <summary>
            Performs a topological order traversal of the graph parts in this graph (directed graph)
            </summary>
            <remarks>
            A topological traversal will traverse the vertices based on their topological sort order. 
            A topological sort order is such an order of the vertices of the graph in which for each pair of vertices (A, B),
            if B is a successor of A then B will be after A in the order. 
            </remarks>
            <param name="visitor">visitor to use</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.CreateDepthFirstSpanningTree(Nevron.Nov.DataStructures.ENGraphType,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Creates a depth first spanning tree, by starting the traversal from the specified vertex
            </summary>
            <param name="graphType">graph type</param>
            <param name="startVertex">vertex from which to start the traversal</param>
            <returns>depth first spanning tree</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.CreateBreadthFirstSpanningTree(Nevron.Nov.DataStructures.ENGraphType,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Creates a breadth first spanning tree, by starting the traversal from the specified vertex
            </summary>
            <param name="graphType">graph type</param>
            <param name="startVertex">vertex from which to start the traversal</param>
            <returns>breadth first spanning tree</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.CreateTopoligicalOrderTree">
            <summary>
            Creates a topological order tree
            </summary>
            <returns>topological order tree</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.GetShortestPath(Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Returns the shortest path (if any) between the given vertices
            </summary>
            <param name="startVertex">The start vertex</param>
            <param name="endVertex">The end vertex</param>
            <returns>The vertices in the shortest path without the start and the end vertex</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.GetLongestPathLength(Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Returns the longest path length between 2 vertices.
            </summary>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.GetBiconnectedComponents">
            <summary>
            Returns the biconnected components of the graph, as well as the cut vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.GetSTOrdering(Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Finds st-ordering of a biconnected graph.
            </summary>
            <param name="fromVertex">The s vertex.</param>
            <param name="toVertex">The t vertex.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.SupplementToBiconnectedGraph">
            <summary>
            Supplements the current graph to a biconnected one by adding a new vertex
            and connecting it to each biconnected component (but not to a cut vertex in it).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.ComputePlanarEmbedding">
            <summary>
            Computes the planar emebedding of the graph if it is planar (i.e. fills the planarly
            ordered edge list of each vertex in anticlockwise direction) and returns true.
            Returns false if the graph is not planar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.ToAdjacencyList(System.Boolean)">
            <summary>
            Returns the adjacency list representation of the graph.
            </summary>
            <param name="directed">Determines if the graph is regarded as directed or not.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraph.RestoreVertexTags(Nevron.Nov.DataStructures.NList{System.Object})">
            <summary>
            Restores the vertices tags
            </summary>
            <param name="tags"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.Vertices">
            <summary>
            Obtains a reference to the graph vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.Edges">
            <summary>
            Obtains a reference to the graph edges
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsTree">
            <summary>
            Determines whether this graph is a tree (directed graph)
            </summary>
            <remarks>
            The graph is a tree if all vertices except one (the root) have only one incomming edge
            </remarks>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsConnected">
            <summary>
            Determines whether this is a connected graph (undirected graph)
            A graph is connected if there is an undirected path between each pair of vertices in it
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsStronglyConnected">
            <summary>
            Determines whether this is a strongly connected digraph (directed graph)
            A digraph is connected if there is a directed path between each pair of vertices in it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsCyclic">
            <summary>
            Determines whether this is a cyclic digraph (directed graph)
            </summary>
            <remarks>
            The digraph is cyclic if it contains a directed cycle
            </remarks>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsBiconnected">
            <summary>
            Determines whether this is a biconnected graph.
            A biconnected graph is a nonseparable graph, meaning if any vertex were to be removed,
            the graph will remain connected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraph.IsPlanar">
            <summary>
            Checks whether this graph is planar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphEdge">
            <summary>
            The NGraphEdge class represents an edge connecting two vertices
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphPart">
            <summary>
            The NGraphPart class servers as base class for graph edges, graph vertices, tree edges and tree vertices
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPart.InvalidateCashe">
            <summary>
            Invalidates any cashed information in the graph part
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphPart.GetPartType">
            <summary>
            Must override to define the part type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPart.Container">
            <summary>
            Gets the graph part container to which the part belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPart.Id">
            <summary>
            Gets the part id (automatically assigned when the part is added to a container)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphPart.Tag">
            <summary>
            Gets or sets custom data associated with the graph part
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdge.#ctor">
            <summary>
            Creates a new graph edge
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdge.#ctor(Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdge.GetOtherVertex(Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Gets the other vertex, which this edge connects 
            </summary>
            <param name="vertex">from or to vertex</param>
            <returns>other vertex</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdge.GetPartType">
            <summary>
            Overriden to return GraphPartType.Edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphEdge.FromVertex">
            <summary>
            Gets or sets the edge FROM vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphEdge.ToVertex">
            <summary>
            Gets the edge TO vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphEdge.SelfLoop">
            <summary>
            Checks if the edge is a self-loop edge
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphEdge.Graph">
            <summary>
            Obtains a reference to the graph in which the edge resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphEdgeList">
            <summary>
            The NGraphEdgeList class represents a typed list of NGraphEdge instances
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NList`1">
            <summary>
            Represents an INList implementation that is based on a zero-based array (i.e. Array List).
            Also implements the INDeque interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.INRecyclable">
            <summary>
            Implementd by recyclable objects residing in recycling pools
            </summary>
        </member>
        <member name="M:Nevron.Nov.INRecyclable.Recycle">
            <summary>
            Recycles the object
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor">
            <summary>
            Creates an empty list
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(System.Int32)">
            <summary>
            Creates a new list with the specified initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new list that holds the items of the specified set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new list that holds the remaining items of the specified iterator.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new list with the specified initial capacity, that holds the remaining items of the specified iterator.
            </summary>
            <param name="capacity"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(`0[])">
            <summary>
            Creates a new list that holds the items of the specified array.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a new list that holds the first items of the specified items array.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Recycle">
            <summary>
            Recycles this object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Add(`0)">
            <summary>
            Adds (appends) an item to the array
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item, if any
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurrence of the specified item, by starting the lookup from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.RemoveLast(`0,System.Int32)">
            <summary>
            Removes the last occurrence of the specified item, by staring the look from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.RemoveAll(`0)">
            <summary>
            Removes all occurrence of the specified item.
            </summary>
            <param name="item"></param>
            <returns>true if at least one occurrence was removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PopFront">
            <summary>
            Removes and returns the first item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PopBack">
            <summary>
            Removes and returns the last item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PeekFront">
            <summary>
            Returns the first item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.PeekBack">
            <summary>
            Returns the last item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Add(`0,`0)">
            <summary>
            Adds a pair of items to the list
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Add(`0,`0,`0)">
            <summary>
            Adds a triplet of items to the list.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Add(`0,`0,`0,`0)">
            <summary>
            Adds a quad of items to the list.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="item3"></param>
            <param name="item4"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddNoDuplicates(`0)">
            <summary>
            Adds a non duplicate item to the list
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddNoNull(`0)">
            <summary>
            Adds a non null item to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRange(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Adds a range of items to this list.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRange(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Adds the range of items that the specified enumerable can provide.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRange(`0[])">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRange(`0[],System.Int32)">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRange(`0[],System.Int32,System.Int32)">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
            <param name="start"></param>
            /// <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRangeNoDuplicates(Nevron.Nov.DataStructures.INIterable{`0})">
            <summary>
            Adds a range of objects without adding duplicate ones.
            </summary>
            <param name="iterable"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRangeNoDuplicates(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Adds a range of objects without adding duplicate ones.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRangeNoDuplicates(`0[])">
            <summary>
            Adds a range of objects without adding duplicate ones.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRangeNoDuplicates(`0[],System.Int32)">
            <summary>
            Adds a range of objects without adding duplicate ones.
            </summary>
            <param name="arr"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddRangeNoDuplicates(`0[],System.Int32,System.Int32)">
            <summary>
            Adds a range of objects without adding duplicate ones.
            </summary>
            <param name="arr"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.InsertRange(System.Int32,Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Inserts a range of items in the specified list at the specified index
            </summary>
            <param name="index"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.InsertRange(System.Int32,Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Inserts a range of items in the specified list at the specified index
            </summary>
            <param name="index"></param>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of items from this list
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Reverse">
            <summary>
            Reverses the items in this list
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the items in the specified list range
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Sort">
            <summary>
            Sorts the entire list by using a default comparer and the quick sort algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Sort(Nevron.Nov.DataStructures.INGreaterThanComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Sort(System.Int32,System.Int32,Nevron.Nov.DataStructures.INGreaterThanComparer{`0})">
            <summary>
            Sorts only a portion of the list by using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts only a portion of the list using the specified comparer and the quick sort algorithm.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BubbleSort">
            <summary>
            Sorts the entire list by using a default comparer and the bubble sort algorithm.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BubbleSort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the bubble sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BubbleSort(Nevron.Nov.DataStructures.INGreaterThanComparer{`0})">
            <summary>
            Sorts the entire list by using the specified comparer and the bubble sort algorithm.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BubbleSort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts only a portion of the list using the specified comparer and the bubble sort algorithm.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BinarySearch(`0)">
            <summary>
            Searches for the index at which the item occurs by using a binary search. 
            It is an user responsibility to first sort the list in ascending order. 
            </summary>
            <param name="item">item to look for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches for the index at which the item occurs by using a binary search. 
            It is an user responsibility to first sort the list in ascending order. 
            </summary>
            <param name="item">item to look for</param>
            <param name="comparer">comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches for the index at which the item occurs by using a binary search. 
            The search is performed only inside the specified list subrange.
            It is an user responsibility to first sort the list in ascending order. 
            </summary>
            <param name="index">range start index</param>
            <param name="count">range lenght</param>
            <param name="item">item to look for</param>
            <param name="comparer">comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.CopyTo(`0[])">
            <summary>
            Copies the items of this array (from 0 to Count) to the specified target array (from 0).
            </summary>
            <param name="targetArray"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the items of this array (from 0 to itemsToCopy) to the specified target array (at targetIndex).
            </summary>
            <param name="sourceIndex"></param>
            <param name="targetArray"></param>
            <param name="targetIndex"></param>
            <param name="itemsToCopy"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of items of this list
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Filter(Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
            <param name="filter">filter to use, or null if no filter should be used</param>
            <returns>filtered list</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.FilterCount(Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
            <param name="filter">filter to apply</param>
            <returns>count on elements which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.Swap(Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Swaps this list content with the specified other list.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.ToArray``1">
            <summary>
            Converts this list to system array of the corresponding type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.ConvertAll``1(Nevron.Nov.FunctionResult{``0,`0})">
            <summary>
            
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.CastAll``1">
            <summary>
            Casts all items in this list to the specified target type. 
            Returns a new list with the casted objects
            </summary>
            <typeparam name="TTarget"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.BeginFastAdd(System.Int32)">
            <summary>
            Call this method before calling the FastAdd method not more that the specified count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddFast(`0)">
            <summary>
            Unsafe add method that adds the specified item and increases the count.
            Call the BeginFastAdd method before calling this method.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.AddFastNoNull(`0)">
            <summary>
            Unsafe add method that adds the specified item and increases the count, unless it is null.
            Call the BeginFastAdd method before calling this method.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NList`1.FromItem(`0)">
            <summary>
            Creates a list that contains the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdgeList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdgeList.#ctor(Nevron.Nov.DataStructures.NList{Nevron.Nov.DataStructures.NGraphEdge})">
            <summary>
            Copy constructor
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdgeList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphEdgeList.GetEdgesForVertex(Nevron.Nov.DataStructures.NGraphVertex,System.Boolean)">
            <summary>
            Gets the edges that contain the given vertex.
            </summary>
            <param name="vertex"></param>
            <param name="fromVertex"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphVertex">
            <summary>
            The NGraphVertex class represents a vertex in a graph
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertex.#ctor">
            <summary>
            Creates a new graph vertex 
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertex.GetPartType">
            <summary>
            Overriden to return GraphPartType.Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.IncomingEdges">
            <summary>
            Gets the graph vertex incoming edges (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.OutgoingEdges">
            <summary>
            Gets the graph vertex outgoing edges (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.Edges">
            <summary>
            Gets the edges connected to the graph vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.IncomingEdgesCount">
            <summary>
            Gets the graph vertex incoming edges count (e.g. in-degree)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.OutgoingEdgesCount">
            <summary>
            Gets the graph vertex outgoing edges count (e.g. out-degree)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.EdgesCount">
            <summary>
            Gets the count of the edges connected to the graph vertex (e.g degree)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.SourceVertices">
            <summary>
            Gets the source vertices for this graph vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.DestinationVertices">
            <summary>
            Gets the destination vertices for this graph vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.NeighbourVertices">
            <summary>
            Gets the neighbour vertices for this graph vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.SuccessorVertices">
            <summary>
            Gets all successor vertices of this vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.PredecessorVertices">
            <summary>
            Gets all predecessor vertices of this vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.AccessibleVertices">
            <summary>
            Gets all accessible vertices of this vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NGraphVertex.Graph">
            <summary>
            Obtains a reference to the graph in which the vertex resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphVertexDegreeComparer">
            <summary>
            The NGraphVertexDegreeComparer class implements the IComparer interface 
            and compares graph vertices by their degree
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertexDegreeComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertexDegreeComparer.Compare(Nevron.Nov.DataStructures.NGraphVertex,Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Returns -1 if obj1 degree is smaller than obj2 degree.
            Returns 1 if obj1 degree is larger than obj2 degree.
            Returns 0 if obj1 degree is equal to obj2 degree.
            </summary>
            <param name="v1">The first graph vertex to be compared.</param>
            <param name="v2">The second graph vertex to be compared.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NGraphVertexList">
            <summary>
            The NGraphVertexList class represents a typed list of NGraphVertex instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertexList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertexList.#ctor(Nevron.Nov.DataStructures.NList{Nevron.Nov.DataStructures.NGraphVertex})">
            <summary>
            Initializer constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NGraphVertexList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTreeGraph">
            <summary>
            Represents a tree graph
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.FindEdge(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Returns the edge connecting the given child to its parent or null if the
            specified vertex is a root.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.AddVertex(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Adds a vertex to the tree
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.RemoveVertex(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Removes the vertex from the tree
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.AddEdge(Nevron.Nov.DataStructures.NTreeGraphEdge)">
            <summary>
            Adds an edge to the tree
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.RemoveEdge(Nevron.Nov.DataStructures.NTreeGraphEdge)">
            <summary>
            Removes the edge from the tree
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.GetVerticesAtLevel(System.Int32)">
            <summary>
            Obtains a list of the vertices at the specified level
            </summary>
            <param name="level">level of the tree - the root is at level 0</param>
            <returns>list of the vertices at the specified level</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.PostOrderTraversal(Nevron.Nov.DataStructures.NGraphPartVisitor,Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Performs a post order (depth first) traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.PreOrderTraversal(Nevron.Nov.DataStructures.NGraphPartVisitor,Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Performs a pre order (depth first) traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.BreadthFirstTraversal(Nevron.Nov.DataStructures.NGraphPartVisitor,Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Performs a breath first traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraph.InvalidateCashe">
            <summary>
            Overriden to invalidate the cashe of the contained vertices and edges
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraph.Vertices">
            <summary>
            Obtains a reference to the tree vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraph.Edges">
            <summary>
            Obtains a reference to the tree edges
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraph.Root">
            <summary>
            Gets the tree root vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraph.IsBinary">
            <summary>
            Determines whether this is a binary tree. 
            </summary>
            <remarks>
            The tree is binary if each vertex in the tree has 0 or 2 children
            </remarks>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraph.Height">
            <summary>
            Gets the height (i.e. the total number of layers) of the tree.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTreeGraphEdge">
            <summary>
            Represents an edge connecting two tree vertices
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdge.#ctor">
            <summary>
            Creates a new tree edge 
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdge.GetOtherVertex(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Gets the other vertex, which this edge connects 
            </summary>
            <param name="vertex">child or parent vertex</param>
            <returns>other vertex</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdge.GetPartType">
            <summary>
            Overriden to return GraphPartType.Edge
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphEdge.Parent">
            <summary>
            Gets the edge Parent vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphEdge.Child">
            <summary>
            Gets the edge Child vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphEdge.Tree">
            <summary>
            Obtains a reference to the tree in which the edge resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTreeGraphEdgeList">
            <summary>
            The NTreeEdgeList class represents a typed list of NTreeEdge instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdgeList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdgeList.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.DataStructures.NTreeGraphEdge})">
            <summary>
            Initializer constructor
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphEdgeList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTreeGraphVertex">
            <summary>
            The NTreeVertex class represents a vertex in a tree (tree item)
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertex.#ctor">
            <summary>
            Creates a new tree vertex
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertex.GetPartType">
            <summary>
            Overriden to return GraphPartType.Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertex.FindEdgeWithChild(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Finds the edge, which connects this vertex with the specified child
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Root">
            <summary>
            Gets the root vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Parent">
            <summary>
            Gets or sets the parent vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Children">
            <summary>
            Gets a list of the children vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Siblings">
            <summary>
            Obtains the children of this vertex parent. Returns null if the vertex does not have a parent
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Edges">
            <summary>
            Gets the list of edges, which connect this vertex with its children
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.PrevSibling">
            <summary>
            Obtains the previous sibling of this vertex. Returns null if such does not exist
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.NextSibling">
            <summary>
            Obtains the next sibling of this vertex. Returns null if such does not exist
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Level">
            <summary>
            Gets the level of this tree vertex from the root. The root vertex is with level 0
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Height">
            <summary>
            Gets the height of this tree vertex sub tree. If the vertex is a leaf (has no children) then its height is 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.ChildrenCount">
            <summary>
            Gets the number of child vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NTreeGraphVertex.Tree">
            <summary>
            Obtains a reference to the tree in which the vertex resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTreeGraphVertexList">
            <summary>
            The NTreeVertexList class represents a typed list of NTreeVertex instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertexList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertexList.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.DataStructures.NTreeGraphVertex})">
            <summary>
            Initializer constructor
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTreeGraphVertexList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NSnapshotIterator`1">
            <summary>
            An iterator, which makes a snapshot of the items provided by another iterator, that it later provides to this iterator consumers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NSnapshotIterator`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates an iterator that snapshots the remaining items of the specified iterator
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NSnapshotIterator`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates an iterator that snapshots the items of the specified set
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NSnapshotIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next item of the set.
            </summary>
            <returns>
            true if the iterator was successfully advanced to the next item. false if the iterator has passed the end of the set.
            </returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NSnapshotIterator`1.Reset">
            <summary>
            Resets the iterator to its initial position, which is before the first item in the set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NSnapshotIterator`1.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NChain`1">
            <summary>
            Represents a doubly-linked linear list, that implements the INCollection and INDeque interfaces for manipulating its nodes.
            The items of a chain are instances of the NChainNode type, which on its turn holds an Item from the generic type argument (datum).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.#ctor">
            <summary>
            Creates an empty linked list
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the nodes in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the nodes in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.Contains(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Queries whether the specified node is contained in this object.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.IndexOf(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Gets the index at which an item appears for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.Add(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Adds the specified node to the end of this list (equivalient to PushBack).
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.Insert(System.Int32,Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.Remove(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.Clear">
            <summary>
            Removes all nodes from the set.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.CopyTo(Nevron.Nov.DataStructures.NChainNode{`0}[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PushFront(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Pushes the node at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PushBack(Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Pushes the node at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PopFront">
            <summary>
            Removes and returns the first node from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PopBack">
            <summary>
            Removes and returns the last node from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PeekFront">
            <summary>
            Returns the first node from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PeekBack">
            <summary>
            Returns the last node from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.InsertBefore(Nevron.Nov.DataStructures.NChainNode{`0},Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Inserts a node before a node of this chain.
            </summary>
            <param name="node"></param>
            <param name="nodeToInsert"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.InsertAfter(Nevron.Nov.DataStructures.NChainNode{`0},Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Inserts a node after a node of this chain.
            </summary>
            <param name="node"></param>
            <param name="nodeToInsert"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque) and returns the node created for it
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque) and returns the node created for it
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.FindFirst(`0)">
            <summary>
            Returns the first chain node that contains the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.FindFirst(`0,Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Returns the first chain node, starting from the specified node that contains the specified item
            </summary>
            <param name="startFrom"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.FindLast(`0)">
            <summary>
            Returns the last chain node that contains the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChain`1.FindLast(`0,Nevron.Nov.DataStructures.NChainNode{`0})">
            <summary>
            Returns the first chain node, starting from the specified node that contains the specified item
            </summary>
            <param name="startFrom"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChain`1.Count">
            <summary>
            Gets the count of items
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChain`1.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChain`1.HeadNode">
            <summary>
            Gets the head (first) node in the list
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChain`1.TailNode">
            <summary>
            Gets the tail (last) node in the list
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChain`1.Items">
            <summary>
            Get the list of items contained in this chain nodes
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NChainList`1">
            <summary>
            Represents the items of a chain. Modifications that you make to items reflect on the chain nodes.
            Unlike the NChain that focuses on the nodes in the chain, the NChainItems focuses on the items contained in the chain nodes.
            Implements the INList and INDeque interfaces.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.#ctor">
            <summary>
            Creates a new chain list
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.IndexOf(`0)">
            <summary>
            Gets the first index of the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.LastIndexOf(`0)">
            <summary>
            Gets the last index of the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the last index of the specified item, starting from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item, if any
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Remove(`0,System.Int32)">
            <summary>
            Removes the first occurrence of the specified item, by starting the lookup from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.RemoveLast(`0,System.Int32)">
            <summary>
            Removes the last occurrence of the specified item, by staring the look from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns>the index at which the item was found and removed, or -1 if the item was not found</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.RemoveAll(`0)">
            <summary>
            Removes all occurrence of the specified item.
            </summary>
            <param name="item"></param>
            <returns>true if at least one occurrence was removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.Add(`0)">
            <summary>
            Adds (appends) the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PushFront(`0)">
            <summary>
            Pushes the item at the front of the deque (makes it the first item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PushBack(`0)">
            <summary>
            Pushes the item at the back of the deque (makes it the last item in the deque)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PopFront">
            <summary>
            Removes and returns the first item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PopBack">
            <summary>
            Removes and returns the last item from the deque.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PeekFront">
            <summary>
            Returns the first item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainList`1.PeekBack">
            <summary>
            Returns the last item from the deque, without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainList`1.Count">
            <summary>
            Gets the count of items
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainList`1.Item(System.Int32)">
            <summary>
            Gets/set the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainList`1.Chain">
            <summary>
            Gets the owner chain
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NChainNode`1">
            <summary>
            Represents a node from a chain (doubly linked linear list).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NChainNode`1.#ctor(`0)">
            <summary>
            Creates a new linked list node, that holds the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.Item">
            <summary>
            Gets or sets the item associated with this chain node
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.NextNode">
            <summary>
            Gets the next node in the chain, or null if this is the last node or node does not yet belong to a chain
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.PrevNode">
            <summary>
            Gets the prev node in the chain, or null if this is the first node or node does not yet belong to a chain
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.NextRingNode">
            <summary>
            Gets the next node in the chain, if the chain is threated as a ring (doubly linked circular list)
            Throws an exception if the node does not belong to a chain.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.PrevRingNode">
            <summary>
            Gets the prev node in the chain, if the chain is threated as a ring (doubly linked circular list).
            Throws an exception if the node does not belong to a chain.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.OwnerChain">
            <summary>
            Gets the chain to which this node belongs, or null if this node does not yet belong to a chain.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.IsFirst">
            <summary>
            Querues whether this is the first node from its chain
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.IsLast">
            <summary>
            Querues whether this is the last node from its chain
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NChainNode`1.IsMiddle">
            <summary>
            Querues whether this is a middle node from its chain (i.e. has both prev and next nodes).
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NIndexedSetIterator`1">
            <summary>
            Represents a forward iterator, that can be initialized to iterate through an entire indexed set or only a range of the it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetIterator`1.#ctor(Nevron.Nov.DataStructures.INIndexedSet{`0})">
            <summary>
            Creates an iterator that iterates through the entire array
            </summary>
            <param name="set">items to enumerate</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetIterator`1.#ctor(Nevron.Nov.DataStructures.INIndexedSet{`0},System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from 0.
            </summary>
            <param name="set">items to enumerate</param>
            <param name="count">count of items to enumerate, starting from zero</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetIterator`1.#ctor(Nevron.Nov.DataStructures.INIndexedSet{`0},System.Int32,System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from the specified index.
            </summary>
            <param name="set"></param>
            <param name="start">start enumeration index</param>
            <param name="count">count of items to enumerate, starting from start</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next child node in the container, which satifies the specified filter
            </summary>
            <returns>true if advance succeeded, false if the end of the container was reached</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetIterator`1.Reset">
            <summary>
            Resets the iterator (positions it before the first child node in the container)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NIndexedSetIterator`1.Current">
            <summary>
            Gets the current item
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1">
            <summary>
            Represents a reverse iterator, that can be initialized to iterate through an entire set or only a range of the it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.#ctor(Nevron.Nov.DataStructures.INWritableIndexedSet{`0})">
            <summary>
            Creates an iterator that iterates through the entire array
            </summary>
            <param name="set">items to enumerate</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.#ctor(Nevron.Nov.DataStructures.INWritableIndexedSet{`0},System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from 0.
            </summary>
            <param name="set">items to enumerate</param>
            <param name="count">count of items to enumerate, starting from zero</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.#ctor(Nevron.Nov.DataStructures.INWritableIndexedSet{`0},System.Int32,System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from the specified index.
            </summary>
            <param name="set"></param>
            <param name="start">start enumeration index</param>
            <param name="count">count of items to enumerate, starting from start</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next child node in the container, which satifies the specified filter
            </summary>
            <returns>true if advance succeeded, false if the end of the container was reached</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.Reset">
            <summary>
            Resets the iterator (positions it before the first child node in the container)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NIndexedSetReverseIterator`1.Current">
            <summary>
            Gets the current item
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NUniqueSet`1">
            <summary>
            Represents an INDynamicSet implementation, that contains only unique items (i.e. has no duplicate items). 
            It is based on a Prime Hash Table.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.#ctor">
            <summary>
            Creates a new set with a default capacity
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.#ctor(System.Int32)">
            <summary>
            Creates a new set with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.#ctor(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Creates a new set that contains the distinct remaining items of the specified iterator
            </summary>
            <param name="iterator"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.#ctor(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Creates a new set that contains the distinct items of the specified set
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.Recycle">
            <summary>
            Recycles this usnique set.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.GetIterator">
            <summary>
            Gets an item iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.Contains(`0)">
            <summary>
            Queries whether this set contains the specified item
            </summary>
            <param name="item">item to look for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.Remove(`0)">
            <summary>
            Removes the specified item from the set, if it exists
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.Add(`0)">
            <summary>
            Adds the specified item to the set. Has no effect if the item is already contained in the set.
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.Clear">
            <summary>
            Removes all items from the set
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.AddRange(Nevron.Nov.DataStructures.INSet{`0})">
            <summary>
            Adds a range of items to this list.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.AddRange(Nevron.Nov.DataStructures.INIterator{`0})">
            <summary>
            Adds the range of items that the specified enumerable can provide.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.AddRange(`0[])">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.AddRange(`0[],System.Int32)">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NUniqueSet`1.AddRange(`0[],System.Int32,System.Int32)">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="arr"></param>
            <param name="start"></param>
            /// <param name="count"></param>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NUniqueSet`1.Count">
            <summary>
            Gets the count of items that are contained in this set
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NMap`2">
            <summary>
            Represents an INMap implementation, that is based on a Prime Hash Table (i.e. Hash Map).
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.#ctor">
            <summary>
            Creates a new map with a default capacity
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.#ctor(System.Int32)">
            <summary>
            Creates a new map with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.NKeyValuePair{`0,`1}})">
            <summary>
            Creates a new map that has the remaining items of the specified iterator.
            Throws an exception if the iterator provides items with duplicate keys.
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.#ctor(Nevron.Nov.DataStructures.INSet{Nevron.Nov.NKeyValuePair{`0,`1}})">
            <summary>
            Creates a new map that has the items of the specified set.
            Throws an exception if the set provides items with duplicate keys.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.GetIterator">
            <summary>
            Gets a key-value pair iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Contains(`0)">
            <summary>
            Queries whether this map contains a value for the specified key
            </summary>
            <param name="key">key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.TryGet(`0,`1@)">
            <summary>
            Tries to get the value for the specified key.
            </summary>
            <param name="key">key to look for</param>
            <param name="value">value corresponding to key. Valid only if true is returned.</param>
            <returns>true if the map contained a value for the specified key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Get(`0)">
            <summary>
            Gets the value that corresponds to the specified key.
            Throws an exception, if item for this key does not exist.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Set(`0,`1)">
            <summary>
            Sets the value for the specified key. If key-value association already exists, the value is replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Remove(`0)">
            <summary>
            Removes the key-value pair that has the specified key from the map.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Add(Nevron.Nov.NKeyValuePair{`0,`1})">
            <summary>
            Adds the specified key-value pair. Throws an exception if a key-value pair with the same key already exists.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Clear">
            <summary>
            Removes all entries from the map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Contains(Nevron.Nov.NKeyValuePair{`0,`1})">
            <summary>
            Queries whether this map contains exactly the same item.
            Both the key and the value of the contained item must match in order for this method to return true.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Remove(Nevron.Nov.NKeyValuePair{`0,`1})">
            <summary>
            Removes the exact map item if it exists.
            Both the key and the value of the contained item must match in order for the item to be removed.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.CopyTo(Nevron.Nov.NKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Add(`0,`1)">
            <summary>
            Adds the specified key-value pair. Throws an exception if a value for the specified key exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NMap`2.Recycle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NMap`2.Count">
            <summary>
            Gets the count of key-value pairs that are contained in this map
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NMap`2.Item(`0)">
            <summary>
            Indexed accessor
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NMap`2.Keys">
            <summary>
            Gets a view of the keys contained in this map
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NMap`2.Values">
            <summary>
            Gets a view of the values contained in this map
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NReadonlyArray`1">
            <summary>
            Represents a readonly array of items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.#ctor(`0[])">
            <summary>
            Creates a readonly array that wraps the items of the specified array.
            It is a user responsibility not to alter the items array until the readonly array is in use.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates a readonly array that wraps the items of the specified array.
            It is a user responsibility not to alter the items array until the readonly array is in use.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.#ctor(`0[],System.Int32,System.Boolean)">
            <summary>
            Creates a readonly array that wraps the items of the specified array.
            If copyItems is false, it is a user responsibility not to alter the items array until the readonly array is in use.
            Otherwise the constructor internally creates a copy of the items.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
            <param name="copyItems"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.LastIndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the last time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which the item appears in the set for the last time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.IndexOf(`0)">
            <summary>
            Gets the index at which the item appears in the set for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReadonlyArray`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates through the items in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NReadonlyArray`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NReadonlyArray`1.Count">
            <summary>
            Gets the count of items
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NBitMatrix">
            <summary>
            Represents a 2D array of boolean values which is similar to a 2D bool
            array with the exception that each value uses 1 bit instead of 1 byte.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="square"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.ToString">
            <summary>
            Returns a System.String that represents the current NBitMatrix.
            </summary>
            <returns>A System.String that represents the current NBitMatrix.</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.Clear">
            <summary>
            Sets all bits in this bit matrix to 0 (false).
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.Set(System.Boolean)">
            <summary>
            Sets all bits in this bit matrix to the given value.
            </summary>
            <param name="value">The value to apply on all bits.</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.SetRow(System.Int32,System.Boolean)">
            <summary>
            Sets all bits in the specified row to the given value.
            </summary>
            <param name="rowIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.SetColumn(System.Int32,System.Boolean)">
            <summary>
            Sets all bits in the specified column to the given value.
            </summary>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.GetCount(System.Int32,System.Boolean)">
            <summary>
            Gets the number of values equal to the given one in the specified row.
            </summary>
            <param name="rowIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.GetBit(System.Int32,System.Int32)">
            <summary>
            Gets the bit at the specified location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NBitMatrix.SetBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the bit at the specified location to the given value and returns
            true if the bit value has been changed (that is if it has a value different
            from the given one).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NBitMatrix.m_Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NBitMatrix.m_nWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NBitMatrix.m_nHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBitMatrix.Width">
            <summary>
            Gets the width (the number of columns) in this bit matrix.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBitMatrix.Height">
            <summary>
            Get the height (the number of rows) in this bit matrix.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NBitMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the specified location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NStringMap`1">
            <summary>
            Represents a map like structure of string-value pairs that provides some
            advanced string search routines for the keys. This comes at the cost
            that the access by key is not O(1) as in a hash table based map, but O(log N).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.#ctor(System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Get(System.String)">
            <summary>
            Gets the value that corresponds to the specified key.
            Throws an exception, if item for this key does not exist.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.TryGet(System.String,`0@)">
            <summary>
            Tries to get the value for the specified key.
            </summary>
            <param name="key">The key to look for.</param>
            <param name="value">The value corresponding to the given key. Valid only if true is returned.</param>
            <returns>True if the map contained a value for the specified key, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Add(System.String,`0)">
            <summary>
            Adds the specified key-value pair. Throws an exception if a key-value pair with the same key already exists.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Add(Nevron.Nov.NKeyValuePair{System.String,`0})">
            <summary>
            Adds the specified key-value pair. Throws an exception if a key-value pair with the same key already exists.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Set(System.String,`0)">
            <summary>
            Sets the value corresponding to the given key. If key-value association already exists, the value is replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Clear">
            <summary>
            Removes all entries from the map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Remove(Nevron.Nov.NKeyValuePair{System.String,`0})">
            <summary>
            Removes the given key-value pair from the map.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Remove(System.String)">
            <summary>
            Removes the given key from the map.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.CopyTo(Nevron.Nov.NKeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies all items of the map to the specified array, starting from the specified array index. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Contains(System.String)">
            <summary>
            Checks whether the map contains a key equal to the given string.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.Contains(Nevron.Nov.NKeyValuePair{System.String,`0})">
            <summary>
            Checks whether the map contains the given key-value pair.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.GetIterator">
            <summary>
            Gets a key-value pair iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.GetItemsStartingWith(System.String)">
            <summary>
            Gets the subset of all key-value pairs in this map whose key starts with the given prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.WildcardSearch(System.String)">
            <summary>
            Performs a wildcard search on the items in this map and returns the subset of
            all key-value pairs whise key matches the specified search string. The following
            wildcard characters can be used:
            <para>* - matches zero or more characters</para>
            <para>? - matches exactly one character</para>
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringMap`1.GetSimilarItems(System.String,Nevron.Nov.DataStructures.NStringSimilarityContext)">
            <summary>
            Gets the subset of all key-value pairs in this map whose key is found to be similar
            to the given string using the specified string similarity context.
            </summary>
            <param name="str">The string to search similar strings for.</param>
            <param name="context">The string similarity context that provides information for the
            edit distance budget and the cost of the various edit operations.</param>
            <returns></returns>
            <remarks>
            The similarity is determined by the edit distance (a.k.a. Damerau–Levenshtein distance)
            of the strings, i.e. the number of insertions, removals, substitutions and transpositions
            of adjacent characters needed to transform one of the strings to the other.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringMap`1.CaseSensitive">
            <summary>
            Gets whether this string map is case sensitive or not. The case sensitivity of the string map
            is determined by the parameter passed to its constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringMap`1.Count">
            <summary>
            Gets the number of key-value pairs in the map.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringMap`1.Keys">
            <summary>
            Gets a view of the keys contained in the map.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringMap`1.Values">
            <summary>
            Gets a view of the values contained in the map.
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringMap`1.Item(System.String)">
            <summary>
            Indexed accessor.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NStringSet">
            <summary>
            Represents a set of strings that provides some advanced string search routines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.#ctor(System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all items of this set to the given array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.Contains(System.String)">
            <summary>
            Checks whether this string set contains the given string.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.GetIterator">
            <summary>
            Gets an iterator that iterates through the strings in this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.Add(System.String)">
            <summary>
            Adds a new string to this set.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.Remove(System.String)">
            <summary>
            Removes the given string from this set.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.Clear">
            <summary>
            Removes all strings from this set.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.GetStringsStartingWith(System.String)">
            <summary>
            Gets the subset of all strings in this set that start with the given prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.WildcardSearch(System.String)">
            <summary>
            Performs a wildcard search on the items in this set and returns the subset of
            all strings that match the specified search string. The following wildcard
            characters can be used:
            <para>* - matches zero or more characters</para>
            <para>? - matches exactly one character</para>
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSet.GetSimilarStrings(System.String,Nevron.Nov.DataStructures.NStringSimilarityContext)">
            <summary>
            Gets the subset of all strings in this set that are found to be similar
            to the given string using the specified string similarity context.
            </summary>
            <param name="str">The string to search similar strings for.</param>
            <param name="context">The string similarity context that provides information for the
            edit distance budget and the cost of the various edit operations.</param>
            <returns></returns>
            <remarks>
            The similarity is determined by the edit distance (a.k.a. Damerau–Levenshtein distance)
            of the strings, i.e. the number of insertions, removals, substitutions and transpositions
            of adjacent characters needed to transform one of the strings to the other.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NStringSet.Count">
            <summary>
            Gets the number of strings in this set.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NStringSimilarityContext">
            <summary>
            This class contains settings that control the string matching
            policy used in some string search algorithms.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NStringSimilarityContext.#ctor">
            <summary>
            Default constructor - initializes all costs to their
            default values (of 1).
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NStringSimilarityContext.InsertCharCost">
            <summary>
            The cost for inserting a new character in the string.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NStringSimilarityContext.RemoveCharCost">
            <summary>
            The cost for removing a character from the string.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NStringSimilarityContext.ReplaceCharCost">
            <summary>
            The cost for replacing a character from the string with other character.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NStringSimilarityContext.SwapCharsCost">
            <summary>
            The cost for swapping to adjacent characters.
            </summary>
        </member>
        <member name="F:Nevron.Nov.DataStructures.NStringSimilarityContext.Budget">
            <summary>
            The total allowed cost within which two strings are considered similar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentInformation">
            <summary>
            Represents information about the text document
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NAttribute">
            <summary>
            The NAttribute abstract class is a document node, serves as base class for all attributes, 
            which can reside in the elements attribute sub hierarchies.
            </summary>
            <remarks>
            Attributes are special types of nodes, which are typically contained either by elements or by other attributes.
            <para>
            Attributes can be stored in one of the following ways:
            <list type="bullet">
            <item>
            	<term>
            	As properties of the object, which contains the attribute. The Dimension of such attributes is Col.
            	</term>
            </item>
            <item>
            	<term>
            	As children of another attribute. The Dimension of such attributes is Row.
            	</term>
            </item>
            </list>
            </para>
            <para>
            Attributes send all core changed messages to their owner element. In this 
            way the element gets informed about all changes, which occur in its attribute subhierachies.
            </para>
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentNode">
            <summary>
            Serves as base class for nodes, that typically reside in documents and are used to define its content.
            </summary>
            <remarks>
            Each document node holds a reference to its owner document, which can be obtained from the OwnerDocument property.
            Document nodes work closely with the document history service.  If the document has a history service, document nodes will record history actions for all types of mutations inside it.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NNode">
            <summary>
            Represents an object, which can reside in a DOM (Document Object Model) hierarchy. 
            Serves as base class for all types of nodes, implemented by the Nevron DOM and derivate modules and products.
            </summary>
            <remarks>
            All objects in the Nevron DOM directly or indirectly derive from the NNode abstract class.
            In their core DOM hierarchies are tree structures the items of which are NNode instances (nodes).
            <para>
            There is a single instance of the <see cref="T:Nevron.Nov.Dom.NSchema">NSchema</see> class associated with each instance of a NNode derivate. 
            The node schema is used to extend the metadata information available for each type of node. 
            The schema for a specific node instance can be obtained by the Schema property.
            </para>
            <para>
            Each node knows about its parent node and way in which it is aggregated in it. 
            The parent node can be obtained from the ParentNode property, which is again of type NNode. 
            The GetAggregationInfo() method returns information about the way in which a node is aggregated in its current parent.
            The NNode class provides an extensive set of methods that help you work with the ancestors context implied by the current parent node.
            </para>
            <para>
            Nodes implement the composition pattern in two ways:
            <list type="bullet">
            	<item>
            		<term>Child Nodes</term>
            		<description>
                    each node may contain child nodes. 
                    The NNode class implements an extensive set of operations, help you deal with child and descendant nodes. 
                    Nodes, which are children of another node are considered to reside in the parent node Children Dimension. 
                    The current set of child nodes is obtained by the GetChildren() method.
                    <para>
                    When the node schema is created (in the static node constructor), the user can specify the way in which the node contains its child nodes,
                    by settings the NodeType property of the scheme to the one of the following values:
                    <list type="bullet">
            			<item>
            				<term>Leaf - the default</term>
            				<description>
            				By default NNode derives are considered as leafs, which means that they cannot have any child nodes.
            				In the case of a leaf node, some of the NNode methods that query the node children will raise an exception.
            				All NNode methods that attempt to modify the node children will also raise an exception.
            				</description>
            			</item>
            			<item>
            				<term>Collection</term>
            				<description>
            				When declared as collection, the node children are accessed and modified via indexing. 
            				The children that can be added as child nodes, must be instances or derived from the schema specified by the NSchema.ChildrenBaseSchema property.
            				In this way developers can create nodes, that are strongly typed collections of another specific node types.
            				</description>
            			</item>
            			<item>
            				<term>Container</term>
            				<description>
            				When declared as container, the node children are accessed and modified by child descriptors. 
            				A child descriptor or simply child is created for a node schema by calling the AddChild schema method. 
            				The method returns a NChild object, which just as in the case of properties needs to be stored as a static node field.
            				</description>
            			</item>
            		</list>
            		The ability to mix collection and container children aggregation, gives developers the flexibility to create complex and neat children hierachies.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term>Property Nodes</term>
            		<description>
                    each node may have properties exposing other nodes. 
                    Nodes exposed by properties of another node are called Property Nodes. 
                    The node itself does not consider them to be child nodes, however property nodes consider the node to be their parent.
                    The current set of of non-null property nodes is obtained by the GetPropertyNodes() method.
            		</description>
            	</item>
            </list>
            </para>
            <para>
            Collectivelly, the set of Child Nodes and Property Nodes form the set of the Aggregated Nodes. 
            The current set of Aggregated Nodes can be obtained by the GetAggregatedNodes() methods.
            </para>
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.INDomDeeplyCloneable">
            <summary>
            Implemented by objects that have special participation in the nodes deep cloning.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INDomDeeplyCloneable.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Performs deep cloning of the specified object in the specified context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.INDomDeepEquals">
            <summary>
            Implemented by objects that have special participation in the nodes deep equals process.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INDomDeepEquals.DeepEquals(System.Object,Nevron.Nov.Dom.NDomDeepEqualsContext)">
            <summary>
            Performs the deep equals beteen this object and the specified object in the specified context.
            </summary>
            <param name="other"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.DeepClone">
            <summary>
            Creates an identical copy of this node subtree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Performs deep cloning of this node object in the specified context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.DeepEquals(System.Object,Nevron.Nov.Dom.NDomDeepEqualsContext)">
            <summary>
            Performs deep equals of this node object in the specified context and returns
            true if the given object is a node and its properties and children are equal
            to those of this node.
            </summary>
            <param name="other"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.Equals(System.Object)">
            <summary>
            Overriden to seal the Equals overridable method and to check the nodes for reference equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetHashCode">
            <summary>
            Overriden to seal the GetHashCode and return the default implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnDeserialized(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            Called when the node is deserialized
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnSerializing(Nevron.Nov.Serialization.NDomSerializationContext)">
            <summary>
            Called when the node is being serialized
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetAggregationInfo">
            <summary>
            Gets information about the way in which the node is currently aggregated in its parent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.IsInstanceOfSchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Queries whether the node is an instance of the specified schema.
            (i.e. whether the node schema is equal to the specified schema, or is its ancestor).
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index. 
            Throws an exception, if the index is out of range.
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChild(Nevron.Nov.Dom.NChild)">
            <summary>
            Gets the child at the specified named slot. If a child node at the slot does not exist, 
            but the named child is marked as CreateOnDemand, a new child node of the default schema is automatically created.
            </summary>
            <param name="child"></param>
            <returns>node at the specified named slot</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChild(Nevron.Nov.Dom.NChild,System.Boolean)">
            <summary>
            Gets the child at the specified named slot. If createOnDemand is true and the named slot is marked as CreateOnDemand 
            and the current slot value is null, a new child node of the default schema is automatically created.
            </summary>
            <param name="child"></param>
            <param name="createOnDemand"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.IndexOfChild(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the index of the specified child node in this node children container.
            Returns -1 if the node is not a child of this node.
            </summary>
            <param name="node">child node to locate</param>
            <returns>index of the child node, or -1 if the node is not a child of this node</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.IsChild(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the specified node is a child node of this node.
            Note that although the node ParentNode may be this node, this node may not consider the node as child, if it is exposed by a property.
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildrenCount">
            <summary>
            Get the count of child nodes
            </summary>
            <returns>children count</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildrenCount(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the count of child nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildren">
            <summary>
            Gets a list, which contains the children of this node
            </summary>
            <returns>list of child nodes</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildren(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets a list, which contains the children of this node, that satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildren``1">
            <summary>
            Gets a list, which contains the children of this node that are of the given type.
            </summary>
            <typeparam name="TNode">The type of children to get.</typeparam>
            <returns>List of child nodes of the specified node type.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildren``1(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets a list, which contains the children of this node, that satisfy the specified filter.
            </summary>
            <typeparam name="TNode">The type of children to get.</typeparam>
            <param name="filter">Filter to use, or null if no filter must be applied.</param> 
            <returns>List of child nodes, which satisfy the filter and are of the specified node type.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulateChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the children of this node, to the provided node list
            </summary>
            <param name="list">list to which to append the child nodes</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulateChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode},Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the children of this node, which satisfy the specified filter, to the provided node list
            </summary>
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstChild">
            <summary>
            Gets the first child node 
            </summary>
            <returns>first child node, or null if the node has no children</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstChild(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the first child node, which satisfies the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param>
            <returns>first child node, which satisfies the filter, or null if the node has no such children</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstChild(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first child node, which is an instance of the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastChild">
            <summary>
            Gets the last child node 
            </summary>
            <returns>last child node, or null if the node has no children</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastChild(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the last child node, which satisfies the specified filter 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param>
            <returns>last child node, which satisfies the filter, or null if the node has no such children</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastChild(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the last child, that is an instance of the specified schema.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetChildrenIterator">
            <summary>
            Gets a child node iterator, which iterates through this node children in forward order
            </summary>
            <returns>iterator</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetReverseChildrenIterator">
            <summary>
            Gets a child node iterator, which iterates through this node children in reverse order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AddChild(Nevron.Nov.Dom.NNode)">
            <summary>
            Appends the specified node to the end of the list of children of this node.
            Throws an exception, if this node is not a collection node.
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.InsertChild(System.Int32,Nevron.Nov.Dom.NNode)">
            <summary>
            Inserts the specified node at the specified index.
            Throws an exception, if this node is not a collection node.
            </summary>
            <param name="index">index at which to insert the node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveChild(Nevron.Nov.Dom.NNode)">
            <summary>
            Removes the specified child node.
            Works for both collection and container nodes.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index.
            Throws an expection if index if out of range.
            Works for both collection and container nodes.
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveAllChildren">
            <summary>
            Removes all child nodes of this node.
            Works for both collection and container node. 
            In the case of container nodes where a child may be set as non-nullable, throws an exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.SetChild(Nevron.Nov.Dom.NChild,Nevron.Nov.Dom.NNode)">
            <summary>
            Sets the child instance at the specified child slot.
            Throws an exception, if this node is not a container node.
            </summary>
            <param name="child">named child slot, whose value to set</param>
            <param name="node">new child node</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.SetChildAt(System.Int32,Nevron.Nov.Dom.NNode)">
            <summary>
            Sets(substitudes) the child at the specified index.
            Throws an exception, if this node is not a collection node.
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.CanRemoveChild(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.CanRemoveChildAt(System.Int32)">
            <summary>
            Queries whether the node at the specified index can be removed.
            </summary>
            <param name="index">index of child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.CanInsertChild(System.Int32,Nevron.Nov.Dom.NNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.CanSetChild(Nevron.Nov.Dom.NChild,Nevron.Nov.Dom.NNode)">
            <summary>
            Queries whether the specified node can be set at the specified named slot
            </summary>
            <param name="child">named slot for which to check</param>
            <param name="node">the node to set</param>
            <returns>true if the node can set at the specified named slot, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.IsDescendantOf(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether this node is a descendant of the specified ancestor
            </summary>
            <param name="ancestor">ancestor node to check</param>
            <returns>true if ancestor node is indeed an ancestor of this node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.IsDescendantOf(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether this node is a descendant of the specified ancestor,
            by checking the this node ancestor chain up to the specified check ancestor.
            </summary>
            <param name="ancestor">ancestor node to check</param>
            <param name="checkAncestor">ancestor up to which to check</param>
            <returns>true if ancestor node is indeed an ancestor of this node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendantsCount">
            <summary>
            Returns the number of descendant nodes.
            </summary>
            <returns>count of descendants.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendantsCount(Nevron.Nov.Dom.NSchema)">
            <summary>
            Returns the number of descendant nodes of the given schema.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendantsCount(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter.
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied.</param> 
            <returns>count of descendants, which satisfy the filter.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendants">
            <summary>
            Gets a list, which contains the descendants of this node.
            </summary>
            <returns>list of descendant nodes</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendants(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets a list, which contains the descendants of this node that are of the specified schema.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDescendants(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets a list, which contains the descendants of this node, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of descendant nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulateDescendants(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the descendants of this node, to the provided node list
            </summary>
            <param name="list">list to which to append the descendant nodes</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulateDescendants(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode},Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the descendants of this node, which satisfy the filter to the provided node list
            </summary>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstDescendant(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first descendant node of the given schema.
            This method visits descendants in Depth-First Pre-Order.
            Children are enumerated in forward order (from first to last).
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstDescendant(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the first descendant node, which satisfies the specified filter. 
            This method visits descendants in Depth-First Pre-Order.
            Children are enumerated in forward order (from first to last).
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastDescendant(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the last descendant node of the given schema.
            This method visits descendants in Depth-First Post-Order.
            Children are enumerated in reverse order (from last to first).
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastDescendant(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the last descendant node, which satisfies the specified filter.
            This method visits descendants in Depth-First Post-Order.
            Children are enumerated in reverse order (from last to first).
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetSubtreeIterator">
            <summary>
            Gets an iterator, which iterates through the node and its descendants in a Depth-First-Pre-Order fashion (visits the parent and then visits the children).
            Children are enumerated in forward order (from first to last).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetSubtreeIterator(Nevron.Nov.Dom.ENTreeTraversalOrder)">
            <summary>
            Gets an iterator, which iterates through the node and its descendants, in the specified traversal order.
            Children are enumerated in forward order (from first to last).
            </summary>
            <param name="treeTraversalOrder">order in which to visit the subtree</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetSubtreeIterator(Nevron.Nov.Dom.ENTreeTraversalOrder,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets an iterator, which iterates through the node and its descendants, in the specified traversal order.
            Skips the nodes which do not satisfy the specified filter.
            Children are enumerated in forward order (from first to last).
            </summary>
            <param name="treeTraversalOrder">order in which to visit the subtree</param>
            <param name="filter">filter applied to the visited nodes</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetReverseSubtreeIterator">
            <summary>
            Gets an iterator, which iterates through the node and its descendants in a Depth-First-Pre-Order fashion (visits the parent and then visits the children).
            Children are enumerated in reverse order (from last to first).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetReverseSubtreeIterator(Nevron.Nov.Dom.ENTreeTraversalOrder)">
            <summary>
            Gets an iterator, which iterates through the node and its descendants, in the specified traversal order.
            Children are enumerated in reverse order (from last to first).
            </summary>
            <param name="treeTraversalOrder">order in which to visit the subtree</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetReverseSubtreeIterator(Nevron.Nov.Dom.ENTreeTraversalOrder,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets an iterator, which iterates through the node and its descendants, in the specified traversal order. 
            Skips the nodes which do not satisfy the specified filter.
            Children are enumerated in reverse order (from last to first).
            </summary>
            <param name="treeTraversalOrder">order in which to visit the subtree</param>
            <param name="filter">filter applied to the visited nodes</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetPrevSibling">
            <summary>
            Gets the previous sibling node
            </summary>
            <returns>previous sibling node, or null if such does not exist</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetNextSibling">
            <summary>
            Gets the next sibling node
            </summary>
            <returns>next sibling node, or null if such does not exist</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetAncestor(System.Int32)">
            <summary>
            Gets the ancestor of this node that is the specified levels-up from this ancestor.
            0 is the node itself, 1 is ParentNode, 2 is the ParentNode.ParentNode etc.
            </summary>
            <param name="levelsUp"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstCommonAncestor(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the first ancestor, which is an ancestor of this node and the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstAncestor(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the first node ancestor, which satisfies the specified filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstAncestor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first node ancestor, which is an instance of the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetFirstAncestor(System.Type)">
            <summary>
            Gets the first ancestor of the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastAncestor(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the last node ancestor, which satisfies the specified filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastAncestor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the last node ancestor, which is an instance of the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLastAncestor(System.Type)">
            <summary>
            Gets the last node ancestor, which is an instance of the specified schema
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDepthFromAncestor(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines the depth of the node from the specfified ancestor
            </summary>
            <param name="ancestor">ancestor</param>
            <returns>node depth from ancestor, -1 if ancestor is not an ancestor of this node</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetDepthFromRoot">
            <summary>
            Determines the depth of the node from the root. The root is at depth 0.
            </summary>
            <returns>node depth from the root</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetPathFromAncestor(Nevron.Nov.Dom.NNode,System.Boolean,System.Boolean)">
            <summary>
            Returns the path from the node to the specified ancestor. 
            The returned path has a root-to-leaf order, meaning that ancestor nodes appear before descendant nodes in the list order. 
            </summary>
            <param name="ancestor">ancestor</param>
            <param name="includeNode">whether this node must be included in the path</param> 
            <param name="includeAncestor">whether the ancestor must be included in the path</param> 
            <returns>path from this node to ancestor</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetPropertyNodes">
            <summary>
            Gets a list of the nodes, which are exposed as property values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetPropertyNodes(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets a list of the nodes, which are exposed as property values and satisfy the specified filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulatePropertyNodes(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the nodes that are exposed by properties of this node.
            </summary>
            <param name="propertyNodes"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetAggregatedNodes">
            <summary>
            Gets the nodes aggregated by this node (e.g. both children and property nodes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetAggregatedNodes(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the nodes aggregated by this node (e.g. both children and property nodes)
            which satisfy the specified filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AccumulateAggregatedNodes(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            Accumulates the aggregated nodes to the specified list
            </summary>
            <param name="aggregatedNodes"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AddEventHandler(Nevron.Nov.Dom.NEvent,System.Delegate)">
            <summary>
            Appends an event handler, which is triggered during the AtTarget/Bubbling phase 
            </summary>
            <param name="domEvent">event</param>
            <param name="eventHandler">event handler to add</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AddEventHandler(Nevron.Nov.Dom.NEvent,System.Delegate,System.Boolean)">
            <summary>
            Appends an event handler, which is triggered during the AtTarget/Bubbling phase or the Capturing phase if sinking is true.
            </summary>
            <param name="domEvent">event</param>
            <param name="eventHandler">event handler to add</param>
            <param name="sinking">whether to add a normal or sinking handler</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AddEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler)">
            <summary>
            Appends an event handler, which is triggered during the AtTarget/Bubbling phase 
            </summary>
            <param name="domEvent">event</param>
            <param name="eventHandler">event handler to add</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.AddEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler,System.Boolean)">
            <summary>
            Appends an event handler, which is triggered during the AtTarget/Bubbling phase or the Capturing phase if sinking is true.
            </summary>
            <param name="domEvent">event</param>
            <param name="eventHandler">event handler to add</param>
            <param name="sinking">whether to add a normal or sinking handler</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveEventHandler(Nevron.Nov.Dom.NEvent,System.Delegate)">
            <summary>
            Removes the specified event handler for the specified DOM event. 
            The event handler must have been registered for the AtTarget/Bubbling phase and the default group.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveEventHandler(Nevron.Nov.Dom.NEvent,System.Delegate,System.Boolean)">
            <summary>
            Removes the specified event handler for the specified DOM event. 
            The event handler must have been registered for the AtTarget/Bubbling or the Capturing phase depending on the sinking parameter.
            The event handler must have been registered for the default group.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to remove</param>
            <param name="sinking">whether to remove a normal or sinking handler</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler)">
            <summary>
            Removes the specified event handler for the specified DOM event. 
            The event handler must have been registered for the AtTarget/Bubbling phase and the default group.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler,System.Boolean)">
            <summary>
            Removes the specified event handler for the specified DOM event. 
            The event handler must have been registered for the AtTarget/Bubbling or the Capturing phase depending on the sinking parameter.
            The event handler must have been registered for the default group.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to remove</param>
            <param name="sinking">whether to remove a normal or sinking handler</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveAllEventHandlers(System.Boolean)">
            <summary>
            Removes all normal (attarget/bubbling) or sinking event handlers
            </summary>
            <param name="sinking">whether all normal or sinking handlers should be removed</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.RemoveAllEventHandlers">
            <summary>
            Removes all event handlers
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLocalValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the local value of the specified property
            </summary>
            <param name="property">property</param>
            <returns>property value</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetLocalValue(Nevron.Nov.Dom.NProperty,System.Boolean@)">
            <summary>
            Gets the local value of the specified property.
            </summary>
            <param name="property">property</param>
            <param name="isDefault">out - whether the returned value was the metadata default or not</param>
            <returns>property value</returns>/
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.SetLocalValue(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets a local value for the specified property.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns>true if local value was successfully set</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.ClearLocalValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Clears the local value for the specified property.
            Has no effect on properties backed by member.
            </summary>
            <param name="property"></param>
            <returns>True if local value was successfully cleared.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.ContainsLocalValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets whether the node contains a local value setting for the specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the value of the specified property.
            </summary>
            <remarks>
            This implementation delegates to GetLocalValue.
            </remarks>
            <param name="property">property</param>
            <returns>property value</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.GetValue(Nevron.Nov.Dom.NProperty,Nevron.Nov.Dom.ENValueSource@)">
            <summary>
            Gets the value of the specified property and its source.
            </summary>
            <param name="property"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.SetValue(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <remarks>
            This implementation delegates to SetLocalValue.
            </remarks>
            <param name="property">property</param>
            <param name="value">value to set</param>
            <returns>true if the value was successfully set</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.ClearValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Clears the value of the specified property.
            </summary>
            <remarks>
            This implementation delegates to ClearLocalValue.
            </remarks>
            <param name="property"></param>
            <returns>true if the value was successfully cleared</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnParentChanging(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent of the node is about to be changed
            </summary>
            <param name="newParent"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed. Raises the ParentChangedEvet
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed. 
            IMPORTANT: There is a serious perfomance penalty associated with overriding this method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnPropertyLocalValueChanging(Nevron.Nov.Dom.NLocalValueChangeData)">
            <summary>
            Called when the local value of a property is about to be changed. 
            </summary>
            <param name="data">data for the change</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local and/or computed value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChildInserting(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node is about to be inserted at the specified index
            </summary>
            <param name="data">data for the change</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <remarks>
            This implementation raises the ChildInsertedEvent and calls OnChildrenChanged
            </remarks>
            <param name="data">data for the change</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChildRemoving(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node is about to be removed
            </summary>
            <param name="data">data for the change</param>
            <returns>true if the node can be removed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <remarks>
            This implementation raises the ChildRemovedEvent and calls OnChildrenChanged
            </remarks>
            <param name="data">data for the change</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnDeepCopying(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called before the node is deeply copied for deep cloning from the specified source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNode.OnDeepCopied(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called after the node is deeply copied from the specified source node.
            </summary>
            <param name="source">The source node.</param>
            <param name="context">Context for deep cloning.</param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.NNodeSchema">
            <summary>
            Schema associated with NNode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.TagProperty">
            <summary>
            Reference to the Tag property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ChildInsertingEvent">
            <summary>
            Reference to the ChildInserting event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ChildRemovingEvent">
            <summary>
            Reference to the ChildRemoving event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ChildInsertedEvent">
            <summary>
            Reference to the ChildInserted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ChildRemovedEvent">
            <summary>
            Reference to the ChildRemoved event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ParentChangedEvent">
            <summary>
            Reference to the ParentChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNode.ClearValueObject">
            <summary>
            The ClearValue object that certain property editors should recognize and perform clear value instead of set value.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildInserting">
            <summary>
            Occurs when a child node is about to be inserted in this node
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildInserted">
            <summary>
            Occurs when a child node has been inserted in this node
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildRemoving">
            <summary>
            Occurs when a child node is about to be removed from this node
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildRemoved">
            <summary>
            Occurs when a child node has been removed from this node
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildrenChanging">
            <summary>
            Occurs when the children set of this node is about to change, 
            either because a new child is about to be inserted or because an existing child is about to be removed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ChildrenChanged">
            <summary>
            Occurs when the children set of this node has changed, 
            either because a new child was inserted or because an existing child was removed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.Changing">
            <summary>
            Occurs when this node is about to be changed.
            </summary>7
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.Changed">
            <summary>
            Occurs when this node has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NNode.ParentChanged">
            <summary>
            Occurs when the parent node of this node has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNode.RootNode">
            <summary>
            Gets the root node in the node hierarchy
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNode.ParentNode">
            <summary>
            Gets the parent node in the node hierarchy
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNode.Schema">
            <summary>
            Gets the node schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNode.Tag">
            <summary>
            Gets or sets the node tag, that can be any DOM compliant object.
            This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node.
            Attaching custom data to any node can also be achieved with the help of extendeded properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.#ctor(Nevron.Nov.Dom.NDocumentNode)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.CanRecordHistory">
            <summary>
            Determines whether this document node can possibly record history for property changes, child changes and fx changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.GetEffectiveMedia">
            <summary>
            Safely gets the owner document media.
            If the document node is not registered in a document returns the screen media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.StartDocumentHistoryTransaction(System.String)">
            <summary>
            Starts a new transaction, in the document effective history service
            </summary>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.StartDocumentHistoryTransaction(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Starts a new transaction, in the document effective history service
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.CommitDocumentHistoryTransaction">
            <summary>
            Commits the last started transaction in the document effective history service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.RollbackDocumentHistoryTransaction">
            <summary>
            Rolls back the last started transaction in the document effective history service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.RecordDocumentHistoryUnit(Nevron.Nov.Dom.NHistoryUnit)">
            <summary>
            Records a history unit in the document effective history service
            </summary>
            <param name="unit">unit to record</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.RecordDocumentHistoryFields(System.String[])">
            <summary>
            Records the state of the specified fields in the document effective history service
            </summary>
            <param name="fieldNames">names of the fields to record</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.RecordDocumentHistoryField(System.String)">
            <summary>
            Records the state of the specified field in the document effective history service
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.PauseDocumentHistoryService">
            <summary>
            Pauses the document effective history service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.ResumeDocumentHistoryService">
            <summary>
            Resumes the owner document effective history service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNode.EvaluateDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentNode.NDocumentNodeSchema">
            <summary>
            Schema associated with NDocumentNode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentNode.RegisteredEvent">
            <summary>
            Reference to the Register event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentNode.UnregisteredEvent">
            <summary>
            Reference to the Unregistering event
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NDocumentNode.Registered">
            <summary>
            Occurs when the document node is registered in a document
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NDocumentNode.Unregistered">
            <summary>
            Occurs when the document node was unregistered from a document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentNode.OwnerDocument">
            <summary>
            Gets a reference to the document owning the node. 
            Returns null if the node is not residing in a document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentNode.HistoryService">
            <summary>
            Gets the document effective history service that this node uses to record history
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttribute.#ctor(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttribute.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NAttribute.NAttributeSchema">
            <summary>
            Schema associated with NAttribute
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NAttribute.OwnerElement">
            <summary>
            Obtains a reference to the element owning the attribute. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NAttribute.RootAttribute">
            <summary>
            Gets the last ancestor in attribute ancestors chain, which is an attribute. 
            Returns this if the parent node is not an attribute.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentInformation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.NDocumentInformationSchema">
            <summary>
            Schema of the document information attribute.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.TitleProperty">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.SubjectProperty">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.AuthorProperty">
            <summary>
            Author
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.ManagerProperty">
            <summary>
            Manager
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.CompanyProperty">
            <summary>
            Company
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.OperatorProperty">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.CategoryProperty">
            <summary>
            Category
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.KeywordsProperty">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.CommentProperty">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.FileNameProperty">
            <summary>
            The document filename
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.FileSizeProperty">
            <summary>
            The document filesize
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.HyperlinkProperty">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.EditingStartProperty">
            <summary>
            Total editing time (minutes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.VersionNumberProperty">
            <summary>
            Version number of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.CreationTimeProperty">
            <summary>
            Creation time of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.RevisionTimeProperty">
            <summary>
            Revision time of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.PrintTimeProperty">
            <summary>
            Print time of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentInformation.BackupTimeProperty">
            <summary>
            Backup time of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Author">
            <summary>
            Author
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Manager">
            <summary>
            Manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.FileName">
            <summary>
            The document file name
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.FileSize">
            <summary>
            The document file size
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.Hyperlink">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.TotalEditingTime">
            <summary>
            Total editing time (minutes)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.VersionNumber">
            <summary>
            Version number of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.CreationTime">
            <summary>
            Creation time of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.RevisionTime">
            <summary>
            Revision time of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.PrintTime">
            <summary>
            Print time of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.BackupTime">
            <summary>
            Backup time of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentInformation.EditingStart">
            <summary>
            Editing start time
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentInformation.NDocumentInformationBaseDesigner">
            <summary>
            Designer for NDocumentInformation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDesigner">
            <summary>
            The NDesigner class is used to encapsulate the design time behavior of nodes from a specific schema.
            Designers are created on the fly when a node from a certain schema needs to be edited. 
            Designers are associated with schemas, with the help of the NDesignerMetaUnit metadata.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node">the node to edit</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node">the node to edit</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateHierarchyEmbeddableEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the editor, which is used when the node is in a subtree hiararchy editor.
            </summary>
            <param name="node">the node to edit</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateHierarchyEmbeddableEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates the editor, which is used when the node is in a subtree hiararchy editor.
            </summary>
            <param name="node">the node to edit</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the state editor, which must edit the state of the specified node.
            </summary>
            <param name="node">node to edit, cannot be null</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates the state editor, which must edit the state of the specified node.
            </summary>
            <param name="node">node to edit, cannot be null</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateCategoryEditor(Nevron.Nov.Dom.NNode,System.String)">
            <summary>
            Creates a category editor for the specified category of the specified node
            </summary>
            <param name="node">the node to edit</param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateCategoryEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor,System.String)">
            <summary>
            Creates a category editor for the specified category of the specified node
            </summary>
            <param name="node">the node to edit</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreatePropertyEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a property editor for the specified property of the specified node.
            </summary>
            <param name="node">the node to edit</param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreatePropertyEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a property editor for the specified property of the specified node.
            </summary>
            <param name="node">the node to edit</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreatePropertyEditors(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty[])">
            <summary>
            Creates the property editors for the specified properties.
            </summary>
            <param name="node">the node to edit</param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreatePropertyEditors(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor,Nevron.Nov.Dom.NProperty[])">
            <summary>
            Creates the property editors for the specified properties.
            </summary>
            <param name="node">the node to edit</param>
            <param name="ownerEditor">editor that will own the created editor</param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateCompatibleTypesEditor(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="allowNull"></param>
            <param name="allowAutomatic"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateCompatibleTypesEditor(Nevron.Nov.Editors.NEditor,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an editor that provides the user with an option to select between the compatible types associated with this desigenr.
            </summary>
            <param name="value">
            The value to edit. 
            Can be a node, which is a valid instance of a designer compatible types, 
            null if allowNull is true or 
            NNode.ClearValueObject is allowAutomatic is true.
            </param>
            <param name="ownerEditor"></param>
            <param name="allowNull">whether to allow null values</param>
            <param name="allowAutomatic">whether to allow automatic values (e.g. NNode.ClearValueObject)</param>
            <param name="title">the title of the editor</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateAddChildCommand(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates the add child command.
            </summary>
            <param name="node"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateHierarchyCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates a list of the commands, which can modify the hierarchy of the specified node,  
            in the context of the specified editor.s
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateVerbCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates a list of the commands, which can modify the state of the specified node
            in the context of the specified editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCompatibleTypes">
            <summary>
            Gets a list of the compatible types for this designer schema
            (e.g. the types of the derived, instancable nodes, which can replace this node in specific context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema  
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetContainerChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema  
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetTypesForChildType(Nevron.Nov.Dom.NDomType)">
            <summary>
            Gets a list of DOM types compatible with the given node child type.
            </summary>
            <param name="childDomType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPreviewText(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the preview text for the specified node instance.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetNodeWidget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a widget that represents this node.
            The default implementation returns a label with the string representaton of the node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetNodeText(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetChildrenBrowsable(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether the children of the specified node are browsable or not.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetChildBrowsable(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChild)">
            <summary>
            Gets whether the specified child of the specified node is browsable or not.
            </summary>
            <param name="node"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateInstanceForSurrogateEditing(Nevron.Nov.Editors.NNodeSurrogate)">
            <summary>
            Creates a default instance of the node for the purpose of surrogate editing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyBrowsable(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets whether the specified property is browsable
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyBrowsable(Nevron.Nov.Dom.NProperty,System.Boolean)">
            <summary>
            Sets whether the specified property is browsable
            </summary>
            <param name="property"></param>
            <param name="browsable"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyCategory(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the category of the specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyCategory(Nevron.Nov.Dom.NProperty,System.String)">
            <summary>
            Sets the category of the specified property
            </summary>
            <param name="property"></param>
            <param name="category"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyEditor(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the editor template of the specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyEditor(Nevron.Nov.Dom.NProperty,Nevron.Nov.Editors.NEditorTemplate)">
            <summary>
            Sets the editor template of the specified property
            </summary>
            <param name="property"></param>
            <param name="editor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyDisplayName(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the display name of the specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyDisplayName(Nevron.Nov.Dom.NProperty,System.String)">
            <summary>
            Sets the display name of the specified property
            </summary>
            <param name="property"></param>
            <param name="displayName"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyDisplayOrder(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets a value that defines the display order of the property. If such is not defined returns Float.NaN
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyDisplayOrder(Nevron.Nov.Dom.NProperty,System.Single)">
            <summary>
            Sets the display order of the specified property
            </summary>
            <param name="property"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyVisibilityEvaluator(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets a function which evaluates the visibility of the specified property editor.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyVisibilityEvaluator(Nevron.Nov.Dom.NProperty,Nevron.Nov.FunctionResult{Nevron.Nov.UI.ENVisibility,Nevron.Nov.Dom.NNode})">
            <summary>
            Sets a function which evaluates the visibility of the specified property editor.
            </summary>
            <param name="property"></param>
            <param name="func"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetPropertyEnabledEvaluator(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets a function which evaluates the enabled state of the specified property editor.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetPropertyEnabledEvaluator(Nevron.Nov.Dom.NProperty,Nevron.Nov.FunctionResult{System.Boolean,Nevron.Nov.Dom.NNode})">
            <summary>
            Sets the function which evaluates the enabled state of the specified property editor.
            </summary>
            <param name="property"></param>
            <param name="func"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCategoryVisibilityEvaluator(System.String)">
            <summary>
            Gets a function which evaluates the visible state of the specified category editor.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetCategoryVisibilityEvaluator(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.ENVisibility,Nevron.Nov.Dom.NNode})">
            <summary>
            Sets a function which evaluates the visible state of the specified category editor.
            </summary>
            <param name="category"></param>
            <param name="func"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCategoryEnabledEvaluator(System.String)">
            <summary>
            Gets a function which evaluates the visibility of the specified category editor.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetCategoryEnabledEvaluator(System.String,Nevron.Nov.FunctionResult{System.Boolean,Nevron.Nov.Dom.NNode})">
            <summary>
            Sets a function which evaluates the visibility of the specified category editor.
            </summary>
            <param name="category"></param>
            <param name="func"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.ShowAdvancedPropertyEditingCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty)">
            <summary>
            Determines whether the advanced property editing commands needs to be displayed
            </summary>
            <param name="targetNode"></param>
            <param name="targetProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            Appends the expression types that can be applied to the specified property.
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCategoryEditor(System.String)">
            <summary>
            Gets the category editor for the specified category
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetCategoryEditor(System.String,Nevron.Nov.Editors.NEditorTemplate)">
            <summary>
            Sets the category editor for the specified category
            </summary>
            <param name="category"></param>
            <param name="editor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCategoryEditorsComparer(System.String)">
            <summary>
            Gets the comparer that defines the order of the editors in the specified category.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetCategoryEditorsComparer(System.String,System.Collections.Generic.IComparer{Nevron.Nov.Editors.NEditor})">
            <summary>
            Sets the comparer that defines the order of the editors in the specified category.
            </summary>
            <param name="category"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetCategoryDisplayOrder(System.String)">
            <summary>
            Gets a value that defines the display order of the category. If such is not defined returns Float.NaN
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.SetCategoryDisplayOrder(System.String,System.Single)">
            <summary>
            Sets the display order of the specified category
            </summary>
            <param name="category"></param>
            <param name="displayOrder"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateDefaultInstanceEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the default instance editor.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateDefaultHierarchyEmbeddableEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the default hierarchy embeddable editor.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateDefaultStateEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the default state editor.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.CreateDefaultCategoryEditor(Nevron.Nov.Dom.NNode,System.String)">
            <summary>
            Creates the default category editor.
            </summary>
            <param name="node"></param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetDesigner(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the designer for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesigner.GetDesigner(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the designer for the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesigner.DisabledEvaluator">
            <summary>
            EnabledEvaluator that always returns false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesigner.CollapsedEvaluator">
            <summary>
            VisibilityEvaluator that always returns Collapsed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesigner.HidenEvaluator">
            <summary>
            VisibilityEvaluator that always returns Hidden.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.Schema">
            <summary>
            Gets or sets the schema, with which this designer is associated
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.BaseDesigner">
            <summary>
            Gets the designer of the base schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.InstanceEditor">
            <summary>
            Gets or sets the instance editor template
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.HierarchyEmbeddableEditor">
            <summary>
            Gets or sets the embeddable editor template.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.StateEditor">
            <summary>
            Gets or sets the state editor template
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.DefaultPropertyBrowsable">
            <summary>
            Gets or sets whether properties are browsable by default. 
            By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.DefaultCategoryEditor">
            <summary>
            Gets or sets the default category editor. 
            By default set to NStackCategoryEditor.VerticalTemplate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.DefaultPropertyCategory">
            <summary>
            Gets or sets the default property category. 
            By default set to "General".
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesigner.DefaultCategoryEditorsComparer">
            <summary>
            Gets or sets the default category editors comparer.
            By default set to NEditorTitleComparer.Instance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentInformation.NDocumentInformationBaseDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NWeakEventHandler">
            <summary>
            An event handler that aggregates another event handler with a weak reference.
            In this way the Garbage Collector is allowed to collect the handler contained in this object.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INEventHandler">
            <summary>
            Serves as base class for all event handlers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INEventHandler.Invoke(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Invokes the handler. Returns true if the handler wishes to be further notified.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.#ctor(Nevron.Nov.Dom.INEventHandler)">
            <summary>
            Creates a new weak reference event handler that contains the specified handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.GetHashCode">
            <summary>
            Overriden to retrun the hash code of the weak ref.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.Equals(System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.Invoke(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Invokes the handler. 
            Returns true if the inner handler Invoke returned true.
            If the inner handler is no longer alive (is GC collected), this method returns false.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.FromEventHandler``1(Nevron.Nov.Dom.NEventHandler{``0})">
            <summary>
            Creates a weak ref event handler that aggregates the specified event handler.
            </summary>
            <typeparam name="TArgs"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.FromDelegate``1(System.Delegate)">
            <summary>
            Creates a new weak event handler that calls the specified delegate. 
            Throw an exception if the delegate is null or is not an instance of the Function(TArgs) delegate.
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NWeakEventHandler.FromFunction``1(Nevron.Nov.Function{``0})">
            <summary>
            Creates a new weak event handler that calls the specified function. 
            Throw an exception if the function is null.
            </summary>
            <param name="function"></param>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomDeepEqualsContext">
            <summary>
            Represents the context for nodes deep cloning.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomDeepOperationContext">
            <summary>
            Serves as base class for DOM deep operation contexts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepOperationContext.Begin">
            <summary>
            Marks the start of the operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepOperationContext.End">
            <summary>
            Marks the start of the operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepEqualsContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepEqualsContext.Begin">
            <summary>
            Marks the start of the operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepEqualsContext.End">
            <summary>
            Marks the start of the operation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NScratchPropertyEx">
            <summary>
            A static class, that contains extended properties used for general expression purposes.
            Defines the following extended properties:
            X, X1, Y, Y1 - extended properties of type Double.
            A, B, C, D - extended properties of type Variant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetX(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the XPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetX(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the XPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearX(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the XPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetX1(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the X1PropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetX1(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the X1PropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearX1(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the X1PropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetY(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the YPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetY(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the YPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearY(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the YPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetY1(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the Y1PropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetY1(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the Y1PropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearY1(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the Y1PropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetA(Nevron.Nov.Dom.NNode,Nevron.Nov.NVariant)">
            <summary>
            Sets the APropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetA(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the APropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearA(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the APropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetB(Nevron.Nov.Dom.NNode,Nevron.Nov.NVariant)">
            <summary>
            Sets the BPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetB(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the BPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearB(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the BPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetC(Nevron.Nov.Dom.NNode,Nevron.Nov.NVariant)">
            <summary>
            Sets the CPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetC(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the CPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearC(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the CPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.SetD(Nevron.Nov.Dom.NNode,Nevron.Nov.NVariant)">
            <summary>
            Sets the DPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.GetD(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the DPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NScratchPropertyEx.ClearD(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the DPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.XPropertyEx">
            <summary>
            Reference to the X extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.X1PropertyEx">
            <summary>
            Reference to the X1 extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.YPropertyEx">
            <summary>
            Reference to the Y extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.Y1PropertyEx">
            <summary>
            Reference to the Y1 extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.APropertyEx">
            <summary>
            Reference to the A extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.BPropertyEx">
            <summary>
            Reference to the B extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.CPropertyEx">
            <summary>
            Reference to the C extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NScratchPropertyEx.DPropertyEx">
            <summary>
            Reference to the D extended property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentFormatBase">
            <summary>
            Serves as base class for document formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatBase.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatBase.Extensions">
            <summary>
            Gets the file extensions files of this format can have.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatBase.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatBase.CanLoad">
            <summary>
            Returns true if the format can load a text document from stream.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatBase.CanSave">
            <summary>
            Returns true if the format can save a text document to a stream.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentFormat`3">
            <summary>
            Serves as base class for document formats that can load and save to/from specific document types.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentFormatRegistry`1">
            <summary>
            Represents an implementation of a document format registry.
            </summary>
            <typeparam name="TDocumentFormat"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromExtensionAndHeader(System.String,System.Byte[],System.Boolean)">
            <summary>
            Gets a document format from the specified extension and header.
            </summary>
            <param name="extension"></param>
            <param name="header"></param>
            <param name="forReading"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromExtensionAndHeader(System.String,System.Byte[],System.Boolean,System.Boolean@)">
            <summary>
            Gets a document format from the specified extension and header.
            </summary>
            <param name="extension"></param>
            <param name="header"></param>
            <param name="forReading"></param>
            <param name="isFallback">Indicates whether the returned file format is supported or
            has fallbacked to the default file format for the registry.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromFileName(System.String,System.Boolean)">
            <summary>
            Gets the document format from the specified file name. If the file format couldn't be recognized from
            the given file name, the default file format of the document registry is returned.
            </summary>
            <param name="fileName">The file to analyze.</param>
            <param name="forReading">Specifies whether the file is going to be used for reading or for writing.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromFileName(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Gets the document format from the specified file name.
            </summary>
            <param name="fileName">The file to analyze.</param>
            <param name="forReading">Specifies whether the file is going to be used for reading or for writing.</param>
            <param name="isFallback">Indicates whether the returned file format is supported or
            has fallbacked to the default file format for the registry.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromStream(System.IO.Stream,System.String)">
            <summary>
            Gets the document format from the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFromMimeType(System.String)">
            <summary>
            
            </summary>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetByName(System.String)">
            <summary>
            Returns the document format with the given name or null if no such document format is registered.
            </summary>
            <param name="formatName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetFileTypes(System.Boolean)">
            <summary>
            Gets the file types of all supported formats.
            </summary>
            <param name="forReading">Specifies whether to get file formats for reading or for writing.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetAllFileTypes(System.Boolean,System.String)">
            <summary>
            Gets the file types of all supported formats.
            </summary>
            <param name="forReading">Specifies whether to get file formats for reading or for writing.</param>
            <param name="allSpecificFilesName">Specifies the name of the all specific files entry, for example
            "All Text Files".</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.FilterDocumentFormat(`0,System.Boolean)">
            <summary>
            Returns true if the document format can be processed.
            </summary>
            <param name="documentFormat"></param>
            <param name="forReading"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentFormatRegistry`1.GetDocumentTypeName">
            <summary>
            Gets the document type name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentFormatRegistry`1.FallbackFormatExtension">
            <summary>
            Gets the fallback format extension of document format registry.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentLoadSettings">
            <summary>
            This class holds the settings that are used when loading
            documents in different document formats.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentLoadSettings.BaseUri">
            <summary>
            The URI the document is being loaded from.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentLoadSettings.DocumentSize">
            <summary>
            The document size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentLoadSettings.DocumentSource">
            <summary>
            The source from which the document was loaded.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentSaveSettings">
            <summary>
            This class holds the settings that are used when saving
            documents to different text formats.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentSaveSettings.DocumentTarget">
            <summary>
            The target in which the document will be saved
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INDocumentContentElement">
            <summary>
            Implemented by elements that are content elements of certain documents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.INDocumentContentElement.Information">
            <summary>
            Gets or sets information related to the document content
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNthChildCondition">
            <summary>
            A condition, which matches, if the element has Step*n + Offset - 1 siblings before it in the document tree.
            Equivalent to the CSS ":nth-child()" pseudo-class condition.
            Normal specificity rank.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NCondition">
            <summary>
            Serves as base class for all conditions.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelectorPart">
            <summary>
            A styling node, which serves as base class for sub nodes of a selector
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NStylingNode">
            <summary>
            A document node, which servers as base class for nodes defining the cascading style sheets of a document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNode.#ctor(Nevron.Nov.Dom.NStylingNode)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNode.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            Overriden to invalidate the document cascade.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NStylingNode.NStylingNodeSchema">
            <summary>
            Schema associated with NStylingNode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPart.#ctor(Nevron.Nov.Dom.NSelectorPart)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPart.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelectorPart.NSelectorPartSchema">
            <summary>
            Schema associated with NSelectorPart
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelectorPart.OwnerSelector">
            <summary>
            Gets the selector to which this part belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCondition.NConditionSchema">
            <summary>
            Schema associated with NCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCondition.InvertedProperty">
            <summary>
            Reference to the Inverted property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCondition.SpecificityRankProperty">
            <summary>
            Reference to the SpecificityRank property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCondition.CreateValueEqualsCondition(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Creates a value equals condition for the specified property and value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NCondition.CreateValueEqualsCondition(Nevron.Nov.Dom.NDomProperty,System.Object)">
            <summary>
            Creates a value equals condition for the specified DOM property and value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NCondition.CreateContainsValueCondition(Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a contains value condition for the specified DOM property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NCondition.CreateContainsValueCondition(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Creates a contains value condition for the specified DOM property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NCondition.Inverted">
            <summary>
            Gets or sets whether the condition must be inverted.
            This is equivalent to the not() CSS selector construction.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NCondition.SpecificityRank">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNthChildCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNthChildCondition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
            <param name="offset"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNthChildCondition.NNthChildConditionSchema">
            <summary>
            Schema associated with NNthChildCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNthChildCondition.StepProperty">
            <summary>
            Reference to the Step property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNthChildCondition.OffsetProperty">
            <summary>
            Reference to the Offset property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNthChildCondition.Step">
            <summary>
            Gets or sets the step of this condition. If set to 0 this condition will match only the element at index Offset.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNthChildCondition.OffSet">
            <summary>
            Gets or sets the offset of this condition. If Step is set to 0, only the element at this index matches the condition.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NBooleanValueFormatter">
            <summary>
            Represents a NVariant values formatter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueFormatter">
            <summary>
            The NValueFormatter class servers as base class for all value formatters. 
            The purpose of a value formatter is to provide a string reprsentation of objects of a specific type (or types).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueFormatter.#ctor(Nevron.Nov.Dom.NValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueFormatter.FormatValue(System.Object)">
            <summary>
            Must override to format the value
            </summary>
            <param name="value">value to format</param>
            <returns>string representation of the value</returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueFormatter.NValueFormatterSchema">
            <summary>
            Schema associated with NValueFormatter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NBooleanValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Creates a new numeric value formatter with default format specifier
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NBooleanValueFormatter.#ctor(Nevron.Nov.Dom.NBooleanValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NBooleanValueFormatter.FormatValue(System.Object)">
            <summary>
            Overriden to return either the TrueString or FalseString.
            The value must be castable to boolean, otherise this method throws an exception.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NBooleanValueFormatter.NBooleanValueFormatterSchema">
            <summary>
            Schema associated with NBooleanValueFormatter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NBooleanValueFormatter.TrueStringProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NBooleanValueFormatter.FalseStringProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NBooleanValueFormatter.TrueString">
            <summary>
            Gets or sets the string that represents True values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NBooleanValueFormatter.FalseString">
            <summary>
            Gets or sets the string that represents False values.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NFormatSpecifierValueFormatter">
            <summary>
            The NFormatSpecifierValueFormatter class servers as base class for all value formatters that are based on a format specifier.
            </summary>
            <remarks>
            An instance of this class is used to control the formatting of values 
            displayed by the component. It can be used to format numeric, datetime, currency, time and scientific values.
            </remarks>	
        </member>
        <member name="M:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.#ctor(Nevron.Nov.Dom.NFormatSpecifierValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.FormatValue(System.Object)">
            <summary>
            Must override to format the value
            </summary>
            <param name="value">value to format</param>
            <returns>string representation of the value</returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.m_sFormatSpecifier">
            <summary>
            The format specifier string.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.NFormatSpecifierValueFormatterSchema">
            <summary>
            Schema associated with NFormatSpecifierValueFormatter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.FormatSpecifierProperty">
            <summary>
            Schema associated with FormatSpecifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.CultureNameProperty">
            <summary>
            Reference to the CulterName property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.CultureName">
            <summary>
            Gets or sets the name of the culture associated with this value formatter.
            If set to empty string, or the culture name is invalid, the formatter will use the default culture of the application.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.CultureInfo">
            <summary>
            Gets the CultureInfo associated with this value formatter. 
            </summary>
            <remarks>
            If the CultureName is valid for this machine, the returned CultureInfo represents that culture.
            If the CultureName is a invalid for this machine, the formatter will try to use the culture info of the parent value formatter (if any).
            If the formatter is not aggregated in another formatter, the formatter will use CultureInfo.CurrentCulture;
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Dom.NFormatSpecifierValueFormatter.FormatSpecifier">
            <summary>
            Specifies a format string.
            </summary>
            <remarks>
            For more information regarding the format specifier that you can use 
            in the custom format string please refer to the following topics:
            <para>
            Visual Studio .NET -> .NET Framework -> Programming with .NET Framework -> 
            Working with Base Types -> Formatting Types -> Numeric Format Strings -> 
            Standard Numeric Format Strings
            </para>
            <para>
            Visual Studio .NET -> .NET Framework -> Programming with .NET Framework -> 
            Working with Base Types -> Formatting Types -> Numeric Format Strings -> 
            Custom Numeric Format Strings
            </para>
            <para>
            Visual Studio .NET -> .NET Framework -> Programming with .NET Framework -> 
            Working with Base Types -> Formatting Types -> Date and Time Format Strings
            </para>
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NVariantValueFormatter">
            <summary>
            Represents a NVariant values formatter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVariantValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Creates a new numeric value formatter with default format specifier
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NVariantValueFormatter.#ctor(Nevron.Nov.Dom.NVariantValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVariantValueFormatter.FormatValue(System.Object)">
            <summary>
            Returns a string representation of the specified variant value.
            The value must be castable to a NVariant object, otherwise this method will throw an exception.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.NVariantValueFormatterSchema">
            <summary>
            Schema associated with NVariantValueFormatter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.NumericValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.DateTimeValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.BooleanValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.General_Numeric_Category">
            <summary>
            Numeric category
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.General_DateTime_Category">
            <summary>
            DateTime category
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NVariantValueFormatter.General_Boolean_Category">
            <summary>
            Boolean category
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVariantValueFormatter.NumericValueFormatter">
            <summary>
            Gets or sets the formatter to use to format numeric values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVariantValueFormatter.DateTimeValueFormatter">
            <summary>
            Gets or sets the formatter to use to format date time values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVariantValueFormatter.BooleanValueFormatter">
            <summary>
            Gets or sets the formatter to use to format boolean values.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NVariantValueFormatter.NVariantValueFormatterDesigner">
            <summary>
            Designer associated with NVariantValueFormatter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVariantValueFormatter.NVariantValueFormatterDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMarginsCategoryEditor">
            <summary>
            Category editor for margins properties. This category editor should be applied only to categories
            that consist of 4 double properties. The first property represents the left margin, the second -
            the top margin, the third - the right margin and the fourth - the bottom margin.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NCategoryEditor">
            <summary>
            Serves as base class for all editors that edit a category of node properties and/or other categories.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditor">
            <summary>
            A content element, which serves as base class for all editors.
            An editor displays and edits certain aspects of the EditedNode assigned to it.
            Editors are resposible for the creation an maintance of a single UI control, which is specific for each type of editor.
            The UI control of editor can contain other editors and is constructed when the editor is initialized.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NContentHolder">
            <summary>
            A widget, which contains a single other widget that is placed inside its content area.
            The content holder by default measures to fit the contained element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWidget">
            <summary>
            Represents an User Interface box element and serves as base class for all widgets. 
            Widgets are the primary building blocks for Windows content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBoxElement">
            <summary>
            An input element that adds core support for the box-model. 
            Box elements participates in the document measure and layout system.
            Serves as base class for Windows and Widgets.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInputElement">
            <summary>
            A visual element that serves as base class for elements that can receive and process user input.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NVisual">
            <summary>
            An element that serves as base class for elements that can participate in the visual tree. 
            Provides core support for transformations, clipping, painting and hit-testing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NElement">
            <summary>
            A document node, which serves as base class for all elements, which reside in the elements hierarchy of a DOM document.
            </summary>
            <remarks>
            Elements are part of the elements hierarchy, which is typically rooted by a document and are used to define the primary document content.
            <para>
            Each element can be identified in the scope of its document via its Id, which is automatically assigned to the element when it is registered in the document,
            and is automatically set to -1 when the element is unregistered from the document. The element registration/unregistration is mandatory and is performed for each element, 
            regardless of the level at which it is inserted or removed from its parent element.
            </para>
            <para>
            If the element Id is equal to -1, then the element is not registered in any document. 
            A valid Id however can be assigned to any element that does not yet reside in a document, 
            via the AssignId method, that takes a single argument - the document in which the element is intended to be registered. 
            In this way an element can gain an Id before it is registered in the document. 
            A reference to an element that is registered in a document, can always be obtained by the NDocument.GetElementById method.
            Once registered in the document, the element Id is sealed and cannot be modified.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.#ctor(Nevron.Nov.Dom.NElement)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.AssignNextId(Nevron.Nov.Dom.NDocument)">
            <summary>
            Assigns the next document Id to this element. Use this method to generate an element Id, before it is registered in the specified document. 
            Throws an expection if the element is already added to a document or the provided document is null.
            When an element Id is assigned to an element, it is a resposibility of the caller to ensure that the element is added to the elements 
            subtree of the document for which the id was assigned. 
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.GetFx(System.String)">
            <summary>
            Gets the expression for the self property with the specified name
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.GetFx(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the expression for the specified property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetFx(System.String,System.Object)">
            <summary>
            Sets the expression to the self property with the specified name
            </summary>
            <param name="propertyName"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetFxForce(System.String,System.Object)">
            <summary>
            Sets the expression to the self property with the specified name by force.
            </summary>
            <param name="propertyName"></param>
            <param name="expression"></param>
            <returns>true if the expression was successfully applied, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetFx(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets the expression to the specified property
            </summary>
            <param name="property"></param>
            <param name="expression"></param>
            <returns>true if the expression was successfully applied, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetFxForce(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets the expression to the specified property by force.
            </summary>
            <param name="property"></param>
            <param name="expression"></param>
            <returns>true if the expression was successfully applied, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.GetValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets the current computed value of the specified property.
            </summary>
            <param name="property">property</param>
            <returns>property value</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.GetValue(Nevron.Nov.Dom.NProperty,Nevron.Nov.Dom.ENValueSource@)">
            <summary>
            Gets the value of the specified property and its source.
            </summary>
            <param name="property"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetValue(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets a value for the specified property.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.ClearValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Clears the expression (if any) and the local value of the specified property
            and returns true on success.
            </summary>
            <param name="property"></param>
            <returns>True if the expression (if any) and the local value
            were successfully cleared.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.ConsumeValueEffect(System.Int32)">
            <summary>
            Consumes the value effect, defined by the specified property flags. 
            This method may be called for a single or mutliple computed value changes.
            In the multiple changes case, the flags of the individual properties are combined with bitwise OR.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.ConsumeCustomValueEffect(System.Int32)">
            <summary>
            Called by ConsumeValueEffect, when the flags contain a Custom property flag.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.OnFxChanging(Nevron.Nov.Dom.NExpressionChangeData)">
            <summary>
            Called when the expression associated with a property is changing
            </summary>
            <remarks>
            This implementation notifies static and dynamic observers about the expected expression change. 
            Both types of observers can cancel the change.
            </remarks>
            <param name="data">data for the change</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.SetFxCore(Nevron.Nov.Dom.NExpressionChangeData)">
            <summary>
            Stores the expression in the internal expressions store
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.OnFxChanged(Nevron.Nov.Dom.NExpressionChangeData)">
            <summary>
            Called when the expression associated with a property has changed
            </summary>
            <remarks>
            This implementation notifies static and dynamic observers about the property change.
            </remarks>
            <param name="data">data for the change</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Called when an owned attribute has changed.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of the element measure parent.
            This implementation calls the InvalidateMeasureFromChild method of the first ancestor element that implements the INMeasureElementParent interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the arrange of the element arrange parent.
            This implementation calls the InvalidateArrangeFromChild method of the first ancestor element that implements the INArrangeElementParent interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.InvalidateParentDisplay">
            <summary>
            Invalidates the display of element display parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateDisplay method of the first ancestor element that implements the INVisual interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.NElementSchema">
            <summary>
            Schema associated with NElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.ExpressionChangingEvent">
            <summary>
            Reference to the ExpressionChanging event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.ExpressionChangedEvent">
            <summary>
            Reference to the ExpressionChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.IdProperty">
            <summary>
            Reference to the Id property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.UserClassProperty">
            <summary>
            Reference to the UserClass property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NElement.UserIdProperty">
            <summary>
            Reference to the UserId property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NElement.Id">
            <summary>
            Gets the id of the element, which uniquely identifies the element inside the owner document. 
            It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document.
            You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NElement.UserClass">
            <summary>
            Gets or sets the User Class to which the element belongs. 
            This property is usually assigned by the user and is used to group related elements.
            An element can belong to more than one user classes that should be separated by the ' '(space) character.
            For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes.
            The NUserClassCondtion styling condition lets you select elements of a specific user class.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NElement.UserId">
            <summary>
            Gets or sets the User Id associated to this element.
            This property is usually assigned by the user and is used to identify specific elements in the document. 
            Unlike the Id property, the value of this property is not guaranteed to be unique in the document.
            The NUserIdCondition styling condition lets you select elements with a specific User Id.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NElement.NElementDesigner">
            <summary>
            Designer associated with NElement instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElement.NElementDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.#ctor(Nevron.Nov.Dom.NVisual)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.InvalidateDisplay">
            <summary>
            Invalidates the display of the node. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.InvalidateDisplayTransform">
            <summary>
            Invalidates the display transform of the node. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.ValidateDisplay">
            <summary>
            Validates the display of the node. 
            This implementation forwards the call to the owner display window, if any.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.VisitDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Visits the display subtree of the element with the specified visitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the element to the provided list.
            This implementation accumulates the children of this this element, which are NVisual instances.
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            This implementation directly calls the VisitDisplaySubtree method of the child node.
            </summary>
            <param name="child"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point. This implementation returns false. 
            It is up to derived classes to implement point hit test.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the node by point. This implementation returns false. 
            It is up to derived classes to implement region hit test.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.LocalToAncestor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Dom.NVisual)">
            <summary>
            Transforms a point in local coordinates to the specified ancestor.
            </summary>
            <param name="point"></param>
            <param name="ancestor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.AncestorToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Dom.NVisual)">
            <summary>
            Transforms a point in the specified ancestor coordinates to local coordinates.
            </summary>
            <param name="point"></param>
            <param name="ancestor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.TryLocalToScreen(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to transform a point in local coordinates to screen coordinates.
            </summary>
            <param name="point"></param>
            <param name="screen"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.TryScreenToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to transforms a point in screen coordinates to the local coordinates.
            </summary>
            <param name="screen"></param>
            <param name="point"></param>		
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.CanTransform">
            <summary>
            Determines whether this element currently returns a transformation different than NMatrix.Identity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetTransformToAncestor(Nevron.Nov.Dom.NVisual)">
            <summary>
            Gets a transformation for converting local coordinates to the specified ancestor coordinates
            </summary>
            <param name="ancestor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetClip">
            <summary>
            Gets the clip area of the visual (in local coordinates).
            Valid only if CanClip() returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.CanClipChildren">
            <summary>
            Gets whether the visual can provide a clip for its children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetChildrenClip">
            <summary>
            Gets the clip that needs to be applied on the visual children (in local coordinates).
            Valid only if CanClipChildren() returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetPaintCacheMode">
            <summary>
            Gets the mode in which this visual attemps to cache its display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.CanAnchorHatches">
            <summary>
            Determines whether hatch transformations can be anchored to this node coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.CanAnchorShadows">
            <summary>
            Determines whether shadow transformations can be anchored to this node coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetShadowAnchor">
            <summary>
            Gets the visual that serves as shadow anchor for this visual
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.GetHatchAnchor">
            <summary>
            Gets the visual that serves as hatch anchor for this visual
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisual.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NVisual.NVisualSchema">
            <summary>
            Schema associated with NVisual
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisual.RootVisual">
            <summary>
            Gets the root visual of this visual.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisual.ParentVisual">
            <summary>
            Gets the parent visual. 
            This implementation returns the first ancestor that is a visual.
            </summary>
            <remarks>
            If this visual is a NWindow instance, this property returns null - i.e. Windows may reside in other elements, but they do not consider them as visual parents.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisual.DisplayWindow">
            <summary>
            Gets the window in which this visual is displayed (painted)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisual.SubtreeDisplayVersion">
            <summary>
            Gets the subtree display version.
            Automatically managed by Nevron.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.INInputNode">
            <summary>
            Implemented by input nodes
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.CanFocus">
            <summary>
            Determines whether this element can be focused.
            By default the element can be focused if it is enabled and allows focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.Focus">
            <summary>
            Attempts to focus the keyboard on this input target
            </summary>
            <returns>true if this target got focus</returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.CanCaptureMouse">
            <summary>
            Determines whether this element can capture the mouse.
            By default the element can capture the mouse if it is enabled and allows mouse capture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.CaptureMouse">
            <summary>
            Attempts to force capture of the mouse to this input target
            </summary>
            <returns>true if this target got mouse capture</returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture, if this input target holds the capture
            </summary>
            <returns>true if this target had mouse capture and successfully released it</returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.IsTabStop">
            <summary>
            Gets whether the input target is included in the tab navigation.
            This implementation returns the TabStop property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INInputNode.GetTabIndex">
            <summary>
            Gets or sets the input target tab navigation index
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.INInputNode.DisplayWindow">
            <summary>
            Gets the display window
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.CanFocus">
            <summary>
            Determines whether this element can be focused.
            By default the element can be focused if it is enabled and allows focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.Focus">
            <summary>
            Attempts to focus the keyboard on this input target
            </summary>
            <returns>true if this target got focus</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.CanCaptureMouse">
            <summary>
            Determines whether this element can capture the mouse.
            By default the element can capture the mouse if it is enabled and allows mouse capture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.CaptureMouse">
            <summary>
            Attempts to force capture of the mouse to this input target
            </summary>
            <returns>true if this target got mouse capture</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture, if this input target holds the capture
            </summary>
            <returns>true if this target had mouse capture and successfully released it</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.IsTabStop">
            <summary>
            Gets whether the input target is included in the tab navigation.
            This implementation returns the TabStop property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.GetTabIndex">
            <summary>
            Gets or sets the input target tab navigation index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Default handler for the NMouse.WheelEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseEnter(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.EnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.LeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnGotMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Default handler for the NMouse.GotCaptureEvent events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseCaptureIn(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Default handler for the NMouse.CaptureInEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnMouseCaptureOut(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Default handler for the NMouse.CaptureOutEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Default handler for the NMouse.LostCaptureEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the NKeyboard.KeyDownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the NKeyboard.KeyUpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Default handler for the NKeyboard.InputCharEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.LostFocus event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragOverEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragDropEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragEnter(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragEnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDragLeave(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Default handler for the NDragDrop.DragLeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Queries whether handled mouse move should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledMouseDown(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Queries whether handled mouse down should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledMouseUp(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Queries whether handled mouse up should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledMouseWheel(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Queries whether handled mouse wheel should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Queries whether handled key down should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Queries whether handled key up should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Queries whether handled input char should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Queries whether handled drag over should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.ReceiveHandledDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Queries whether handled drag drop should be processed.
            This implementation returns false.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnEnabled">
            <summary>
            Called when the Disabled property is set to false
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.OnDisabled">
            <summary>
            Called when the Disabled property is set to true
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.RequestCursor">
            <summary>
            Called when the input element receive a chance to request a cursor.
            This implementation requests the Cursor property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.RequestTooltip">
            <summary>
            Called when the input element receive a chance to request a tooltip.
            This implementation requests the Tooltip property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.RequestDisabledTooltip">
            <summary>
            Called when the input element is disabled and receives channce to request a disabled tooltip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.RequestDisabledCursor">
            <summary>
            Called when the input element is disabled and receives channce to request a disabled cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.NInputElementSchema">
            <summary>
            Schema associated with NInputElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.EnabledProperty">
            <summary>
            Reference to the Enabled property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.IsDisabledProperty">
            <summary>
            Reference to the Disabled property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.AllowFocusProperty">
            <summary>
            Reference to the AllowFocus property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.AllowMouseCaptureProperty">
            <summary>
            Reference to the AllowMouseCapture property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.AllowDropProperty">
            <summary>
            Reference to the AllowDrop property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.TabStopProperty">
            <summary>
            Reference to the TabStop property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.TabIndexProperty">
            <summary>
            Reference to the TabIndex property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.TooltipProperty">
            <summary>
            Reference to the Tooltip property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.CursorProperty">
            <summary>
            Reference to the Tooltip property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.InteractorProperty">
            <summary>
            Reference to the Interactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInputElement.CommanderProperty">
            <summary>
            Reference to the Commander property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseMove">
            <summary>
            Occurs when the mouse is moved inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseDown">
            <summary>
            Occurs when a mouse button is pressed inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseUp">
            <summary>
            Occurs when a mouse button is released inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseWheel">
            <summary>
            Occurs when the mouse wheel is rotated inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseEnter">
            <summary>
            Occurs when the mouse enters a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseIn">
            <summary>
            Occurs when the mouse enters this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseOut">
            <summary>
            Occurs when the mouse leaves this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.MouseLeave">
            <summary>
            Occurs when the mouse leaves a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.GotMouseCapture">
            <summary>
            Occurs when the mouse is captured on a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.CaptureIn">
            <summary>
            Occurs when the mouse capture enters this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.CaptureOut">
            <summary>
            Occurs when the mouse capture leaves this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.LostMouseCapture">
            <summary>
            Occurs when the mouse capture is released from a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.KeyDown">
            <summary>
            Occurs when a keyboard button is pressed inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.KeyUp">
            <summary>
            Occurs when a keyboard button is released inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.InputChar">
            <summary>
            Occurs when a keyboard key(s) gesture is recognized as an Unicode input character, and the focus is inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.GotFocus">
            <summary>
            Occurs when the keyboard is focused on a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.FocusIn">
            <summary>
            Occurs when the keyboard focus enters this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.FocusOut">
            <summary>
            Occurs when the keyboard focus leaves this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.LostFocus">
            <summary>
            Occurs when the keyboard focus is lost by a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragOver">
            <summary>
            Occurs when a Drag-and-Drop data object moves over this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragDrop">
            <summary>
            Occurs when a Drag-and-Drop data object is dropped in this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragEnter">
            <summary>
            Occurs when a Drag-and-Drop data object enters a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragIn">
            <summary>
            Occurs when a Drag-and-Drop data object enters this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragOut">
            <summary>
            Occurs when a Drag-and-Drop data object leaves this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.DragLeave">
            <summary>
            Occurs when a Drag-and-Drop data object leaves a node inside this node subtree
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NInputElement.QueryCommandTarget">
            <summary>
            A bubbling event that bubbles up the NCommandSource ancestors chain and results in command target element for Execute and UpdateSource events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.IsFocused">
            <summary>
            Determines whether this element has keyboard focus
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.IsMouseCaptured">
            <summary>
            Determines whether this element has captured the mouse
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.Enabled">
            <summary>
            Gets or sets whether this element is enabled in the UI or not.
            If a local value has not been set to this property, its value will be inherited by an ancestor element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.IsDisabled">
            <summary>
            Gets whether this element is disabled.
            The local value of this property is automatically set to true, when the computed value of the Enabled property is false.
            The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true.
            In this way you can select disabled widgets via styling, by using the ValueEqualsCondition 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.AllowFocus">
            <summary>
            Gets or sets whether this widget can be focused
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.AllowMouseCapture">
            <summary>
            Gets or sets whether this widget can capture the mouse
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.AllowDrop">
            <summary>
            Gets or sets whether this widget can be used as the target of a drag-and-drop operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.Cursor">
            <summary>
            Gets or sets the cursor 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.Tooltip">
            <summary>
            Gets or sets the tooltip
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.Interactor">
            <summary>
            Gets/set the element interactor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.Commander">
            <summary>
            Gets/set the element commander.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.TabStop">
            <summary>
            Gets or sets whether the element is included in the tab navigation or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.TabIndex">
            <summary>
            Gets or sets the index of the element in the tab navigation list.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.OwnerWindow">
            <summary>
            Gets the Window in which this element resides
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputElement.OwnerDesktop">
            <summary>
            Gets the Desktop in which this element resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInputElement.NInputElementDesigner">
            <summary>
            A designer for an input element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputElement.NInputElementDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INArrangeElement">
            <summary>
            Implemented by elements that can participate in the DOM arrange system.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INArrangeElement.ValidateArrange">
            <summary>
            Deferly called to validate the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INArrangeElement.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.INArrangeElement.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.INArrangeElement.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INArrangeElementParent">
            <summary>
            Implemented by nodes that are considered to be arrange elements parents
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INArrangeElementParent.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="T:Nevron.Nov.Dom.INMeasureElement">
            <summary>
            Implemented by elements that can participate in the DOM measure system.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INMeasureElement.ValidateMeasure">
            <summary>
            Deferly called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INMeasureElement.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.INMeasureElement.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.INMeasureElement.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INMeasureElementParent">
            <summary>
            Implemented by nodes that are considered to be measure elements parents
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INMeasureElementParent.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.CanAnchorHatches">
            <summary>
            Determines whether hatch transformations can be anchored to this node coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.CanAnchorShadows">
            <summary>
            Determines whether shadow transformations can be anchored to this node coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <remarks>
            Overriden to render focus decorator
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.CanTransform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.TryGetScreenBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the screen bounds of this element
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetContentEdge">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetContentEdge(System.Double,System.Double)">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetPaddingEdge">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetPaddingEdge(System.Double,System.Double)">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetBorderEdge">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetBorderEdge(System.Double,System.Double)">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetFocusEdge">
            <summary>
            Gets the edge of the focus frame. 
            This implementation returns the middle between the padding and the content edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetInsets">
            <summary>
            Gets the element insets, which is the sum of the margins, padding and border thickness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetMeasure(System.Boolean)">
            <summary>
            Gets the measure of the element that is applicable for the current value of visitor.DefaultMeasure property.
            If it is true, returns DefaultSize, otherwise returns DesiredSize.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetMargins">
            <summary>
            Gets the margins of the element.
            This implementation returns empty margins, since by default Box elements do not have margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetPadding">
            <summary>
            Gets the padding of the element.
            This implementation returns the computed value of the Padding property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.GetBorderThickness">
            <summary>
            Gets the border thickness of the element.
            This implementation returns the computed value of the BorderThickness property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.IsCollapsed">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.CreateBorderWall">
            <summary>
            Creates the border wall of the box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint.
            </summary>
            <remarks>
            This implementation paints the box background and border.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the foreground of the box, which is performed after the custom painting in OnPostPaint.
            </summary>
            <remarks>
            This implementation renders the focus decorator.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.NBoxElementSchema">
            <summary>
            Schema associated with NBoxElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.PreferredWidthProperty">
            <summary>
            Reference to the PreferredWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.PreferredHeightProperty">
            <summary>
            Reference to the PreferredHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.MinWidthProperty">
            <summary>
            Reference to the MinWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.MinHeightProperty">
            <summary>
            Reference to the MinHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.MaxWidthProperty">
            <summary>
            Reference to the MaxWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.MaxHeightProperty">
            <summary>
            Reference to the MaxHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.DefaultWidthProperty">
            <summary>
            Reference to the DefaultWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.DefaultHeightProperty">
            <summary>
            Reference to the DefaultHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.DesiredWidthProperty">
            <summary>
            Reference to the DesiredWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.DesiredHeightProperty">
            <summary>
            Reference to the DesiredHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.PaddingProperty">
            <summary>
            Reference to the Padding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.BorderThicknessProperty">
            <summary>
            Reference to the BorderThickness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.TextFillProperty">
            <summary>
            Reference to the TextFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.BorderProperty">
            <summary>
            Reference to the Border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.FocusDecoratorProperty">
            <summary>
            Reference to the FocusDecorator property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.FontProperty">
            <summary>
            Reference to the Font property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBoxElement.InvalidateMeasureHint_DesiredSizeOnly">
            <summary>
            Hint for measure invalidation. Marks only the desired size for remeasure.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.PreferredWidth">
            <summary>
            Gets or sets the suggested width of the element.
            If the value of this property is NaN the default width and desired width of the box are automatically computed.
            Otherwise both the default width and the desired width are equal to this value.
            By default set to NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.PreferredHeight">
            <summary>
            Gets or sets the suggested height of the element.
            If the value of this property is NaN the default height and desired height of the box are automatically computed.
            Otherwise both the default height and the desired height are equal to this value.
            By default set to NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.PreferredSize">
            <summary>
            A shortcut property that gets/sets the preferred size of the element (PreferredWidth and PreferredHeight).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MinWidth">
            <summary>
            Gets or sets the minimal width of the element.
            The box default and desired width is always smaller or equal to this value, 
            except in the case when the element is collapsed.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MinHeight">
            <summary>
            Gets or sets the minimal height of the element.
            The box default and desired height is always larger or equal to this value, 
            except in the case when the element is collapsed.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MinSize">
            <summary>
            A shortcut property that gets/sets the minimal size of the element (MinWidth and MinHeight).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MaxWidth">
            <summary>
            Gets or sets the max width of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MaxHeight">
            <summary>
            Gets or sets the max height of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.MaxSize">
            <summary>
            Gets or sets the max size of the element
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DefaultWidth">
            <summary>
            Gets the default width of the element (in parent coordinates).
            Automatically updated by Nevron.
            </summary>
            <remarks>
            The value of this property is automatically computed during the measure pass.
            It represents the width that this box wants to take regardless of the size of the slot assigned to it.
            Boxes always aim to take their default size.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DefaultHeight">
            <summary>
            Gets the default height of the element. (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
            <remarks>
            The value of this property is automatically computed during the measure pass.
            It represents the height that this box wants to take regardless of the size of the slot assigned to it.
            Boxes always aim to take their default size.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DefaultSize">
            <summary>
            A shortcut property that gets the default size of the element (DefaultWidth and DefaultHeight).
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DesiredWidth">
            <summary>
            Gets the desired width of the element (in parent coordinates).
            Automatically updated by Nevron.
            </summary>
            <remarks>
            The value of this property is automatically computed during the measure pass.
            It represents the width that this box wants to take inside its parent.
            Parents try to place boxes in slots that are large enough to encompass their desired size.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DesiredHeight">
            <summary>
            Gets the desired height of the element. (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
            <remarks>
            The value of this property is automatically computed during the measure pass.
            It represents the height that this box wants to take inside its parent.
            Parents try to place boxes in slots that are large enough to encompass their desired size.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.DesiredSize">
            <summary>
            A shortcut property that gets the desired size of the element (DesiredWidth and DesiredHeight).
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Width">
            <summary>
            Gets the Width of the box (in local coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Height">
            <summary>
            Gets the Height of the element (in local coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Size">
            <summary>
            Gets or set the size of the box (Width, Height) (in local coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Location">
            <summary>
            Gets or sets the location of the box (X,Y) coordinates of left-top corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.X">
            <summary>
            Gets or sets the X coordinate of the element box left-top corner 
            in respect to the parent coordinate system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Y">
            <summary>
            Gets or sets the Y coordinate of the element box left-top corner
            in respect to the parent coordinate system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Bounds">
            <summary>
            Gets the bounds of the box (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.BorderThickness">
            <summary>
            Gets or sets the thickness of the box border sides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Padding">
            <summary>
            Gets or sets the padding applied to the box content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.BackgroundFill">
            <summary>
            Gets or sets the background
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.TextFill">
            <summary>
            Gets or sets the text fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Border">
            <summary>
            Gets or sets the border
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.FocusDecorator">
            <summary>
            Gets or sets the focus decorator.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBoxElement.Font">
            <summary>
            Gets or sets the font style
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBoxElement.NBoxElementDesigner">
            <summary>
            Represents a designer for box elements.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSimpleDesigner">
            <summary>
            A designer that does not show advanced property editing commands.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSimpleDesigner.ShowAdvancedPropertyEditingCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty)">
            <summary>
            Overriden to return false.
            </summary>
            <param name="targetNode"></param>
            <param name="targetProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxElement.NBoxElementDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.GetPaintCacheMode">
            <summary>
            Gets the mode in which this displayable node can cache its painting.
            Overriden to return ENPaintCacheMode.Auto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.CanClip">
            <summary>
            Gets whether the node can provide a clip area for itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.GetChildrenClip">
            <summary>
            Creates the clip region of the visual children (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the node by region
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.GetMargins">
            <summary>
            Gets the margins of the element.
            This implementation returns the computed value of the Margins property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.IsCollapsed">
            <summary>
            Overriden to return true, if the Visibility property is equal to ENVisibility.Collapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the context needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test region for this widget. 
            The returned region is used in both point and region widget hit tests.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.OnVisibilityChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Visibility property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.MeasureChildrenMaxWidth(System.Boolean)">
            <summary>
            Gets the max measure width of all widget children of this box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.MeasureChildrenMaxHeight(System.Boolean)">
            <summary>
            Gets the max measure height of all widget children of this box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.MeasureChildrenWidthSum(System.Boolean)">
            <summary>
            Gets the sum of the measure width of all widget children of this box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.MeasureChildrenHeightSum(System.Boolean)">
            <summary>
            Gets the sum of the measure height of all widget children of this box
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.NWidgetSchema">
            <summary>
            Schema associated with NWidget
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.VisibilityProperty">
            <summary>
            Reference to the Visibility property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.HorizontalPlacementProperty">
            <summary>
            Reference to the HorizontalPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.VerticalPlacementProperty">
            <summary>
            Reference to the VerticalPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.MarginsProperty">
            <summary>
            Reference to the Margins property
            </summary>	
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.ArrangeSlotProperty">
            <summary>
            Reference to the ArrangeSlot property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.FromObject(System.Object)">
            <summary>
            Creates or gets the widget from an object.
            You can pass the following object types to this method:
            <para>
            1. NWidget - returns the NWidget itself.
            </para>
            <para>
            2. NImage - returns a NImageBox that contains the NImage.
            </para>
            <para>
            3. Any other non null object - returns a NLabel the text of which is the text representation of the object.
            </para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NWidget.InvalidateArrangeHint_SlotArrangeOnly">
            <summary>
            ArrangeHint, that can be passed to NWidget instances and hints them to invalidate only the arrangement of the box inside the arrange slot.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWidget.Visibility">
            <summary>
            Gets or sets the widget visibility.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWidget.Margins">
            <summary>
            Gets or sets the margins.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWidget.HorizontalPlacement">
            <summary>
            Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.
            </summary>
            <remarks>
            If any of the the ArrangeSlot values is NaN, the arrange slot layout is not performed and the widget uses the X, Y, Width and Height coordinates.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NWidget.VerticalPlacement">
            <summary>
            Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.
            </summary>
            <remarks>
            If any of the the ArrangeSlot values is NaN, the arrange slot layout is not performed and the widget uses the X, Y, Width and Height coordinates.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NWidget.ArrangeSlot">
            <summary>
            Gets or sets the arrange slot of the widget (in parent coordinates).
            </summary>
            <remarks>
            This property is automatically set by some parent containers (such as NStackPanel, NDockPanel etc.). By default it is set to NaN.
            If any of the the ArrangeSlot values is NaN, the arrange slot layout is not performed and the widget uses the X, Y, Width and Height coordinates.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NWidget.NWidgetDesigner">
            <summary>
            Represents a designer for widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWidget.NWidgetDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentHolder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentHolder.#ctor(System.Object)">
            <summary>
            Creates a content holder and sets it content to a widget created created from the given object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentHolder.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentHolder.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NContentHolder.NContentHolderSchema">
            <summary>
            Schema associated with NContentHolder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentHolder.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentHolder.Content">
            <summary>
            Gets or sets the content widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.DefaultDisplayOrder">
            <summary>
            Defines the default display order, which is 1000000
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.InitializeCore">
            <summary>
            Initializes the editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetDeclarationOrder">
            <summary>
            Gets the declaration order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.CreateControl">
            <summary>
            Must override to create the UI control of the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.CreatePreviewFactory">
            <summary>
            Creates the preview factory for the edited node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.AttachToEditedNode">
            <summary>
            Hooks the editor to the current edited node's events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.DetachFromEditedNode">
            <summary>
            Unhooks the editor from the current edited node's events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when when the edited node has changed. Raises the UpdatePreview event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetDefaultTitle">
            <summary>
            Gets the default editor title
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetDefaultDisplayOrder">
            <summary>
            Gets the default display order of the editor.
            This implementation returns NEditor.DefaultDisplayOrder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetDefaultPrompt">
            <summary>
            Gets the default editor prompt
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.EmbedControl(Nevron.Nov.UI.NWidget)">
            <summary>
            Optionally embeds the UI control of the editor in a group box, 
            depending on the EmbedControl style setting.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.EmbedChildEditor(Nevron.Nov.Editors.NEditor)">
            <summary>
            Optionally embeds the specified child editor in a group box, 
            depending on the EmbedChildEditors style setting
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.AdornControl(Nevron.Nov.UI.NWidget)">
            <summary>
            Places the specified editor control in an optional adorner
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.OnUpdatePreview">
            <summary>
            Raises the UpdatePreview event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.OnInitialized">
            <summary>
            Called when the editor has been initialized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.UpdateEnabledAndVisibilityState(Nevron.Nov.FunctionResult{System.Boolean,Nevron.Nov.Dom.NNode},Nevron.Nov.FunctionResult{Nevron.Nov.UI.ENVisibility,Nevron.Nov.Dom.NNode})">
            <summary>
            Updates the Enabled and Visibility state of this editor.
            </summary>
            <param name="enabled"></param>
            <param name="visibility"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetEditedNodeAncestor``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditor.GetEditedNodeAncestors``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.NEditorSchema">
            <summary>
            Schema associated with NEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.UpdatePreviewEvent">
            <summary>
            Raised when the editor preview must be updated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.TitleProperty">
            <summary>
            Reference to the Title property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.DisplayOrderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.PromptProperty">
            <summary>
            Reference to the Prompt property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.ControlEmbeddingProperty">
            <summary>
            Reference to the ControlEmbedding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.ChildEditorsEmbeddingProperty">
            <summary>
            Reference to the ChildEditorsEmbedding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditor.ShowPreviewProperty">
            <summary>
            Reference to the ShowPreview property
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NEditor.UpdatePreview">
            <summary>
            Occurs when the editor preview must be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.EditedNode">
            <summary>
            Gets the edited node
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.EditedNodeDesigner">
            <summary>
            Gets the edited node designer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.OwnerEditor">
            <summary>
            Gets the editor in which this editor resides. Returns null, if the editor is not owned inside an editor. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.RootEditor">
            <summary>
            Gets the root editor. Returns this editor, if it is the root editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.LockEditedNodeUpdate">
            <summary>
            Locks/unlocks the update of the edited node from the editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.LockEditorUpdate">
            <summary>
            Locks/ulocks the update of the editor from the edited node
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.Control">
            <summary>
            Gets the control maintained by the editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.PreviewFactory">
            <summary>
            Gets the preview factory
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.Title">
            <summary>
            Gets or sets the editor title
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.Prompt">
            <summary>
            Gets or sets the editor prompt
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.DisplayOrder">
            <summary>
            Gets or sets the display order of the editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.ShowPreview">
            <summary>
            Gets or sets whether the editor preview must be displayed in the editor window
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing between editor elements
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.VerticalSpacing">
            <summary>
            Gets or sets the vertical spacing between editor elements
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.ControlEmbedding">
            <summary>
            Gets or sets the way in which the editor embeds in control element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditor.ChildEditorsEmbedding">
            <summary>
            Gets or sets whether the child editors must be embedded in a group boxes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.Compare(Nevron.Nov.Editors.NEditor,Nevron.Nov.Editors.NEditor)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.Initialize(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NDesigner,System.String,Nevron.Nov.Editors.NEditor)">
            <summary>
            Initializes the property category editor.
            </summary>
            <param name="editedNode"></param>
            <param name="editedNodeDesigner"></param>
            <param name="editedCategory"></param>
            <param name="ownerEditor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.GetDefaultTitle">
            <summary>
            Gets the default editor title
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.GetDefaultDisplayOrder">
            <summary>
            Overriden to return the designer defined display order for the edited category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.CreateControl">
            <summary>
            Overriden to create the editors container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when when any aspect of the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.OnInitialized">
            <summary>
            Called when the editor has been initialized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.CreateChildEditors">
            <summary>
            Creates a list of the child editors, which must be embedded in this category editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Must override to create the widget, that contains the specified child editors
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NCategoryEditor.NCategoryEditorSchema">
            <summary>
            Schema associated with NCategoryEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NCategoryEditor.ChildEditorsComparerProperty">
            <summary>
            Reference to the child editors comparer property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NCategoryEditor.EditedCategory">
            <summary>
            Gets the edited property category
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NCategoryEditor.ChildEditorsComparer">
            <summary>
            Gets or sets the child editors comparer, 
            which defines the order of the property and/or subcategory editors inside this category editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsCategoryEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Overriden to create a labeled margins drop down or a margins edit widget.
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.NMarginsCategoryEditorSchema">
            <summary>
            Schema associated with NMarginsCategoryEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.MarginsTypeProperty">
            <summary>
            Reference to the MarginsType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.EmbeddedProperty">
            <summary>
            Reference to the Embedded property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.EmbedInGroupBoxTemplate">
            <summary>
            A margins category editor embedded in a group box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.MarginsTemplate">
            <summary>
            The margins template.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.PaddingTemplate">
            <summary>
            The padding template.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsCategoryEditor.BorderThicknessTemplate">
            <summary>
            The border thickness template.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsCategoryEditor.MarginsType">
            <summary>
            Gets or sets the value of the MarginsType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsCategoryEditor.Embedded">
            <summary>
            Gets or sets whether this category editor should be embedded or shown in a drop down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorDeclarationOrderComparer">
            <summary>
            An editor comparer that compares the editors by their GetDeclarationOrder().
            By default only property editors have a declaration order, that is the order
            in which they have been added to the node schema - i.e. properties defined
            in base schemas appear first.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorDeclarationOrderComparer.Compare(Nevron.Nov.Editors.NEditor,Nevron.Nov.Editors.NEditor)">
            <summary>
            Compares editor a and by their GetDeclarationOrder() value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorDeclarationOrderComparer.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorDisplayOrderComparer">
            <summary>
            An editor comparer that compares the editors by their DisplayOrder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorDisplayOrderComparer.Compare(Nevron.Nov.Editors.NEditor,Nevron.Nov.Editors.NEditor)">
            <summary>
            Compares editor a and b by their DisplayOrder.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorDisplayOrderComparer.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorTitleComparer">
            <summary>
            An editor comparer that compares the editors according to their title.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTitleComparer.Compare(Nevron.Nov.Editors.NEditor,Nevron.Nov.Editors.NEditor)">
            <summary>
            Compares a.Title and b.Title lexically.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorTitleComparer.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTopLevelWindow">
            <summary>
            Represents a top-level window, that can be opened in a top-most window fashion.
            The native window that is created is dependant on the integration platform.
            Top-level windows are used when you want to display top-most or popup content.
            </summary>
            <remarks>
            Each top-level window raises the following events, that represent its' native peer lifetime:
            <list type="bullet">
            <item>
            	<term>Opened - raised prior to the window being shown.</term>
            </item>
            <item>
            	<term>Activated - raised after the window has been activated.</term>
            </item>
            <item>
            	<term>Deactivated - raised when an activate window becomes inactive.</term>
            </item>
            <item>
            	<term>Closing - raised before the window is closed (cancelable)</term>
            </item>
            <item>
            	<term>Closed - raised when the window has been closed</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NWindow">
            <summary>
            Represents an integration surface with the native presentation layer of a specific enviroment.
            Serves as base class for child and top-level windows.
            Each window (child or top-level) can have other top-level windows, that consider the window as their owner.
            The content of a window is represented by a Widget, that is assigned by the Content property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INPopupDirectionProvider">
            <summary>
            Implemented by elements that can provider a default popup window direction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INPopupDirectionProvider.GetDefaultPopupDirection">
            <summary>
            Gets the default direction of the popups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetDefaultPopupDirection">
            <summary>
            Gets the default direction of the popups. This implementation returns TopToBottom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.Invalidate(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Invalidates the specified area (in window coordinates). 
            The next time the peer paints the window, the invalidated area will be repainted.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.Invalidate(Nevron.Nov.Dom.NVisual,Nevron.Nov.Dom.ENVisualInvalidationReason)">
            <summary>
            Called by visuals that render on this window, when they want to invalidate the window area they affect on the window surface.
            The next time the peer paints the window, the invalidated area will be repainted.
            </summary>
            <param name="visual"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.RequestRepaint">
            <summary>
            Requests a repaint of the currently accumulated invalid areas. 
            Automatically called by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetDescendantWindows(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Gets the descendant top-level windows that satisfy the specified filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.HasOpenedDescendantWindows">
            <summary>
            Determines whether the window has any opened descendant popup windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.HasActiveDescendantWindows">
            <summary>
            Determines whether the window has any active descentant popup windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.CloseOwnedTopLevelWindows">
            <summary>
            Closes all top-level windows that are owned by this window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.CanClip">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetClip">
            <summary>
            Overriden to return the window local bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.CanTransform">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetTransform">
            <summary>
            Overriden to return the identity matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.TryScreenToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Given a point in screen coordinates tries to convert it to local coordinates
            </summary>
            <param name="screen"></param>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.TryLocalToScreen(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Given a point in local coordinates tries to convert it to screen coordinates
            </summary>
            <param name="screen"></param>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.TryGetScreenBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the screen bounds of this element
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to add support for tab navigation.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.PerformTabNavigation">
            <summary>
            Performs the Tab navigation on the window content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.TryExecuteShortcut(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Tries to execute a shortcut command 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetCommandTarget">
            <summary>
            Gets the command target 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content element
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content element.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <remarks>
            This implementation paints the box background.
            Note that unlike normal boxes, which render the border in the background, windows render the border in the foreground.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the foreground of the box, which is performed after the custom painting in OnPostPaint
            </summary>
            <remarks>
            This implementation renders the focus decorator and the border.
            Note that unlike normal boxes, which render the border in the background, windows render the border in the foreground.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.OnPeerCreated">
            <summary>
            Called when the native window peer of this window was created.
            Raises the PeerCreated event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.SuspendPeerBoundsUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.ResumePeerBoundsUpdate(System.Boolean)">
            <summary>
            
            </summary>
            <param name="updateIfRequested"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.UpdatePeerBounds">
            <summary>
            Updates the bounds of the peer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.NWindowSchema">
            <summary>
            Schema associated with NWindow
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.PeerCreatedEvent">
            <summary>
            Reference to the peer created event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.PeerPaintedEvent">
            <summary>
            Reference to the peer painted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.WindowsChild">
            <summary>
            Reference to the TopLevelWindows child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.PreviewLayerChild">
            <summary>
            Reference to the PreviewLayer child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.UsePaintCacheProperty">
            <summary>
            Reference to the AllowPaintCache property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindow.BackColorProperty">
            <summary>
            Reference to the BackColor property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetFocusedWindow">
            <summary>
            Gets the currently focused window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindow.GetFocusedWindowIfNull(Nevron.Nov.UI.NWindow)">
            <summary>
            Returns the given window if not null or the currently focused window if the given one is null.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="E:Nevron.Nov.UI.NWindow.PeerCreated">
            <summary>
            Occurs when the peer for this window was created.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NWindow.PeerPainted">
            <summary>
            Occurs when the peer of this window was painted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.Content">
            <summary>
            Gets or sets the widget that represents the window content
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.PreviewLayer">
            <summary>
            Gets or sets the layer that displays content on top of the window content
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.Windows">
            <summary>
            Gets the top-level windows of this window
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.UsePaintCache">
            <summary>
            Gets or sets whether this window should use paint caching, when the integration platform provides such.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.BackColor">
            <summary>
            Gets or sets the back color of the window.
            It is used to fill the entire Window area and is always consumed as an opaque color.
            This means that currently NOV does not support transparent windows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.CurDisplayVersion">
            <summary>
            Gets the display stamp that was associated with the last frame.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NWindow.DisplayWindow">
            <summary>
            Gets the owner display node. Overriden to return this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.SetupApplicationWindow(System.String)">
            <summary>
            Helper method, that setups the properties typically associated with application windows.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.SetupDialogWindow(System.String,System.Boolean)">
            <summary>
            Helper method, that setups the properties typically associated with dialog windows.
            </summary>
            <param name="title"></param>
            <param name="resizable"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.SetupPopupWindow(System.Boolean)">
            <summary>
            Helper method, that setups the properties typically associated with popup windows.
            </summary>
            <param name="resizable"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.IsAncestorWindowClosing">
            <summary>
            Determines whether any of the window ancestor popup is currently in a closing procedure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Open">
            <summary>
            Opens the window. 
            </summary>
            <returns>true if the window is opened</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Close">
            <summary>
            Closes the window. 
            </summary>
            <returns>true if the window is closed</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Activate">
            <summary>
            Activates the window. 
            </summary>
            <remarks>true if the window is activated</remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Minimize">
            <summary>
            Minimizes the window.
            Has no effect if the window is not opened, or platform does not support minimization
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Maximize">
            <summary>
            Maximizes the window.
            Has no effect if the window is not opened, or platform does not support maximization.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.Restore">
            <summary>
            Restores the window to its normal size.
            Has no effect if the window is not opened, or platform does not support restore.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.PositionCenterInScreen">
            <summary>
            Centers the window in the screen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.PositionCenterInWorkingArea">
            <summary>
            Centers the window in the desktop working area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.PositionCenterInOwner">
            <summary>
            Centers the window in the owner window screen bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.GetMargins">
            <summary>
            Gets the margins of the element.
            This implementation returns the margins of the frame, which is caclulated to include the TitleBar and the frame border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.MeasureContent(System.Boolean)">
            <summary>
            Measures the window content and the title bar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the window content and the title bar.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Occurs when a keyboard key is pushed down.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the arrange of element arrange parent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.InvalidateParentDisplay">
            <summary>
            Invalidates the display of element display parent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the foreground of the box, which is performed after the custom painting in OnPostPaint
            </summary>
            <remarks>
            This implementation renders the focus decorator, the window border and the frame border.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.CreateFrameBorderWall">
            <summary>
            Creates a frame border wall
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnQueryManualStartPosition">
            <summary>
            Raises the QueryManualStartPosition event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnOpened">
            <summary>
            Raises the Opened event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnActivated">
            <summary>
            Raises the Activated event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnDeactivated">
            <summary>
            Raises the Deactivated event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnClosing">
            <summary>
            Raises the Closing event.
            </summary>
            <returns>true if the window can be closed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnClosed">
            <summary>
            Raises the Closed event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnTitleBarButtonClick(Nevron.Nov.UI.NTitleBarButton)">
            <summary>
            Called when a title bar button has been clicked. 
            This implementation performs the respective button action.
            </summary>
            <param name="titleBarButton"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnTitleBarHeaderLeftMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse left button is down on the title bar header.
            This implementation starts the window dragging.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.OnTitleBarHeaderDoubleClick(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse left button is double clicked on the title bar header.
            This implementation Restores the window, if the window is maximized. Otherwise it Maximizes it.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.UpdateTitleBar">
            <summary>
            Updates the title bar of this window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.GetWindowPeerClip">
            <summary>
            Gets the window peer clip to use. 
            This implementation returns a window peer clip from the current frame border outer outline.
            No clip is returned in case the FrameBorder is null, or the frame border has no outer corner rounding (e.g. is outer rectangular)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.UpdatePeerBounds">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.MeasureWindowContent(System.Boolean)">
            <summary>
            Measures the window content only (i.e. without the title bar).
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindow.ArrangeWindowContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the window content only (i.e. without the title bar).
            </summary>
            <param name="ca"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.NTopLevelWindowSchema">
            <summary>
            Schema associated with NTopLevelWindow
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.TitleBarChild">
            <summary>
            Reference to the TitleBar child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsOpenedProperty">
            <summary>
            Reference to the Opened property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsActiveProperty">
            <summary>
            Reference to the IsActive property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsClosingProperty">
            <summary>
            Reference to the IsClosing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsMinimizedProperty">
            <summary>
            Reference to the IsMinimized property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsMaximizedProperty">
            <summary>
            Reference to the IsMaximized property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsResizedProperty">
            <summary>
            Reference to the IsResized property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsDraggedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.StartPositionProperty">
            <summary>
            Reference to the StartPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.TitleProperty">
            <summary>
            Reference to the Title property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ShowInTaskbarProperty">
            <summary>
            Reference to the ShowInTaskbar property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ResizeFrameThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ResizeCornerSizeProperty">
            <summary>
            Reference to the ResizeCornerSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.FrameBorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.FrameBorderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ModalProperty">
            <summary>
            Reference to the Modal property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ActivateOwnerOnCloseProperty">
            <summary>
            Reference to the ActivateOwnerOnClose property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ActivateOnOpenProperty">
            <summary>
            Reference to the ActivateOnOpen property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ActivateOwnerFrameOnActivateProperty">
            <summary>
            Reference to the MimicActiveOwner property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.IsFrameActiveProperty">
            <summary>
            Reference to the MimicActive property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ResultProperty">
            <summary>
            Reference to the Result property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.RemoveFromParentOnCloseProperty">
            <summary>
            Reference to the RemoveFromParentOnClose property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.CloseOnEscapeProperty">
            <summary>
            Reference to the CloseOnEscape property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ShowControlBoxProperty">
            <summary>
            Reference to the HasControlBox property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ShowTitleBarProperty">
            <summary>
            Reference to the HasControlBox property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.AllowXResizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.AllowYResizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.AllowMinimizeProperty">
            <summary>
            Reference to the AllowMinimize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.AllowMaximizeProperty">
            <summary>
            Reference to the AllowMaximize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.AllowCloseProperty">
            <summary>
            Reference to the AllowClose property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.OpenedEvent">
            <summary>
            Reference to the Opened event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ActivatedEvent">
            <summary>
            Reference to the Activated event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.DeactivatedEvent">
            <summary>
            Reference to the Deactivated event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ClosingEvent">
            <summary>
            Reference to the Closing event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.ClosedEvent">
            <summary>
            Reference to the Closed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindow.QueryManualStartPositionEvent">
            <summary>
            Reference to the QueryManualStartPosition event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.Opened">
            <summary>
            Occurs when the window has been opened and is about to be shown.
            Use this event to initialize the window content.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.Closing">
            <summary>
            Occurs when the window is about to be closed. 
            This is a cancelable event. Canceling this event, prevents the window from closing.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.Closed">
            <summary>
            Occurs when the window has been closed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.QueryManualStartPosition">
            <summary>
            Occurs when the window has been opened and the StartPosition has been set to Manual. 
            The handler is resposible for positioning the window.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.Activated">
            <summary>
            Occurs when the window is shown and has been activated.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTopLevelWindow.Deactivated">
            <summary>
            Occurs when the window is shown and has been deactivated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.X">
            <summary>
            Gets the X coordinate of the element box left-top corner 
            in respect to the parent coordinate system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Y">
            <summary>
            Gets or sets the Y coordinate of the element box left-top corner
            in respect to the parent coordinate system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Width">
            <summary>
            Gets or sets the Width of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Height">
            <summary>
            Gets or sets the Height of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Location">
            <summary>
            Gets or sets the window location
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Size">
            <summary>
            Gets or sets the window size
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Bounds">
            <summary>
            Gets or sets the bounds of the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.TitleBar">
            <summary>
            Gets or sets the title bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsOpened">
            <summary>
            Gets whether the popup window is opened or not.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsActive">
            <summary>
            Gets whether the popup window is currently active.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsClosing">
            <summary>
            Gets whether the window is currently in an unstoppable closing procedure.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsMinimized">
            <summary>
            Gets whether the window is currently minimized.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsMaximized">
            <summary>
            Gets whether the window is currently maximized.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsResized">
            <summary>
            Gets whether the window is currently being resized.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsDragged">
            <summary>
            Gets whether the window is currently being dragged.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.IsFrameActive">
            <summary>
            Gets whether the window frame should be displayed as active.
            This value is automatically updated by child windows, which have their MimicActiveOwner property set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.StartPosition">
            <summary>
            Gets or sets the window start positioning mode.
            When set to Manual the window will raise the QueryManualStartPosition event prior to being opened.
            Has effect prior to opening the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Modal">
            <summary>
            Gets or sets whether the window must be opend in modal fashion.
            When set to true, after the window is opened it becomes the one and only enabled window in the application.
            The only other windows that can possibly be activated are children or descendant windows of this window.
            Has effect prior to opening the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ResizeFrameThickness">
            <summary>
            Gets or sets the thickness of the window resize frame (the frame which the user can use to interactively resize the window). 
            Typically set through styling.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ResizeCornerSize">
            <summary>
            Gets or sets the thickness of the resize frame, through which the user can visually resize the window.
            Typically set through styling.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ShowInTaskbar">
            <summary>
            Gets or sets whether the window is shown in the taskbar or not.
            Applicable only for enviroments with a taskbar (like Windows for example).
            Has effect prior to opening the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ActivateOnOpen">
            <summary>
            Gets or sets whether the window must be automatically activated when opened. 
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ActivateOwnerFrameOnActivate">
            <summary>
            Gets or sets whether the window must automatically activate the frame of its owner window when activated.
            By defualt set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ActivateOwnerOnClose">
            <summary>
            Gets or sets whether the owner window must be activated, when this popup window is closed.
            Has effect only if the window is the active window, when closed.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.RemoveFromParentOnClose">
            <summary>
            Gets or sets whether the window is automatically removed from its parent node, 
            when the window is closed. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Title">
            <summary>
            Gets or sets the window title string.
            This property has no effect if the <see cref="P:Nevron.Nov.UI.NTopLevelWindow.ShowTitleBar"/> is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ShowControlBox">
            <summary>
            Gets or sets whether the window has a control box. 
            The window control box consist of a Close box and optional Minimize and Maximize boxes (buttons).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.ShowTitleBar">
            <summary>
            Gets or sets whether the title bar needs to be shown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.Result">
            <summary>
            Gets or sets the result of the user interaction with the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.CloseOnEscape">
            <summary>
            Determines whether the window should close if the user presses the "Escape" keyboard key.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.AllowXResize">
            <summary>
            Gets or sets whether the window can be resized in X dimenion.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.AllowYResize">
            <summary>
            Gets or sets whether the window can be resized in Y dimenion.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.AllowMinimize">
            <summary>
            Gets or sets whether the Minimize operation is allowed from the user interface of the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.AllowMaximize">
            <summary>
            Gets or sets whether the Maximize/Restore operation is allowed from the user interface of the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.AllowClose">
            <summary>
            Gets or sets whether the Close operation is allowed from the user interface of the window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.FrameBorderThickness">
            <summary>
            Gets or sets the frame (other) border thickness
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.FrameBorder">
            <summary>
            Gets or sets the frame (other) border
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.OwnerTopLevelWindow">
            <summary>
            Gets the top level window that owns this top-level window.
            Returns null if the window is owned by a child window or is not owned at all.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTopLevelWindow.OwnerChildWindow">
            <summary>
            Gets the child window that owns this top-level window.
            Returns null if the window is owned by a top-level window or is not owned at all.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NToolboxItemVerb">
            <summary>
            Represents a toolbox item verb, which creates a widget for user input at design time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerb.#ctor(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="createEditorMethod"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerb.#ctor(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},Nevron.Nov.Function{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="createEditorMethod"></param>
            <param name="setValueMethod"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerb.CreateEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a widget for editing some aspects or the whole instance of the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerb.SetValue(Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode)">
            <summary>
            Applies the edited value in the given editor to the specified node.
            </summary>
            <param name="editor"></param>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.Nov.Editors.NToolboxItemVerb.Name">
            <summary>
            Gets the name of the verb.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NToolboxItemVerb.Weight">
            <summary>
            Gets the weight of the verb. Verbs with larger weight sink towards the bottom
            of the list shown by the designer.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NToolboxItemMetaUnit">
            <summary>
            A meta unit applicable to schemas, which indicates whether a widget should appear
            in the toolbox and defines its toolbox icon, description and verbs (a.k.a. smart
            tags in WinForms).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NMetaUnit">
            <summary>
            Serves as base class for all units of meta data, 
            which can be stored in metadata containers (schemas, properties and children).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.GetKey">
            <summary>
            Gets the meta unit key
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.GetAppliance">
            <summary>
            Gets the meta unit appliance mask. 
            This implementation returns ENMetaUnitAppliance.All - that is by default a meta unit can be applied to schemas, properties and child slots.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.OnApplying(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            Called before the unit is applied to the specified container, 
            which can be an object of the following types: NSchema, NProperty and NChild.
            </summary>
            <param name="schema"></param>
            <param name="container"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.OnApplied(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            Called after the unit is applied to the specified container,
            which can be an object of the following types: NSchema, NProperty and NChild.
            </summary>
            <param name="schema"></param>
            <param name="container"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NMetaUnit.GetKeyByType(System.Type)">
            <summary>
            Registers a new metadata with the specified name and returns a key, 
            which can be used to retreive the metadata from the a metadata container.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.#ctor">
            <summary>
            Creates a toolbox item meta unit for a widget, which should not be added to the toolbox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a toolbox item meta unit for a widget, which should be added to the toolbox.
            </summary>
            <param name="category"></param>
            <param name="iconName"></param>
            <param name="description"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.GetAppliance">
            <summary>
            Gets the meta unit appliance mask.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.AddVerb(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode})">
            <summary>
            Adds the given verb with weight equal to the meta unit's owner schema
            depth from root.
            </summary>
            <param name="name"></param>
            <param name="createWidgetMethod"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.AddVerb(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},Nevron.Nov.Function{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode})">
            <summary>
            Adds the given verb with weight equal to the meta unit's owner schema
            depth from root.
            </summary>
            <param name="name"></param>
            <param name="createEditorMethod"></param>
            <param name="setValueMethod"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.AddVerb(System.String,Nevron.Nov.FunctionResult{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},Nevron.Nov.Function{Nevron.Nov.UI.NWidget,Nevron.Nov.Dom.NNode},System.Int32)">
            <summary>
            Adds the given verb with the given weight. Verbs with larger weight sink
            towards the bottom of the list shown by the designer.
            </summary>
            <param name="name"></param>
            <param name="createEditorMethod"></param>
            <param name="setValueMethod"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.RemoveInheritedVerb(System.String)">
            <summary>
            Removes the given inherited verb from this toolbox item meta unit.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.IsRemovedInheritedVerb(System.String)">
            <summary>
            Checks whether the verb with the given name is a removed inherited verb for this meta unit.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.TryGetVerb(System.String,Nevron.Nov.Editors.NToolboxItemVerb@)">
            <summary>
            Tries to get the action of the verb with the given name. If the name is not
            found in this toolbox meta units it's searched for in the base schemas.
            </summary>
            <param name="name"></param>
            <param name="verb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.GetVerbsIterator">
            <summary>
            Gets an iterator, which iterates through the verbs of this toolbox meta unit and the
            verbs in the toolbox meta units of all base schemas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemMetaUnit.OnApplied(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            Called after the unit is applied to the specified container,
            which can be an object of the following types: NSchema, NProperty and NChild.
            </summary>
            <param name="schema"></param>
            <param name="container"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NToolboxItemMetaUnit.Category">
            <summary>
            The category of the widget, for example: "UI", "Chart", "Diagram", etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NToolboxItemMetaUnit.IconName">
            <summary>
            The icon name of the toolbox item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NToolboxItemMetaUnit.Description">
            <summary>
            The description of the toolbox item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NToolboxItemMetaUnit.Platforms">
            <summary>
            The platforms in which the owner of this meta unit should integrate.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NToolboxItemVerbIterator">
            <summary>
            Iterator that iterates through all verbs of a toolbox item meta unit and
            the toolbox item meta units of the base schemas.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerbIterator.#ctor(Nevron.Nov.Editors.NToolboxItemMetaUnit)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="metaUnit"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerbIterator.MoveNext">
            <summary>
            Moves to the next verb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NToolboxItemVerbIterator.Reset">
            <summary>
            Resets the iterator.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NToolboxItemVerbIterator.Current">
            <summary>
            Gets the current verb.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NGeneralEditor">
            <summary>
            Represents an editor that edits a general node aspects. Serves as base class for all editors that can be initialized only by an edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGeneralEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGeneralEditor.Initialize(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NDesigner,Nevron.Nov.Editors.NEditor)">
            <summary>
            Initializes a general editor
            </summary>
            <param name="editedNode"></param>
            <param name="editedNodeDesigner"></param>
            <param name="ownerEditor"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NGeneralEditor.NGeneralEditorSchema">
            <summary>
            Schema associated with NGeneralEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPreviewFactory">
            <summary>
            The NPreviewFactory class serves as base class for all preview factories
            Preview factories are resposible for generating previews for objects. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPreviewFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPreviewFactory.CreatePreview(Nevron.Nov.Graphics.NSize)">
            <summary>
            Must override to creates a preview widget with the specified size.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPreviewFactory.UpdatePreview(Nevron.Nov.UI.NPreview,Nevron.Nov.UI.NPreview@)">
            <summary>
            Updates the preview shown by the given preview widget. Returns true if
            the current preview widget should be replaced with the one returned in
            the <paramref name="newPreviewWidget"/> out parameter.
            </summary>
            <param name="previewWidget"></param>
            <param name="newPreviewWidget"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NPreviewFactory.PreviewedValue">
            <summary>
            Gets or sets the object for which the preview must be generated.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSymbolPreview">
            <summary>
            A preview widget that renders a specific symbol.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPreview">
            <summary>
            Base class for all widgets that show a preview of a given object.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPreviewBase">
            <summary>
            Base class for preview widgets and preview widget hosts. 
            Styling and interactivity is disabled in this class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewBase.CanAnchorHatches">
            <summary>
            Determines whether hatch transformations can be anchored to this node coordinate system.
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewBase.CanAnchorShadows">
            <summary>
            Determines whether shadow transformations can be anchored to this node coordinate system.
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NPreviewBase.NPreviewBaseSchema">
            <summary>
            Schema associated with NPreviewBase.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreview.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Overriden to shallow copy (i.e. copy only the reference) the previewed object.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPreview.OnPreviewedObjectChanged">
            <summary>
            Called when the previewed value has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPreview.NPreviewSchema">
            <summary>
            Schema associated with NPreview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPreview.PreviewedObject">
            <summary>
            Gets or sets the object this widget should display a preview of.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSymbolPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSymbolPreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSymbolPreview.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to render the preview.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NSymbolPreview.NSymbolPreviewSchema">
            <summary>
            Schema associated with NSymbolPreview.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSymbolPreview.SymbolProperty">
            <summary>
            Reference to the Symbol property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSymbolPreview.Symbol">
            <summary>
            Gets or sets the symbol displayed by the preview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDomArrayPropertyEditor`1">
            <summary>
            Edits a DOM array property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPairBoxPropertyEditor">
            <summary>
            The NPairBoxPropertyEditor class is a property editor, 
            which serves as base class for all property editors, which display 
            a label next to the edited property value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPropertyEditor">
            <summary>
            An editor, which serves as base class for all property editors.
            Property editors manage widgets, which can display and edit the local value of a single node property, which belongs to schema of the edited node. 
            The edited schema property is specified by the EditedProperty.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.Initialize(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NDesigner,Nevron.Nov.Dom.NProperty,Nevron.Nov.Editors.NEditor)">
            <summary>
            Initializes the property editor.
            </summary>
            <param name="editedNode"></param>
            <param name="editedNodeDesigner"></param>
            <param name="editedProperty"></param>
            <param name="ownerEditor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.GetDeclarationOrder">
            <summary>
            Overriden to return the DeclarationOrder of the EditedProperty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.GetEditedLocalValue">
            <summary>
            Gets the property value of the edited node property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.GetEditedLocalValue(System.Boolean@)">
            <summary>
            Gets the local value of the edited node property
            </summary>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.SetEditedLocalValue(System.Object)">
            <summary>
            Sets the property value of the edited node property
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.GetDefaultTitle">
            <summary>
            Gets the default editor title
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.GetDefaultDisplayOrder">
            <summary>
            Overriden to return the designer defined display order for the edited property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when when any aspect of the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnEditedLocalValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the local value of the edited node property has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnEditedExpressionChanged(Nevron.Nov.Dom.NExpressionChangeEventArgs)">
            <summary>
            Called when the expression associated with the edited property has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.AdornControl(Nevron.Nov.UI.NWidget)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnInitialized">
            <summary>
            Called when the editor has been initialized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.PopulateCommandsMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Called by the property editor drop down.
            </summary>
            <param name="dropDownMenu"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.NeedsExpressionOverlay">
            <summary>
            Determines whether the property editor needs an expression overlay
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.CreateExpressionOverlay(Nevron.Nov.Dom.NExpression)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.NeedsCommandsDropDown">
            <summary>
            Returns true if the editor needs a commands drop down
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.CreateCommandsDropDown">
            <summary>
            Creates the commands drop down
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.UpdateExpressionOverlay">
            <summary>
            Updates the expression overlay
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnClearValueMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user clicks on the "Clear Value" menu item that appears in the optional Drop Down menu.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditor.OnEditExpressionMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user clicks on the "Edit Expression" menu item that appears in the optional Drop Down menu.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NPropertyEditor.NPropertyEditorSchema">
            <summary>
            Schema associated with NPropertyEditor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPropertyEditor.EditedProperty">
            <summary>
            Gets the edited property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPairBoxPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPairBoxPropertyEditor.CreateControl">
            <summary>
            Overriden to create a pair box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPairBoxPropertyEditor.CreateValueControl">
            <summary>
            Must override to create the edit value element.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NPairBoxPropertyEditor.NPairBoxPropertyEditorSchema">
            <summary>
            Schema associated with NPairBoxPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NPairBoxPropertyEditor.ShowLabelProperty">
            <summary>
            Reference to the ShowLabel property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NPairBoxPropertyEditor.BoxesRelationProperty">
            <summary>
            Reference to the BoxesRelation property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPairBoxPropertyEditor.ValueControl">
            <summary>
            Gets the value control of the editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPairBoxPropertyEditor.ShowLabel">
            <summary>
            Gets or sets whether the label part of the editor show be displayed.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPairBoxPropertyEditor.BoxesRelation">
            <summary>
            Gets or sets the relation between the label and the value control in the pair box.
            By default set to ENPairBoxRelation.Box1BeforeBox2.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.CreateControl">
            <summary>
            Creates a pair box consisting of a label and a value control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.CreateValueControl">
            <summary>
            Creates the control, which should edit the property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.OnItemEdited(`0)">
            <summary>
            Called when an array item was edited.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.CreateItemControl(`0)">
            <summary>
            Creates a control, which should edit an array item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDomArrayPropertyEditor`1.NDomArrayPropertyEditorSchema">
            <summary>
            Schema associated with NDomArrayPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStringDomArrayPropertyEditor">
            <summary>
            A string DOM array property editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringDomArrayPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringDomArrayPropertyEditor.CreateItemControl(System.String)">
            <summary>
            Creates a control, which should edit an array item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringDomArrayPropertyEditor.NStringDomArrayPropertyEditorSchema">
            <summary>
            Schema associated with NStringDomArrayPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringDomArrayPropertyEditor.DefaultTemplate">
            <summary>
            The default string array property editor template.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringDomArrayPropertyEditor.EmbedInGroupBoxTemplate">
            <summary>
            Template for a string array property editor embedded in a group box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NBorderEditor">
            <summary>
            An editor that lets the user quickly edit the most important aspects of a border.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBorderEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBorderEditor.Focus">
            <summary>
            Overriden to set focus to the border style picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NBorderEditor.CreateControl">
            <summary>
            Creates the UI control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NBorderEditor.OnMoreOptionsButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user clicks the "More Options..." button.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NBorderEditor.NBorderEditorSchema">
            <summary>
            Schema associated with NBorderEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NBorderEditor.EditedBorderThicknessProperty">
            <summary>
            Reference to the EditedBorderThickness property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NBorderEditor.ControlPlacementProperty">
            <summary>
            Reference to the ControlPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NBorderEditor.HasMoreOptionsButtonProperty">
            <summary>
            Reference to the HasMoreOptionsButton property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NBorderEditor.DefaultTemplate">
            <summary>
            A border property editor template whose color and rounding settings are
            placed to the right of the border style picker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.EditedBorderThickness">
            <summary>
            Gets or sets the value of the EditedBorderThickness property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.ControlPlacement">
            <summary>
            Gets or sets the horizontal placement of this editor's value control.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.HasMoreOptionsButton">
            <summary>
            Gets or sets the value of the HasMoreOptionsButton property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.EditedBorderStyle">
            <summary>
            Gets the edited border style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.EditedBorderColor">
            <summary>
            Gets the edited border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBorderEditor.EditedBorderRounding">
            <summary>
            Gets the edited border corner rounding.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NCharPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of char type. 
            The value control is a text box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCharPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCharPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NCharPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create an abstract text box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NCharPropertyEditor.OnTextBoxTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the text of the editor text box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NCharPropertyEditor.NCharPropertyEditorSchema">
            <summary>
            Schema associated with NCharPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NCharPropertyEditor.TextBoxTemplate">
            <summary>
            An editor template, for a string property editor, which is displayed as a text box (the default).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDateTimePropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of type DateTime. 
            The value control is a date time box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the value control from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimePropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a date time box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimePropertyEditor.OnDateTimeBoxSelectedDateChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected date of the date time box has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.NDateTimePropertyEditorSchema">
            <summary>
            Schema associated with NDateTimePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.ModeProperty">
            <summary>
            Reference to the Mode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.FormatProperty">
            <summary>
            Reference to the Format property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.LongDateTemplate">
            <summary>
            A date time editor, which edits a date and the date is displayed using
            the long date format ("D").
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.ShortDateTemplate">
            <summary>
            A date time editor, which edits a date and the date is displayed using
            the short date format ("d").
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.TimeTemplate">
            <summary>
            A date time editor, which edits a time.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.LongDateLongTimeTemplate">
            <summary>
            A date time editor, which edits both date and time and the date and time
            are displayed using the long date and long time format ("F").
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.ShortDateLongTimeTemplate">
            <summary>
            A date time editor, which edits both date and time and the date and time
            are displayed in the date time box using the short date and time format ("G").
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimePropertyEditor.MonthAndYearTemplate">
            <summary>
            A date time editor, which edits a month and an year.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDateTimePropertyEditor.Mode">
            <summary>
            Gets/Sets the mode of the date time box value control.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDateTimePropertyEditor.Format">
            <summary>
            Gets/Sets the format of the date time box value control.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NTimeSpanHelpers">
            <summary>
            Contains helper methods for working with time span values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimeSpanHelpers.ToString(System.TimeSpan)">
            <summary>
            Converts the given time span to string, for example 2.10:15:20 gets converted
            to "2 days, 10 hours, 15 minutes and 20 seconds".
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentErrorEventArgs">
            <summary>
            Represents document file error event args
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NEventArgs">
            <summary>
            The NEventArgs class serves as base class for all DOM event arguments
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventArgs.Raise">
            <summary>
            Raises the event, causing the arguments to be dispatched to the event listeners attached to the TargetNode.
            If the event supports sinking or bubbling, the arguments will be dispatched to the sinking and attarget/bubbling event listeners attached along the event route.
            </summary>
            <remarks>
            By default the event route is the chain of nodes from the TargetNode to the TargetNode root node.
            Certain event arguments however may override the CreateRoute() method, to provide custom routing. 
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventArgs.StopPropagation">
            <summary>
            Prevents the calling of any other event handlers, during this event dispatching.
            Once it has been called, further calls to that method have no additional effect.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventArgs.CreateRoute">
            <summary>
            Creates the event route for this event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEventArgs.Event">
            <summary>
            Gets the DOM event, associated with the event arguments
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEventArgs.TargetNode">
            <summary>
            Used to indicate the target node, or in other words the node for which the event is raised.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEventArgs.CurrentTargetNode">
            <summary>
            Used to indicate the node whose event handlers are currently being invoked. 
            This is particularly useful during the sinking and bubbling phases. 
            The current target can be the target or a target ancestor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEventArgs.EventPhase">
            <summary>
            Used to indicate which phase of event flow is currently being accomplished
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEventArgs.Cancel">
            <summary>
            Raising the Cancel property is used to signify that the event is handled, 
            meaning any default action normally taken by the implementation as a result of the event must not occur.
            Once the Cancel property has been raised it will remain in effect throughout the remainder of the event's propagation.
            This property may be used during any stage of event flow.
            </summary>
            <remarks>
            The DOM allows you to raise the Cancel flag for all events, however that does not mean that you can cancel any default operation, 
            since it is up to the implementation to decide whether to honour the Cancel flag or not. 
            Most events defined by Nevron describe the Cancel meaning.
            <para>
            The context in which the event is raised also determines whether the operation can be canceled or not. 
            For example if you handle a property changing event and cancel it, the DOM will normally honour the Cancel flag and abort the property change procedure. 
            However this event handler may be called during a history undo process and the DOM in this case will not honour the Cancel flag.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentErrorEventArgs.#ctor(System.Exception,Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="exception"></param>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the errror
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NElementIdPropertyEditor">
            <summary>
            The property editor for the NElement.Id property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NElementIdPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NElementIdPropertyEditor.CreateValueControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NElementIdPropertyEditor.UpdateFromEditedNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NElementIdPropertyEditor.NElementIdPropertyEditorSchema">
            <summary>
            Schema associated with NElementIdPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NElementIdPropertyEditor.DefaultTemplate">
            <summary>
            Default editor template 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTimeSpanPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of type TimeSpan. 
            The value control is a time span box with a set of predefined time span values and an option
            to select a custom one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeSpanPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeSpanPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the value control from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeSpanPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeSpanPropertyEditor.PopulateTimeSpanBox(Nevron.Nov.UI.NTimeSpanBox)">
            <summary>
            Populates the time span box with predefined time span values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeSpanPropertyEditor.OnComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the SelectedIndex of the time span combo box has changed.
            The selected TimeSpan value can be obtained through the Tag property of
            the selected combo box item.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NTimeSpanPropertyEditor.NTimeSpanPropertyEditorSchema">
            <summary>
            Schema associated with NTimeSpanPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NOptionsPropertyEditor`1">
            <summary>
            A pair box property editor, which serves as base class for all editors that display a list of options from which the user can choose.
            Serves as base class for NEnumPropertyEditor and others.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.CreateValueControl">
            <summary>
            Overriden to create the enum edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.GetOptions">
            <summary>
            Must override to return the options available for the user to choose from.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.GetWidgetForOption(`0)">
            <summary>
            Must override to return the widget that represents the specified option in the UI.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.OnComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the combo box selected index has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.OnListBoxSelectedItemChanged(Nevron.Nov.UI.NSelectEventArgs{Nevron.Nov.UI.NListBoxItem})">
            <summary>
            Called when the list box selected item has changed
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NOptionsPropertyEditor`1.OnRadioGroupSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the radio group selected index has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NOptionsPropertyEditor`1.NOptionsPropertyEditorSchema">
            <summary>
            Schema associated with NOptionsPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NOptionsPropertyEditor`1.StyleProperty">
            <summary>
            Reference to the Style property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NOptionsPropertyEditor`1.Style">
            <summary>
            Gets or sets the style of the enum property editor. 
            It controls the type of value control that the editor must use, 
            and is only regarded proir to editor initialization.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTooltipContentPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of type object
            that represent the content of a tooltip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.CreateValueControl">
            <summary>
            Creates the control for editing the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.OnTextBoxTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the text of the editor text box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.OnCreateButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Create button of the editor has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.OnRemoveButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Remove button of the editor has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.OnEditClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Edit button of the editor has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NTooltipContentPropertyEditor.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog of this editor has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NTooltipContentPropertyEditor.NTooltipContentPropertyEditorSchema">
            <summary>
            Schema associated with NTooltipContentPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor">
            <summary>
            A property editor that lets the user select a predefined cursor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor.CreateValueControl">
            <summary>
            Creates the control that should select the predefined cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor.OnPredefinedCursorComboSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected index of the predefined cursor combo box has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NPredefinedCursorPropertyEditor.NPredefinedCursorPropertyEditorSchema">
            <summary>
            Schema associated with NPredefinedCursorPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDashStylePropertyEditor">
            <summary>
            Property editor associated with dash style.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEnumPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of Enum type. 
            The value control is a combo box, a list box or a radio group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEnumPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEnumPropertyEditor.GetOptions">
            <summary>
            Overriden to return the enum values of the property enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEnumPropertyEditor.GetWidgetForOption(System.Object)">
            <summary>
            Overriden to return a label, that contains a string representation of the specified enum value.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEnumPropertyEditor.NEnumPropertyEditorSchema">
            <summary>
            Schema associated with NEnumPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEnumPropertyEditor.ComboBoxTemplate">
            <summary>
            An editor template, for an enum property editor, which is displayed as a combo box (the default).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEnumPropertyEditor.ListBoxTemplate">
            <summary>
            An editor template, for an enum property editor, which is displayed as a list box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEnumPropertyEditor.VerticalRadioGroupTemplate">
            <summary>
            An editor template, for an enum property editor, which is displayed as a vertical radio group embedded in a group box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEnumPropertyEditor.HorizontalRadioGroupTemplate">
            <summary>
            An editor template, for an enum property editor, which is displayed as a horizontal radio group embedded in a group box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDashStylePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDashStylePropertyEditor.GetWidgetForOption(System.Object)">
            <summary>
            Overriden to return null for ENDashStyle.Custom in order to hide this value from the editor.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDashStylePropertyEditor.NDashStylePropertyEditorSchema">
            <summary>
            Schema associated with NDashStylePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDoubleValuesListEditWidget">
            <summary>
            A control that can be used for interactive editing of a list of named values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.ToString">
            <summary>
            Gets the string representation of this widget.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.UpdateContent">
            <summary>
            Recreates the content of this widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.CreateNumericUpDown">
            <summary>
            Creates a numeric up down for this drop down's popup.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.CreateContent">
            <summary>
            Create the widget content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.GetNumericUpDownValue(Nevron.Nov.UI.NNumericUpDown)">
            <summary>
            Gets the value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.SetNumericUpDownValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.SetNumericUpDownMinValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the minimum value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="minValue"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.SetNumericUpDownMaxValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the maximum value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.GetStringForValueAt(System.Int32)">
            <summary>
            Gets the string representation of the given value.
            </summary>
            <param name="valueIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.OnNumericUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a numeric up down's value has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListEditWidget.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListEditWidget.NDoubleValuesListEditWidgetSchema">
            <summary>
            Schema associated with NDoubleValuesListEditWidget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListEditWidget.ValuesChangedEvent">
            <summary>
            Reference to the ValueChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListEditWidget.StepProperty">
            <summary>
            Reference to the Step property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListEditWidget.DecimalPlacesProperty">
            <summary>
            Reference to the DecimalPlaces property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NDoubleValuesListEditWidget.ValuesChanged">
            <summary>
            Occurs when the edited values have been changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.MinValues">
            <summary>
            Get/Sets the min values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.MaxValues">
            <summary>
            Gets or sets the max values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.Modified">
            <summary>
            Indicates which values have been modified through their corresponding numeric up downs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.Step">
            <summary>
            Gets or sets the step of the <see cref="T:Nevron.Nov.UI.NNumericUpDown"/> controls.
            By default set to 1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListEditWidget.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the numeric up downs.
            By default set to 2.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMarginsDropDown">
            <summary>
            A drop down for selecting an NMargins value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDoubleValuesListDropDown">
            <summary>
            A drop down control that can be used for interactive editing of a list of named values.
            </summary>
            <remarks>
            Min/Max range can be specified individually for each of the edited values.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NDropDownEdit">
            <summary>
            A popup window host, that serves for base class for drop down widgets.
            Drop down edits consist of an item slot and a drop down button located
            at the right or at the bottom side, that toggles a popup window.
            The popup window is usually dynamically populated with relevant
            information that assists the field editing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPopupWindowHost">
            <summary>
            A widget that hosts a popup window. Serves as base class for all types of widgets,
            that can host popup windows, such as drop down edits, menu drop downs, menu items etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.IsDelayedPopupOpenStarted">
            <summary>
            Queries whether delayed open is started
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.IsDelayedPopupCloseStarted">
            <summary>
            Queries whether delayed close is started
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.StartDelayedPopupOpen">
            <summary>
            Starts a delayed popup open, which attempts to open the popup when the 
            PopupOpenDelay period has ellapsed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.StopDelayedPopupOpen">
            <summary>
            Stops a previously started delayed popup open.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.StartDelayedPopupClose">
            <summary>
            Creates the OpenOnMouseEnter timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.StopDelayedPopupClose">
            <summary>
            Destroys the OpenOnMouseEnter timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.TogglePopup">
            <summary>
            Toggles the popup
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OpenPopup">
            <summary>
            Shows the popup
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.ClosePopup(Nevron.Nov.UI.ENWindowResult)">
            <summary>
            Closes the popup and set specified result to its Result property.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.ClosePopup">
            <summary>
            Closes the popup without altering its Result
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.IsPopupEmpty">
            <summary>
            Gets whether the popup contains at least one popup item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns>true if the opening should continue</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnPopupClosing">
            <summary>
            Called when the popup is closing.
            Returns true if the closing should continue
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnPopupClosed">
            <summary>
            Called when the popup has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnPopupQueryStayOpen">
            <summary>
            Called when the popup queries whether to stay opened.
            This implementation returns true if the popup is active or has active descendant windows.
            </summary>
            <returns>true if the popup should stay opened.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.RepositionPopup">
            <summary>
            Positions the popup according to the PopupXResize, PopupYResize, PopupXPosition and PopupYPosition properties. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.GetDefaultPopupDirection">
            <summary>
            Gets the default popup direction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.GetAutomaticPopupYPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup Y position, in case the PopupYPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.CreatePopupWindow">
            <summary>
            Must override to create the popup window of the host.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.CanOpenDelayed">
            <summary>
            Determines whether the popup can be opened.
            Called when the open delay has ellapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.CanCloseDelayed">
            <summary>
            Determines whether the popup can be closed.
            Called when the close delay has ellapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnOpenDelayEllapsed">
            <summary>
            Called when the OpenMenuDelay has ellapsed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindowHost.OnCloseDelayEllapsed">
            <summary>
            Called when the CloseMenuDelay has ellapsed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.NPopupWindowHostSchema">
            <summary>
            Schema associated with NPopupWindowHost
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupChild">
            <summary>
            Reference to the Popup child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.IsPopupOpenedProperty">
            <summary>
            Reference to the PopupOpened property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.MaxPopupHeightProperty">
            <summary>
            Reference to the MaxPopupHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.MaxPopupWidthProperty">
            <summary>
            Reference to the MaxPopupWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupXResizeProperty">
            <summary>
            Reference to the PopupXResize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupYResizeProperty">
            <summary>
            Reference to the PopupYResize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupXPositionProperty">
            <summary>
            Reference to the PopupXPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupYPositionProperty">
            <summary>
            Reference to the PopupYPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupCloseDelayProperty">
            <summary>
            Reference to the PopupCloseDelay property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindowHost.PopupOpenDelayProperty">
            <summary>
            Reference to the PopupOpenDelay property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.Popup">
            <summary>
            Gets or sets the hosted popup window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.IsPopupOpened">
            <summary>
            Gets whether the hosted popup window is currently opened or not. 
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.MaxPopupHeight">
            <summary>
            Gets or sets the maximum height of the popup window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.MaxPopupWidth">
            <summary>
            Gets or sets the maximum width of the popup window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupXResize">
            <summary>
            Gets or sets the X resizing of the popup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupYResize">
            <summary>
            Gets or sets the Y resizing of the popup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupXPosition">
            <summary>
            Gets or sets the X positioning of the popup relatively to this element screen bounds.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupYPosition">
            <summary>
            Gets or sets the Y positioning of the popup relatively to this element screen bounds.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupOpenDelay">
            <summary>
            Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindowHost.PopupCloseDelay">
            <summary>
            Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.CreatePopupWindow">
            <summary>
            Overriden to create a NPopupWindow instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the window background.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to toggle the drop down, if the area allocated for the drop down content has been clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to toggle the drop down, if the Alt-Down key combination or the F4 key is pressed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.MeasureItem(System.Boolean)">
            <summary>
            Must override to measure the item slot 
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Must override to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnDropDownButtonClicked">
            <summary>
            Called when the drop down button of the drop down has been clicked.
            This implementation toggles the visibility of the popup.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnOtherButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a button different from the drop down button that is contained inside the edit has been clicked.
            It is up to derived classes to determine whether the click should be handled or not.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.OnPopupClosed">
            <summary>
            Called when the popup has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.CreatePopupContent">
            <summary>
            Must override to create the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEdit.IsPopupContentStatic">
            <summary>
            Determines whether the popup content is static or not.
            If content is static, the content of the popup window will be created only once - when the popup window is created at construction time.
            If content is not static, the content of the popup window will be created each time the popup is opened.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.NDropDownEditSchema">
            <summary>
            Schema associated with NDropDown
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.DropDownButtonChild">
            <summary>
            Reference to the DropDownButton child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.DropDownButtonPositionProperty">
            <summary>
            Reference to the DropDownButtonPosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.WindowXProperty">
            <summary>
            Reference to the WindowX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.WindowYProperty">
            <summary>
            Reference to the WindowY property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEdit.WindowBackgroundFillProperty">
            <summary>
            Reference to the WindowBackground property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.DropDownButton">
            <summary>
            Gets or sets the button, which when clicked shows the drop down popup 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.DropDownButtonPosition">
            <summary>
            Gets or sets position of the drop down button. By default set to right.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowX">
            <summary>
            Gets or sets the window X coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowY">
            <summary>
            Gets or sets the window Y coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowWidth">
            <summary>
            Gets or sets the window Width.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowHeight">
            <summary>
            Gets or sets the window Height.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowArea">
            <summary>
            Gets or sets the window area.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDropDownEdit.WindowBackgroundFill">
            <summary>
            Gets or sets the background of the window area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.CreatePopupContent">
            <summary>
            Overriden to create the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoubleValuesListDropDown.CreateEditWidget">
            <summary>
            Creates the edit widget for this drop down popup's content.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListDropDown.m_EditWidget">
            <summary>
            The edit widget that is shown in the popup of this drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListDropDown.NDoubleValuesListDropDownSchema">
            <summary>
            Schema associated with NDoubleValuesListDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListDropDown.ValuesChangedEvent">
            <summary>
            Reference to the ValueChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoubleValuesListDropDown.LabelChild">
            <summary>
            Reference to the Label child.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NDoubleValuesListDropDown.ValuesChanged">
            <summary>
            Occurs when the edited values have been changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.MinValues">
            <summary>
            Get/Sets the min values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.MaxValues">
            <summary>
            Gets or sets the max values.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.Modified">
            <summary>
            Indicates which values have been modified through their corresponding numeric up downs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.Step">
            <summary>
            Gets or sets the step of the <see cref="T:Nevron.Nov.UI.NNumericUpDown"/> controls.
            By default set to 1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDoubleValuesListDropDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the numeric up downs.
            By default set to 2.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsDropDown.CreateEditWidget">
            <summary>
            Creates a margins edit widget.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsDropDown.NMarginsDropDownSchema">
            <summary>
            Schema associated with NMarginsDropDown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.MarginsType">
            <summary>
            Gets or sets the value of the MarginsType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.EditedMargins">
            <summary>
            Gets or sets the currently edited margins (in DIPs).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.ShowUnits">
            <summary>
            Gets or sets the value of the ShowUnits property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.SelectedUnit">
            <summary>
            Gets or sets the value of the SelectedUnit property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.LeftModified">
            <summary>
            Gets whether the left margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.TopModified">
            <summary>
            Gets whether the top margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.RightModified">
            <summary>
            Gets whether the right margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsDropDown.BottomModified">
            <summary>
            Gets whether the bottom margin has been modified.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMarginsEditWidget">
            <summary>
            A widget for editing of NMargins values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.CreateNumericUpDown">
            <summary>
            Creates a numeric up down for this drop down's popup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.OnNumericUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a numeric up down's value has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.GetNumericUpDownValue(Nevron.Nov.UI.NNumericUpDown)">
            <summary>
            Gets the value of the given numeric up down. Overriden to return the value of the
            given numeric up down in DIPs in case another usnit was selected.
            </summary>
            <param name="numericUpDown"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.SetNumericUpDownValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.SetNumericUpDownMinValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the minimum value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="minValue"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.SetNumericUpDownMaxValue(Nevron.Nov.UI.NNumericUpDown,System.Double)">
            <summary>
            Sets the maximum value of the given numeric up down.
            </summary>
            <param name="numericUpDown"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.CreateContent">
            <summary>
            Creates the content of this widget.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsEditWidget.OnMeasureUpDownSelectedUnitChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected unit of a measure up down has changed.
            Updates the step of the measure up down based on the selected unit.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsEditWidget.NMarginsEditWidgetSchema">
            <summary>
            Schema associated with NMarginsEditWidget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsEditWidget.MarginsTypeProperty">
            <summary>
            Reference to the MarginsType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsEditWidget.ShowUnitsProperty">
            <summary>
            Reference to the ShowUnits property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsEditWidget.SelectedUnitProperty">
            <summary>
            Reference to the SelectedUnit property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.MarginsType">
            <summary>
            Gets or sets the value of the MarginsType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.EditedMargins">
            <summary>
            Gets or sets the currently edited margins (in DIPs).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.ShowUnits">
            <summary>
            Gets or sets the value of the ShowUnits property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.SelectedUnit">
            <summary>
            Gets or sets the value of the SelectedUnit property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.LeftModified">
            <summary>
            Gets whether the left margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.TopModified">
            <summary>
            Gets whether the top margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.RightModified">
            <summary>
            Gets whether the right margin has been modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsEditWidget.BottomModified">
            <summary>
            Gets whether the bottom margin has been modified.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPropertyEditorDrowDown">
            <summary>
            Represents the pendant commands of a property editor
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuDropDown">
            <summary>
            A menu popup host, whose automatic popup position is located below the element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuPopupHost">
            <summary>
            A popup window host, the popup window of which contains a NMenu.
            The popup content of a menu popup host (e.g the menu) is static and is not recreated
            when the popup is opened (i.e. allows the users to populate the menu before showing it.
            Serves as base class for menu drop downs and menu items.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NContentPopupHost">
            <summary>
            A popup window host, the popup window content of which is static and is not recreated
            when the popup is opened or closed. Serves as base class for NMenuPopupHost.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.#ctor(System.Object)">
            <summary>
            Createas a popup with the specified content.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.NavigateToContent">
            <summary>
            Navigates to the first menu item of this item menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.CreatePopupWindow">
            <summary>
            Overriden to create a popup window without content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse up events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.IsPopupEmpty">
            <summary>
            Overriden to check whether the Popup window has any children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.OnClick">
            <summary>
            Raises the click event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentPopupHost.GetNavigateToContentKey">
            <summary>
            Gets the keyboard key that navigates to the menu
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NContentPopupHost.NContentPopupHostSchema">
            <summary>
            Schema associated with NMenuDropDown
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentPopupHost.ClickEvent">
            <summary>
            Reference to the Click event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentPopupHost.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentPopupHost.ClickModeProperty">
            <summary>
            Reference to the ClickMode property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NContentPopupHost.Click">
            <summary>
            UI event, which occurs when the menu item is clicked
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentPopupHost.Content">
            <summary>
            Gets or sets the element content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentPopupHost.ClickMode">
            <summary>
            Gets or sets the click mode of the menu drop down
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.NavigateToContent">
            <summary>
            Overriden to navigate to the first menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.CreatePopupWindow">
            <summary>
            Overriden to create a popup window the content of which is a NMenu
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.IsPopupEmpty">
            <summary>
            Determines whether the popup is empty. 
            This implementation determines whether the menu contains at least one menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuPopupHost.OnPopupOpened">
            <summary>
            Called when the popup is opened. 
            Overriden to esnure that there is no selected item in the menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuPopupHost.NMenuPopupHostSchema">
            <summary>
            Schema associated with NMenuDropDown
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuPopupHost.Items">
            <summary>
            A shortcut property, that gets the Menu.Items collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuPopupHost.Menu">
            <summary>
            A shortcut property, that casts the popup content to an NMenu instance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDown.OnClick">
            <summary>
            Raises the click event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.NMenuDropDownSchema">
            <summary>
            Schema associated with NMenuDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.TogglePopupOnClickProperty">
            <summary>
            Reference to the TogglePopupOnClick property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuDropDown.SchemaForSkinning">
            <summary>
            The schema to use for skinning.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuDropDown.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuDropDown.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this menu drop down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuDropDown.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuDropDown.TogglePopupOnClick">
            <summary>
            Gets or sets whether the popup should be toggled, when the user clicks inside the element content.
            By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.OnPopupClosed">
            <summary>
            Called when the popup has closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.IsPopupEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.GetAutomaticPopupYPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup Y position, in case the PopupYPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.MeasureContent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorDrowDown.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NPropertyEditorDrowDown.NPropertyEditorDrowDownSchema">
            <summary>
            Schema associated with NPropertyEditorDrowDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NPropertyEditorDrowDown.SymbolProperty">
            <summary>
            Reference to the Symbol property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPropertyEditorDrowDown.OwnerPropertyEditor">
            <summary>
            Gets the command bar to which this pendant belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPropertyEditorDrowDown.Symbol">
            <summary>
            Gets or sets the symbol that appears in top half of the pendant in horizontal orientation and on the left half of the pendant in vertical orientation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NBaseDateTimeFormatStringPropertyEditor">
            <summary>
            The NBaseDateTimeFormatStringPropertyEditor class is a property editor, 
            which is by default assigned to properties exposing a date/time format string. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFormatStringPropertyEditor">
            <summary>
            The NFormatStringPropertyEditor class is a property editor, which is by default assigned to
            properties exposing a format string. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFormatStringPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFormatStringPropertyEditor.FillPredefinedOptions(Nevron.Nov.UI.NListBox)">
            <summary>
            Fills the predefined options in the predefined formats list box
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFormatStringPropertyEditor.CreateControl">
            <summary>
            Creates the control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NFormatStringPropertyEditor.NFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NFormatStringPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFormatStringPropertyEditor.FormatsListBoxMaxHeightProperty">
            <summary>
            Reference to the FormatsListBoxMaxHeight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NFormatStringPropertyEditor.FormatsListBoxMaxHeight">
            <summary>
            Gets or sets the maximum height of the predefined formats list box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBaseDateTimeFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBaseDateTimeFormatStringPropertyEditor.FillPredefinedOptions(Nevron.Nov.UI.NListBox)">
            <summary>
            Fills the predefined options in the predefined formats list box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBaseDateTimeFormatStringPropertyEditor.GetAllowedFormats">
            <summary>
            Gets the allowed date time formats.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NBaseDateTimeFormatStringPropertyEditor.NBaseDateTimeFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NBaseDateTimeFormatStringPropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTimeFormatStringPropertyEditor">
            <summary>
            The NTimeFormatStringPropertyEditor class is a property editor, 
            which is by default assigned to properties exposing a date/time format string. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeFormatStringPropertyEditor.GetAllowedFormats">
            <summary>
            Gets the allowed date time formats.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NTimeFormatStringPropertyEditor.NTimeFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NTimeFormatStringPropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDateFormatStringPropertyEditor">
            <summary>
            The NDateFormatStringPropertyEditor class is a property editor, 
            which is by default assigned to properties exposing a date/time format string. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateFormatStringPropertyEditor.GetAllowedFormats">
            <summary>
            Gets the allowed date time formats.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateFormatStringPropertyEditor.NDateFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NDateFormatStringPropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDateTimeFormatStringPropertyEditor">
            <summary>
            The NDateTimeFormatStringPropertyEditor class is a property editor, 
            which is by default assigned to properties exposing a date/time format string. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimeFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDateTimeFormatStringPropertyEditor.GetAllowedFormats">
            <summary>
            Gets the allowed date time formats.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDateTimeFormatStringPropertyEditor.NDateTimeFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NDateTimeFormatStringPropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NNumericFormatStringPropertyEditor">
            <summary>
            The NNumericFormatStringPropertyEditor class is a property editor, 
            which is by default assigned to properties exposing a numeric format string. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumericFormatStringPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumericFormatStringPropertyEditor.FillPredefinedOptions(Nevron.Nov.UI.NListBox)">
            <summary>
            Fills the predefined options in the predefined formats list box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNumericFormatStringPropertyEditor.NNumericFormatStringPropertyEditorSchema">
            <summary>
            Schema associated with NNumericFormatStringPropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPropertyEditorExpressionLabel">
            <summary>
            Represents a label that shows information about the current property editor expression.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLabel">
            <summary>
            A widget, which renders a text string.
            The text is controlled by the <see cref="P:Nevron.Nov.UI.NLabel.Text"/> property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            Overriden to render the text
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NLabel.NLabelSchema">
            <summary>
            Schema associated with NLabel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLabel.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLabel.TextAlignmentProperty">
            <summary>
            Reference to the TextAlignment property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLabel.TextWrapModeProperty">
            <summary>
            Reference to the TextWrapMode property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLabel.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLabel.TextAlignment">
            <summary>
            Gets or sets the text alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLabel.TextWrapMode">
            <summary>
            Gets / sets the text wrap mode
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLabel.NLabelDesigner">
            <summary>
            Default designer for labels.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLabel.NLabelDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorExpressionLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NPropertyEditorExpressionLabel.NPropertyEditorExpressionLabelSchema">
            <summary>
            Schema associated with NPropertyEditorExpressionLabel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTimeZonePropertyEditor">
            <summary>
            Edits properties of type NTimeZone.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeZonePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeZonePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the value control from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeZonePropertyEditor.CreateValueControl">
            <summary>
            Creates the control, which should edit the property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NTimeZonePropertyEditor.OnComboSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected index of the value combo box has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NTimeZonePropertyEditor.NTimeZonePropertyEditorSchema">
            <summary>
            Schema associated with NTimeZonePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NAutoUpdateLabel">
            <summary>
            Represents a label that is automatically updated
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAutoUpdateLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAutoUpdateLabel.#ctor(Nevron.Nov.FunctionResult{System.String})">
            <summary>
            Initializer constructor
            </summary>
            <param name="updateTextDelegate"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NAutoUpdateLabel.NAutoUpdateLabelSchema">
            <summary>
            Schema associated with NAutoUpdateLabel.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NAutoUpdateLabel.UpdateTextDelegate">
            <summary>
            Delegate which the autoupdate label calls when visible to determine the text.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NChildrenComboBoxBrowser">
            <summary>
            A child hierarchy browser that displays the child items in a combo box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NChildrenHierarchyBrowser">
            <summary>
            The NChildrenHierarchyBrowser is a hierarchy browser, 
            which aggregates a list box populated with the browsed node children.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NHierarchyBrowser">
            <summary>
            The NHierarchyBrowser class is an abstract content holder, 
            which servers as base class for children and subtree DOM hierarchy browsers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.#ctor(Nevron.Nov.Editors.NHierarchyBrowser)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.AttachToBrowsedNode">
            <summary>
            Attaches the browser to the currently browsed node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.DetachFromBrowsedNode">
            <summary>
            Detaches the browser from the currently browsed node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.GetNodeDesigner(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the designer for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.GetNodeWidget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the widget that represents this node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.OnBrowsedNodeChanged">
            <summary>
            Called when the browsed node has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.OnBrowsedNodeChildInserted(Nevron.Nov.Dom.NInsertChildEventArgs)">
            <summary>
            Called when a child node was inserted in the edited node sub hierarchy
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.OnBrowsedNodeChildRemoved(Nevron.Nov.Dom.NRemoveChildEventArgs)">
            <summary>
            Called when a child node was removed from the edited node sub hierarchy
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.ShouldCreateItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether an item should be created for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyBrowser.OnRegistered">
            <summary>
            Overriden to attach to the browsed node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NHierarchyBrowser.NHierarchyBrowserSchema">
            <summary>
            Schema associated with NHierarchyBrowser
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyBrowser.BrowsedNode">
            <summary>
            Gets or sets the browsed node (i.e. the root node of the hierarchy browser).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyBrowser.SelectedNode">
            <summary>
            Gets or sets the currently selected node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.#ctor(Nevron.Nov.Editors.NChildrenHierarchyBrowser)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.RebuildItems">
            <summary>
            Rebuilds the items to reflect the children of the browsed node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.OnBrowsedNodeChanged">
            <summary>
            Called when the browsed node has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.FindItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Finds the item corresponding to the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.CreateItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates an item for the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.OnFilterChanged">
            <summary>
            Called when the filter has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyBrowser.OnItemSelected(Nevron.Nov.UI.NTextRepresentableItem)">
            <summary>
            Called when an item has been selected.
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenHierarchyBrowser.NChildrenHierarchyBrowserSchema">
            <summary>
            Schema associated with NChildrenHierarchyBrowser.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NChildrenHierarchyBrowser.ItemSelected">
            <summary>
            An event fired when an item has been selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenHierarchyBrowser.SelectedItem">
            <summary>
            Gets or sets the currently selected item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenHierarchyBrowser.SelectedNode">
            <summary>
            Gets the currently selected node from the browsed node subtree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.RebuildItems">
            <summary>
            Rebuilds the items to reflect the children of the browsed node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.FindItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Finds the item corresponding to the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.CreateItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates an item for the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.OnBrowsedNodeChildInserted(Nevron.Nov.Dom.NInsertChildEventArgs)">
            <summary>
            Called when a child node was inserted in the edited node sub hierarchy.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenComboBoxBrowser.OnComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenComboBoxBrowser.NChildrenComboBoxBrowserSchema">
            <summary>
            Schema associated with NChildrenComboBoxBrowser.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenComboBoxBrowser.SelectedItem">
            <summary>
            Gets or sets the currently selected item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenComboBoxBrowser.ComboBox">
            <summary>
            Gets the embedded combo box. Valid only when Style is set to ComboBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NChildrenListBoxBrowser">
            <summary>
            A child hierarchy browser that displays the child items in a list box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.RebuildItems">
            <summary>
            Rebuilds the items to reflect the children of the browsed node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.FindItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Finds the item corresponding to the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.CreateItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates an item for the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.OnBrowsedNodeChildInserted(Nevron.Nov.Dom.NInsertChildEventArgs)">
            <summary>
            Called when a child node was inserted in the edited node sub hierarchy.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenListBoxBrowser.OnBrowsedNodeChildRemoved(Nevron.Nov.Dom.NRemoveChildEventArgs)">
            <summary>
            Called when a child node was removed from the edited node sub hierarchy.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenListBoxBrowser.NChildrenListBoxBrowserSchema">
            <summary>
            Schema associated with NChildrenListBoxBrowser.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenListBoxBrowser.SelectedItem">
            <summary>
            Gets or sets the currently selected item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenListBoxBrowser.ListBox">
            <summary>
            Gets the embedded list box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMaskedEnumDropDown">
            <summary>
            Combo box for selecting masked enum values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.Initialize">
            <summary>
            Initializes the drop down and creates the check boxes, which represent the flag values.
            This method should be called when you have configured the drop down properties but
            before you set the EnumValue property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.IsPopupContentStatic">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.CreatePopupContent">
            <summary>
            Creates the popup content of this drop down, which is a masked enum panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.OnPopupClosed">
            <summary>
            Called when the popup is closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.OnEnumTypeChanged(Nevron.Nov.Dom.NDomType,Nevron.Nov.Dom.NDomType)">
            <summary>
            Called when the enum type has changed.
            </summary>
            <param name="newType"></param>
            <param name="oldType"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumDropDown.OnEnumValueChanged(System.Object,System.Object)">
            <summary>
            Called when the edited enum value has changed.
            </summary>
            <param name="newValue"></param>
            <param name="oldValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumDropDown.NMaskedEnumDropDownSchema">
            <summary>
            Schema associated with NMaskedEnumDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumDropDown.EnumValueChangedEvent">
            <summary>
            Reference to the EnumValueChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumDropDown.LabelChild">
            <summary>
            Reference to the Label child.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NMaskedEnumDropDown.EnumValueChanged">
            <summary>
            Occurs when the enum value has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumDropDown.Label">
            <summary>
            Gets/Sets the Label child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumDropDown.ColumnCount">
            <summary>
            Gets or sets the number of columns in which the enum values must be laid out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumDropDown.ShowOnlyBitValues">
            <summary>
            Gets or sets whether the group box will display only single bit enum values.
            </summary>
            <remarks>
            You can use this property to prevent the group box from showing mask enum values.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumDropDown.EnumType">
            <summary>
            Gets or sets the masked enum type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumDropDown.EnumValue">
            <summary>
            Gets or sets the enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMaskedEnumPanel">
            <summary>
            Panel for selecting masked enum values.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTableFlowPanel">
            <summary>
            A layout panel, which integrates the NTableFlowLayout in the context of the Nevron User Interface.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFlowLayoutPanelBase`1">
            <summary>
            A layout panel, that serves as base class for layout panels exposing flow layouts.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDirectedLayoutPanel`1">
            <summary>
            A layout panel, that serves as base class for layout panels that aggregate directed box layouts
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLayoutPanel`2">
            <summary>
            A panel, that serves as base class for panels that integrate NOV Box Layouts, in the context of the NOV UI.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCompositeWidget`1">
            <summary>
            Represents a widget, which is composed from other elements of certain type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeWidget`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCompositeWidget`1.NCompositeWidgetSchema">
            <summary>
            Schema associated with NCompositeWidget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCompositeWidget`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCompositeWidget`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.CreateLayout">
            <summary>
            Creates a new layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.GetLayout">
            <summary>
            Gets a configured layout for measure and arrange purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLayoutPanel`2.GetLayoutContext(Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Gets a widget layout context for the specified content area.
            </summary>
            <param name="contentArea"></param>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NLayoutPanel`2.NLayoutPanelSchema">
            <summary>
            Schema associated with NLayoutPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLayoutPanel`2.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLayoutPanel`2.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLayoutPanel`2.UniformWidthsProperty">
            <summary>
            Reference to the UniformWidths property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLayoutPanel`2.UniformHeightsProperty">
            <summary>
            Reference to the UniformHeights property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLayoutPanel`2.HorizontalSpacing">
            <summary>
            Gets or sets the minimal horizontal spacing between the arranged items
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLayoutPanel`2.VerticalSpacing">
            <summary>
            Gets or sets the minimal vertical spacing between the arranged items
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLayoutPanel`2.UniformWidths">
            <summary>
            Gets or sets the way in which the items are resized in the X dimension prior to being measured or arranged.
            By default set to None, which means that cells are initially having their desired widths.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLayoutPanel`2.UniformHeights">
            <summary>
            Gets or sets the way in which the items are resized in the Y dimension prior to being measured or arranged.
            By default set to None, which means that cells are initially having their desired heights.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDirectedLayoutPanel`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDirectedLayoutPanel`1.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDirectedLayoutPanel`1.NDirectedLayoutPanelSchema">
            <summary>
            Schema associated with NLayoutPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDirectedLayoutPanel`1.DirectionProperty">
            <summary>
            Reference to the direction property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDirectedLayoutPanel`1.Direction">
            <summary>
            Gets or sets the direction in which the layout arranges adjacent cells.
            By default set to TopToBottom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFlowLayoutPanelBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFlowLayoutPanelBase`1.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NFlowLayoutPanelBase`1.NFlowLayoutPanelBaseSchema">
            <summary>
            Schema associated with NDirectedLayoutPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFlowLayoutPanelBase`1.InvertedProperty">
            <summary>
            Reference to the Inverted property 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFlowLayoutPanelBase`1.Inverted">
            <summary>
            Gets or sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTableFlowPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTableFlowPanel.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTableFlowPanel.CreateLayout">
            <summary>
            Overriden to create a new instance of the NTableLayout
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.NTableFlowPanelSchema">
            <summary>
            Schema associated with NTableFlowPanel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.MaxOrdinalProperty">
            <summary>
            Reference to the MaxOrdinal property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.RowFillModeProperty">
            <summary>
            Reference to the RowFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.RowFitModeProperty">
            <summary>
            Reference to the RowFitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.ColFillModeProperty">
            <summary>
            Reference to the ColFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTableFlowPanel.ColFitModeProperty">
            <summary>
            Reference to the ColFitMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTableFlowPanel.MaxOrdinal">
            <summary>
            Gets or sets the maximum number of items in a single lane:
            <para>- if the Direction is set to LeftToRight or RightToLeft, the MaxOrdinal specifies the column count.</para>
            <para>- if the Direction is set to TopToBottom or BottomToTop, the MaxOrdinal specifies the row count.</para>
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTableFlowPanel.RowFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTableFlowPanel.RowFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTableFlowPanel.ColFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the cols dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTableFlowPanel.ColFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the cols dimension.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPanel.Initialize">
            <summary>
            Initializes the panel and creates the check boxes, which represent the flag values.
            This method should be called when you have configured the panel properties, but
            before you set the EnumValue property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPanel.SetTooltip(System.Object,System.Object)">
            <summary>
            Sets the tooltip of the checkbox associated with the given enum value.
            </summary>
            <param name="enumValue"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPanel.OnCheckBoxCheckedChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the Checked property of a check box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPanel.NMaskedEnumPanelSchema">
            <summary>
            Schema associated with NMaskedEnumPanel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPanel.ValuePropertyEx">
            <summary>
            Reference to the Value extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPanel.ShowOnlyBitValuesProperty">
            <summary>
            Reference to the ShowOnlyBitValues property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPanel.EnumTypeProperty">
            <summary>
            Reference to the EnumType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPanel.EnumValueChangedEvent">
            <summary>
            Reference to the EnumValueChanged event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NMaskedEnumPanel.EnumValueChanged">
            <summary>
            Occurs when the enum value has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPanel.ColumnCount">
            <summary>
            Gets or sets the number of columns in which the enum values must be laid out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPanel.ShowOnlyBitValues">
            <summary>
            Gets or sets whether the group box will display only single bit enum values.
            </summary>
            <remarks>
            You can use this property to prevent the group box from showing mask enum values.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPanel.EnumType">
            <summary>
            Gets or sets the masked enum type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPanel.EnumValue">
            <summary>
            Gets or sets the enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPaperNameComboBox">
            <summary>
            A combo box, which is populated with the available regular font names
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBox">
            <summary>
            Represents a widget, which displays a drop down list of items to choose from.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.FillFromEnum``1">
            <summary>
            Fills the combo box with the options from the specified enum. Assigns the
            corresponding enum value to the Tag property of each combo box item.
            </summary>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.FillFromArray``1(``0[])">
            <summary>
            Fills the combo box with the values of the specified array. Assigns the
            corresponding array value to the Tag property of each combo box item.
            </summary>
            <typeparam name="TValue">The type of the array values.</typeparam>
            <param name="values">The values to fill the combo box with.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.IndexOfItemWithTag(System.Object)">
            <summary>
            Gets the index of the first combo box item whose Tag property is equal to the given value.
            </summary>
            <param name="value">The value to search for. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.IndexOfItemWithText(System.String,System.StringComparison)">
            <summary>
            Gets the index of the first combo box item with the given text or -1 if an item
            with such text is not found.
            </summary>
            <param name="text"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToDownItem(Nevron.Nov.UI.NComboBoxItem)">
            <summary>
            Moves the selection to the down item of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToUpItem(Nevron.Nov.UI.NComboBoxItem)">
            <summary>
            Moves the selection to the up item of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToFirstItem">
            <summary>
            Moves the selection to the first item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToLastItem">
            <summary>
            Moves the selection to the last item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToNextItemStartingWith(System.Char)">
            <summary>
            Navigates to the next item whose text starts with the given char (case insensitive check is performed).
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.NavigateToItem(Nevron.Nov.UI.NComboBoxItem)">
            <summary>
            Moves the selection to the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot 
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Default handler for the mouse wheel event.
            Overriden to provide support for mouse wheel scrolling.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to provide support for key selection.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Overriden to provide support for navigation based on the first character of combo box items' text.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.CreatePopupContent">
            <summary>
            Creates the popup content of the combo box (i.e. a list box).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the SelectedIndex property has changed to update the text
            of the text box and to select the whole text.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.GetPopUpListBox">
            <summary>
            Gets the list box shown in the popup window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnListBoxMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when a mouse button is released over the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBox.OnListBoxMouseEnter(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Called when the mouse enters the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.NComboBoxSchema">
            <summary>
            Schema associated with NComboBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.ItemsChild">
            <summary>
            Reference to the Items child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.TextBoxChild">
            <summary>
            Reference to the TextBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.DropDownStyleProperty">
            <summary>
            Reference to the DropDownStyle property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.HScrollModeProperty">
            <summary>
            Reference to the HScrollMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBox.VScrollModeProperty">
            <summary>
            Reference to the VScrollMode property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NComboBox.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.Items">
            <summary>
            Gets or sets the items collection of the combo box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.SelectedIndex">
            <summary>
            Gets or sets the selected index. To deselect the currently selected item, set the SelectedIndex to -1.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is less than or equal to -2 or
            greater than or equal to the number of items in the combo box.</exception>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.DropDownStyle">
            <summary>
            Gets or sets the drop down style of the combo box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.Text">
            <summary>
            Gets or sets the text of the combo box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.HScrollMode">
            <summary>
            Gets or sets the horizontal scroll mode of the popup list box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBox.VScrollMode">
            <summary>
            Gets or sets the vertical scroll mode of the popup list box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPaperNameComboBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NPaperNameComboBox.NPaperNameComboBoxSchema">
            <summary>
            Schema associated with NPaperNameComboBox.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NPaperNameComboBox.PaperKind">
            <summary>
            Gets or sets the selected font name
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NMediaDomSerializer">
            <summary>
            Represents an NNedia DOM surrogate serializer.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.INDomSurrogateSerializer">
            <summary>
            Implemented by DOM surrogate serializers.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.INDomCustomSerializable">
            <summary>
            Implemented by objects which can serialize / deserialize from a property bag
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.INDomCustomSerializable.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context">the context in which the object is serialized</param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Serialization.INDomCustomSerializable.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context">the context in which the object is deserialized</param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Serialization.INDomSurrogateSerializer.GetDomRealObject(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            Gets the dom object behind this surrogate.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaDomSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaDomSerializer.#ctor(Nevron.Nov.Dom.NMedia)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaDomSerializer.GetDomRealObject(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            Gets the dom object behind this surrogate.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaDomSerializer.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaDomSerializer.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="T:Nevron.Nov.Dom.NArrangeElementHelpers">
            <summary>
            Implements helpers methods for working with and implementing the INArrangeElement interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NArrangeElementHelpers.GetIsArrangeValid(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets whether the arrange of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NArrangeElementHelpers.SetIsArrangeValid(Nevron.Nov.Dom.NElement,System.Boolean)">
            <summary>
            Sets whether the arrange of the element as valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NArrangeElementHelpers.GetIsPooledForArrange(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NArrangeElementHelpers.GetArrangeElementParent(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets the first ancestor of the specified element that implements the INArrangeElementParent interface.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NArrangeElementHelpers.InvalidateChildrenArrange(Nevron.Nov.Dom.NElement,System.Object)">
            <summary>
            Invalidates the arrange of all children that implement the INArrangeElement interface
            </summary>
            <param name="element"></param>
            <param name="hint"></param>
        </member>
        <member name="T:Nevron.Nov.Dom.NMeasureElementHelpers">
            <summary>
            Implements helpers methods for working with and implementing the INMeasureElement interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMeasureElementHelpers.GetIsMeasureValid(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMeasureElementHelpers.SetIsMeasureValid(Nevron.Nov.Dom.NElement,System.Boolean)">
            <summary>
            Sets whether the measure of the element as valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMeasureElementHelpers.GetIsPooledForMeasure(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMeasureElementHelpers.GetMeasureElementParent(Nevron.Nov.Dom.NElement)">
            <summary>
            Gets the first ancestor of the specified element that implements the INMeasureElementParent interface.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NMeasureElementHelpers.InvalidateChildrenMeasure(Nevron.Nov.Dom.NElement,System.Object)">
            <summary>
            Invalidates the measure of all children that implement the INMeasureElement interface
            </summary>
            <param name="element"></param>
            <param name="hint"></param>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomTypeDomSerializer">
            <summary>
            The NDomTypeSerializer serializes dom type instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomTypeDomSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomTypeDomSerializer.#ctor(Nevron.Nov.Dom.NDomType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domType"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomTypeDomSerializer.GetDomRealObject(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomTypeDomSerializer.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomTypeDomSerializer.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocumentNodeCollection`1">
            <summary>
            A collection node, that serves as base class for collections that contain other nodes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.#ctor(Nevron.Nov.Dom.NDocumentNodeCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocumentNodeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocumentNodeCollection`1.NDocumentNodeCollectionSchema">
            <summary>
            Schema associated with NDocumentNodeCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentNodeCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocumentNodeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NEventHandler`1">
            <summary>
            Represents an event handler, that calls a single argument function, the argument of which matches the generic type parameter.
            </summary>
            <typeparam name="TArgs">type of NEventArgs</typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.#ctor(System.Delegate)">
            <summary>
            Creates a new event handler that calls the specified delegate. 
            Throw an exception if the delegate is null or is not an instance of the Function(TArgs) delegate.
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.#ctor(Nevron.Nov.Function{`0})">
            <summary>
            Creates a new event handler that calls the specified function. 
            Throw an exception if the function is null.
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.Init(System.Delegate)">
            <summary>
            Initializes the event handler from the specified delegate
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.Init(Nevron.Nov.Function{`0})">
            <summary>
            Initializes the event handler from the specified delegate
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.Invoke(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Invokes the handler function
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NEventHandler`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor">
            <summary>
            A monitor for node subtree changes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.StartMonitoring(Nevron.Nov.Dom.NNode)">
            <summary>
            Starts the monitoring for changes of the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.StopMonitoring">
            <summary>
            Stops the monitoring for changes of the node subtree, which was started by the previous call to StartMonitoring.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.OnSubtreeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Raises the SubtreeChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.SubtreeChanged">
            <summary>
            Event, which is raised when a node in the monitored subtree has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.MonitoredNode">
            <summary>
            Gets the monitored node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.MonitorAggregatedSubtree">
            <summary>
            Gets or sets whether the aggregated subtree must be monitored for changes, or only the node children subtree must be monitored for changes.
            This property can only be modified prior to calling the StartMonitoring method.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeSubtreeChangeMonitor.MonitorComputedValueChanges">
            <summary>
            Gets or sets whether the monitor needs to be informed about computed value changes or not.
            By default set to false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeCollectionDataBinding`3">
            <summary>
            Class that provides data binding capabilities to node collections.
            </summary>
            <typeparam name="TTarget">The type of the target node collection.</typeparam>
            <typeparam name="TTargetItem">The type of the nodes in the target node collection.</typeparam>
            <typeparam name="TDataSourceItem">The type of the items in the data source.</typeparam>
        </member>
        <member name="T:Nevron.Nov.Dom.NDataBinding">
            <summary>
            Provides support for node data binding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDataBinding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDataBinding.#ctor(Nevron.Nov.Dom.NDataBinding)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NDataBinding.NDataBindingSchema">
            <summary>
            Schema associated with NDataBinding.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDataBinding.DataBindingPropertyEx">
            <summary>
            Reference to the DataBinding extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDataBinding.GetDataBinding(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the data binding applied on the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDataBinding.SetDataBinding(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDataBinding)">
            <summary>
            Sets the data binding to apply on the given node.
            </summary>
            <param name="node"></param>
            <param name="dataBinding"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.#ctor(Nevron.Nov.Dom.NNodeCollectionDataBinding{`0,`1,`2})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.RebuildTarget">
            <summary>
            Removes all items of the target node and recreates them based on the contents of the data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to unsubscribe from the child events of the old parent node and subscribe to those of the new one.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.AttachToEvents(`0)">
            <summary>
            Subscribes to the child inserting and child removing events of the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.DetachFromEvents(`0)">
            <summary>
            Unsubscribes from the child inserting and child removing events of the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.OnCreateItemNode(`2)">
            <summary>
            Called when a node should be created for the given data source item.
            </summary>
            <param name="dataSourceItem"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.OnTargetChildRemoving(Nevron.Nov.Dom.NRemoveChildEventArgs)">
            <summary>
            Overriden to throw exception because items cannot be removed from a data binded node collection.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.OnTargetChildInserting(Nevron.Nov.Dom.NInsertChildEventArgs)">
            <summary>
            Overriden to throw exception because items cannot be inserted in a data binded node collection.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.NNodeCollectionDataBindingSchema">
            <summary>
            Schema associated with NNodeCollectionDataBinding.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.CreateItemNodeEvent">
            <summary>
            Reference to the CreateItemNode event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.DataSourceProperty">
            <summary>
            Reference to the DataSource property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.DataBoundItemPropertyEx">
            <summary>
            Reference to the DataBoundItem extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.GetDataBoundItem(`1)">
            <summary>
            Gets the value of the DataBoundItem extended property of the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.SetDataBoundItem(`1,`2)">
            <summary>
            Sets the value of the DataBoundItem extended property of the given node.
            </summary>
            <param name="node"></param>
            <param name="dataBoundItem"></param>
        </member>
        <member name="E:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.CreateItemNode">
            <summary>
            Occurs when a node should be created for a given data source item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.DataSource">
            <summary>
            Gets or sets the binding data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeCollectionDataBinding`3.Target">
            <summary>
            Gets the target collection that should be populated from the data source.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFlowCategoryEditor">
            <summary>
            The NFlowCategoryEditor class is an aggregate category editor,
            which embeds the aggregated editors in a flow layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFlowCategoryEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFlowCategoryEditor.NFlowCategoryEditorSchema">
            <summary>
            Schema associated with NFlowCategoryEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFlowCategoryEditor.LayoutDirectionProperty">
            <summary>
            Reference to the LayoutDirection property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NFlowCategoryEditor.LayoutDirection">
            <summary>
            Gets or sets the layout direction of the editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTableFlowCategoryEditor">
            <summary>
            The NTableFlowCategoryEditor class is an aggregate category editor,
            which embeds the aggregated editors in a table flow layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTableFlowCategoryEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTableFlowCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Creates a container for child editors.
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.NTableFlowCategoryEditorSchema">
            <summary>
            Schema associated with NTableFlowCategoryEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.MaxOrdinalProperty">
            <summary>
            Reference to the MaxOrdinal property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.RowFillModeProperty">
            <summary>
            Reference to the RowFillMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.RowFitModeProperty">
            <summary>
            Reference to the RowFitMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.ColFillModeProperty">
            <summary>
            Reference to the ColFillMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.ColFitModeProperty">
            <summary>
            Reference to the ColFitMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.TwoColumnsTemplate">
            <summary>
            Table flow category editor template with 2 columns (i.e. MaxOrdinal = 2).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.ThreeColumnsTemplate">
            <summary>
            Table flow category editor template with 3 columns (i.e. MaxOrdinal = 3).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTableFlowCategoryEditor.FourColumnsTemplate">
            <summary>
            Table flow category editor template with 4 columns (i.e. MaxOrdinal = 4).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTableFlowCategoryEditor.MaxOrdinal">
            <summary>
            Gets or sets the maximum number of items in a single lane:
            <para>- if the Direction is set to LeftToRight or RightToLeft, the MaxOrdinal specifies the column count.</para>
            <para>- if the Direction is set to TopToBottom or BottomToTop, the MaxOrdinal specifies the row count.</para>
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTableFlowCategoryEditor.RowFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTableFlowCategoryEditor.RowFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTableFlowCategoryEditor.ColFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the cols dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTableFlowCategoryEditor.ColFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the cols dimension.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFloatingNumberPropertyEditor">
            <summary>
            A base class for all editors of floating point numbers.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NNumberPropertyEditor">
            <summary>
            A base class for all number editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a numeric up/down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.OnNumericUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the value of the editor's numeric up/down has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.OnMinimumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Minimum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.OnMaximumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Maximum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNumberPropertyEditor.OnStepChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Step property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NNumberPropertyEditor.NNumberPropertyEditorSchema">
            <summary>
            Schema associated with NNumberPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNumberPropertyEditor.MinimumProperty">
            <summary>
            Reference to the Minimum property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNumberPropertyEditor.MaximumProperty">
            <summary>
            Reference to the Maximum property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNumberPropertyEditor.StepProperty">
            <summary>
            Reference to the Step property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNumberPropertyEditor.Minimum">
            <summary>
            Gets or sets the minimum value of the editor's numeric up/down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNumberPropertyEditor.Maximum">
            <summary>
            Gets or sets the maximum value of the editor's numeric up/down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNumberPropertyEditor.Step">
            <summary>
            Gets or sets the step with which to increase/decrease the value of the numeric up/down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNumberPropertyEditor.NumericUpDown">
            <summary>
            Gets the numeric up/down of the editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a numeric up/down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.OnDecimalPlacesChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the DecimalPlaces property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.NFloatingNumberPropertyEditorSchema">
            <summary>
            Schema associated with NFloatingNumberPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.DecimalPlacesProperty">
            <summary>
            Reference to the DecimalPlaces property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NFloatingNumberPropertyEditor.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places the editor's numeric up/down should show.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSinglePropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of Single type.
            The value control is a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSinglePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSinglePropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSinglePropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NSinglePropertyEditor.NSinglePropertyEditorSchema">
            <summary>
            Schema associated with NSinglePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSinglePropertyEditor.FactorTemplate">
            <summary>
            An editor template for single-precision floating-point values. Range=[0, 1], step = 0.01, decimal places=2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSinglePropertyEditor.RelativePositionTemplate">
            <summary>
            An editor template for single-precision floating-point values. Range=[-1000, 1000], step = 0.01, decimal places=2.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDoublePropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of Double type. 
            The value control is a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoublePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoublePropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDoublePropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoublePropertyEditor.NDoublePropertyEditorSchema">
            <summary>
            Schema associated with NDoublePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoublePropertyEditor.FactorTemplate">
            <summary>
            An editor template for double-precision floating-point values. Range=[0, 1], step=0.1, decimal places=2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoublePropertyEditor.PercentTemplate">
            <summary>
            An editor template for double-precision floating-point values. Range=[0, 100], step=0.1, decimal places=2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDoublePropertyEditor.NonNegativeIntegerTemplate">
            <summary>
            An editor template for double-precision floating-point values. Range=[0, Double.MaxValue], step=1, decimal places=1.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor">
            <summary>
            A property editor, which should be used to edit properties of Double type.
            The editor allows setting an unspecified value. The value control is
            a check box and a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates this editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.CreateValueControl">
            <summary>
            Creates the control that should edit the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.GetEditedValue">
            <summary>
            Gets the currently edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.OnSpecifiedCheckBoxCheckedChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the specified check box has been checked/unchecked.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.NSpecifiedDoublePropertyEditorSchema">
            <summary>
            Schema associated with NSpecifiedDoublePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.UnspecifiedValueProperty">
            <summary>
            Reference to the UnspecifiedValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.ZeroTemplate">
            <summary>
            A double property editor with default value set to 0.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.NaNTemplate">
            <summary>
            A double property editor with default value set to Double.NaN.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.MaxTemplate">
            <summary>
            A double property editor with default value set to Double.MaxValue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.UnspecifiedValue">
            <summary>
            Gets or sets the value of the UnspecifiedValue property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSpecifiedDoublePropertyEditor.NumericUpDown">
            <summary>
            Gets the numeric up down widget of this editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NInt32PropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of Int32 type. 
            The value control is a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt32PropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt32PropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt32PropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NInt32PropertyEditor.NInt32PropertyEditorSchema">
            <summary>
            Schema associated with NInt32PropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NInt64PropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of Int64 type. 
            The value control is a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt64PropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt64PropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NInt64PropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NInt64PropertyEditor.NInt64PropertyEditorSchema">
            <summary>
            Schema associated with NInt64PropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NUInt32PropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of UInt32 type. 
            The value control is a numeric up/down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NUInt32PropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NUInt32PropertyEditor.GetEditedValue">
            <summary>
            Gets the edited value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NUInt32PropertyEditor.SetEditedValue(System.Double)">
            <summary>
            Sets the edited value to the given one.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NUInt32PropertyEditor.NUInt32PropertyEditorSchema">
            <summary>
            Schema associated with NUInt32PropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMeasurePropertyEditor">
            <summary>
            A property editor, which displays a numeric up/down for selecting a numeric value
            and a combo box next to it for selecting the numeric value's measurement unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMeasurePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMeasurePropertyEditor.UpdateFromEditedNode">
            <summary>
            Overriden to update this property editor from its edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMeasurePropertyEditor.CreateValueControl">
            <summary>
            Overriden to create the value control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMeasurePropertyEditor.OnMeasureUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the value of the measure up/down has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NMeasurePropertyEditor.OnMeasureUpDownSelectedUnitChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the unit of the measure up/down has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NMeasurePropertyEditor.m_MeasureUpDown">
            <summary>
            The measure up/down used by this property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMeasurePropertyEditor.NMeasurePropertyEditorSchema">
            <summary>
            Schema associated with NMeasurePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMeasurePropertyEditor.UnitsProperty">
            <summary>
            Reference to the Units property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMeasurePropertyEditor.Units">
            <summary>
            Gets or sets the units of this property editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMeasurePropertyEditor.EditedNodeValue">
            <summary>
            Gets the edited node's numeric value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMeasurePropertyEditor.EditedNodeUnit">
            <summary>
            Gets the edited node's measurement unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NAnglePropertyEditor">
            <summary>
            The NAnglePropertyEditor class is by default assigned to properties of NAngle type.
            The editor shows a numeric up/down for selecting a numeric value and combo box for selecting
            its measurement unit.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NAnglePropertyEditor.DegreesMin">
            <summary>
            The minimal angle in degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NAnglePropertyEditor.DegreesMax">
            <summary>
            The maximal angle in degrees.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAnglePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAnglePropertyEditor.CreateValueControl">
            <summary>
            Overriden to create the value control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NAnglePropertyEditor.OnMeasureUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the value of the numeric up/down has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NAnglePropertyEditor.OnMeasureUpDownSelectedUnitChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the unit of the measure up/down has changed.
            This implementation also updates the Min, Max and Step values of the measure up/down according
            to the selected unit.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NAnglePropertyEditor.NAnglePropertyEditorSchema">
            <summary>
            Schema associated with NAnglePropertyEditor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NAnglePropertyEditor.EditedNodeValue">
            <summary>
            Overriden to return the edited angle's value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NAnglePropertyEditor.EditedNodeUnit">
            <summary>
            Overriden to return the edited angle's measurement unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMaskedEnumPropertyEditor">
            <summary>
            The NMaskedEnumPropertyEditor class is a property editor, which can be assigned
            to properties exposing a masked enum.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.CreateControl">
            <summary>
            Overriden to create a masked enum panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.OnEnumValueChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a property of the check box has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.NMaskedEnumPropertyEditorSchema">
            <summary>
            Schema associated with NFontPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.ShowOnlyBitValuesProperty">
            <summary>
            Reference to ShowOnlyBitValuesProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.DefaultTemplate">
            <summary>
            The default template for a masked enum property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.GroupBoxTemplate">
            <summary>
            The property editor is embedded in a group box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.DropDownTemplate">
            <summary>
            The edit control is a masked enum drop down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.Style">
            <summary>
            Gets/Sets the value of the Style property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMaskedEnumPropertyEditor.ShowOnlyBitValues">
            <summary>
            Gets or sets a value indicating whether only single bit of the enum will be displayed.
            </summary>
            <remarks>
            This property is used when you display enums with bit values and masks.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NParentChangedEventArgs">
            <summary>
            Event arguments, associated with parent the changed event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NParentChangedEventArgs.OldParentNode">
            <summary>
            Gets the node that previously contained the target node, for which the event is raised.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.INPagedElement">
            <summary>
            Implemented by visuals which can be rendered in a paged fasion.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.INPagedElement.BeginPrinting(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Called when printing begins.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.INPagedElement.QueryPageSettings(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Called before printing a page.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.INPagedElement.PrintPage(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Called when a print page needs to be displayed.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.INPagedElement.EndPrinting">
            <summary>
            Called when printing ends.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NGenericDocument`1">
            <summary>
            Serves as base class for documents, the content of which is an element of a certain type.
            </summary>
            <typeparam name="TContent"></typeparam>
        </member>
        <member name="T:Nevron.Nov.Dom.NDocument">
            <summary>
            Represents a document, that is the root element of an logically connected subtree of elements.
            </summary>
            <remarks>
            Documents are elements, which host a single content element, which can be obtained from the Content property. 
            The content of a document is in this way defined by a hierarchy of elements, the root element of which is the one and only element child of the document.
            <para>
            Documents provide its content element subtree with a consistent formatting model based on cascade style sheets, that are accessible from the StyleSheets property.
            Typically the document stylesheets are created by themes.
            </para>
            <para>
            Documents provide its document nodes subtree with optional support for undo/redo. The undo/redo functionally of the document is encapsulated 
            in an instance of the NHistoryService class, which can be obtained by the HistoryService property.
            </para>
            <para>
            Documents are deferrly evaluated, meaning that elements that reside in a document do not immediately perform expression calculations, 
            computed values calculations and measurement and layout, but rather wait for the document to call them back when it is time to do so.
            The evaluation of the document is performed by the Evaluate method, which is by default invoked at regular intervals of times. 
            The frequency of document evaluation is controlled by the EvaluationRate property.
            </para>
            <para>
            Because the document is a document node, it can reside in the hierachy of another document. 
            A document is said to be "Embedded", if it resides in another document.
            A document is said to be "Compound", if it has embedded documents.
            </para>
            <para>
            When a document is embedded you can specify whether it needs to inherit the cascade stylesheets of the owner document, with the help of the InheritStyleSheets property. 
            The stylesheets inherited by the owner document cascade are always of Inherited origin, while stylesheets contained inside the document StyleSheets collection are always of Local origin.
            </para>
            <para>
            The evaluation of an embedded document is integrated in the evaluation of the compound document in which it resides.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.GetEmbeddedDocuments">
            <summary>
            Gets a list of the documents, currently embedded in this document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.GetElementById(System.Int64)">
            <summary>
            Gets the element with the specified id
            </summary>
            <param name="id">element id</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.StartHistoryTransaction(System.String)">
            <summary>
            Starts a new transaction, in the document effective history service
            </summary>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.StartHistoryTransaction(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Starts a new transaction, in the document effective history service
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.CommitHistoryTransaction">
            <summary>
            Commits the last started transaction, in the document effective history service.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.RollbackHistoryTransaction">
            <summary>
            Rolls back the last started transaction, in the document effective history service.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.PauseHistoryService">
            <summary>
            Pauses the document effective history service.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.ResumeHistoryService">
            <summary>
            Resumes the owner document effective history service.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.GetDocumentElement">
            <summary>
            Gets the document content element (root of element hierarchy hosted by this document).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.Evaluate">
            <summary>
            Causes the document to perform evaluation. 
            Evaluation is automatically performed on regular intervals of time, but can also be performed by the user at will.
            Document evaluation computes all expressions, styles, measures and layouts and is performed prior to rendering. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.InvalidateCascade">
            <summary>
            Invalidates the cascade and forces cascade reconstruction and style recomputation of all document elements to be performed on the next document evaluation.
            If the document has embedded documents, that inherit stylesheets from this document cascade, their cascades are also invalidated.
            This method is automatically called when any styling node of the document have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.PoolForStyleValidation(Nevron.Nov.Dom.NElement)">
            <summary>
            Pools the specified element for style validation,
            thus causing it to receive a ValidateStyle callback at the next evaluation cycle.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.PoolForMeasureValidation(Nevron.Nov.Dom.NElement)">
            <summary>
            Pools the specified element for measure validation, 
            thus causing it to receive a ValidateMeasure callback at the next evaluation cycle.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.PoolForArrangeValidation(Nevron.Nov.Dom.NElement)">
            <summary>
            Pools the specified element for layout validation,
            thus causing it to receive a ValidateArrange callback at the next evaluation cycle.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.PoolForDisplayValidation(Nevron.Nov.Dom.NVisual)">
            <summary>
            Pools the specified element for display validation,
            thus causing it to receive a ValidateDisplay callback at the next evaluation cycle.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.GetEffectiveMedia">
            <summary>
            Gets the media that this document currently uses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.GetEffectiveResolution">
            <summary>
            Gets the resolution (in Dots Per Inch) that this document currently uses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnEvaluationRateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the EvaluationRate property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnInheritStyleSheetsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InheritStyleSheets property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnInheritMediaChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InheritMedia property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnInheritResolutionChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Resolution property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnInheritHistoryServiceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InheritHistoryService property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnMediaChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Media property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnResolutionChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnHistoryServiceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the HistoryService property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnDeepCopying(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called before the node is deeply copied from the specified source.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnEvaluating">
            <summary>
            Called when the document is about to be evaluated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDocument.OnEvaluated">
            <summary>
            Called after the document has been evaluated.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.NDocumentSchema">
            <summary>
            Schema associated with NDocument
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.MaxEvaluationPassesProperty">
            <summary>
            Reference to the MaxEvaluationPasses property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.MaxExpressionCyclesProperty">
            <summary>
            Reference to the MaxExpressionCycles property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.MaxMeasureArrangeCyclesProperty">
            <summary>
            Reference to the MaxExpressionCycles property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.MediaProperty">
            <summary>
            Reference to the Media property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.ModifiedProperty">
            <summary>
            Reference to the Modified property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.EvaluationRateProperty">
            <summary>
            Reference to the EvaluationRate property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.LocalHistoryServiceProperty">
            <summary>
            Reference to the HistoryService property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.ResolutionProperty">
            <summary>
            Reference to the Resolution property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.UniqueIdProperty">
            <summary>
            Reference to the UniqueId property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.IntegratedEvaluationProperty">
            <summary>
            Reference to the IntegratedEvaluation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.InheritStyleSheetsProperty">
            <summary>
            Reference to the InheritStyleSheets property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.InheritHistoryServiceProperty">
            <summary>
            Reference to the InheritHistoryService property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.InheritMediaProperty">
            <summary>
            Reference to the InheritMedia property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.InheritResolutionProperty">
            <summary>
            Reference to the InheritResolution property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDocument.StyleSheetsChild">
            <summary>
            Reference to the StyleSheets child
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NDocument.ModifiedChanged">
            <summary>
            Occurs when the document Modified property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.UniqueId">
            <summary>
            Gets or sets the Unique Id of this document. By default initialized with the value of a random GUID.
            It is an user responsibility to assign a globally unique id to this property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.Media">
            <summary>
            Gets or sets the document local media. It affects the set of stylesheets that need to be applied to the document.
            By default set to null. In case of null, the document will try to inherit a media from its parent document, if the InheritMedia property is true.
            The currently used effective media (either the local one or the one inherited from a parent document) can be obtained by the GetMedia() method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.IsEmbedded">
            <summary>
            Gets whether this document is embedded or not.
            If this property returns true, the compound document in which the document resides can be obtained by the OwnerDocument property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.IsCompound">
            <summary>
            Gets whether this document is a compound document or not.
            If this property returns true, the embedded documents can be obtained by the GetEmbeddedDocuments() method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.Modified">
            <summary>
            Specifies whether the document is considered modified from an earlier state.
            This property is automatically set to true by Nevron, whenever a change, that is recorded by history has occured in the document content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.MaxEvaluationPasses">
            <summary>
            Gets or sets the number of evaluation passes in which this document tries to resolve all expressions, styling, measure and layout tasks.
            The value of this property is considered before the document evaluation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.MaxExpressionCycles">
            <summary>
            Gets or sets the number of cycles the document must perform to resolve any cyclic expression dependencies, during a single evalution pass.
            The value of this property is considered before the document evaluation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.MaxMeasureArrangeCycles">
            <summary>
            Gets or sets the number of cycles the document must perform to resolve any cyclic measure/layout dependencies, during a single evalution pass.
            The value of this property is considered before the document evaluation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.CurEvaluationPass">
            <summary>
            Gets the current evalutaion pass.
            Returns -1 if the document is not currently evaluated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.CurMeasureArrangeCycle">
            <summary>
            Gets the current measure and arrange cycle. 
            Returns -1 if the document is not currently evaluated, or the evaluation is not inside the measure and arrange cycle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.CuExpressionEvaluationCycle">
            <summary>
            Gets the current expression evaluation cycle. 
            Returns -1 if the document is not currently evaluated, or the evaluation is not inside the expression evaluation cycle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.EvaluationRate">
            <summary>
            Gets or sets the number of times in a second in which the document automatically performs evaluation. 
            If set to zero or a negative value, the document will stop automatic evaluation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.IntegratedEvaluation">
            <summary>
            Gets or sets whether the evaluation of this document is integrated inside the evaluation of the owner document. 
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.InheritStyleSheets">
            <summary>
            Gets or sets whether this document inherits the stylesheets of its owner document or not.
            The sheets inherited from a base cascade are considered to be of inherited origin in the respective inheritance level.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.InheritHistoryService">
            <summary>
            Gets or sets whether this document inherits the history service of its owner document or not.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.InheritMedia">
            <summary>
            Gets or sets whether this document must inherit the media of this owner document, in case the value of the Media property is null.
            The currently used effective media (either the local one or the one inherited from a parent document) can be obtained by the GetMedia() method.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.InheritResolution">
            <summary>
            Gets or sets whether this document must inherit the resolution of its owner document, in case the Resolution property does not have an explicit local value.
            The currently used effective resolution (either the local one or the one inherited from a parent document) can be obtained by the GetResolution() method.s
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.StyleSheets">
            <summary>
            Gets or sets the collection of style sheets, that control the styling of the document elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.LocalHistoryService">
            <summary>
            Gets or sets the document local history service, which this document must use when it wants to record history actions.
            If specified, this history service becomes the effective history service of the document and all embedded documents that do not have a local history service.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.Resolution">
            <summary>
            Gets or sets the document local resolution.
            If not locally specified and the InheritResolution is true, the document will use the resolution of the parent document.
            If locally specified the value of this property is used.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDocument.DisplayWindow">
            <summary>
            Gets the document owner display window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NGenericDocument`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NGenericDocument`1.GetDocumentElement">
            <summary>
            Gets the document content element (root of element hierarchy hosted by this document).
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NGenericDocument`1.NGenericDocumentSchema">
            <summary>
            Schema associated with NGenericDocument
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NGenericDocument`1.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NGenericDocument`1.Content">
            <summary>
            Gets or sets the document element, which is the root of the document elements hierarchy.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeStyle">
            <summary>
            Represents a map between DOM properties and values, which is used for theming purposes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Contains(Nevron.Nov.Dom.NProperty)">
            <summary>
            Checks whether this theming style contains styling information for the given property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Contains(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Checks whether this theming style contains styling information for the given property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Set(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Sets the value for the specified property. 
            If the property-value association already exists, it will be overwritten.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Set(Nevron.Nov.Dom.NDomProperty,System.Object)">
            <summary>
            Sets the value for the specified property. 
            If the property-value association already exists, it will be overwritten.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Set(Nevron.Nov.Dom.NProperty,System.Object,System.Boolean)">
            <summary>
            Sets the value for the specified property. 
            If the property-value association already exists, it will be overwritten.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.Set(Nevron.Nov.Dom.NDomProperty,System.Object,System.Boolean)">
            <summary>
            Sets the value for the specified property. 
            If the property-value association already exists, it will be overwritten.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.SetInherited(Nevron.Nov.Dom.NProperty)">
            <summary>
            Specifies that the given property should inherit its value from its ancestors. 
            If a value is already specified for the property it is overwritten.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.SetInherited(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Specifies that the given property should inherit its value from its ancestors. 
            If a value is already specified for the property it is overwritten.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.SetInherited(Nevron.Nov.Dom.NProperty,System.Boolean)">
            <summary>
            Specifies that the given property should inherit its value from its ancestors. 
            If a value is already specified for the property it is overwritten.
            </summary>
            <param name="property"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeStyle.SetInherited(Nevron.Nov.Dom.NDomProperty,System.Boolean)">
            <summary>
            Specifies that the given property should inherit its value from its ancestors. 
            If a value is already specified for the property it is overwritten.
            </summary>
            <param name="property"></param>
            <param name="important"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeStyle.IsEmpty">
            <summary>
            Determines whether this style is empty (has not declarations)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeSkin">
            <summary>
            A Theme Skin facilitates the authoring of rules that apply to a specific type of elements.
            A Theme Skin applies to all type derivates, except the ones, which are also skinned with a skin of the same type.
            A Theme Skin type defines a set of DOM properties, for which a specific skin applies.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSkin.GetStyle(Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets the declaration for the specified state.
            </summary>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemingContext">
            <summary>
            Represents a theming context, which is a theme selector part that may change the currently matched target element (i.e. may emit combinators and conditions)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeSelectorPart">
            <summary>
            Serves as base class for states and contexts that are the parts from which a NThemeRuleSelector is constructed.
            Each part is responsible for emiting a specific set of conditions and combinators to the actual NSelector created by a NThemeRuleSelector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSelectorPart.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSelectorPart.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelectorPart.IsState">
            <summary>
            Determines whether this part logically represetns an object state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelectorPart.IsContext">
            <summary>
            Determines whether this part logically represetns an object state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelectorPart.IsComposite">
            <summary>
            Determines whether this part logically represents a composite state or context
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelectorPart.IsBasic">
            <summary>
            Determines whether this part logically represents a basic state or context
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemingState">
            <summary>
            Represents a theming state, which is a theme selector part that does not change the currently matched target element (i.e. may emit only conditions)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorValue3F">
            <summary>
            A color value with 3 components and alpha.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorValueF">
            <summary>
            Serves as base class for 3 and 4 component color values
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.#ctor(System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="alpha"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.Equals(System.Object)">
            <summary>
            Check whether the given object is equal to this color value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.GetHashCode">
            <summary>
            Gets the hash code of this color value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.GetCCount">
            <summary>
            Returns the number of color components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.GetCValue(System.Int32)">
            <summary>
            Gets the value of the color component at the specified index.
            </summary>
            <param name="c">Zero based index of the requested color component.</param>
            <returns>The requested color component as a floating point value in the range [0, 1].</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.CloneWithNewAlpha(System.Single)">
            <summary>
            Creates a duplicate instance with the same color and the specified alpha.
            </summary>
            <param name="alpha">Alpha value for the new object. Specified as a floating point value in the range [0, 1].</param>
            <returns>Returns the new color value object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValueF.Alpha">
            <summary>
            The alpha component of the color value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.op_Equality(Nevron.Nov.Graphics.NColorValueF,Nevron.Nov.Graphics.NColorValueF)">
            <summary>
            Compares the specified color values for equality.
            </summary>
            <param name="a">First color value. Can be null.</param>
            <param name="b">Second color value. Can be null.</param>
            <returns>Returns true if the color values are equal.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValueF.op_Inequality(Nevron.Nov.Graphics.NColorValueF,Nevron.Nov.Graphics.NColorValueF)">
            <summary>
            Compares the specified color values for inequality.
            </summary>
            <param name="a">First color value. Can be null.</param>
            <param name="b">Second color value. Can be null.</param>
            <returns>Returns true if the color values are different.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue3F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue3F.GetCCount">
            <summary>
            Overriden to return 3.
            </summary>
            <returns>Returns 3.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue3F.GetCValue(System.Int32)">
            <summary>
            Gets the value of the color component at the specified index.
            </summary>
            <param name="c">Zero based index of the requested color component. Must be 0, 1 or 2, otherwise the function throws an exception.</param>
            <returns>Returns the requested color component as a floating point value in the range [0, 1].</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue3F.CloneWithNewAlpha(System.Single)">
            <summary>
            Creates a duplicate instance with the same color and the specified alpha.
            </summary>
            <param name="alpha">Alpha value for the new object. Specified as a floating point value in the range [0, 1].</param>
            <returns>Returns the new color value object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue3F.C1">
            <summary>
            Color component 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue3F.C2">
            <summary>
            Color component 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue3F.C3">
            <summary>
            Color component 3
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorValue4F">
            <summary>
            A color value with 4 components and alpha
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue4F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue4F.GetCCount">
            <summary>
            Overriden to return 4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue4F.GetCValue(System.Int32)">
            <summary>
            Gets the value of the color component at the specified index.
            </summary>
            <param name="c">Zero based index of the requested color component. Must be 0, 1, 2 or 3 otherwise the function throws an exception.</param>
            <returns>Returns the requested color component as a floating point value in the range [0, 1].</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorValue4F.CloneWithNewAlpha(System.Single)">
            <summary>
            Creates a duplicate instance with the same color and the specified alpha.
            </summary>
            <param name="alpha">Alpha value for the new object. Specified as a floating point value in the range [0, 1].</param>
            <returns>Returns the new color value object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue4F.C1">
            <summary>
            Color component 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue4F.C2">
            <summary>
            Color component 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue4F.C3">
            <summary>
            Color component 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorValue4F.C4">
            <summary>
            Color component 4
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSelectPredefinedAdvancedGradientCommand">
            <summary>
            A command, which displays a dialog box that lets the user select a predefined advanced gradient.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDesignCommand">
            <summary>
            The NDesignCommand class represents an abstract command, 
            which serves as base class for all commands produced by command 
            factories at design time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.Execute">
            <summary>
            Must overide to perform the command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.CanExecute">
            <summary>
            Must override to determine whether the command can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.GetWidget(System.Boolean)">
            <summary>
            Gets the widget that can represent this command
            </summary>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.UpdateWidget">
            <summary>
            Updates the widget that represents this command, if the widget is created. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.OnEditedNodeChanged">
            <summary>
            Called when the node this command should be applied on has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommand.CreateWidget">
            <summary>
            Must overirde to create the widget for this command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesignCommand.Editor">
            <summary>
            Gets or sets the editor in the context of which the command will be executed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesignCommand.EditedNode">
            <summary>
            Gets or sets the node upon which the command executes its action.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesignCommand.EditedNodeDesigner">
            <summary>
            Gets the designer of the current node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectPredefinedAdvancedGradientCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectPredefinedAdvancedGradientCommand.Execute">
            <summary>
            Overiden to display a dialog box that lets the user select a predefined advanced gradient.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectPredefinedAdvancedGradientCommand.CanExecute">
            <summary>
            Always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectPredefinedAdvancedGradientCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor">
            <summary>
            A property editor for the Points property of NAdvancedGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.CreateControl">
            <summary>
            Overriden to create the editor's control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.AttachToEditedNode">
            <summary>
            Attaches to events of the edited advanced gradient and its gradient points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.DetachFromEditedNode">
            <summary>
            Detaches from events of the edited advanced gradient and its gradient points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NAdvancedGradientFillPointsPropertyEditor.NAdvancedGradientFillPointsPropertyEditorSchema">
            <summary>
            Schema associated with NAdvancedGradientFillPointsPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NGradientStopsPropertyEditor">
            <summary>
            A property editor for the GradientStops property of NGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientStopsPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientStopsPropertyEditor.CreateControl">
            <summary>
            Overriden to create the editor's control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientStopsPropertyEditor.AttachToEditedNode">
            <summary>
            Attaches to mutation events of the edited gradient point collection and its gradient points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientStopsPropertyEditor.DetachFromEditedNode">
            <summary>
            Detaches from events of the edited gradient point collection and its gradient points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientStopsPropertyEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NGradientStopsPropertyEditor.NGradientStopsPropertyEditorSchema">
            <summary>
            Schema associated with NGradientStopsPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NImagePropertyEditor">
            <summary>
            A property editor for Image property of NImageFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NImagePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NImagePropertyEditor.CreateControl">
            <summary>
            Overriden to create the editor's control.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NImagePropertyEditor.NImagePropertyEditorSchema">
            <summary>
            Schema associated with NImagePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPageSizePropertyEditor">
            <summary>
            The NPageSizePropertyEditor class is a popup property editor, 
            which is by default assigned to properties exposing a paper size object. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPageSizePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPageSizePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPageSizePropertyEditor.CreateControl">
            <summary>
            Overriden to create a font name combo box
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NPageSizePropertyEditor.NPageSizePropertyEditorSchema">
            <summary>
            Schema associated with NPageSizePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NCubicBezier">
            <summary>
            Represents a cubic Bezier curve in 2D space defined by four points:
            start point, two control points and end point.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.INGeometryObject">
            <summary>
            Implemented by structures and classes, which represent geometry objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.INGeometryObject.Translate(System.Double,System.Double)">
            <summary>
            Translates the geometry with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.INGeometryObject.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the geometry to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.INGeometryObject.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the geometry contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.INGeometryObject.Bounds">
            <summary>
            Gets the minimal enclosing bounding rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.INGeometryObject.BoundsRange">
            <summary>
            Gets the minimal enclosing bounding range
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.INOpenGeometryObject">
            <summary>
            Represents a geometry that represents a line or a curve and as such has distinct start and end points.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.INOpenGeometryObject.StartPoint">
            <summary>
            Gets the start point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.INOpenGeometryObject.EndPoint">
            <summary>
            Gets the end point of the open figure
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.INParametricCurve">
            <summary>
            Implemented by geometry primitives that have a parametric representation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.INParametricCurve.PointFromTime(System.Double)">
            <summary>
            Gets a point on the curve from a time parameter. 
            When t is equal to 0, returns the StartPoint of the curve.
            When t is equal to 1, returns the EndPoint of the curve.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="start"></param>
            <param name="control1"></param>
            <param name="control2"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="firstControlX"></param>
            <param name="firstControlY"></param>
            <param name="secondControlX"></param>
            <param name="secondControlY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.PointFromTime(System.Double)">
            <summary>
            Returns a point of the curve from the specified time parameter in the [0;1] range
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.op_Equality(Nevron.Nov.Graphics.NCubicBezier,Nevron.Nov.Graphics.NCubicBezier)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.op_Inequality(Nevron.Nov.Graphics.NCubicBezier,Nevron.Nov.Graphics.NCubicBezier)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.GetYMinMax(System.Double@,System.Double@)">
            <summary>
            Gets the Y min and max values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.GetXMinMax(System.Double@,System.Double@)">
            <summary>
            Gets the Y min and max values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.SplitAtTime(System.Double,Nevron.Nov.Graphics.NCubicBezier@,Nevron.Nov.Graphics.NCubicBezier@)">
            <summary>
            Splits a bezier curve at the specified time (in the [0:1] range) and returns the two resulting segments.
            </summary>
            <param name="t"></param>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCubicBezier.SplitAtTimes(System.Double,System.Double,Nevron.Nov.Graphics.NCubicBezier@,Nevron.Nov.Graphics.NCubicBezier@,Nevron.Nov.Graphics.NCubicBezier@)">
            <summary>
            Splits a bezier curve at the specified times in the (0:1) range and returns the three resulting segments.
            Throws an exception if the time arguments are not in range, or t1 >= t2.
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.StartX">
            <summary>
            X coordinate of the start point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.StartY">
            <summary>
            Y coordinate of the start point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.FirstControlX">
            <summary>
            X coordinate of the first control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.FirstControlY">
            <summary>
            Y coordinate of the first control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.SecondControlX">
            <summary>
            X coordinate of the second control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.SecondControlY">
            <summary>
            Y coordinate of the second control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.EndX">
            <summary>
            X coordinate of the end point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCubicBezier.EndY">
            <summary>
            Y coordinate of the end point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.BoundsRange">
            <summary>
            Gets the bounding range of the bezier segment.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.StartPoint">
            <summary>
            Gets or sets the start point of the bezier curve
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.EndPoint">
            <summary>
            Gets or sets the end point of the bezier curve
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.FirstControl">
            <summary>
            Gets or sets the first control point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCubicBezier.SecondControl">
            <summary>
            Gets or sets the second control point
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NQuadraticBezier">
            <summary>
            Represents a quadratic Bezier curve in 2D space defined by three points (start point, end point and one control point).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="start"></param>
            <param name="control"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="controlX"></param>
            <param name="controlY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.PointFromTime(System.Double)">
            <summary>
            Returns a point of the curve from the specified time parameter in the [0;1] range
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.op_Equality(Nevron.Nov.Graphics.NQuadraticBezier,Nevron.Nov.Graphics.NQuadraticBezier)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.op_Inequality(Nevron.Nov.Graphics.NQuadraticBezier,Nevron.Nov.Graphics.NQuadraticBezier)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.GetYMinMax(System.Double@,System.Double@)">
            <summary>
            Gets the Y min and max values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.GetXMinMax(System.Double@,System.Double@)">
            <summary>
            Gets the Y min and max values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.SplitAtTime(System.Double,Nevron.Nov.Graphics.NQuadraticBezier@,Nevron.Nov.Graphics.NQuadraticBezier@)">
            <summary>
            Subdivides the current quadratic bezier curve into two halves.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadraticBezier.SplitAtTimes(System.Double,System.Double,Nevron.Nov.Graphics.NQuadraticBezier@,Nevron.Nov.Graphics.NQuadraticBezier@,Nevron.Nov.Graphics.NQuadraticBezier@)">
            <summary>
            Splits a bezier curve at the specified times in the (0:1) range and returns the three resulting segments.
            Throws an exception if the time arguments are not in range, or t1 >= t2.
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.StartX">
            <summary>
            X coordinate of the start point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.StartY">
            <summary>
            Y coordinate of the start point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.ControlX">
            <summary>
            X coordinate of the control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.ControlY">
            <summary>
            Y coordinate of the control point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.EndX">
            <summary>
            X coordinate of the end point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadraticBezier.EndY">
            <summary>
            Y coordinate of the end point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.Bounds">
            <summary>
            Gets the minimal enclosing bounding rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.BoundsRange">
            <summary>
            Gets the minimal enclosing bounding range
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.StartPoint">
            <summary>
            Gets or sets the start point of the bezier curve
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.EndPoint">
            <summary>
            Gets or sets the end point of the bezier curve
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.Control">
            <summary>
            Gets or sets the control point of the quadratic bezier curve.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadraticBezier.Middle">
            <summary>
            Gets the middle point of the quadratic bezier curve.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NCircle">
            <summary>
            The NCircle structure represents a circle in 2D space defined by it's center and radius.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.INClosedGeometryObject">
            <summary>
            Implemented by geometry objects that enclose a certain area in 2D space.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.INClosedGeometryObject.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the geometry interior contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.INClosedGeometryObject.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the geometry interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillMode"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.INClosedGeometryObject.Perimeter">
            <summary>
            Gets the perimeter of the geometry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.#ctor(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the circle contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the circle interior contains the specified point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.PointFromTime(System.Double)">
            <summary>
            Gets a point on the curve from a time parameter. 
            When t is equal to 0, returns the StartPoint of the curve.
            When t is equal to 1, returns the EndPoint of the curve.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.ToString">
            <summary>
            Gets the string representation of this circle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.op_Equality(Nevron.Nov.Graphics.NCircle,Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.op_Inequality(Nevron.Nov.Graphics.NCircle,Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectWith(Nevron.Nov.Graphics.NLine,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this circle with the specified line
            </summary>
            <param name="line">line with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
            <returns>true if this circle intersects with the line, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this circle with the specified line segment
            </summary>
            <param name="line">line with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
            <returns>true if this circle intersects with the line, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectWith(Nevron.Nov.Graphics.NRay,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this circle with the specified ray
            </summary>
            <param name="ray">ray with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
            <returns>true if this circle intersects with the ray, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectsWith(Nevron.Nov.Graphics.NLine)">
            <summary>
            Determines whether this circle intersects with the specified line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.OutlineIntersectsWith(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether this circle outline intersects with the specified circle outline
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectsWith(Nevron.Nov.Graphics.NRay)">
            <summary>
            Determines whether this circle intersects with the specified ray
            </summary>
            <param name="ray"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.AreaIntersectsWith(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether this circle intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.AreaIntersectsWith(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether this circle area intersects with the specified circle area
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.IntersectionArea(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Computes the intersection area of this circle with the specified circle
            </summary>
            <param name="circle"></param>
            <returns>zero if circles do not intersect, otherwise returns the intersection area</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.PointFromAngle(System.Double)">
            <summary>
            Gets the point on the circle rim, which corresponds to the specified angle (in radians)
            </summary>
            <param name="angle">angle (in radians)</param>
            <returns>point on the circle rim</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.AngleFromPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the angle (in radians) of the ray connecting the point with the circle center
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.SectorArea(System.Double)">
            <summary>
            Gets the smaller sector area of the two possible circular sectors 
            defined by the specified angle (in radians).
            </summary>
            <param name="angle">sector angle (in radias)</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircle.CenterX">
            <summary>
            Circle center X
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircle.CenterY">
            <summary>
            Circle center Y
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircle.Radius">
            <summary>
            Circle radius
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircle.TryCreateFromThreePoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NCircle@)">
            <summary>
            Tries to create a circle from three points. Returns false if the points are coliner, or any pair of points are coincident.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.BoundsRange">
            <summary>
            Gets the minimal enclosing 2D range
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.Perimeter">
            <summary>
            Gets the circle perimeter (2 * PI * Radius)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.Diameter">
            <summary>
            Gets the diameter of the circle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.Area">
            <summary>
            Gets the circle area (PI * Radius * Radius)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.IsEmpty">
            <summary>
            Determines whether the circle is empty (its Radius is 0)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircle.Center">
            <summary>
            Gets or sets the center point
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NCircleSegment">
            <summary>
            Represents a segment of a circle in 2D space, defined by a circle and start and sweep angles
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="radius"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.#ctor(Nevron.Nov.Graphics.NPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.#ctor(Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.#ctor(Nevron.Nov.Graphics.NCircle,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="circle"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.PointFromTime(System.Double)">
            <summary>
            Returns a point of the curve from the specified time parameter in the [0;1] range
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.op_Equality(Nevron.Nov.Graphics.NCircleSegment,Nevron.Nov.Graphics.NCircleSegment)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.op_Inequality(Nevron.Nov.Graphics.NCircleSegment,Nevron.Nov.Graphics.NCircleSegment)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircleSegment.Circle">
            <summary>
            The circle to which the arc belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircleSegment.StartAngle">
            <summary>
            Starting angle of the arc (in radians)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCircleSegment.SweepAngle">
            <summary>
            Sweep angle of the arc (in radians)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.TryCreateFromThreePoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NCircleSegment@)">
            <summary>
            Tries to create a circle segment defined by three points.
            Returns false if the points are colinear or any pair of them is coincident.
            </summary>
            <param name="start"></param>
            <param name="control"></param>
            <param name="end"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCircleSegment.TryCreateFromTwoPointsAndBow(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double,Nevron.Nov.Graphics.NCircleSegment@)">
            <summary>
            Tries to create a circle segment that starts and ends at the specified points. 
            The bow parameter is the distance from the arc's midpoint to the midpoint of its chord.
            Returns false if the bow is zero, or the start and end points are coincident.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="bow"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.BoundsRange">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.StartPoint">
            <summary>
            Gets or sets the start point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.EndPoint">
            <summary>
            Gets or sets the end point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.IsEmpty">
            <summary>
            Determines whether the circle segment is empty (the circle is empty or the sweepAngle is zero)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.MiddlePoint">
            <summary>
            Gets the middle point of the segment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NCircleSegment.Length">
            <summary>
            Returns the length of the segment
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NEllipse">
            <summary>
            The NEllipse structure represents an ellipse in 2D space defined by it's center, 
            lengths of the major and minor axes and angle, which the ellipse major axis forms with the X-axis
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.#ctor(Nevron.Nov.Graphics.NRectangle,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.#ctor(Nevron.Nov.Graphics.NPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="center"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the rectangle contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.PointFromTime(System.Double)">
            <summary>
            Gets a point on the curve from a time parameter. 
            When t is equal to 0, returns the StartPoint of the curve.
            When t is equal to 1, returns the EndPoint of the curve.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.op_Equality(Nevron.Nov.Graphics.NEllipse,Nevron.Nov.Graphics.NEllipse)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.op_Inequality(Nevron.Nov.Graphics.NEllipse,Nevron.Nov.Graphics.NEllipse)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.Normalize">
            <summary>
            Normalizes the ellipse, so that A is larger than B.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.PointFromAngle(System.Double)">
            <summary>
            Gets the point on the ellipse rim, which corresponds to the specified angle (in radians)
            </summary>
            <param name="angle">angle (in radians), measured from the major ellipse axis</param>
            <returns>point on the ellipse rim</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.TimeFromAngle(System.Double)">
            <summary>
            Gets the parametric angle that corresponds to the geometric one
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this circle with the specified line segment
            </summary>
            <param name="line">line with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method has returned true)</param>
            <returns>true if this circle intersects with the line, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipse.CenterX">
            <summary>
            The X center of the ellipse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipse.CenterY">
            <summary>
            The Y center of the ellipse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipse.A">
            <summary>
            The semi major ellipse axis length
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipse.B">
            <summary>
            The semi minor ellipse axis length
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipse.Angle">
            <summary>
            Angle of the ellipse major axis and the X-axis (in radians)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipse.TryCreateFromThreePointsAngleAndRatio(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double,System.Double,Nevron.Nov.Graphics.NEllipse@)">
            <summary>
            Tries to create a normalized ellipse from three points, angle between the ellipse major axis and the X-axis and ratio between the major and minor axes.
            Returns false if the points are colinear, or any pair of points are coincident or ratio is zero.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="angle">angle (in radians)</param>
            <param name="ratio">ratio between the major and minor ellipse axes, must be >= 1</param>
            <param name="ellipse">resulting ellipse, valid only if method returns true</param>
            <returns>true if succeeded, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Perimeter">
            <summary>
            Gets the ellipse perimeter 
            </summary>
            <remarks>
            Uses an approximation
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.IsEmpty">
            <summary>
            Determines whether the ellipse is with zero a or b
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.IsNormalized">
            <summary>
            Determines whether the ellipse is normalized (a >= b)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Focus1">
            <summary>
            Gets the first focus of the ellipse
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Focus2">
            <summary>
            Gets the second focus of the ellipse
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.FocusDistance">
            <summary>
            Gets the distance of the focuses from the ellipse center (also known as c parameter)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Eccentricity">
            <summary>
            Gets the eccentricity of the ellipse (the position of the focus as a fraction of the semimajor axis - computed as c / a)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Ratio">
            <summary>
            Gets the ratio between the major and minor ellipse axes - computed as a / b
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Area">
            <summary>
            Gets the ellipse area (PI * a * b)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.InscribedCircleTransform">
            <summary>
            Obtains a transformation, which transforms the ellipse curve to the curve of the inscribed circle
            </summary>
            <remarks>
            The inscribed circle is a circle with center the center of the ellipse and with radius b
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.InscribedCircle">
            <summary>
            Gets the circle, which can be insribed in the ellipse
            </summary>
            <remarks>
            The inscribed circle is a circle with center the center of the ellipse and with radius b
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipse.Center">
            <summary>
            Gets or sets the ellipse center point
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NEllipseSegment">
            <summary>
            Represents a segment of an ellipse in 2D space, defined by an ellipse and start and sweep angles
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.#ctor(Nevron.Nov.Graphics.NEllipse,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="ellipse"></param>
            <param name="startAngle">Starting angle of the arc (in radians). Measured from the major axis of the ellipse.</param>
            <param name="sweepAngle">Sweep angle of the arc (in radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.#ctor(Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="ellipseBounds"></param>
            <param name="startAngle">Starting angle of the arc (in radians). Measured from the major axis of the ellipse.</param>
            <param name="sweepAngle">Sweep angle of the arc (in radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.#ctor(Nevron.Nov.Graphics.NPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="center"></param>
            <param name="xradius"></param>
            <param name="yradius"></param>
            <param name="startAngle">Starting angle of the arc (in radians). Measured from the major axis of the ellipse.</param>
            <param name="sweepAngle">Sweep angle of the arc (in radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="xradius"></param>
            <param name="yradius"></param>
            <param name="angle"></param>
            <param name="startAngle">Starting angle of the arc (in radians). Measured from the major axis of the ellipse.</param>
            <param name="sweepAngle">Sweep angle of the arc (in radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.PointFromTime(System.Double)">
            <summary>
            Returns a point of the curve from the specified time parameter in the [0;1] range
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.op_Equality(Nevron.Nov.Graphics.NEllipseSegment,Nevron.Nov.Graphics.NEllipseSegment)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.op_Inequality(Nevron.Nov.Graphics.NEllipseSegment,Nevron.Nov.Graphics.NEllipseSegment)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipseSegment.Ellipse">
            <summary>
            The ellipse to which the segment belongs.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipseSegment.StartAngle">
            <summary>
            Starting angle of the arc (in radians). Measured from the major axis of the ellipse.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NEllipseSegment.SweepAngle">
            <summary>
            Sweep angle of the arc (in radians).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEllipseSegment.TryCreateFromThreePointsAngleAndRatio(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double,System.Double,Nevron.Nov.Graphics.NEllipseSegment@)">
            <summary>
            Tries to create an ellipse segment, which passes throw the specified points and satisfies the angle and ratio parameters.
            </summary>
            <param name="start"></param>
            <param name="control"></param>
            <param name="end"></param>
            <param name="angle">angle between major ellipse axis and X-axis (in radians)</param>
            <param name="ratio">ratio between the major and minor ellipse axes, must be >= 1</param>
            <param name="segment">resulting ellipse segment. Valid only if method returns true</param>
            <returns>true if succeeded, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.StartPoint">
            <summary>
            Gets or sets the start point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.EndPoint">
            <summary>
            Gets or sets the end point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.IsEmpty">
            <summary>
            Determines whether the ellipse segment is empty (the ellipse is empty or the sweepAngle is zero)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEllipseSegment.MiddlePoint">
            <summary>
            Gets the middle point of the segment
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NLine">
            <summary>
            Represents a line in 2D space defined by it's general equasion: Ax + By + C = 0.
            This representation of a line is also called implicit or general line form.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.IntersectsWith(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Check if this line intersects the specified circle.
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.IntersectsWith(Nevron.Nov.Graphics.NLine)">
            <summary>
            Checks if this line intersects the given line.
            If the lines do not intersect then they are parallel.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.IntersectWith(Nevron.Nov.Graphics.NCircle,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Check if this line intersects the specified circle and returns the intersection points if it does.
            </summary>
            <param name="circle">The circle to check for intersection with.</param>
            <param name="intersectionPoints">The resulting intersection points (valid only if the method returned true).</param>
            <returns>True if this line intersects with the circle, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.IntersectWith(Nevron.Nov.Graphics.NLine,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Checks if this line inthersects the given line and returns the intersection point as
            an out parameter if it does.
            </summary>
            <param name="line">The line to to check for intersetion with.</param>
            <param name="result">The resulting intersection point, if the lines intersect.</param>
            <returns>True if lines intersect, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.NormalDistance(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Computes the normal distance of a point to the line.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.GetPerpLine(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets a line that is perpendicular to the current line and intersects it at the
            specified point.
            </summary>
            <param name="intersectionPoint">The intersection point.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.ToNRay">
            <summary>
            Converts this line to NRay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLine.FromTwoPoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets a normalized line from two points
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLine.A">
            <summary>
            The A parameter of the line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLine.B">
            <summary>
            The B parameter of the line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLine.C">
            <summary>
            The C parameter of the line.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLine.IsEmpty">
            <summary>
            Determines whether the line is empty (e.g. a and b are equal to 0)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NLineSegment">
            <summary>
            Represents a line segment defined by two points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the line contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetPointCount">
            <summary>
            Gets the line segment points count (2).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetPoint(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.PointFromTime(System.Double)">
            <summary>
            Gets the point on the ray, which corresponds to the specified time 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Equals(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Checks whether this line segment is equal to the other line segment
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ToString">
            <summary>
            Gets the string representation of this line segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.op_Equality(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.op_Inequality(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.IntersectsWith(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Checks if this line segment intersects or overlaps the given one.
            </summary>
            <param name="lineSegment">The other line segment.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.IntersectsWith(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Checks if this line segment intersects the specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Checks if this line segment intersects the given one and returns the intersection point as an out parameter if it does.
            </summary>
            <param name="lineSegment">The other line segment.</param>
            <param name="intersectionPoint">The resulting intersection point.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.IntersectWith(Nevron.Nov.Graphics.NLineSegment,System.Double,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Checks if this line segment intersects the given one with a specified tolerance
            and returns the intersection point as an out parameter if it does.
            </summary>
            <param name="lineSegment">The other line segment.</param>
            <param name="tolerance">The tolerance to use when checking for intersection.</param>
            <param name="intersectionPoint">The resulting intersection point.</param>
            <returns>
            True if the current line segment intersects the given one with
            the specified tolerance, otherwise false.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ExtendStart(System.Double)">
            <summary>
            Moves the start point along the line with the specified distance.
            A positive distance is directed away from the line center.
            </summary>
            <param name="distance">distance with which to move the start point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ExtendEnd(System.Double)">
            <summary>
            Moves the end point along the line with the specified distance.
            A positive distance is directed away from the line center.
            </summary>
            <param name="distance">distance with which to move the end point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetPointFromStart(System.Double)">
            <summary>
            Gets a point on the line that is at the specified distance from the start point.
            A positive distance is directed towards the line center.
            </summary>
            <param name="distance">The distance from the start to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetPointFromEnd(System.Double)">
            <summary>
            Gets a point on the line that is at the specified distance from the end point.
            A positive distance is directed towards the line center.
            </summary>
            <param name="distance">The distance from the end to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.DistanceSquare(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the minimal distance (to the power of 2) from a point from the line segment to the given point.
            The point on the segment closest to the target point is used.
            </summary>
            <param name="point">The target point.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Distance(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the distance from the line segment to the given point.
            The point on the segment closest to the target point is used.
            </summary>
            <param name="point">The target point.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.GetNearestPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets a point that lies on this line segment that is closest to the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ToNLine">
            <summary>
            Converts a line segment to a line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.ToNRay">
            <summary>
            Converts a line segment to a ray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Transform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Transforms this line
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.Transform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Transforms this line
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.TranslateStart(System.Double,System.Double)">
            <summary>
            Translates the start point of this line segment with the specified amount.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLineSegment.TranslateEnd(System.Double,System.Double)">
            <summary>
            Translates the end point of this line segment with the specified amount.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLineSegment.StartX">
            <summary>
            Start point X coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLineSegment.StartY">
            <summary>
            Start point Y coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLineSegment.EndX">
            <summary>
            End point X coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLineSegment.EndY">
            <summary>
            End point Y coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Center">
            <summary>
            Gets the center point of this line segment.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.StartPoint">
            <summary>
            Gets or sets the start point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.EndPoint">
            <summary>
            Gets or sets the end point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Start">
            <summary>
            Gets or sets the start point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.End">
            <summary>
            Gets or sets the end point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Middle">
            <summary>
            Gets the line segment middle point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.DX">
            <summary>
            Gets the end and start points X difference 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.DY">
            <summary>
            Gets the end and start points Y difference 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Length">
            <summary>
            Computes the length of the line segment.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLineSegment.Angle">
            <summary>
            Computes the angle (in radians), which the line forms with the X axis.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRay">
            <summary>
            Represents a ray in 2D space defined by an origin point and it's X and Y gradients.
            </summary>
            <remarks>
            A point on the ray satisfies the following equasions:
            x = origin.X + gradientX * t
            y = origin.Y + gradientY * t
            which is the parametric form of a line in 2D space
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.#ctor(Nevron.Nov.Graphics.NPoint,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="origin"></param>
            <param name="gradientX"></param>
            <param name="gradientY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.PointFromTime(System.Double)">
            <summary>
            Gets the point on the ray, which corresponds to the specified time 
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.Equals(Nevron.Nov.Graphics.NRay)">
            <summary>
            Checks whether this ray is equal to the other ray
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.ToNLine">
            <summary>
            Creates a line that lays on this ray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.ToNLineSegment">
            <summary>
            Converts this ray to a line segment
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRay.OriginX">
            <summary>
            The origin point X location.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRay.OriginY">
            <summary>
            The origin point Y location.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRay.GradientX">
            <summary>
            The X gradient of the ray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRay.GradientY">
            <summary>
            The Y gradient of the ray
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRay.FromTwoPoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets a normalized ray from two points
            </summary>
            <param name="point1">point1 - also used as origin</param>
            <param name="point2">point2 - togehter with point1 defines the ray gradient</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRay.IsNormalized">
            <summary>
            Determines whether the ray is normalized (e.g. its gradient vector is normalized
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRay.Gradient">
            <summary>
            Gets or sets the ray gradient (direction) vector
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRay.Origin">
            <summary>
            Gets or sets the ray origin.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NQuadrangle">
            <summary>
            Represents a quadrangle in 2D space defined by it's four corner vertices (A, B, C and D).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the quadrangle contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the quadrangle contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the quadrangle interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.GetPointCount">
            <summary>
            Gets the points count of the quadrangle (4).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.GetPoint(System.Int32)">
            <summary>
            Gets the quadrangle point at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Equals(Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Checks whether this quad is equal to the other quad
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.op_Equality(Nevron.Nov.Graphics.NQuadrangle,Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.op_Inequality(Nevron.Nov.Graphics.NQuadrangle,Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Transform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Transforms this quadrange
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NQuadrangle.Transform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Transforms this quadrange
            </summary>
            <param name="transform"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadrangle.A">
            <summary>
            The first vertex of the quadrangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadrangle.B">
            <summary>
            The second vertex of the quadrangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadrangle.C">
            <summary>
            The third vertex of the quadrangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NQuadrangle.D">
            <summary>
            The fourth vertex of the quadrangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadrangle.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadrangle.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadrangle.Perimeter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NQuadrangle.IsRectangle">
            <summary>
            Checks whether the quadrangle is a rectangle
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTriangle">
            <summary>
            The NTriangle structure represents a triangle in 2D space defined by it's three vertices: (a, b, c).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the triaangle contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the triangle contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.GetPointCount">
            <summary>
            Gets the points count of the triangle (3).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.GetPoint(System.Int32)">
            <summary>
            Gets the triangle point at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Equals(Nevron.Nov.Graphics.NTriangle)">
            <summary>
            Checks whether this triangle is equal to the other triangle
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Transform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Transforms this quadrange
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTriangle.Transform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Transforms this quadrange
            </summary>
            <param name="transform"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTriangle.A">
            <summary>
            The first vertex of the triangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTriangle.B">
            <summary>
            The second vertex of the triangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTriangle.C">
            <summary>
            The third vertex of the triangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.Perimeter">
            <summary>
            Gets the perimiter of the triangle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.Vertices">
            <summary>
            Gets an array of the triangle vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.MediCenter">
            <summary>
            Gets the medi center of the triangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.Area">
            <summary>
            Gets the triangle area
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.SideA">
            <summary>
            Gets the side against the a vertex (b, c)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.SideB">
            <summary>
            Gets the side against the b vertex (c, a)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTriangle.SideC">
            <summary>
            Gets the side against the c vertex (a, b)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NNurbsCurve">
            <summary>
            Represents a non-uniform rational B-spline (NURBS) curve.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.#ctor(Nevron.Nov.Graphics.NNurbsCurve)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the primitive contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.Refine">
            <summary>
            Refines the NURBS curve by inserting knot (and control points) in order to make
            each knot multiplicity equal to the NURBS curve degree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.InsertKnot(System.Double)">
            <summary>
            Inserts a knot and modifies and inserts control points as needed.
            </summary>
            <param name="knot"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsCurve.GetKnotMultiplicity(System.Double)">
            <summary>
            Gets the number of times the given knot value exists in the NURBS curve knot vector.
            </summary>
            <param name="knot"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.Bounds">
            <summary>
            Calculates the minimal enclosing rectangle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.StartPoint">
            <summary>
            Gets or sets the start point of the open figure.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.EndPoint">
            <summary>
            Gets or sets the end point of the open figure.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.Degree">
            <summary>
            Gets or sets the degree of the NURBS.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.ConrolPoints">
            <summary>
            Gets the control points of the NURBS.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NNurbsCurve.Knots">
            <summary>
            Gets the knot vector of the NURBS.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NNurbsControlPoint">
            <summary>
            Represents a weighted NURBS control point.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.ToString">
            <summary>
            Returns the string representation of this NURBS control point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.Translate(System.Double,System.Double)">
            <summary>
            Translates the control point with the given offset.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NNurbsControlPoint.ToNPoint">
            <summary>
            Converts this NURBS control point to an NPoint.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NNurbsControlPoint.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NNurbsControlPoint.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NNurbsControlPoint.Weight">
            <summary>
            Weight.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NSealableObject">
            <summary>
            Serves as base class for graphics objects such as graphics path, polygon etc., that can be sealed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.#ctor(Nevron.Nov.Graphics.NSealableObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.DeepClone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.Seal">
            <summary>
            Seals this graphics object. Further attempts to modify the object throw an exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.NewSealedException">
            <summary>
            Throwes the sealed exception
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.CanSeal">
            <summary>
            Determines whether this object can be sealed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSealableObject.OnSealed">
            <summary>
            Called when the object is sealed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NSealableObject.IsSealed">
            <summary>
            Gets whether this graphics object is sealed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphics2D">
            <summary>
            Serves as base class for objects that implement the NOV low level graphics.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPolyPointsBase">
            <summary>
            Serves as base for geometry objects that are constructed by multiple points of the same type, such as Polygon and Polyline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NMultiPointBase">
            <summary>
            Serves as base for geometry objects that are constructed by multiple points, such as polygon, polyline and graphics path.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.GetPointCount">
            <summary>
            Gets the count of points
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.GetPoint(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the polygon contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.GetPoints">
            <summary>
            Gets an array of the points contained in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.SetPoint(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the point at the specified index.
            </summary>
            <param name="index"></param>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.Transform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Transforms the graphics path with the specified transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.Transform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Transforms the graphics path with the specified transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.Scale(System.Double,System.Double)">
            <summary>
            Scales the points contained in this path with the specified scale factors
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMultiPointBase.Translate(System.Double,System.Double)">
            <summary>
            Translates the points contained in this path with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMultiPointBase.IsEmpty">
            <summary>
            Gets whether this object is empty (i.e. contains no points)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMultiPointBase.BoundsRange">
            <summary>
            Gets the bounds of this geometry object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMultiPointBase.Bounds">
            <summary>
            Gets the bounds of this geometry object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.#ctor(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.#ctor(Nevron.Nov.Graphics.NPolyPointsBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Recycle">
            <summary>
            Recycles this geometry object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds a point with the specified coordinates
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(System.Double,System.Double)">
            <summary>
            Adds a point with the specified coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds two points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds three points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Adds the specified points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Adds the specified number of points from the specified array.
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(System.Double[],System.Double[])">
            <summary>
            Adds the specified points
            </summary>
            <param name="xarr"></param>
            <param name="yarr"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyPointsBase.Add(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Adds the specified number of points from the specified arrays.
            </summary>
            <param name="xarr"></param>
            <param name="yarr"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolyPointsBase.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFixedTextureMapping">
            <summary>
            A texture mapping that aligns the texture to a specified point. The point's coordinates are relative to the 
            target rectangle and can be specified either in DIP units or in percent of the target rectangle's size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAlignTextureMapping">
            <summary>
            A texture mapping that aligns the texture to the target bounds.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTextureMapping">
            <summary>
            An abstract base class for texture mapping types. A texture mapping is an 
            attribute that specifies how a texture is mapped to a texture mappable object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTextureMapping.NTextureMappingSchema">
            <summary>
            Schema associated with NTextureMapping.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTextureMapping.NTextureMappingDesigner">
            <summary>
            Designer for NTextureMapping.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureMapping.NTextureMappingDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureMapping.NTextureMappingDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAlignTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAlignTextureMapping.#ctor(Nevron.Nov.ENHorizontalAlignment,Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="halign">Horizontal alignment of the texture image inside the target bounding rectangle.</param>
            <param name="valign">Vertical alignment of the texture image inside the target bounding rectangle.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAlignTextureMapping.NAlignTextureMappingSchema">
            <summary>
            Schema associated with NNormalTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAlignTextureMapping.HorizontalAlignmentProperty">
            <summary>
            Schema associated with HorizontalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAlignTextureMapping.VerticalAlignmentProperty">
            <summary>
            Schema associated with VerticalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAlignTextureMapping.TileModeProperty">
            <summary>
            Reference to the TileMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAlignTextureMapping.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the texture inside the target bounding rectangle.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAlignTextureMapping.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the texture inside the target bounding rectangle.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAlignTextureMapping.TileMode">
            <summary>
            Gets or sets the texture tiling mode. By default set to None.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFixedTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFixedTextureMapping.#ctor(Nevron.Nov.NMultiLength,Nevron.Nov.NMultiLength)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="hPosition">Horizontal position of the texture image inside the target bounding rectangle.</param>
            <param name="vPosition">Vertical position of the texture image inside the target bounding rectangle.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFixedTextureMapping.#ctor(Nevron.Nov.NMultiLength,Nevron.Nov.ENHorizontalAlignment,Nevron.Nov.NMultiLength,Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="hPosition">Horizontal position of the texture image inside the target bounding rectangle.</param>
            <param name="hAlign">Alignment of the image to the horizontal position.</param>
            <param name="vPosition">Vertical position of the texture image inside the target bounding rectangle.</param>
            <param name="vAlign">Alignment of the image to the vertical position.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFixedTextureMapping.NFixedTextureMappingSchema">
            <summary>
            Schema associated with NFixedTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFixedTextureMapping.HorizontalPositionProperty">
            <summary>
            Schema associated with HorizontalPosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFixedTextureMapping.VerticalPositionProperty">
            <summary>
            Schema associated with VerticalAlignment property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFixedTextureMapping.HorizontalPosition">
            <summary>
            Gets or sets the horizontal position of the texture inside the target bounding rectangle.
            By default set to 0%.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFixedTextureMapping.VerticalPosition">
            <summary>
            Gets or sets the vertical position of the texture inside the target bounding rectangle.
            By default set to 0%.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NCustomTextureMapping">
            <summary>
            Serves as base class for custom (user defined) texture mapping. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCustomTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCustomTextureMapping.GetTileMode">
            <summary>
            Must override to return the tile mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NCustomTextureMapping.Calibrate(Nevron.Nov.Dom.NPaintVisitor,System.Double,System.Double,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Must override to calibrate the texture.
            </summary>
            <param name="visitor"></param>
            <param name="imgWidth"></param>
            <param name="imgHeight"></param>
            <param name="targetRect"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NCustomTextureMapping.NCustomTextureMappingSchema">
            <summary>
            Schema associated with NNormalTextureMapping
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NTableFlowLayout">
            <summary>
            Represents a flow layout, which arranges the objects in a table the rows and cols of which are implicitly defined by a max ordinal and the arranged objects count.
            </summary>
            <remarks>
            <para>
            When the layout direction is horizontal (e.g. LeftToRight or RightToLeft), the MaxOrdinal property specifies the maximum number of columns in the table. 
            The table layout generates as many rows as needed to arrange all objects. Analogously when the layout direction is vertical (e.g. TopToBottom or BottomToTop), 
            the MaxOrdinal specifies the maximum number of rows, and the layout generates as many columns as needed.
            </para>
            <para>
            Both the rows and the columns generated by the layout can be considered as stacks and are hence subject to stack arrangement. 
            The way in which the table layout tries to fit/fill the available layout area, in the horizontal (columns) and vertical(rows) dimensions 
            is controlled by the RowFitMode/RowFillMode and ColFitMode/ColFillMode properties respectively.
            </para>
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Layout.NFlowLayoutBase">
            <summary>
            Represents a directed box layout, which serves as base class for flow layouts.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NDirectedBoxLayout">
            <summary>
            A box layout, which serves as base class for box layouts that have a controllable layout direction.
            Directed box layouts place adjacent boxes in single or multiple lanes, that flow in the direction specified by the Direction property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBoxLayout">
            <summary>
            A layout, which serves as base class for layouts, which can arrange boxes.
            </summary>
            <remarks>
            Boxes layouts are restricted to arranging only the vertices of the arranged object graph.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Layout.NLayout">
            <summary>
            Serves as base class for all layout algorithms.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NLayoutComponent">
            <summary>
            Serves as base class for subparts of layouts that need to know about the layout that contains them.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayoutComponent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayoutComponent.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
            <remarks>
            Overriden to store a reference to the first ancestor node, which is a layout
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Layout.NLayoutComponent.NLayoutComponentSchema">
            <summary>
            Schema associated with NLayoutComponent
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NLayoutComponent.OwnerLayout">
            <summary>
            Gets the layout that contains this layout component.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayout.Arrange(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects.
            </summary>
            <param name="objects">Objects to layout.</param>
            <param name="context">Layout context.</param> 
        </member>
        <member name="M:Nevron.Nov.Layout.NLayout.Arrange(System.Object[],Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects.
            </summary>
            <param name="objects">Objects to layout.</param>
            <param name="context">Layout context.</param> 
        </member>
        <member name="F:Nevron.Nov.Layout.NLayout.NLayoutSchema">
            <summary>
            Schema associated with NLayout.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NLayout.NLayoutDesigner">
            <summary>
            Designer associated with NLayout
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayout.NLayoutDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.Arrange(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects
            </summary>
            <param name="objects">objects to layout</param>
            <param name="context">layout context</param> 
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.Measure(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Gets the desired size of the layout container, assuming that the arranged objects
            are at their desired size. 
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.CreateBoxes(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to create a list of the boxes, which need to be measured or arranged from the specified objects list
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.CreateBoxBody">
            <summary>
            Called in the boxes creation process to create a cell instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to measure the desired size of the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.OnLayingOutBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified boxes
            </summary>
            <remarks>
            This implementation raises the LayingOutBoxes event
            </remarks>
            <param name="boxes"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.OnLayedOutBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified boxes
            </summary>
            <remarks>
            This implementation raises the LayedOutBoxes event
            </remarks>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.WriteBoxesBodies(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to write the cell bodies in the objects they represent
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.NBoxLayoutSchema">
            <summary>
            Schema associated with NBoxLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.LayingOutBoxesEvent">
            <summary>
            Laying out boxes event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.LayedOutBoxesEvent">
            <summary>
            Layed out boxes event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.UniformWidthsProperty">
            <summary>
            Reference to the UniformWidths property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.UniformHeightsProperty">
            <summary>
            Reference to the UniformHeights property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.Spacing_Category">
            <summary>
            Spacing category
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxLayout.UniformSize_Category">
            <summary>
            UniformSize category
            </summary>
        </member>
        <member name="E:Nevron.Nov.Layout.NBoxLayout.LayingOutBoxes">
            <summary>
            Occurs when boxes are about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Layout.NBoxLayout.LayedOutBoxes">
            <summary>
            Occurs when boxes have been layed out by this layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxLayout.HorizontalSpacing">
            <summary>
            Gets or sets the minimal horizontal spacing between the boxes. By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxLayout.VerticalSpacing">
            <summary>
            Gets or sets the minimal vertical spacing between the boxes. By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxLayout.UniformWidths">
            <summary>
            Gets or sets the way in which the boxes are resized in the X dimension prior to being measured or arranged.
            By default set to None, which means that boxes are initially having their desired widths.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxLayout.UniformHeights">
            <summary>
            Gets or sets the way in which the boxes are resized in the Y dimension prior to being measured or arranged.
            By default set to None, which means that boxes are initially having their desired heights.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBoxLayout.NBoxLayoutDesigner">
            <summary>
            The designer for box layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.NBoxLayoutDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayout.NBoxLayoutDesigner.GetCompatibleTypes">
            <summary>
            Gets a list of the compatible types for this designer schema
            (e.g. the types of the derived, instancable nodes, which can replace this node in specific context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NDirectedBoxLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NDirectedBoxLayout.NDirectedBoxLayoutSchema">
            <summary>
            Schema associated with NDirectedBoxLayout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NDirectedBoxLayout.DirectionProperty">
            <summary>
            Reference to the Direction property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NDirectedBoxLayout.Direction">
            <summary>
            Gets or sets the direction in which the layout arranges adjacent boxes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NFlowLayoutBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NFlowLayoutBase.ConvertFromCanonicalDirection(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Converts from conanically oriented cell list to the desired direction.
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NFlowLayoutBase.NFlowLayoutBaseSchema">
            <summary>
            Schema associated with NConstrainedBoxLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NFlowLayoutBase.InvertedProperty">
            <summary>
            Reference to the Inverted property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NFlowLayoutBase.Inverted">
            <summary>
            Gets or sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NTableFlowLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NTableFlowLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Measures the desired size of the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NTableFlowLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the flow layout algorithm
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.NTableFlowLayoutSchema">
            <summary>
            Schema associated with NTableLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.MaxOrdinalProperty">
            <summary>
            Reference to the MaxOrdinal property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.RowFillModeProperty">
            <summary>
            Reference to the RowFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.RowFitModeProperty">
            <summary>
            Reference to the RowFitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.ColFillModeProperty">
            <summary>
            Reference to the ColFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NTableFlowLayout.ColFitModeProperty">
            <summary>
            Reference to the ColFitMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NTableFlowLayout.MaxOrdinal">
            <summary>
            Gets or sets the maximum count of items in a single lane.
            If the Direction is set to LeftToRight or RightToLeft, the MaxOrdinal specifies the columns count.
            If the Direction is set to TopToBottom or BottomToTop, the MaxOrdinal specifies the rows count.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NTableFlowLayout.RowFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NTableFlowLayout.RowFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the rows dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NTableFlowLayout.ColFillMode">
            <summary>
            Gets or sets the mode in which the layout fills the available area in the cols dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NTableFlowLayout.ColFitMode">
            <summary>
            Gets or sets the mode in which the layout fits into the available area in the cols dimension.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NPresentationLoadAssemblyType">
            <summary>
            Dummy type used to explicitly load the Nevron.Nov.Presentation assembly
            </summary>
        </member>
        <member name="M:Nevron.Nov.NPresentationLoadAssemblyType.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.ENUITheme">
            <summary>
            Enumerates the predefined UI themes of Nevron Office applications.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.Windows8">
            <summary>
            Windows 8 theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.Windows7Aero">
            <summary>
            Windows 7 Aero theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsXP">
            <summary>
            Windows XP theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.MacOSLion">
            <summary>
            Mac OS X Lion theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsClassicStandard">
            <summary>
            Windows Classic Standard theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsClassicBrick">
            <summary>
            Windows Classic Brick theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsClassicLilac">
            <summary>
            Windows Classic Lilac theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsClassicPlum">
            <summary>
            Windows Classic Plum theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.ENUITheme.WindowsClassicTeal">
            <summary>
            Windows Classic Teal theme.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NApplicationOptions">
            <summary>
            Base class for the options of NOV applications.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NApplicationOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NApplicationOptions.NApplicationOptionsSchema">
            <summary>
            Schema associated with NApplicationOptions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NApplicationOptions.CommandUIProperty">
            <summary>
            Reference to the CommandUI property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NApplicationOptions.UIThemeProperty">
            <summary>
            Reference to the UITheme property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NApplicationOptions.CommandUI">
            <summary>
            Gets or sets the value of the CommandUI property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NApplicationOptions.UITheme">
            <summary>
            Gets or sets the value of the UITheme property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NApplicationOptions.NNApplicationOptionsDesigner">
            <summary>
            Designer for NApplicationOptions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NApplicationOptions.NNApplicationOptionsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBuilder">
            <summary>
            Base class for all builders that create UI elements and associate them with commands.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.#ctor(System.String)">
            <summary>
            Creates a command builder with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateComboBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a combo box and associates an NComboBoxCommandSource with it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateFontNameComboBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a font name combo box and associates an NComboBoxCommandSource with it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateFontSizeComboBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a combo box filled with a set of predefined font sizes and associates an
            NComboBoxIntegerCommandSource with it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateImageBox(Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates an image box for the given image.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateLabel(System.String)">
            <summary>
            Creates a label with the given text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateCheckBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a check box and associates an NToggleButtonCommandSource with it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateTextBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a text box and associates an NTextBoxCommandSource with it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMeasureUpDown(Nevron.Nov.NUnit[],Nevron.Nov.NUnit,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a measure up down and associates an NMeasureUpDownCommandSource with it.
            </summary>
            <param name="units">The units to show in the measure up down.</param>
            <param name="selectedUnit">The initially selected unit.</param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMenuItem(Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Creates a menu item.
            </summary>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMenuItem(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand,System.String)">
            <summary>
            Creates a menu item.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateCheckableMenuItem(Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Creates a checkable menu item.
            </summary>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateCheckableMenuItem(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a checkable menu item.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMenuSeparator">
            <summary>
            Creates a menu separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Create a split button and associates it with the given command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="image">The image for the action button of the split button.</param>
            <param name="moreOptionsImage">The image for the split button popup's "More Options..." button (if it has one).</param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMenuSplitButton(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a menu split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMaskedEnumPanel``1(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a masked enum panel and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateMenuItem(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a menu item.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Create a split button and associates it with the given command. The specified image is set to both the
            action button of the split button and its popup's "More Options..." button (if it has one).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.FillLineGapFactorCombo(Nevron.Nov.UI.NComboBox)">
            <summary>
            Returns a combo box filled with line spacing factors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilder.FillFontSizeCombo(Nevron.Nov.UI.NComboBox)">
            <summary>
            Fills the given combo box with the commonly used font sizes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBuilder.Name">
            <summary>
            Gets the name of this command builder.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NWindowState">
            <summary>
            Base class for window state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NFormStateWorkspaceItem">
            <summary>
            Represents a workspace item, which loads/saves the form state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NWorkspaceItem">
            <summary>
            Base class for workspace items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NFormStateWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NFormStateWorkspaceItem.WindowState">
            <summary>
            The window state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NFormStateWorkspaceItem.CommandUIType">
            <summary>
            Determines whether to show the ribbon or not.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NFormStateWorkspaceItem.UITheme">
            <summary>
            The used UI theme.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NRecentDocumentsWorkspaceItem">
            <summary>
            Recent documents workspace item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NRecentDocumentsWorkspaceItem.RecentDocuments">
            <summary>
            The array of recent document file names.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NRecentDocumentsWorkspaceItem.PinnedDocumentCount">
            <summary>
            The number of pinned documents.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NToolbarsStateWorkspaceItem">
            <summary>
            Represents a workspace item which loads a toolbar state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NToolbarsStateWorkspaceItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NToolbarsStateWorkspaceItem.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="toolbar"></param>
        </member>
        <member name="F:Nevron.Nov.Office.NToolbarsStateWorkspaceItem.ToolbarIndex">
            <summary>
            The ordinal index of the toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NToolbarsStateWorkspaceItem.Visibility">
            <summary>
            Determines whether the toolbar is visible.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NToolbarsStateWorkspaceItem.LaneOffset">
            <summary>
            The offset of the toolbar in the lane.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDateTimeHelpers">
            <summary>
            Contains helper methods for working with date time values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeHelpers.ToOADate(System.DateTime)">
            <summary>
            Converts a DateTime value to the equivalent OLE Automation date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeHelpers.FromOADate(System.Double)">
            <summary>
            Returns a DateTime equivalent to the specified OLE Automation Date.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeHelpers.Min(System.DateTime,System.DateTime)">
            <summary>
            Gets the smaller date and time.
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeHelpers.Max(System.DateTime,System.DateTime)">
            <summary>
            Gets the larger date and time.
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeHelpers.GetEndOfDay(System.DateTime)">
            <summary>
            Gets the end of the day of the given date, i.e. 23:59:59.9999999, the same day.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NAdjustmentRule">
            <summary>
            Provides information about a time zone adjustment, such as the transition to and from daylight saving time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NAdjustmentRule.#ctor(System.DateTime,System.DateTime,System.TimeSpan,Nevron.Nov.NTransitionTime,Nevron.Nov.NTransitionTime)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dateStart"></param>
            <param name="dateEnd"></param>
            <param name="daylightDelta"></param>
            <param name="daylightTransitionStart"></param>
            <param name="daylightTransitionEnd"></param>
        </member>
        <member name="M:Nevron.Nov.NAdjustmentRule.Equals(Nevron.Nov.NAdjustmentRule)">
            <summary>Determines whether the current <see cref="T:NTimeZoneInfo.AdjustmentRule" /> object is equal to a second <see cref="T:NTimeZoneInfo.AdjustmentRule" /> object.</summary>
            <returns>true if both <see cref="T:NTimeZoneInfo.AdjustmentRule" /> objects have equal values; otherwise, false.</returns>
            <param name="other">A second <see cref="T:NTimeZoneInfo.AdjustmentRule" /> object.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NAdjustmentRule.GetHashCode">
            <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
            <returns>A 32-bit signed integer that serves as the hash code for the current <see cref="T:NTimeZoneInfo.AdjustmentRule" /> object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NAdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,Nevron.Nov.NTransitionTime,Nevron.Nov.NTransitionTime)">
            <summary>Creates a new adjustment rule for a particular time zone.</summary>
            <returns>A <see cref="T:NTimeZoneInfo.AdjustmentRule" /> object that represents the new adjustment rule.</returns>
            <param name="dateStart">The effective date of the adjustment rule. If the value of the <paramref name="dateStart" /> parameter is DateTime.MinValue.Date, this is the first adjustment rule in effect for a time zone.   </param>
            <param name="dateEnd">The last date that the adjustment rule is in force. If the value of the <paramref name="dateEnd" /> parameter is DateTime.MaxValue.Date, the adjustment rule has no end date.</param>
            <param name="daylightDelta">The time change that results from the adjustment. This value is added to the time zone's <see cref="P:NTimeZoneInfo.BaseUtcOffset" /> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14. </param>
            <param name="daylightTransitionStart">A <see cref="T:NTimeZoneInfo.TransitionTime" /> object that defines the start of daylight saving time.</param>
            <param name="daylightTransitionEnd">A <see cref="T:NTimeZoneInfo.TransitionTime" /> object that defines the end of daylight saving time.   </param>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter does not equal <see cref="F:System.DateTimeKind.Unspecified" />.-or-The <paramref name="daylightTransitionStart" /> parameter is equal to the <paramref name="daylightTransitionEnd" /> parameter.-or-The <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter includes a time of day value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="dateEnd" /> is earlier than <paramref name="dateStart" />.-or-<paramref name="daylightDelta" /> is less than -14 or greater than 14.-or-The <see cref="P:System.TimeSpan.Milliseconds" /> property of the <paramref name="daylightDelta" /> parameter is not equal to 0.-or-The <see cref="P:System.TimeSpan.Ticks" /> property of the <paramref name="daylightDelta" /> parameter does not equal a whole number of seconds.</exception>
        </member>
        <member name="P:Nevron.Nov.NAdjustmentRule.DateStart">
            <summary>Gets the date when the adjustment rule takes effect.</summary>
            <returns>A <see cref="T:System.DateTime" /> value that indicates when the adjustment rule takes effect.</returns>
        </member>
        <member name="P:Nevron.Nov.NAdjustmentRule.DateEnd">
            <summary>Gets the date when the adjustment rule ceases to be in effect.</summary>
            <returns>A <see cref="T:System.DateTime" /> value that indicates the end date of the adjustment rule.</returns>
        </member>
        <member name="P:Nevron.Nov.NAdjustmentRule.DaylightDelta">
            <summary>Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).</summary>
            <returns>A <see cref="T:System.TimeSpan" /> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.</returns>
        </member>
        <member name="P:Nevron.Nov.NAdjustmentRule.DaylightTransitionStart">
            <summary>Gets information about the annual transition from standard time to daylight saving time.</summary>
            <returns>An <see cref="T:NTransitionTime" /> object that defines the annual transition from a time zone's standard time to daylight saving time.</returns>
        </member>
        <member name="P:Nevron.Nov.NAdjustmentRule.DaylightTransitionEnd">
            <summary>Gets information about the annual transition from daylight saving time back to standard time.</summary>
            <returns>A <see cref="T:NTransitionTime" /> object that defines the annual transition from daylight saving time back to the time zone's standard time.</returns>
        </member>
        <member name="T:Nevron.Nov.NTimeZone">
            <summary>
            Represents a time zone.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.DeepClone">
            <summary>
            Creates an identical copy of this time zone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.Nevron#Nov#Serialization#INDomCustomSerializable#Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.Nevron#Nov#Serialization#INDomCustomSerializable#Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.ToString">
            <summary>
            Gets the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Calculates the offset or difference between the time in this time zone and
            Coordinated Universal Time (UTC) for a particular date and time.
            </summary>
            <returns>
            An object that indicates the time difference between the two time zones.
            </returns>
            <param name="dateTime">
            The date and time to determine the offset for.
            </param>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.CreateCustom(System.String,System.TimeSpan,System.String,System.String,System.String,Nevron.Nov.NAdjustmentRule[],System.Boolean)">
            <summary>
            Creates a custom time zone with a specified identifier, an offset from Coordinated
            Universal Time (UTC), a display name, a standard time name, a daylight saving time name,
            daylight saving time rules, and a value that indicates whether the returned object
            reflects daylight saving time information.</summary>
            <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is true, the returned object has no daylight saving time data.</returns>
            <param name="id">The time zone's identifier.</param>
            <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
            <param name="displayName">The display name of the new time zone.   </param>
            <param name="standardDisplayName">The standard time name of the new time zone.</param>
            <param name="daylightDisplayName">The daylight saving time name of the new time zone.   </param>
            <param name="adjustmentRules">An array of <see cref="T:NTimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
            <param name="disableDaylightSavingTime">true to discard any daylight saving time-related information present in <paramref name="adjustmentRules" /> with the new object; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").-or-The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.-or-The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.-or-One or more elements in <paramref name="adjustmentRules" /> are null.-or-A date can have multiple adjustment rules applied to it.-or-The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:NAdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.FindById(System.String)">
            <summary>
            Retrieves a time zone by ID. Returns null if a time zone with the given ID is not registered.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.FindByUtcOffsetAndDisplayName(System.TimeSpan,System.String)">
            <summary>
            Retrieves a time zone by UTC offset and full or partial display name. Returns null if
            a time zone with the given UTC offset and display name is not registered.
            </summary>
            <param name="utcOffset"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.GetAllTimeZones">
            <summary>
            Returns an array with all currently registered time zones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.ConvertTimeToUtc(System.DateTime,Nevron.Nov.NTimeZone)">
            <summary>
            Converts the given time in the specified time zone to Coordinated Universal Time (UTC).
            </summary>
            <param name="dateTime"></param>
            <param name="sourceTimeZone"></param>
            <exception cref="T:System.ArgumentException">
            The dateTime parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).
            </exception>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.SafeConvertTimeToUtc(System.DateTime,Nevron.Nov.NTimeZone)">
            <summary>
            Safely converts the given time in the specified time zone to Coordinated Universal Time (UTC).
            If the dateTime is an invalid time (that is, it represents a time that does not exist because
            of a time zone's adjustment rules), then this method rounds it to the nearest valid date time
            instead of throwing an exception.
            </summary>
            <param name="dateTime"></param>
            <param name="sourceTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.ConvertTime(System.DateTime,Nevron.Nov.NTimeZone,Nevron.Nov.NTimeZone)">
            <summary>
            Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of <paramref name="dateTime"/>.</param>
            <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime"/> to.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.ConvertTime(System.DateTime,Nevron.Nov.NTimeZone,Nevron.Nov.NTimeZone,System.Boolean)">
            <summary>
            Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of <paramref name="dateTime"/>.</param>
            <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime"/> to.</param>
            <param name="validateSourceTimeZone">Determines whether to check if the given date time kind matches the specified source time zone.</param>
            <exception cref="T:System.ArgumentException">
            The dateTime parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).
            </exception>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTimeZone.SafeConvertTime(System.DateTime,Nevron.Nov.NTimeZone,Nevron.Nov.NTimeZone,System.Boolean)">
            <summary>
            Safely converts a time from one time zone to another. If the dateTime is an invalid time
            (that is, it represents a time that does not exist because of a time zone's adjustment rules),
            then this method rounds it to the nearest valid date time instead of throwing an exception.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of <paramref name="dateTime"/>.</param>
            <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime"/> to.</param>
            <param name="validateSourceTimeZone">Determines whether to check if the given date time kind matches the specified source time zone.</param>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.Id">
            <summary>Gets the time zone identifier.</summary>
            <returns>The time zone identifier.</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.DisplayName">
            <summary>Gets the localized general display name that represents the time zone.</summary>
            <returns>The time zone's localized general display name.</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.StandardName">
            <summary>Gets the localized display name for the time zone's standard time.</summary>
            <returns>The localized display name of the time zone's standard time.</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.DaylightName">
            <summary>Gets the localized display name for the current time zone's daylight saving time.</summary>
            <returns>The display name for the time zone's localized daylight saving time.</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.BaseUtcOffset">
            <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
            <returns>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.SupportsDaylightSavingTime">
            <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
            <returns>true if the time zone supports daylight saving time; otherwise, false.</returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.Local">
            <summary>
            Gets a <see cref="T:Nevron.Nov.NTimeZone" /> object that represents
            the local time zone.</summary>
            <returns>
            An object that represents the local time zone.
            </returns>
        </member>
        <member name="P:Nevron.Nov.NTimeZone.Utc">
            <summary>
            Gets a <see cref="T:Nevron.Nov.NTimeZone" /> object that represents
            the Coordinated Universal Time (UTC) zone.
            </summary>
            <returns>
            An object that represents the Coordinated Universal Time (UTC) zone.
            </returns>
        </member>
        <member name="T:Nevron.Nov.NTransitionTime">
            <summary>
            Provides information about a specific time change, such as the change from daylight
            saving time to standard time or vice versa, in a particular time zone.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.#ctor(System.Boolean,System.DateTime,System.DayOfWeek,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="isFixedDateRule"></param>
            <param name="timeOfDay"></param>
            <param name="dayOfWeek"></param>
            <param name="day"></param>
            <param name="week"></param>
            <param name="month"></param>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.Equals(Nevron.Nov.NTransitionTime)">
            <summary>Determines whether the current <see cref="T:NTimeZoneInfo.TransitionTime" /> object has identical values to a second <see cref="T:NTimeZoneInfo.TransitionTime" /> object.</summary>
            <returns>true if the two objects have identical property values; otherwise, false.</returns>
            <param name="other">An object to compare to the current instance. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.Equals(System.Object)">
            <summary>Determines whether an object has identical values to the current <see cref="T:NTimeZoneInfo.TransitionTime" /> object.</summary>
            <returns>true if the two objects are equal; otherwise, false.</returns>
            <param name="obj">An object to compare with the current <see cref="T:NTimeZoneInfo.TransitionTime" /> object.   </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.GetHashCode">
            <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
            <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:NTimeZoneInfo.TransitionTime" /> object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.op_Equality(Nevron.Nov.NTransitionTime,Nevron.Nov.NTransitionTime)">
            <summary>Determines whether two specified <see cref="T:NTimeZoneInfo.TransitionTime" /> objects are equal.</summary>
            <returns>true if <paramref name="t1" /> and <paramref name="t2" /> have identical values; otherwise, false. </returns>
            <param name="t1">The first object to compare.</param>
            <param name="t2">The second object to compare.</param>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.op_Inequality(Nevron.Nov.NTransitionTime,Nevron.Nov.NTransitionTime)">
            <summary>Determines whether two specified <see cref="T:NTimeZoneInfo.TransitionTime" /> objects are not equal.</summary>
            <returns>true if <paramref name="t1" /> and <paramref name="t2" /> have any different member values; otherwise, false.</returns>
            <param name="t1">The first object to compare.</param>
            <param name="t2">The second object to compare.</param>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.CreateFixedDateRule(System.DateTime,System.Int32,System.Int32)">
            <summary>Defines a time change that uses a fixed-date rule.</summary>
            <returns>Data about the time change.</returns>
            <param name="timeOfDay">The time at which the time change occurs.</param>
            <param name="month">The month in which the time change occurs.</param>
            <param name="day">The day of the month on which the time change occurs.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="timeOfDay" /> parameter has a non-default date component.-or-The <paramref name="timeOfDay" /> parameter's <see cref="P:System.DateTime.Kind" /> property is not <see cref="F:System.DateTimeKind.Unspecified" />.-or-The <paramref name="timeOfDay" /> parameter does not represent a whole number of milliseconds.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="month" /> parameter is less than 1 or greater than 12.-or-The <paramref name="day" /> parameter is less than 1 or greater than 31.</exception>
        </member>
        <member name="M:Nevron.Nov.NTransitionTime.CreateFloatingDateRule(System.DateTime,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>Defines a time change that uses a floating-date rule.</summary>
            <returns>Data about the time change.</returns>
            <param name="timeOfDay">The time at which the time change occurs.</param>
            <param name="month">The month in which the time change occurs.</param>
            <param name="week">The week of the month in which the time change occurs.</param>
            <param name="dayOfWeek">The day of the week on which the time change occurs.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="timeOfDay" /> parameter has a non-default date component.-or-The <paramref name="timeOfDay" /> parameter does not represent a whole number of milliseconds.-or-The <paramref name="timeOfDay" /> parameter's <see cref="P:System.DateTime.Kind" /> property is not <see cref="F:System.DateTimeKind.Unspecified" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="month" /> is less than 1 or greater than 12.-or-<paramref name="week" /> is less than 1 or greater than 5.-or-The <paramref name="dayOfWeek" /> parameter is not a member of the <see cref="T:System.DayOfWeek" /> enumeration.</exception>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.TimeOfDay">
            <summary>Gets the hour, minute, and second at which the time change occurs.</summary>
            <returns>The time of day at which the time change occurs.</returns>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.Month">
            <summary>Gets the month in which the time change occurs.</summary>
            <returns>The month in which the time change occurs.</returns>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.Week">
            <summary>Gets the week of the month in which a time change occurs.</summary>
            <returns>The week of the month in which the time change occurs.</returns>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.Day">
            <summary>Gets the day on which the time change occurs.</summary>
            <returns>The day on which the time change occurs.</returns>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.DayOfWeek">
            <summary>Gets the day of the week on which the time change occurs.</summary>
            <returns>The day of the week on which the time change occurs.</returns>
        </member>
        <member name="P:Nevron.Nov.NTransitionTime.IsFixedDateRule">
            <summary>Gets a value indicating whether the time change occurs at a fixed date and time (such as November 1) or a floating date and time (such as the last Sunday of October).</summary>
            <returns>true if the time change rule is fixed-date; false if the time change rule is floating-date.</returns>
        </member>
        <member name="T:Nevron.Nov.Globalization.NCodeLocalizationDictionary">
            <summary>
            Singleton class for the code localization dictionary.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NLocalizationDictionary">
            <summary>
            Represents a localization dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.Set(System.String,System.String)">
            <summary>
            Associates the given key with the specified translation in the root category.
            </summary>
            <param name="key"></param>
            <param name="translation"></param>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.Set(System.String,System.String,System.String)">
            <summary>
            Associates the given key with the specified translation in the category
            specified by the given path.
            </summary>
            <param name="categoryPath"></param>
            <param name="key"></param>
            <param name="translation"></param>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.Get(System.String,System.String)">
            <summary>
            Returns the translation of the given key in the specified category.
            If one of the categories in the given path does not exist or the key has
            no translation set for the given category, null is returned.
            </summary>
            <param name="categoryPath"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.GetOrCreate(System.String,System.String)">
            <summary>
            Returns the translation of the given key in the specified category.
            If the sub categories or the key do not exist, they are created and null is
            returned.
            </summary>
            <param name="categoryPath"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.Clear">
            <summary>
            Removes all items and sub categories from this dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the dictionary in XML format to the given stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads the dictionary from the given stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Nov.Globalization.NLocalizationDictionary.ShowEditor">
            <summary>
            Shows a dialog window for editing this dictionary.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Globalization.NLocalizationDictionary.Name">
            <summary>
            Gets the name of this dictionary.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NCodeLocalizationDictionary.Instance">
            <summary>
            The code localization dictionary instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLoc">
            <summary>
            Provides string translations using the user dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLoc.Get(System.String,System.String)">
            <summary>
            Gets the translation of the given key from the user dictionary. If a translation
            for the key does not exist, the key itself is returned.
            </summary>
            <param name="key"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NLoc.ModuleNameResolver">
            <summary>
            Gets or sets the module name resolver, i.e. the object that should return a module name
            given a source code file path.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NModuleNameResolver">
            <summary>
            Resolves the name of a module given a source code file path.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NModuleNameResolver.GetModuleName(System.String)">
            <summary>
            Gets the name of the module for the given file path.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.INStateCopyable">
            <summary>
            Interface implemented by nodes, which have a cloneable state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.INStateCopyable.CopyState(Nevron.Nov.Dom.NNode)">
            <summary>
            Copies the state from the given source node.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Nevron.Nov.NMachineInfoService">
            <summary>
            Represents a service that provides the machine information
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLicenseDialog">
            <summary>
            Represents the Nevron license dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicenseDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicenseDialog.UpdateTitleBar">
            <summary>
            Updates the title bar text of the license dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NLicenseDialog.NLicenseDialogSchema">
            <summary>
            Schema associated with NLicenseDialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NLicenseDialog.LicenseDialogResultProperty">
            <summary>
            Reference to the LicenseDialogResult property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLicenseDialog.Message">
            <summary>
            Gets or sets the message of this license dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLicenseDialog.LicenseDialogResult">
            <summary>
            Gets or sets the value of the LicenseDialogResult property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NUnitDomSerializer">
            <summary>
            Represents an NUnit DOM surrogate serializer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NUnitDomSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NUnitDomSerializer.#ctor(Nevron.Nov.NUnit)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NUnitDomSerializer.GetDomRealObject(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            Gets the dom object behind this surrogate.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnitDomSerializer.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NUnitDomSerializer.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="T:Nevron.Nov.NCompare">
            <summary>
            Contains helpers for making comparisions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NCompare.DBNull">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.NConvert">
            <summary>
            Converts data from one type to another.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NConvert.FromBase64Chars(System.Char[])">
            <summary>
            Converts the given Base64 char array to a byte array.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.FromBase64Chars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts the given Base64 char array to a byte array.
            </summary>
            <param name="chars"></param>
            <param name="charIndex"></param>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.FromBase64String(System.String)">
            <summary>
            Converts the given Base64 string to a byte array.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.ToBase64Chars(System.Byte[])">
            <summary>
            Converts the given byte array to a Base64 char array.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.ToBase64Chars(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the given byte array to a Base64 char array.
            </summary>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.ToBase64Chars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Converts a subset of the given byte array to an equivalent subset of an Unicode
            character array encoded with base-64 digits. Parameters specify the subsets as
            offsets in the input and output arrays, and the number of elements in the input
            array to convert.
            </summary>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <param name="byteCount"></param>
            <param name="chars"></param>
            <param name="charIndex"></param>
            <returns>A 32-bit signed integer containing the number of chars created in the chars array.</returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.ToBase64String(System.Byte[])">
            <summary>
            Converts the given byte array to a Base64 string.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the specified portion of the given byte array to a Base64 string.
            </summary>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NConvert.GetBase64CharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the number of Base64 characters required to encode the specified
            portion of the given byte array.
            </summary>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NTransactionResult">
            <summary>
            Transaction result information
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="transactionName"></param>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.Combine(Nevron.Nov.NTransactionResult)">
            <summary>
            Combines the result of this batch with the result of another batch
            </summary>
            <param name="batchResult">result of another batch operation</param>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.LogError(Nevron.Nov.Dom.NNode,System.Exception)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="node"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.LogError(Nevron.Nov.Dom.NNode,System.String)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="node"></param>
            <param name="error"></param>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.LogError(System.Exception)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Nevron.Nov.NTransactionResult.FormatMessage">
            <summary>
            Formats a string representation of this message
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTransactionResult.TransactionName">
            <summary>
            Gets or sets the transaction name with which the batch result is associated
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTransactionResult.Status">
            <summary>
            Indicates the current state of the batch result
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTransactionResult.ErrorLog">
            <summary>
            Error log
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTransactionResult.Succeeded">
            <summary>
            Determines whether the transaction was successful
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTFontDescriptor">
            <summary>
            Describes a font as a pair of name and variant
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontDescriptor.#ctor(System.String,Nevron.Nov.Graphics.ENFontVariant)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="familyName"></param>
            <param name="fontVariant"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontDescriptor.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontDescriptor.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.TrueType.NOTFontDescriptor.m_FamilyName">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="F:Nevron.Nov.TrueType.NOTFontDescriptor.m_FontVariant">
            <summary>
            The variant of the font
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTextBackground">
            <summary>
            The NTextBackground class defines the appearance of the text bac
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBackground.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.NTextBackgroundSchema">
            <summary>
            Schema associated with NTextBackground.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.VisibleProperty">
            <summary>
            Reference to the Visible property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.EdgePercentProperty">
            <summary>
            Reference to the EdgePercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.PaddingProperty">
            <summary>
            Reference to the Padding property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBackground.BorderProperty">
            <summary>
            Reference to the Border property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBackground.Visible">
            <summary>
            Gets or sets whether the bacplane is visible
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBackground.EdgePercent">
            <summary>
            Gets or sets the edge percent when the shape is set to smooth edge or cut edge rectangle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBackground.Padding">
            <summary>
            Gets or sets the padding of the backplane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBackground.Fill">
            <summary>
            Gets or sets the fill the backround
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBackground.Border">
            <summary>
            Gets or sets the border property of the text background
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTextStyle">
            <summary>
            Represents a text style
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextStyle.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextStyle.#ctor(Nevron.Nov.Graphics.NFont)">
            <summary>
            Initializer constructor
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextStyle.#ctor(Nevron.Nov.Graphics.NFont,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor
            </summary>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.NTextStyleSchema">
            <summary>
            Schema associated with NTextStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.FontProperty">
            <summary>
            Reference to the Font property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.StrokeProperty">
            <summary>
            Reference to the Stroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.BackgroundProperty">
            <summary>
            Reference to the Background property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.HorzAlignProperty">
            <summary>
            Reference to the HorzAlign property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.VertAlignProperty">
            <summary>
            Reference to the VertAlign property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.WrapModeProperty">
            <summary>
            Reference to the WrapMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextStyle.MaxTextWidthProperty">
            <summary>
            Reference to the MaxTextWidth property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.MaxTextWidth">
            <summary>
            Gets or sets the max text width
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.WrapMode">
            <summary>
            Gets or sets the text wrap mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.Font">
            <summary>
            Gets / sets the font of this text object
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.Fill">
            <summary>
            Gets / sets the fill of the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.Stroke">
            <summary>
            Gets / sets the stroke of the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.Background">
            <summary>
            Gets / sets the text backgrounds
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.HorzAlign">
            <summary>
            Ges / sets the horizontal text alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextStyle.VertAlign">
            <summary>
            Gets / sets the vertial text alignment
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBoxIntegerCommandSource">
            <summary>
            A combo box command source, which accepts only integer values as text, for example
            the command source of a font size combo box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBoxCommandSource">
            <summary>
            A command source that can be applied to NComboBox widgets.
            It subsrcibes to the NComboBox.SelectedIndexChanged event to execute
            the command with a parameter equal to selected combo box index.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandSource">
            <summary>
            An extended attribute that is applied to elements that must be considered as command sources.
            A command source, is typically a widget that is used to invoke a command action upon a command target.
            The command target is dynamically provided by the command source ancestors chain.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.GetCommand">
            <summary>
            Gets the command associated with that command source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.CreateDefaultTooltipContent">
            <summary>
            Creates the default tooltip content for the current command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.RaiseQueryCommandTarget">
            <summary>
            Raises the NCommand.QueryTarget event and returns the resulting command target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.RaiseUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.ENCommandSourceUpdateMask)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="updateMask"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.ExecuteCommand(System.Object)">
            <summary>
            Executes this source command with the specified parameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.UpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.ENCommandSourceUpdateMask)">
            <summary>
            Updates the command source owner element, by raising the NCommand.UpdateCommandSource event for the specified target.
            </summary>
            <param name="target"></param>
            <param name="updateMask"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.UpdateOwnerElement(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the owner element 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the owner element from the result of the NCommand.UpdateCommandSource event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.OnOwnerElementMouseOverChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the mouse over changed for the specified owner element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.OnCommandNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CommandName has changed
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.OnUpdateIntervalChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the UpdateInterval has changed
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.TryStartUpdateTimer">
            <summary>
            Starts the update timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.StopUpdateTimer">
            <summary>
            Stops the update timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.OnUpdateTimerTick">
            <summary>
            Called at the interval defined by the UpdateInterval property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.NCommandSourceSchema">
            <summary>
            Schema associated with NCommandSource
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.CommandNameProperty">
            <summary>
            Reference to the CommandName property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.CommandParameterProperty">
            <summary>
            Reference to the CommandParameter property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.UpdateIntervalProperty">
            <summary>
            Reference to the UpdateInterval property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.ShowTooltipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandSource.CommandSourcePropertyEx">
            <summary>
            Reference to the CommandSource extended property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.SetCommandSource(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NCommandSource)">
            <summary>
            Sets the value of the command source property to the specified element
            </summary>
            <param name="element"></param>
            <param name="src"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSource.GetCommandSource(Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the value of the command source property to the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandSource.CommandName">
            <summary>
            Gets or sets the full name of the command
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandSource.UpdateInterval">
            <summary>
            Gets or sets the update interval (in milliseconds), at which to update the visual state of the command source element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandSource.CommandParameter">
            <summary>
            Get/Sets the parameter associated with this command source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandSource.ShowTooltip">
            <summary>
            Gets or sets whether the command source automatically shows a tooltip, when the mouse enters the owner element.
            The content of the tooltip is obtained dynamically by the UpdateCommandSource event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element SelectedIndex property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.OnComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the combo box selected index has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.OnTextBoxFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Called when the the combo box's text box has lost focus.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.OnTextBoxKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Called when a key is pressed while the combo text box has focus.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxCommandSource.OnTextBoxTextValidated(Nevron.Nov.UI.NComboTextBox)">
            <summary>
            Called when the text of the combo text box has been validated. The default
            implementation checks whether the text of the text box matches a combo box
            item and sets the combo box selected index accordingly.
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBoxCommandSource.NComboBoxCommandSourceSchema">
            <summary>
            Schema associated with NComboBoxCommandSource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxIntegerCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxIntegerCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxIntegerCommandSource.OnTextBoxTextValidated(Nevron.Nov.UI.NComboTextBox)">
            <summary>
            Called when the text of the combo text box has been validated. If the text of the text box
            matches a combo box item, the selected index of the combo box is changed, if not, the
            index is not changed and the command is executed with the text of the text box.
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBoxIntegerCommandSource.NComboBoxIntegerCommandSourceSchema">
            <summary>
            Schema associated with NComboBoxIntegerCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandUIHolder">
            <summary>
            A content holder, which hosts a command target with its commanding UI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIHolder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIHolder.OnQueryCommandTarget(Nevron.Nov.UI.NQueryCommandTargetEventArgs)">
            <summary>
            Called when a command target is requested.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandUIHolder.NCommandUIHolderSchema">
            <summary>
            Schema associated with NCommandUIHolder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandUIHolder.CommandTargetProperty">
            <summary>
            Reference to the CommandTarget property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandUIHolder.CommandTarget">
            <summary>
            Gets/Sets the command target.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NContextMenuBuilder">
            <summary>
            Represents a command builder that facilitates the creation of context menus.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenuItemCollection,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Adds a menu item to the specified collection that executes the specified command.
            </summary>
            <param name="menuItems"></param>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenuItemCollection,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand,System.String)">
            <summary>
            Adds a menu item to the specified collection that executes the specified command.
            </summary>
            <param name="menuItems"></param>
            <param name="image"></param>
            <param name="command"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenuItemCollection,Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Adds a menu item to the specified collection that has the specified image and text.
            </summary>
            <param name="menuItems"></param>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Adds a menu item to the specified menu that executes the specified command.
            </summary>
            <param name="menu"></param>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand,System.String)">
            <summary>
            Adds a menu item to the specified menu that executes the specified command.
            </summary>
            <param name="menu"></param>
            <param name="image"></param>
            <param name="command"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Adds a menu item to the specified menu that has the specified image and text.
            </summary>
            <param name="menu"></param>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddCheckableMenuItem(Nevron.Nov.UI.NMenuItemCollection,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Adds a checkable menu item to the specified collection that executes the specified command.
            </summary>
            <param name="menuItems"></param>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddCheckableMenuItem(Nevron.Nov.UI.NMenuItemCollection,Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Adds a checkable menu item to the specified collection that has the specified image and text.
            </summary>
            <param name="menuItems"></param>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddCheckableMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Adds a checkable menu item to the specified menu that executes the specified command.
            </summary>
            <param name="menu"></param>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddCheckableMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Adds a checkable menu item to the specified collection that has the specified image and text.
            </summary>
            <param name="menu"></param>
            <param name="image"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddSeparator(Nevron.Nov.UI.NMenu)">
            <summary>
            Add a separator to the specfied menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenuBuilder.AddSeparator(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Add a separator to the specfied collection.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NContextMenu">
            <summary>
            Represents an attribute that is typically associated with widgets that
            can display context menus or popups for the elements they contain.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenu.ShowContextMenu(Nevron.Nov.Dom.NElement,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Shows a context menu for the specified element at the specified screen position
            </summary>
            <param name="element"></param>
            <param name="screenPos"></param>
            <returns>true if context menu is shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenu.CreateContextWidget(Nevron.Nov.Dom.NElement)">
            <summary>
            Must override to create the context widget that needs to be shown for the specified element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenu.CanShowContextMenu(Nevron.Nov.Dom.NElement)">
            <summary>
            Determines whether the context menu can be shown for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContextMenu.GetDefaultCommandTarget">
            <summary>
            Returns the default command target associated with any command sources
            that are attached to elemnets in the context widget hierarchy.
            This implementattion returns the parent node, since the context menu factory
            is usually a property of the element that needs context editing.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NContextMenu.NContextMenuSchema">
            <summary>
            Schema associated with NContextMenu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContextMenu.ShowProperty">
            <summary>
            Reference to the Show property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContextMenu.Show">
            <summary>
            Gets or sets whether context menus should be displayed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTransformContentVisual">
            <summary>
            An input element which transforms the widget it contains. The NTransformContent is the inner element of a NTransformContentHolder widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.#ctor(System.Object)">
            <summary>
            Creates a content holder and sets it content to a widget created created from the given object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.CanTransform">
            <summary>
            Override to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.GetTransform">
            <summary>
            Overriden to return the matrix defined by the ScaleX, ScaleY, Angle, M22, FlipX and FlipY components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether this visual subtree must be visited or not.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContentVisual.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContentVisual.NTransformContentVisualSchema">
            <summary>
            Schema associated with NTransformContent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContentVisual.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContentVisual.Content">
            <summary>
            Gets or sets the content widget.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTransformContent">
            <summary>
            A widget, which contains a NTransformContentVisual element that places an arbitrary transform on another widget.
            The transformation of the contained NTransformContentVisual is controlled by the ScaleX, ScaleY and Angle properties.
            In this way the widget contained inside this visual can be scaled and rotated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContent.#ctor(System.Object)">
            <summary>
            Creates a content holder and sets it content to a widget created created from the given object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContent.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTransformContent.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.NTransformContentSchema">
            <summary>
            Schema associated with NTransformContentHolder
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.VisualChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.StretchAtRightAnglesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.ScaleXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.ScaleYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTransformContent.AngleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.Visual">
            <summary>
            Gets or sets the transform content element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.Content">
            <summary>
            A shorcut property that gets or sets the content widget of the contained visual
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.StretchAtRightAngles">
            <summary>
            Gets or sets whether the widget contained inside the visual must be stretched to the content area when the normalized angle is 0, 90, 180 or 270.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.ScaleX">
            <summary>
            Gets or sets the ScaleX component of the transform matrix.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.ScaleY">
            <summary>
            Gets or sets the ScaleY component of the transform matrix.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTransformContent.Angle">
            <summary>
            Gets or sets the Angle component of the transform matrix.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialog">
            <summary>
            A task dialog is a dialog box that can be used to display information and receive simple
            input from the user. It's similar to a message box, but contains many additional features
            such as support for header, content and footer, radio and command buttons and a verification
            check box.
            </summary>
            <remarks>
            Use the static Create method to create a task dialog and then use its properties to configure it.
            Finally subscribe to the Closed event and call the Open method to show the task dialog.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.#ctor">
            <summary>
            Default constructor. Do not use this constructor to create task dialogs.
            Use the static Create method instead.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the element to the provided list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.MeasureWindowContent(System.Boolean)">
            <summary>
            Measures the window content only (i.e. without the title bar).
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.ArrangeWindowContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the window content only (i.e. without the title bar).
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.GetLayout">
            <summary>
            Gets the layout, which should arrange the dialog content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.GetObjectsToLayout">
            <summary>
            Gets the objects, which should be arranged.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.GetLayoutContext(Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Gets a widget layout context for the specified content area.
            </summary>
            <param name="contentArea"></param>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.CreateButtonStrip">
            <summary>
            Creates the common buttons button strip (e.g. a strip with OK and Cancel buttons).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.OnCustomButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a command button has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a common button (e.g. OK, Cancel) has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.OnButtonsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Buttons property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialog.Create(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a task dialog.
            </summary>
            <param name="ownerWindow"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.NTaskDialogSchema">
            <summary>
            Schema associated with NTaskDialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.HeaderChild">
            <summary>
            Reference to the Header child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.CustomButtonsChild">
            <summary>
            Reference to the CustomButtons child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.RadioButtonGroupChild">
            <summary>
            Reference to the RadioButtonGroup child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.ButtonStripChild">
            <summary>
            Reference to the ButtonStrip child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.VerificationCheckBoxChild">
            <summary>
            Reference to the VerificationCheckBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.FooterChild">
            <summary>
            Reference to the Footer child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.ButtonsProperty">
            <summary>
            Reference to the CommonButtons property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.TaskResultProperty">
            <summary>
            Reference to the TaskResult property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialog.CustomButtonIndexProperty">
            <summary>
            Reference to the CustomButtonIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.Header">
            <summary>
            Gets/Sets the header.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.RadioButtonGroup">
            <summary>
            Gets/Sets the radio button group of this task dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.CustomButtons">
            <summary>
            Gets/Sets the custom buttons of the task dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.ButtonStrip">
            <summary>
            Gets/Sets the buttons strip, which holds the common buttons of the task dialog.
            This property is automatically updated when the Buttons property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.Buttons">
            <summary>
            Gets/Sets the common buttons of the task dialog, e.g. OK, Cancel, etc.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.VerificationCheckBox">
            <summary>
            Gets/Sets the VerificationCheckBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.Footer">
            <summary>
            Gets/Sets the footer.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.TaskResult">
            <summary>
            Gets the result of the task dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialog.CustomButtonIndex">
            <summary>
            Gets the index of the clicked custom button. Equal to -1 if none of the custom buttons was clicked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialogCustomButton">
            <summary>
            Represents a task dialog custom button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NButton">
            <summary>
            Represents a push button, which can alter the window result of the window in which it resides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NButtonBase">
            <summary>
            Serves as base class for all buttons.
            It is a content holder widget, which raises a Click event when it is pressed or released.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.#ctor(System.Object)">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnDisabled">
            <summary>
            Called when the Disabled property is set to true
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handles the mouse down event
            </summary>
            <param name="args">mouse event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <param name="args">mouse event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <param name="args">mouse event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <param name="args">key event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <param name="args">key event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handles the lost focus event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnMouseCaptureOut(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handles the lost mouse capture event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnClick">
            <summary>
            Raises the button click event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.ClearButtonState(System.Boolean)">
            <summary>
            Clears the button state
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.IsMouseInButton">
            <summary>
            Returns true if the mouse pointer is inside the button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnMouseButtonStateChanged">
            <summary>
            Called when the mouse pressed state of the button has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnKeyboardButtonStateChanged">
            <summary>
            Called when the keyboard pressed state of the button has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.UpdateButtonState">
            <summary>
            Updates the button state by merging the mouse and keyboard button states
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.OnButtonStateChanged(Nevron.Nov.UI.ENButtonState)">
            <summary>
            Called when the pressed state of the button was changed.
            </summary>
            <param name="prevState"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonBase.NButtonBaseSchema">
            <summary>
            Schema associated with NButtonBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonBase.ClickModeProperty">
            <summary>
            Reference to the ClickMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonBase.IsPressedProperty">
            <summary>
            Reference to the IsPressed property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonBase.ClickEvent">
            <summary>
            Reference to the Click event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NButtonBase.Click">
            <summary>
            UI event, which occurs when the button is clicked
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButtonBase.ClickMode">
            <summary>
            Gets or sets the click mode of the button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButtonBase.IsPressed">
            <summary>
            Gets whether the button is pressed.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButtonBase.ButtonState">
            <summary>
            Gets or sets the pressed state of the button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButtonBase.MouseButtonState">
            <summary>
            Gets or sets the mouse input state
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButtonBase.KeyboardButtonState">
            <summary>
            Gets or sets the keyboard input state
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NButtonBase.NButtonBaseDesigner">
            <summary>
            Base designer of buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBase.NButtonBaseDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButton.#ctor(System.Object)">
            <summary>
            Initializer ctor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButton.OnClick">
            <summary>
            Raises the button click event. Overriden to set the owner window result, if such is specified
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NButton.NButtonSchema">
            <summary>
            Schema associated with NButton
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NButton.WindowResultProperty">
            <summary>
            Reference to the WindowResult property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NButton.WindowResult">
            <summary>
            Gets or sets the dialog result
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.#ctor(Nevron.Nov.Graphics.NImage,System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="title"></param>
            <param name="description"></param>
            <param name="icon"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.#ctor(Nevron.Nov.UI.NSymbol,System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="symbol"></param>
            <param name="title"></param>
            <param name="description"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButton.CreateDefaultSymbol">
            <summary>
            Creates the symbol used by default for custom task dialog buttons (a right green arrow).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialogCustomButton.NTaskDialogCustomButtonSchema">
            <summary>
            Schema associated with NTaskDialogCustomButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialogCustomButtonCollection">
            <summary>
            Represents a collection of task dialog custom buttons.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NElementCollection`1">
            <summary>
            A collection element, that serves as base class for collections that contain other elements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.#ctor(Nevron.Nov.Dom.NElementCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NElementCollection`1.NElementCollectionSchema">
            <summary>
            Schema associated with NElementCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NElementCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButtonCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButtonCollection.#ctor(System.String[])">
            <summary>
            Creates a collection of custom buttons with the given title and the default symbol
            (i.e. a green right arrow).
            </summary>
            <param name="buttonTitles"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButtonCollection.#ctor(Nevron.Nov.Graphics.NImage,System.String[])">
            <summary>
            Creates a collection of custom buttons with the given title and the specified icon.
            </summary>
            <param name="icon">The icon to set to all custom buttons.</param>
            <param name="buttonTitles"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogCustomButtonCollection.#ctor(Nevron.Nov.UI.NSymbol,System.String[])">
            <summary>
            Creates a collection of custom buttons with the given title and the specified symbol.
            </summary>
            <param name="symbol">The symbol to set to all custom buttons.</param>
            <param name="buttonTitles"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialogCustomButtonCollection.NTaskDialogCustomButtonCollectionSchema">
            <summary>
            Schema associated with NTaskDialogCustomButtonCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialogHeader">
            <summary>
            Represents the header of a task dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogHeader.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogHeader.#ctor(Nevron.Nov.UI.ENMessageBoxIcon,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="icon"></param>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialogHeader.NTaskDialogHeaderSchema">
            <summary>
            Schema associated with NTaskDialogHeader.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialogHeaderLabel">
            <summary>
            Represents a task dialog header label, which usually resides in a task dialog header
            or in a task dialog custom button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogHeaderLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogHeaderLabel.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialogHeaderLabel.NTaskDialogHeaderLabelSchema">
            <summary>
            Schema associated with NTaskDialogHeaderLabel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTaskDialogRadioButtonGroup">
            <summary>
            Represents a task dialog radio button group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRadioButtonGroup">
            <summary>
            A toggle button group for radio buttons.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleButtonGroupBase`1">
            <summary>
            A widget in which descendant toggle buttons of a certain type can register.
            Of all toggle buttons that are registered in the group, only a single one can be selected at a time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroupBase`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroupBase`1.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the selected index of the group has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonGroupBase`1.NToggleButtonGroupBaseSchema">
            <summary>
            Schema associated with NToggleButtonGroupBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonGroupBase`1.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NToggleButtonGroupBase`1.SelectedIndexChanged">
            <summary>
            Mutation event, which occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NToggleButtonGroupBase`1.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item owned by this group.
            If no item is selected, the value of this property is -1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NToggleButtonGroupBase`1.SelectedItem">
            <summary>
            Gets or sets the selected item. If no item is selected, the value of this property is -1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NToggleButtonGroupBase`1.ItemsCount">
            <summary>
            Gets the number of items owned by this group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButtonGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButtonGroup.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButtonGroup.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButtonGroup.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRadioButtonGroup.NRadioButtonGroupSchema">
            <summary>
            Schema associated with NRadioButtonGroup.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRadioButtonGroup.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRadioButtonGroup.Content">
            <summary>
            Gets or sets the content widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogRadioButtonGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogRadioButtonGroup.#ctor(System.String[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="radioButtonTitles"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTaskDialogRadioButtonGroup.CreateStackPanel">
            <summary>
            Creates the stack panel, which serves as content of this radio button group.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTaskDialogRadioButtonGroup.NTaskDialogRadioButtonGroupSchema">
            <summary>
            Schema associated with NTaskDialogRadioButtonGroup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTaskDialogRadioButtonGroup.StackPanel">
            <summary>
            Gets/Sets the stack panel of this task dialog radio button group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentViewMessage">
            <summary>
            Represents the document view message.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStackPanel">
            <summary>
            A layout panel, which integrates the NStackLayout in the context of the Nevron User Interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStackPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStackPanel.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStackPanel.CreateLayout">
            <summary>
            Overriden to create a new instance of the NStackLayout
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NStackPanel.NStackPanelSchema">
            <summary>
            Schema associated with NStackPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStackPanel.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStackPanel.FitModeProperty">
            <summary>
            Reference to the FitMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStackPanel.FillMode">
            <summary>
            Gets or sets the stack fill mode, which determines the fill behavior of the stack layout 
            in the layout direction. By default set to ENStackFillMode.None.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStackPanel.FitMode">
            <summary>
            Gets or sets the stack fit mode, which determines the fit behavior of the stack layout 
            in the layout direction when the fill mode is set to none and there is not enough space
            for the layouted objects. By default set to ENStackFitMode.None.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewMessage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentViewMessage.NDocumentViewMessageSchema">
            <summary>
            Schema associated with NDocumentViewMessage
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentViewMessage.Text">
            <summary>
            Gets or sets the text displayed by the message
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentViewWithCommanding`1">
            <summary>
            A document view with attached commanding UI.
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewWithCommanding`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewWithCommanding`1.CreateUIBuilder">
            <summary>
            Creates the UI builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewWithCommanding`1.CreateView">
            <summary>
            Creates the document view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentViewWithCommanding`1.NDocumentViewWithCommandingSchema">
            <summary>
            Schema associated with NDocumentViewWithCommanding.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentViewWithCommandBars`1">
            <summary>
            A document view with attached command bars commanding UI.
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewWithCommandBars`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentViewWithCommandBars`1.NDocumentViewWithCommandBarsSchema">
            <summary>
            Schema associated with NDocumentViewWithCommandBars.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentViewWithRibbon`1">
            <summary>
            A document view with attached ribbon commanding UI.
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentViewWithRibbon`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentViewWithRibbon`1.NDocumentViewWithRibbonSchema">
            <summary>
            Schema associated with NDocumentViewWithRibbon.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTimeSpanBox">
            <summary>
            A combo box for selecting a time span. If you use the AddItem methods
            to add items to the combo box, it's kept sorted by time span.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.AddCustomItem">
            <summary>
            Adds a "Custom..." combo box item, which when clicked launches a dialog for
            selecting a time span value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.AddItem(System.TimeSpan)">
            <summary>
            Adds an item for the given time span to the combo box.
            </summary>
            <param name="value"></param>
            <returns>The index of the added item.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.AddItem(System.String,System.TimeSpan)">
            <summary>
            Adds an item with the specified name for the given time span.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns>The index of the added item.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the SelectedIndex property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.CreateItem(System.String,System.TimeSpan)">
            <summary>
            Creates an item with the specified name for the given time span.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTimeSpanBox.TimeSpanToString(System.TimeSpan)">
            <summary>
            Gets the string representation of the given time span value.
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTimeSpanBox.NTimeSpanBoxSchema">
            <summary>
            Schema associated with NTimeSpanBox.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTimeSpanBox.SelectedTimeSpan">
            <summary>
            Gets/Sets the currently selected time span value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolContentBox">
            <summary>
            Represents a content holder that is extended to have a symbol.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolContentBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolContentBox.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolContentBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolContentBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolContentBox.NSymbolContentBoxSchema">
            <summary>
            Schema associated with NSymbolContentBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolContentBox.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolContentBox.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolContentBox.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolContentBox.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolContentBox.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolContentBox.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NImageBoxBase">
            <summary>
            Base class for all image boxes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NImageBoxBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NImageBoxBase.NImageBoxBaseSchema">
            <summary>
            Schema associated with NImageBoxBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NImageBoxBase.ImageMappingProperty">
            <summary>
            Reference to the ImageMapping property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NImageBoxBase.ImageMapping">
            <summary>
            Gets or sets the way in which the image is mapped to the content area of the box,
            when the box is painted.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMetaImageBox">
            <summary>
            A widget, which renders a metafile image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMetaImageBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMetaImageBox.#ctor(Nevron.Nov.Wmf.NMetaImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="metaImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMetaImageBox.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMetaImageBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMetaImageBox.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMetaImageBox.NMetaImageBoxSchema">
            <summary>
            Schema associated with NMetaImageBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMetaImageBox.MetaImageProperty">
            <summary>
            Reference to the MetaImage property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMetaImageBox.MetaImage">
            <summary>
            Gets/Sets the value of the MetaImage property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHRangeScrollBar">
            <summary>
            A horizontally oriented scroll bar for selecting a range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHScrollBar">
            <summary>
            Represents a horizontal scrollbar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollBar">
            <summary>
            Serves as base class for horizontal and vertical scrollbars
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollerBase`2">
            <summary>
            Servers as base class for scrollbars and sliders, that support interactive scrolling of a value inside a range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRangeBase">
            <summary>
            Serves as base class for widgets displaying a range
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeBase.ClampValue(System.Double)">
            <summary>
            Clamps the given value to a valid one for this range element.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeBase.OnMinimumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Minimum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeBase.OnValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Value property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeBase.OnMaximumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Maximum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeBase.NRangeBaseSchema">
            <summary>
            Schema associated with NRangeBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeBase.MinimumProperty">
            <summary>
            Reference to the Text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeBase.MaximumProperty">
            <summary>
            Reference to the TextAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeBase.ValueProperty">
            <summary>
            Reference to the Value property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRangeBase.ValueChanged">
            <summary>
            Occurs when the Value property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeBase.Minimum">
            <summary>
            Gets or sets the range minimum.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeBase.Maximum">
            <summary>
            Gets or sets the range maximum.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeBase.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INThumbAxis">
            <summary>
            Implemented by widgets, which are thumb axes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INThumbAxis.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Must override to get the thumb value from a position.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.SnapValue(System.Double)">
            <summary>
            Snaps the given value to the snapping step.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnRepeatButtonStartClicking(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an owned repeat button start continuos clicking
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnRepeatButtonEndClicking(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an owned repreat button stops continuos clicking
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnDecreaseShaftButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the decrease shaft button was clicked. 
            </summary>
            <remarks>
            This implementation decreases the Value with the current LargeChange
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnIncreaseShaftButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the increase shaft button was clicked. 
            </summary>
            <remarks>
            This implementation increases the Value with the current LargeChange
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnThumbStartDragging(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the scrollbar thumb starts to be dragged. 
            Raises the start scrolling event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when the scrollbar thumb is dragged. 
            This implementation simply updates the scrollbar value
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnThumbEndDragging(Nevron.Nov.UI.NEndActionEventArgs)">
            <summary>
            Called when the scrollbar thumb stops to be dragged. 
            Raises the end scrolling event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnStartScrolling">
            <summary>
            Raises the StartScrolling event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnScroll(System.Double)">
            <summary>
            Raises the scroll event. If it is not canceled, updates the scroller value if the new value.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnEndScrolling">
            <summary>
            Raises the EndScrolling event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.OnLargeChangeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LargeChange property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.CreateThumb">
            <summary>
            Creates the thumb of this scroller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.GetThumbValueCommon(System.Double,System.Double,System.Double)">
            <summary>
            Given a shaft start and length and a coordinate gets the thumb value.
            </summary>
            <param name="coord"></param>
            <param name="shaftStart"></param>
            <param name="shaftLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollerBase`2.GetThumbValueFromCoordinate(System.Double,System.Double,System.Double)">
            <summary>
            Gets the thumb value from the specified coordinate
            </summary>
            <param name="coord"></param>
            <param name="shaftStart"></param>
            <param name="shaftLength"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.NScrollerBaseSchema">
            <summary>
            Schema associated with NScrollerBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.IncreaseShaftButtonChild">
            <summary>
            Reference to the Increase Shaft Button child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.ThumbChild">
            <summary>
            Reference to the Thumb Button child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.DecreaseShaftButtonChild">
            <summary>
            Reference to the Decrease Shaft Button child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.SmallChangeProperty">
            <summary>
            Reference to the SmallChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.LargeChangeProperty">
            <summary>
            Reference to the LargeChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.SnappingStepProperty">
            <summary>
            Reference to the SnappingStep property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.StartScrollingEvent">
            <summary>
            Reference to the StartScrolling event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.ScrollEvent">
            <summary>
            Reference to the Scroll event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollerBase`2.EndScrollingEvent">
            <summary>
            Reference to the EndScrolling event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NScrollerBase`2.StartScrolling">
            <summary>
            Event, which occurs before the scroller starts to raise continuous scroll events.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NScrollerBase`2.Scroll">
            <summary>
            Event, which occurs when the scroller is scrolled
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NScrollerBase`2.EndScrolling">
            <summary>
            Event, which occurs when the scroller stops to raise continuous scroll events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.SmallChange">
            <summary>
            Gets or sets the small change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.LargeChange">
            <summary>
            Gets or sets the large change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.SnappingStep">
            <summary>
            Gets or sets the snapping step. By default set to 0, which means that no snapping
            will be applied when the thumb is dragged.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.IncreaseShaftButton">
            <summary>
            Gets or sets the increase shaft button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.Thumb">
            <summary>
            Reference to the Thumb child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollerBase`2.DecreaseShaftButton">
            <summary>
            Reference to the Decrease Shaft Button child
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a button was clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.GetThumbValueCommon(System.Double,System.Double,System.Double)">
            <summary>
            Given a shaft start and length and a coordinate gets the thumb value.
            </summary>
            <param name="coord"></param>
            <param name="shaftStart"></param>
            <param name="shaftLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.OnDecreaseButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the decrease button was clicked. 
            </summary>
            <remarks>
            This implementation decreases the Value with the current SmallChange
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.OnIncreaseButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the increase button was clicked. 
            </summary>
            <remarks>
            This implementation increases the Value with the current SmallChange
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBar.GetThumbRangeCommon(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Given a shaft start and length gets the near and far sides of the thumb
            </summary>
            <param name="shaftStart"></param>
            <param name="shaftLength"></param>
            <param name="thumbNear"></param>
            <param name="thumbFar"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBar.NScrollBarSchema">
            <summary>
            Schema associated with NScrollBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBar.IncreaseButtonChild">
            <summary>
            Reference to the Increase Button child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBar.DecreaseButtonChild">
            <summary>
            Reference to the Decrease Button child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBar.MinThumbLengthProperty">
            <summary>
            Reference to the MinThumbLength property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollBar.IncreaseButton">
            <summary>
            Gets or sets the increase value button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollBar.DecreaseButton">
            <summary>
            Reference to the Decrease Button child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollBar.MinThumbLength">
            <summary>
            Gets or sets the min thumb length that the scrollbar tries to enforce.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHScrollBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHScrollBar.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHScrollBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this scrollbar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHScrollBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the embedded controls
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NHScrollBar.NHScrollBarSchema">
            <summary>
            Schema associated with NHScrollBar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to add the begin and end thumbs.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the children of this scroll bar.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnScroll(System.Double)">
            <summary>
            Raises the scroll event.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when a scrollbar thumb is dragged.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnLargeChangeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LargeChange property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnBeginValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the BeginValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHRangeScrollBar.OnEndValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the EndValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NHRangeScrollBar.NHRangeScrollBarSchema">
            <summary>
            Schema associated with NHRangeScrollBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHRangeScrollBar.BeginThumbChild">
            <summary>
            Reference to the BeginThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHRangeScrollBar.EndThumbChild">
            <summary>
            Reference to the EndThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHRangeScrollBar.BeginValueProperty">
            <summary>
            Reference to the BeginValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHRangeScrollBar.EndValueProperty">
            <summary>
            Reference to the EndValue property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NHRangeScrollBar.BeginValueChanged">
            <summary>
            Occurs when the BeginValue property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NHRangeScrollBar.EndValueChanged">
            <summary>
            Occurs when the EndValue property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHRangeScrollBar.BeginThumb">
            <summary>
            Gets or sets the BeginThumb child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHRangeScrollBar.EndThumb">
            <summary>
            Gets or sets the EndThumb child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHRangeScrollBar.BeginValue">
            <summary>
            Gets or sets the begin value of this range scroll bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHRangeScrollBar.EndValue">
            <summary>
            Gets or sets the end value of this range scroll bar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRangeScrollBarThumb">
            <summary>
            Represents a begin or an end thumb of a range scroll bar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NThumb">
            <summary>
            A content holder widget, which the user can drag. 
            A thumb can only be dragged if it resides in a thumb axis element (for example a scrollbar).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.MeasureContent(System.Boolean)">
            <summary>
            Overriden to take the symbol desired size into account.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.CanStartDragging">
            <summary>
            Determines whether the thumb can currently be dragged
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.DoStartDragging(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Starts the thumb dragging
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.DoDrag(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Drags the thumb to the specified thumb pos (in local coordinates).
            </summary>
            <param name="thumbPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.DoEndDragging(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Ends the thumb dragging.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.DoAbortDragging">
            <summary>
            Cancels the thumb dragging
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnStartDragging">
            <summary>
            Raises the thumb start drag event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnDoDrag(System.Object)">
            <summary>
            Raises the thumb drag event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnEndDragging(System.Boolean)">
            <summary>
            Raises the thumb end drag event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handles the mouse down event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handles the KeyDown event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handles the lost focus event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThumb.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handles the lost mouse capture event
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.NThumbSchema">
            <summary>
            Schema associated with NThumb
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.IsPressedProperty">
            <summary>
            Reference to the IsPressed property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.IsDraggedProperty">
            <summary>
            Reference to the IsDragged property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.SymbolProperty">
            <summary>
            Reference to the Symbol property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.StartDraggingEvent">
            <summary>
            Reference to the ThumbStartDrag event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.DragEvent">
            <summary>
            Reference to the ThumbDrag event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThumb.EndDraggingEvent">
            <summary>
            Reference to the ThumbEndDrag event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NThumb.StartDragging">
            <summary>
            Event, which occurs when the thumb starts to be dragged
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NThumb.Drag">
            <summary>
            Event, which occurs when the thumb is dragged
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NThumb.EndDragging">
            <summary>
            Event, which occurs when the thumb ends to be dragged
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThumb.IsPressed">
            <summary>
            Gets whether the thumb is currently pressed.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThumb.IsDragged">
            <summary>
            Gets whether the thumb is currently dragged.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThumb.ThumbAxis">
            <summary>
            Gets the thumb axis (if any)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThumb.Symbol">
            <summary>
            Gets or sets the thumb symbol
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeScrollBarThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeScrollBarThumb.RequestCursor">
            <summary>
            Overriden to request a split cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeScrollBarThumb.NRangeScrollBarThumbSchema">
            <summary>
            Schema associated with NRangeScrollBarThumb.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeScrollBarThumb.OwnerScrollbar">
            <summary>
            Gets the scrollbar in which this range scrollbar thumb resides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NVRangeScrollBar">
            <summary>
            A vertically oriented scroll bar for selecting a range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NVScrollBar">
            <summary>
            Represents a vertical scrollbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollBar.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this scrollbar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the embedded controls
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NVScrollBar.NVScrollBarSchema">
            <summary>
            Schema associated with NVScrollBar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to add the begin and end thumbs.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the children of this scroll bar.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnScroll(System.Double)">
            <summary>
            Raises the scroll event.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when a scrollbar thumb is dragged.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnLargeChangeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LargeChange property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnBeginValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the BeginValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVRangeScrollBar.OnEndValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the EndValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NVRangeScrollBar.NVRangeScrollBarSchema">
            <summary>
            Schema associated with NVRangeScrollBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NVRangeScrollBar.BeginThumbChild">
            <summary>
            Reference to the BeginThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NVRangeScrollBar.EndThumbChild">
            <summary>
            Reference to the EndThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NVRangeScrollBar.BeginValueProperty">
            <summary>
            Reference to the BeginValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NVRangeScrollBar.EndValueProperty">
            <summary>
            Reference to the EndValue property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NVRangeScrollBar.BeginValueChanged">
            <summary>
            Occurs when the BeginValue property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NVRangeScrollBar.EndValueChanged">
            <summary>
            Occurs when the EndValue property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NVRangeScrollBar.BeginThumb">
            <summary>
            Gets or sets the BeginThumb child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NVRangeScrollBar.EndThumb">
            <summary>
            Gets or sets the EndThumb child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NVRangeScrollBar.BeginValue">
            <summary>
            Gets or sets the begin value of this range scroll bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NVRangeScrollBar.EndValue">
            <summary>
            Gets or sets the end value of this range scroll bar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRangeSlider">
            <summary>
            A slider with two thumbs, which allows for a selection of a range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSlider">
            <summary>
            A range based widget, which lets the user select a value bu dragging a thumb.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.#ctor">
            <summary>
            Defaut constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the thumb value corresponding to the given location.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to place the axis below all other children.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this slider.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of this slider.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.OnMinimumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Minimum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.OnMaximumChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Maximum property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to draw the scale.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.CreateThumb">
            <summary>
            Creates the thumb of this slider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ArrangeHorizontally(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the slider children horizontally.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ArrangeVertically(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the slider children vertically.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ComputeThumbWidth(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the width of the thumb.
            </summary>
            <param name="ca"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ComputeThumbHeight(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the height of the thumb.
            </summary>
            <param name="ca"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ComputeHAxisXandWidth(Nevron.Nov.Graphics.NRectangle,System.Double@,System.Double@)">
            <summary>
            Computes the X coordinate and the width of the axis when the slider is oriented horizontally.
            </summary>
            <param name="ca"></param>
            <param name="axisX"></param>
            <param name="axisWidth"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.ComputeVAxisYandHeight(Nevron.Nov.Graphics.NRectangle,System.Double@,System.Double@)">
            <summary>
            Computes the Y coordinate and the height of the axis when the slider is oriented vertically.
            </summary>
            <param name="ca"></param>
            <param name="axisY"></param>
            <param name="axisHeight"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.PaintHorizontalTicks(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the tick of a horizontal slider.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.PaintVerticalTicks(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the ticks of a vertical slider.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.PaintTick(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Paint a tick at the given coordinates.
            </summary>
            <param name="visitor"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.OnOrientationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Orientation property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.NSliderSchema">
            <summary>
            Schema associated with NSlider.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.AxisChild">
            <summary>
            Reference to the Axis child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.OrientationProperty">
            <summary>
            Reference to the Orientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.TicksPlacementProperty">
            <summary>
            Reference to the TicksPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.TicksIntervalProperty">
            <summary>
            Reference to the TicksInterval property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.TicksLengthProperty">
            <summary>
            Reference to the TicksLength property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSlider.TicksStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.Axis">
            <summary>
            Get/Sets the Axis.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.Orientation">
            <summary>
            Gets or sets the slider's orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.TicksPlacement">
            <summary>
            Gets or sets the way the ticks are placed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.TicksLength">
            <summary>
            Gets or sets the length of a tick. Valid only if TicksPlacement is not set to None.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.TicksInterval">
            <summary>
            Gets or sets the value range at which ticks are drawn.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSlider.TicksStroke">
            <summary>
            Gets or sets the stroking of the ticks.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSlider.NSliderDesigner">
            <summary>
            Designer for sliders.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSlider.NSliderDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the thumb value corresponding to the given location.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to add the begin and end thumbs.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ArrangeHorizontally(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the slider children horizontally.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ArrangeVertically(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the slider children vertically.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ComputeThumbWidth(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the width of the thumb.
            </summary>
            <param name="ca"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ComputeThumbHeight(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the height of the thumb.
            </summary>
            <param name="ca"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ComputeHAxisXandWidth(Nevron.Nov.Graphics.NRectangle,System.Double@,System.Double@)">
            <summary>
            Computes the X coordinate and the width of the axis when the slider is
            oriented horizontally.
            </summary>
            <param name="ca"></param>
            <param name="axisX"></param>
            <param name="axisWidth"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.ComputeVAxisYandHeight(Nevron.Nov.Graphics.NRectangle,System.Double@,System.Double@)">
            <summary>
            Computes the Y coordinate and the height of the axis when the slider is
            oriented vertically.
            </summary>
            <param name="ca"></param>
            <param name="axisY"></param>
            <param name="axisHeight"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.CreateThumb">
            <summary>
            Creates the thumb of this range slider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.OnScroll(System.Double)">
            <summary>
            Raises the scroll event.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when a slider thumb is dragged.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.OnValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.OnBeginValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the BeginValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSlider.OnEndValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the EndValue property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSlider.NRangeSliderSchema">
            <summary>
            Schema associated with NRangeSlider.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSlider.BeginThumbChild">
            <summary>
            Reference to the BeginThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSlider.EndThumbChild">
            <summary>
            Reference to the EndThumb child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSlider.BeginValueProperty">
            <summary>
            Reference to the BeginValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSlider.EndValueProperty">
            <summary>
            Reference to the EndValue property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRangeSlider.BeginValueChanged">
            <summary>
            Occurs when the BeginValue property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRangeSlider.EndValueChanged">
            <summary>
            Occurs when the EndValue property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeSlider.BeginValue">
            <summary>
            Gets or sets the begin value of this range slider.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeSlider.EndValue">
            <summary>
            Gets or sets the end value of this range slider.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeSlider.BeginThumb">
            <summary>
            Gets or sets the BeginThumb child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRangeSlider.EndThumb">
            <summary>
            Gets or sets the EndThumb child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRangeSliderThumb">
            <summary>
            Represents the thumb of a range slider.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSliderThumbBase">
            <summary>
            Base class for all slider thumbs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSliderThumbBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSliderThumbBase.NSliderThumbBaseSchema">
            <summary>
            Schema associated with NSliderThumbBase.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRangeSliderThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRangeSliderThumb.NRangeSliderThumbSchema">
            <summary>
            Schema associated with NRangeSliderThumb.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NUserLocalizationDictionary">
            <summary>
            Singleton class for the user localization dictionary.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NUserLocalizationDictionary.Instance">
            <summary>
            The user localization dictionary instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.IO.NDirectory">
            <summary>
            Provides information about a directory.
            </summary>
        </member>
        <member name="T:Nevron.Nov.IO.NFileSystemObject">
            <summary>
            Represents a file system object (i.e. a file or a directory).
            Base class of NFile and NDirectory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NFileSystemObject.#ctor(System.String)">
            <summary>
            Creates a new file system object.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NFileSystemObject.Exists">
            <summary>
            Checks whether the file system object exists.
            </summary>
            <returns>True if the file system object exists and is of the valid type,
            i.e. a file for NFile and a directory for NDirectory file system objects.</returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFileSystemObject.Delete">
            <summary>
            Deletes this object from the file system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFileSystemObject.Attributes">
            <summary>
            Gets or sets the attrbutes of this file or directory.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFileSystemObject.CreationTime">
            <summary>
            Gets or sets the creation time of this file of directory.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFileSystemObject.LastAccessTime">
            <summary>
            Gets or sets the time this file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFileSystemObject.LastWriteTime">
            <summary>
            Gets or sets the time when this file or directory was last written to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFileSystemObject.Path">
            <summary>
            Gets the path of this file system object. Can be null for some platforms
            like Silverlight (if the application is not trusted).
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.#ctor(System.String)">
            <summary>
            Creates a new directory object for the given path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Delete">
            <summary>
            Deletes this directory if it is empty, throws an IOException otherwise.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Create">
            <summary>
            Creates a directory for this directory object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Delete(System.Boolean)">
            <summary>
            Deletes the directory from the file system.
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories,
            and all files; otherwise, false.</param>
            <remarks>
            If the directory has no files or subdirectories, this method deletes it even if recursive is false.
            Attempting to delete a directory, which is not empty when recursive is false throws an IOException.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.GetDirectories(System.String,Nevron.Nov.ENDirectoryScanMode)">
            <summary>
            Gets the names of directories (including their paths) that match the specified search pattern
            in this directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string to match against the names of directories. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters</param>
            <param name="scanMode">Specifies whether to scan subdirectories or not.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.GetFiles(System.String,Nevron.Nov.ENDirectoryScanMode)">
            <summary>
            Gets the names of files (including their paths) that match the specified search pattern
            in this directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string to match against the names of files. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters</param>
            <param name="scanMode">Specifies whether to scan subdirectories or not.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Empty">
            <summary>
            Deletes all files and folders in this directory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Create(System.String)">
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the given directory.
            </summary>
            <param name="path">The directory to delete.</param>
            <param name="recursive">true to delete this directory, its subdirectories,
            and all files; otherwise, false.</param>
            <remarks>
            If the directory has no files or subdirectories, this method deletes it even if recursive is false.
            Attempting to delete a directory, which is not empty when recursive is false throws an IOException.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Empty(System.String)">
            <summary>
            Deletes all files and folders in the given directory.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.Exists(System.String)">
            <summary>
            Checks whether the given directory exists.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.GetDirectories(System.String,System.String,Nevron.Nov.ENDirectoryScanMode)">
            <summary>
            Gets the names of directories (including their paths) that match the specified search pattern
            in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory path to search in.</param>
            <param name="searchPattern">The search string to match against the names of directories. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters</param>
            <param name="scanMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.GetFiles(System.String,System.String,Nevron.Nov.ENDirectoryScanMode)">
            <summary>
            Gets the names of files (including their paths) that match the specified search pattern
            in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory path to search in.</param>
            <param name="searchPattern">The search string to match against the names of files. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters</param>
            <param name="scanMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NDirectory.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.IO.NPath">
            <summary>
            Static class that contains file system path related routines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.Combine(System.String,System.String)">
            <summary>
            Combines two paths into one.
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns>The combined path. If one of the specified paths is a null or empty string,
            this method returns the other path. If <paramref name="path2" /> contains an absolute path,
            this method returns <paramref name="path2" />.</returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid path characters.
            </exception>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.Combine(System.String,System.String,System.String)">
            <summary>
            Combines three paths into one.
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path3"></param>
            <returns>The combined path.</returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" />
              contains one or more of the invalid path characters.</exception>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.Combine(System.String[])">
            <summary>
            Combines multiple paths into one.
            </summary>
            <param name="paths">The paths to combine</param>
            <returns>The combined path.</returns>
            <exception cref="T:System.ArgumentException">
            One of the passed path arguments contains one or more of the invalid path characters.
            </exception>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path (e.g. "C:\").
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.IsPathRooted(System.String)">
            <summary>
            Checks whether the specified path string contains a root, for example "C:\Documents\MyFile.txt"
            contains a root - "C:\".
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> contains one or more of the invalid path characters.</exception>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.MakeRelativePath(System.String,System.String)">
            <summary>
            Gets a relative path leading from the first path to the second one.
            For example, if you pass "C:\Movies\Terminator" as from path and "C:\Movies\BigStan"
            as to path, the resulting relative path will be "..\BigStan".
            </summary>
            <param name="fromPath"></param>
            <param name="toPath"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetExtension(System.String)">
            <summary>
            Gets the extension of the specified file name without the dot, for example:
            "txt", "rtf", "docx", etc. If the given file name does not have an extension,
            String.Empty is returned.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetFileName(System.String)">
            <summary>
            Gets only the file name and the extension of the given path.
            For example if the path is "C:\Documents\MyFile.txt" the method
            returns "MyFile.txt".
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets only the file name of the given full file path without the file extension.
            For example, if the path is "C:\Documents\MyFile.txt", this method returns "MyFile".
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NPath.GetDirectoryName(System.String)">
            <summary>
            Gets the full directory name of the given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.IO.NFile">
            <summary>
            Provides information about a file and methods for its reading and manipulation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.#ctor(System.String)">
            <summary>
            Creates a new file object for the given file.
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Copy(System.String,System.Boolean)">
            <summary>
            Copies this file to the file specified by the destinationPath parameter.
            </summary>
            <param name="destinationFileName">The destination file name.</param>
            <param name="overwrite">Specifies whether file overwriting is allowed.</param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Create">
            <summary>
            Creates a file for both reading and writing. If the file already exists it is
            overwritten.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Open">
            <summary>
            Opens an existing file or creates a new file for both reading and writing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.OpenRead">
            <summary>
            Opens the file for reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.OpenWrite">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Move(System.String,System.Boolean)">
            <summary>
            Moves this file to a new location.
            </summary>
            <param name="destinationFileName"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies this file to the file specified by the destinationPath parameter.
            </summary>
            <param name="sourceFileName">The full path to the source file.</param>
            <param name="destinationFileName">The destination file name.</param>
            <param name="overwrite">Specifies whether file overwriting is allowed.</param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves the given source file to the specified destination.
            </summary>
            <param name="sourceFileName"></param>
            <param name="destinationFileName"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Delete(System.String)">
            <summary>
            Deletes the given file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Exists(System.String)">
            <summary>
            Checks whether the given file exists.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Create(System.String)">
            <summary>
            Creates a file for both reading and writing. If the file already exists it is
            overwritten.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.Open(System.String)">
            <summary>
            Opens an existing file or creates a new file for both reading and writing.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.OpenRead(System.String)">
            <summary>
            Opens the given file for reading.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.IO.NFile.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFile.Name">
            <summary>
            Gets only the file name and the extension of this file, without the full path.
            For example if the path is "C:\Documents\MyFile.txt" the method returns "MyFile.txt".
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NFile.Extension">
            <summary>
            Gets the extension of this file without the dot, for example: "txt", "rtf", "docx", etc.
            If the given file name does not have an extension, String.Empty is returned.
            </summary>
        </member>
        <member name="T:Nevron.Nov.IO.NIOService">
            <summary>
            Contains properties and methods for performing IO related tasks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NIOService.CreateTempFile">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns a file object
            for this file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NIOService.GetFile(System.String)">
            <summary>
            Gets a file object for the file with the given name or null if the given path is not
            a valid file path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NIOService.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NIOService.GetCurrentDirectory">
            <summary>
            Gets the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NIOService.GetDirectory(System.String)">
            <summary>
            Gets a directory object for the given path or null if the given path is not
            a valid directory path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.IO.NIOService.DirectorySeparatorChar">
            <summary>
            Gets the directory separator character (for example '\' for Windows).
            </summary>
        </member>
        <member name="P:Nevron.Nov.IO.NIOService.AltDirectorySeparatorChar">
            <summary>
            Gets the alternative sepdirectory separator character (for example '/' for Windows).
            </summary>
        </member>
        <member name="T:Nevron.Nov.NReflectionService">
            <summary>
            Contains properties and methods for performing reflection related tasks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NReflectionService.GetAssemblies">
            <summary>
            Gets all assemblies that have been loaded for the current application.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NReflectionService.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Returns the constructor info which matches the given binding attributes and parameter types
            or null if no such constructor is found.
            </summary>
            <param name="type"></param>
            <param name="bindingAttr"></param>
            <param name="types"></param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
            Allows you to obtain the line number in the source file at which the method is called.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NCharHelpers">
            <summary>
            Static class for commonly used char functions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NCharHelpers.IsWhiteSpace(System.Char)">
            <summary>
            Gets whether the given character is an Unicode space character.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Threading.NThread">
            <summary>
            Abstract class for NOV threads. Should be implemented by hosts as a platform
            specific thread wrapper.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Threading.NThread.#ctor(Nevron.Nov.Function)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="threadStart">The method to invoke when this thread begins executing.</param>
        </member>
        <member name="M:Nevron.Nov.Threading.NThread.Start">
            <summary>
            Starts the thread.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Threading.NThread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="P:Nevron.Nov.Threading.NThread.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuSplitButtonCommandSource">
            <summary>
            A command source that can be applied to NMenuSplitButton instances. Besides to the
            SelectedIndexChanged and menu item click it also uses the NMenuSplitButton.Click event to
            execute the command with the index of the currently selected menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source from the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.OnMenuSplitButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a menu item has been clicked. Calls the ExecuteCommand method
            with the index of the currently selected menu item.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.OnMenuSplitButtonSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonCommandSource.UpdateSelectedIndex(Nevron.Nov.UI.NMenuSplitButton,System.Object)">
            <summary>
            Updates the selected index of the given menu split button based on the passed parameter.
            </summary>
            <param name="menuSplitButton"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuSplitButtonCommandSource.NMenuSplitButtonCommandSourceSchema">
            <summary>
            Schema associated with NMenuSplitButtonCommandSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource">
            <summary>
            A command source that can be applied to NMenuSplitButton instances.
            It execute the command with the value assigned to the Tag property
            of the currently selected menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource.ExecuteCommand(System.Object)">
            <summary>
            Executes the command. Overriden to get the value of the Tag property of the menu
            item at the index specified by the provided paramener.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource.UpdateSelectedIndex(Nevron.Nov.UI.NMenuSplitButton,System.Object)">
            <summary>
            Updates the selected index of the given menu split button based on the passed parameter.
            </summary>
            <param name="menuSplitButton"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuSplitButtonTagCommandSource.NMenuSplitButtonTagCommandSourceSchema">
            <summary>
            Schema associated with NMenuSplitButtonTagCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INDocumentView">
            <summary>
            Interface implemented by document views.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INDocumentView.LoadNewDocument">
            <summary>
            Loads a new document in the view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INDocumentView.LoadFromFile(System.String)">
            <summary>
            Loads the document from the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="E:Nevron.Nov.UI.INDocumentView.DocumentLoaded">
            <summary>
            Occurs when a new document was loaded by the view.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.INDocumentView.DocumentSaved">
            <summary>
            Occurs when the current document was saved by the view.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NImageMediaDocument`1">
            <summary>
            Represents a continious media document, which facilitates the image export of NVisual elements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.UI.NExportMediaDocument`1">
            <summary>
            Serves as base class for media documents that export certain elements to print, pdf and image medias.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NExportMediaDocument`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NExportMediaDocument`1.InitializeContent(`0,System.Object)">
            <summary>
            Initializes the content of this document to contain a deeply cloned version of the specified element.
            </summary>
            <param name="element"></param>
            <param name="customData"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NExportMediaDocument`1.NExportMediaDocumentSchema">
            <summary>
            Reference to the NExportMediaDocument schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NExportMediaDocument`1.ContentInitializedEvent">
            <summary>
            Reference to the ContentInitialized event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NExportMediaDocument`1.ContentInitialized">
            <summary>
            Occurs when content of the export document has been initialized.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NImageMediaDocument`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NImageMediaDocument`1.CreateRaster(`0,Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRectangle,System.Double)">
            <summary>
            Creates a raster by rendering the specified rectangle from the specified visual coordinate system with the specified dpi.
            </summary>
            <param name="rootElement">the root element in which the visual resides. May be set to the visual itself</param>
            <param name="visual">the visual which needs to be rendered. Must be equal or descendant of rootElement</param>
            <param name="visualRect">the rectangle inside the visual coordinate system that needs to be rendered</param>
            <param name="dpi">resolution of the generated raster</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NImageMediaDocument`1.NImageMediaDocumentSchema">
            <summary>
            Reference to the NImageMediaDocument Schema
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPdfContext">
            <summary>
            The PDF paged context
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPagedContext">
            <summary>
            Base class for page contexts.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.State">
            <summary>
            Gets the current state of the paged context, which indicates the printing stage.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.CurrentPageIndex">
            <summary>
            Gets the current page index
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.PaperSize">
            <summary>
            Get or sets the paper size. The paper size can be changed when the context is in Query state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.PageOrientation">
            <summary>
            Gets or sets the page orientation. The page orientation can be changed when the context is in Query state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.PageRange">
            <summary>
            Gets or sets the range of pages to be printed. The page range can only be changed when the context is in Begin, QueryPageSettings or PrintPage state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.Resolution">
            <summary>
            Gets the printer resolution
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.PrintableArea">
            <summary>
            Gets the printable area. Available during the PrintPage state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.CustomData">
            <summary>
            Gets the custom information associated with the printing process.
            </summary>s
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.PaintVisitor">
            <summary>
            Gets the paint visitor which you can use to paint inside. Available during PrintPage state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.NumberOfCopies">
            <summary>
            Gets the number of copies
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPagedContext.Collate">
            <summary>
            Whether to collate pages
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPdfContext.NumberOfCopies">
            <summary>
            Gets the number of copies
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPdfContext.Collate">
            <summary>
            Whether to collate pages
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.NDataTableColumn">
            <summary>
            Represents a data table column.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.INDataTableColumn">
            <summary>
            Implemented by table columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTableColumn.Name">
            <summary>
            Gets/sets the column name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTableColumn.DataType">
            <summary>
            Gets or sets the column data type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableColumn.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableColumn.DataType">
            <summary>
            Gets or sets the data type of the column.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.NDataTableRow">
            <summary>
            Represents a row of data in the data table object
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.INDataTableRow">
            <summary>
            Implemented by table rows
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTableRow.Table">
            <summary>
            Gets the data table that owns this table row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTableRow.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTableRow.Item(System.String)">
            <summary>
            Gets or sets the value for the column with the given name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTableRow.Resize(System.Int32)">
            <summary>
            Resizes the fields array
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTableRow.RemoveColumn(System.Int32)">
            <summary>
            Removes the column at the specified index
            </summary>
            <param name="col"></param>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableRow.Table">
            <summary>
            Gets the data table that owns this table row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableRow.Item(System.Int32)">
            <summary>
            Gets / sets the value at the specified column index
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableRow.Item(System.String)">
            <summary>
            Gets or sets the value for the column with the given name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Data.NDataTable">
            <summary>
            Represents a data table
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.INDataTable">
            <summary>
            Implemented by tables
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.INDataTable.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified index
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.INDataTable.GetColumn(System.String)">
            <summary>
            Gets the first column with the specified name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.INDataTable.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified index
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.INDataTable.GetDataAt(System.Int32,System.Int32)">
            <summary>
            Gets the data at the specified row / col
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTable.Name">
            <summary>
            Gets or sets the name of the data table
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTable.ColumnCount">
            <summary>
            Gets the col count
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.INDataTable.RowCount">
            <summary>
            Gets the row count
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.GetColumn(System.Int32)">
            <summary>
            Gets the column at the specified index
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.GetColumn(System.String)">
            <summary>
            Gets the first column with the specified name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.GetColumnIndex(System.String)">
            <summary>
            Gets the index of the column with the given name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.GetRow(System.Int32)">
            <summary>
            Gets the row at the specified index
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.GetDataAt(System.Int32,System.Int32)">
            <summary>
            Gets the data at the specified row and column.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.AddColumn">
            <summary>
            Adds a new column to the data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.AddColumn(System.String,System.Type)">
            <summary>
            Adds a new column to the data table.
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.AddRow">
            <summary>
            Adds a new row to the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.RemoveRowAt(System.Int32)">
            <summary>
            Removes the row at the specified index
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.RemoveColumnAt(System.Int32)">
            <summary>
            Removes teh column at the specified index
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.AddRow(System.Object[])">
            <summary>
            Adds a new row to the table
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.SetDataAt(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the data at the specified row and column.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTable.Validate">
            <summary>
            Validates the table by making sure that the number of fields in each row matches the number of columns
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTable.Name">
            <summary>
            Gets / sets the name of the column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTable.ColumnCount">
            <summary>
            Gets the number of columns in the table
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTable.RowCount">
            <summary>
            Gets the number of rows in the table
            </summary>
        </member>
        <member name="T:Nevron.Nov.Data.NDataTableCollection">
            <summary>
            Represents a list of data tables.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.NDataTableCollection.GetTableFromName(System.String)">
            <summary>
            Gets the first table that has the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Data.NDataTableCollection.Name">
            <summary>
            Gets / sets the name of the column
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENProductType">
            <summary>
            Enumerates the product types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.OpenVision">
            <summary>
            Nevron Open Vision.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.Framework">
            <summary>
            Framework.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.Gauge">
            <summary>
            Gauge.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.Barcode">
            <summary>
            Barcode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.NevronWriter">
            <summary>
            Nevron Writer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.InternalApplication">
            <summary>
            Internal application.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.Diagram">
            <summary>
            Diagram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductType.NevronDraw">
            <summary>
            Nevron Draw.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENKeyType">
            <summary>
            Enumerates the key types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.Evaluation">
            <summary>
            Evaluation key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.Server">
            <summary>
            Server key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.Desktop">
            <summary>
            Desktop key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.Design">
            <summary>
            Design key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.TimeStamp">
            <summary>
            Time stamp key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENKeyType.MachineId">
            <summary>
            Machine ID key.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENProductGroup">
            <summary>
            Enumerates the product groups.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductGroup.OpenVision">
            <summary>
            Nevron Open Vision.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductGroup.Writer">
            <summary>
            Nevron Writer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENProductGroup.Draw">
            <summary>
            Nevron Draw.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENEditionType">
            <summary>
            Enumerates the edition types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENEditionType.Lite">
            <summary>
            Lite edition.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENEditionType.Professional">
            <summary>
            Professional edition.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENEditionType.Enterprise">
            <summary>
            Enterprise edition.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLicense">
            <summary>
            Represents a license to use Nevron components.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicense.#ctor">
            <summary>
            Creates a new empty (evaluation license).
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicense.#ctor(Nevron.Nov.NLicenseKey[])">
            <summary>
            Creates a new license from the specified license keys.
            </summary>
            <param name="licenseKeys"></param>
        </member>
        <member name="M:Nevron.Nov.NLicense.#ctor(System.String[])">
            <summary>
            Creates a new license from the specified license keys.
            </summary>
            <param name="licenseKeys"></param>
        </member>
        <member name="M:Nevron.Nov.NLicense.#ctor(System.String)">
            <summary>
            Creates a new license from the specified string.
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Nevron.Nov.NLicense.AppendLicense(Nevron.Nov.NLicense)">
            <summary>
            
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Nevron.Nov.NLicense.Clone">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NLicense.LicenseKey">
            <summary>
            Returns the license key.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLicense.LicenseKeys">
            <summary>
            Returns the license keys associated with this license
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLicenseKey">
            <summary>
            Represents a license key.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.#ctor(System.Byte[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.DeepClone">
            <summary>
            Creates an identical copy of this license key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.Equals(System.Object)">
            <summary>
            Returns true if the object are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLicenseKey.GetHashCode">
            <summary>
            Returns the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NLicenseKey.Info">
            <summary>
            Gets the license key information
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLicenseKey.Dictionary">
            <summary>
            Gets the license key dictionary in the form of description/value pairs
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLicenseManager">
            <summary>
            Manages Nevron License keys.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLicenseManager.SetLicense(System.String)">
            <summary>
            Sets a license to the license manager
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Nevron.Nov.NLicenseManager.SetLicense(Nevron.Nov.NLicense)">
            <summary>
            Sets a license to the license manager
            </summary>
            <param name="license"></param>
        </member>
        <member name="P:Nevron.Nov.NLicenseManager.License">
            <summary>
            Gets the current license
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLicenseManager.Instance">
            <summary>
            Gets the instance of the license manager
            </summary>
        </member>
        <member name="T:Nevron.Nov.NModule">
            <summary>
            Serves as base class for all modules. 
            A NOV module is usually associated with an assembly based on NOV, that wants to integrate with core NOV features and services.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NModule.Install">
            <summary>
            Installs the module.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NModule.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NModule.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Xml.ENXmlNodeType">
            <summary>
            Enumerates the XML node types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.Document">
            <summary>
            XML document node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.Element">
            <summary>
            XML element.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.Declaration">
            <summary>
            XML declaration.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.Text">
            <summary>
            XML text node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.Comment">
            <summary>
            XML comment.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlNodeType.CDATA">
            <summary>
            XML CDATA element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.ENTagType">
            <summary>
            Enumerates the tag types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENTagType.StartTag">
            <summary>
            Represents a start tag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENTagType.EndTag">
            <summary>
            Represents an end tag.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.ENXmlReaderNodeType">
            <summary>
            Enumerates the node types supported by the XML reader.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.StartTag">
            <summary>
            The reader is at a start tag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.EndTag">
            <summary>
            The reader is at an end tag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.Declaration">
            <summary>
            The reader is at a declaration.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.Text">
            <summary>
            The reader is at a text node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.Comment">
            <summary>
            The reader is at a comment.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.ENXmlReaderNodeType.CData">
            <summary>
            The reader is at a CDATA element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NCharacterReferenceMap">
            <summary>
            A class that provides methods to convert a character to a reference string
            and vice versa.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NCharacterReferenceMap.#ctor">
            <summary>
            Creates a new character reference map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NCharacterReferenceMap.TryGetCharacter(System.String,System.Char@)">
            <summary>
            Gets the character that corresponds to the given references string and returns
            true on success.
            </summary>
            <param name="referenceString"></param>
            <param name="character"></param>
            <returns>True if a character that corresponds to the given reference string was found,
            otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NCharacterReferenceMap.TryGetReferenceString(System.Char,System.String@)">
            <summary>
            Gets the reference string that corresponds to the given character and returns
            true on success.
            </summary>
            <param name="character"></param>
            <param name="referenceString"></param>
            <returns>True if a reference string that corresponds to the given character was found,
            otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NCharacterReferenceMap.Initialize">
            <summary>
            Initializes this character reference map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NCharacterReferenceMap.Set(System.String,System.Char)">
            <summary>
            Associates the given reference string with the specified character.
            </summary>
            <param name="referenceString"></param>
            <param name="character"></param>
        </member>
        <member name="F:Nevron.Nov.Xml.NCharacterReferenceMap.m_CharacterToReferenceMap">
            <summary>
            The character to reference map.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.NCharacterReferenceMap.m_ReferenceToCharacterMap">
            <summary>
            The reference to character map.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlParserListener">
            <summary>
            Implements a listening interface for the XML parser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnStartTag(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser detects a start tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnEndTag(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser detects an end tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnStartDeclaration(Nevron.Nov.Xml.NXmlElement)">
            <summary>
            Called when the parser detects a declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnEndDeclaration">
            <summary>
            Called when the parser detects the end of a declaration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnText(Nevron.Nov.Xml.ENXmlNodeType,System.String)">
            <summary>
            Called when the parser has read text content.
            </summary>
            <param name="nodeType"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.OnEncodingDetected(Nevron.Nov.Text.NEncoding)">
            <summary>
            Called when the parser detects the encoding of the document.
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.Reset">
            <summary>
            Puts the listener into initial state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.CollapseWhiteSpaces(System.String,System.Boolean)">
            <summary>
            Normalizes the given string value by replacing all sequences of
            whitespace characters with a single space character.
            </summary>
            <param name="input">The string to normalize.</param>
            <param name="trim">Specifies whether to remove the leading and trailing
            space character (if present) or not.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParserListener.NormalizeLineBreaks(System.String)">
            <summary>
            Normalizes the line breaks in the given string, so that all "\r\n" and "\r"
            characters are converted to '\n'.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlParserListener.EncodingDetectedCallback">
            <summary>
            The method that should be called when a new encoding declaration is detected.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlParserListener.m_PreserveWhiteSpacesStack">
            <summary>
            Indicates whether the white space characters for the nodes in the document hierarchy
            should be preserved or not. Peek at the top of the stack to see the value for the current node.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlDocument">
            <summary>
            Represents an HTML document.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlNode">
            <summary>
            Base class for all XML nodes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetFirstAncestor(System.String)">
            <summary>
            Returns the first ancestor of this node that has the given name
            or null if no such ancestor is found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetFirstAncestor(System.String,System.String)">
            <summary>
            Returns the first ancestor of this node that has a name equal to one
            of the given names or null if no such ancestor is found.
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetFirstAncestor(System.String[])">
            <summary>
            Returns the first ancestor of this node that has a name equal to one
            of the given names or null if no such ancestor is found.
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.AddChild(Nevron.Nov.Xml.NXmlNode)">
            <summary>
            Adds the given node as a child to this node.
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.InsertChild(System.Int32,Nevron.Nov.Xml.NXmlNode)">
            <summary>
            Inserts the given child node at the specified index.
            </summary>
            <param name="index"></param>
            <param name="childNode"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveChild(Nevron.Nov.Xml.NXmlNode)">
            <summary>
            Removes the given child from this node's children.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveAllChildren">
            <summary>
            Removes all child nodes of this node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetChildByName(System.String)">
            <summary>
            Gets the first child of this XML node with the given name. 
            Case sensitive check is performed.
            </summary>
            <param name="name">The name to look for.</param>
            <returns>The first child of this XML node with the given name or null
            if no such child is found.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetChildByName(System.String,System.Boolean)">
            <summary>
            Gets the first child of this XML node with the given name.
            </summary>
            <param name="name">The name to look for.</param>
            <param name="caseSensitive">Specifies whether the check should be case sensitive of not.</param>
            <returns>The first child of this XML node with the given name or null
            if no such child is found.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetChildNodesIterator">
            <summary>
            Gets an iterator that iterates through the child nodes of this node.
            Returns null if this node doesn't have child nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.AddDeclaration(Nevron.Nov.Xml.NXmlNode)">
            <summary>
            Adds the given declaration to this document's list of declarations.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveDeclaration(Nevron.Nov.Xml.NXmlNode)">
            <summary>
            Removes the given declaration from this node's declarations.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveDeclarationAt(System.Int32)">
            <summary>
            Removes the declaration at the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.RemoveAllDeclarations">
            <summary>
            Removes all declaration nodes of this node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetDeclarationAt(System.Int32)">
            <summary>
            Gets the declaration at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlNode.GetDeclarationsIterator">
            <summary>
            Gets an iterator that iterates through the declarations of this document.
            Returns null if this document doesn't have declarations.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlNode.m_Parent">
            <summary>
            The parent of this node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlNode.NodeType">
            <summary>
            Gets the node type of this XML node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlNode.Name">
            <summary>
            Gets the name of this node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlNode.Parent">
            <summary>
            Gets the parent node of this node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlNode.ChildrenCount">
            <summary>
            Gets the number of children of this node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlNode.DeclarationsCount">
            <summary>
            Gets the number of declarations of this node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.SaveToFile(System.String)">
            <summary>
            Saves this XML document to the given file using the UTF8 encoding.
            If the file already exists, it is overwritten.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <returns>True if the operation was successful, otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.SaveToFile(System.String,Nevron.Nov.Text.NEncoding)">
            <summary>
            Saves this XML document to the given stream using the specified encoding.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>True if the operation was successful, otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.SaveToStream(System.IO.Stream)">
            <summary>
            Saves this XML document to the given stream using the UTF8 encoding.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>True if the operation was successful, otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.SaveToStream(System.IO.Stream,Nevron.Nov.Text.NEncoding)">
            <summary>
            Saves this XML document to the given stream using the specified encoding.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>True if the operation was successful, otherwise - false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.CreateSerializer">
            <summary>
            Creates a serializer that can save this document to a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.OnSerializing(Nevron.Nov.Text.NEncoding)">
            <summary>
            Called when the document is about to be serialized.
            </summary>
            <param name="encoding">The encoding in which the document is going to be serialized in.</param>
            <returns>True if the serialization process should continue or false if it should be aborted.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.LoadFromFile(System.String)">
            <summary>
            Loads a XML document from the given path name
            </summary>
            <param name="path">The full path name</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocument.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a XML document from the given stream.
            </summary>
            <param name="stream">The stream to load the XML document from.</param>
            <returns>The XML document loaded from the given stream or null if the given stream
            does not represent a valid XML doucment.</returns>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlDocument.NodeType">
            <summary>
            Gets the node type of this XML node.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlDocumentSerializer">
            <summary>
            Serializes XML documents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.Serialize(Nevron.Nov.Xml.NXmlDocument,System.IO.Stream,Nevron.Nov.Text.NEncoding)">
            <summary>
            Serializes the given XML document to the specified stream using the
            provided encoding.
            </summary>
            <param name="document">The document to serialize.</param>
            <param name="stream">The stream to write data to.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.CreateTextCharRefMap">
            <summary>
            Creates the text character reference map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.CreateAttributeValueCharRefMap">
            <summary>
            Creates the attribute value character reference map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.SerializeNode(Nevron.Nov.Xml.NXmlNode,System.Int32)">
            <summary>
            Serializes the given XML node.
            </summary>
            <param name="node"></param>
            <param name="indexInParent"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.SerializeElement(Nevron.Nov.Xml.NXmlElement,System.Int32)">
            <summary>
            Serializes the given XML element.
            </summary>
            <param name="element"></param>
            <param name="indexInParent"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.SerializeText(Nevron.Nov.Xml.NXmlTextNode,System.Int32,System.Boolean@)">
            <summary>
            Serializes the given text node.
            </summary>
            <param name="textNode"></param>
            <param name="indexInParent"></param>
            <param name="isMultiLine"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.SerializeAttribute(System.String,System.String)">
            <summary>
            Serializes the given attribute name/value pair.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.GetDocumentDeclaration(Nevron.Nov.Xml.NXmlDocument,Nevron.Nov.Text.NEncoding)">
            <summary>
            Gets the string declaration with which the document's serialization should start.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentSerializer.EncodeCharRefs(Nevron.Nov.Xml.NCharacterReferenceMap,System.String)">
            <summary>
            Encodes all reference characters in the given string to their corresponding
            reference strings.
            </summary>
            <param name="map"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlDocumentSerializer.m_StringBuilder">
            <summary>
            The string builder used by the serialization process.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlElement">
            <summary>
            Represents an XML element. The XML element extends the
            xml node with the ability to have attributes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.GetAttributeValue(System.String)">
            <summary>
            Returns the value of the attribute with the specified name or null if
            no such attribute is found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of the attribute with the specified name. Appends
            the attribute to the element if it is not present.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.RemoveAttribute(System.String)">
            <summary>
            Removes the attribute with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.ClearAttributes">
            <summary>
            Removes all attribute of this element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.GetAttributesIterator">
            <summary>
            Gets an iterator that iterates through the attributes of this element.
            Returns null if the element doesn't have attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlElement.GetInnerText">
            <summary>
            Gets the inner text of this XML element, which is a concatenation of the text of
            all of its child text nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlElement.m_Attributes">
            <summary>
            A map that holds the attributes of this element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlElement.NodeType">
            <summary>
            Gets the node type of this XML node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlElement.AttributeCount">
            <summary>
            Gets the number of attributes of this XML element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlParser">
            <summary>
            Class that parses XML documents.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NStringParser">
            <summary>
            Base class for all string parsers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NStringParser.Slash">
            <summary>
            A contants for the slash character ('/').
            </summary>
        </member>
        <member name="F:Nevron.Nov.NStringParser.Asterisk">
            <summary>
            A constants for the asterisk character ('*').
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStringParser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStringParser.Parse(System.Char[],System.Int32,System.Int32)">
            <summary>
            Parses the given chars starting from the specified start position and ending
            at the specified end position (inclusive).
            </summary>
            <param name="chars">The char array to parse.</param>
            <param name="startPosition">The inclusive start position.</param>
            <param name="endPosition">The inclusive end position.</param>
            <returns>True on succcess.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.Parse(System.Char[])">
            <summary>
            Parses the given chars.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadChar(System.Char@)">
            <summary>
            Reads the character at the current position as an out parameter and advances
            the parser pointer. 
            </summary>
            <param name="c"></param>
            <returns>False if the parser is already at its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.PeekChar(System.Char@)">
            <summary>
            Reads the character at the current position without advancing the parser pointer.
            </summary>
            <param name="c"></param>
            <returns>False if the parser is already at its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.SkipWhiteSpaces">
            <summary>
            Reads until a non white space char is met. The parser's position is
            then positioned at this non white space character position.
            </summary>
            <returns>False if the parser has reached its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char,System.String@)">
            <summary>
            Reads a token from the current position (inclusive) to the first occurrence
            of the given stop char (exclusive). The position of the first occurrence
            of the stop char becomes the new reading position. Returns false if the
            parser has reached its end position.
            </summary>
            <param name="stopChar">The char at which to stop reading.</param>
            <param name="result">The string token that was read or null if the parser
            has reached its end position.</param>
            <returns>False if the parser has reached its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char,System.Int32@,System.Int32@)">
            <summary>
            Reads a token from the current position (inclusive) to the first occurrence
            of the given stop char (exclusive). The position of the first occurrence
            of the stop char becomes the new reading position. Returns false if the
            parser has reached its end position.
            </summary>
            <param name="stopChar"></param>
            <param name="startIndex">The index at which the token starts.</param>
            <param name="endIndex">The index at which the token ends, i.e. the index
            of the char before the stop char or the end position of the parser if no
            stop char was met.</param>
            <returns>False if the parser has reached its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char[],System.String@)">
            <summary>
            Reads a token from the current position (inclusive) to the first occurrence
            of one of the given stop chars (exclusive). The position of the first occurrence
            of a stop char becomes the new reading position. Returns false if the parser
            has reached its end position.
            </summary>
            <param name="stopChars">An array with the cahrs that should stop the reading process.</param>
            <param name="result">The string token that was read or null if the parser
            has reached its end position.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char[],System.Int32@,System.Int32@)">
            <summary>
            Reads a token from the current position (inclusive) to the first occurrence
            of one of the given stop chars (exclusive). The position of the first occurrence
            of a stop char becomes the new reading position. Returns false if the parser
            has reached its end position.
            </summary>
            <param name="stopChars"></param>
            <param name="startIndex">The index at which the token starts.</param>
            <param name="endIndex">The index at which the token ends, i.e. the index
            of the char before the stop char or the end position of the parser if no
            stop char was met.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char,System.Char,System.String@)">
            <summary>
            Reads a string from the current position (inclusive) to the first occurrence
            of the given stop char (exclusive). The position of the first occurrence
            of the stop char becomes the new reading position. Returns false if the
            parser has reached its end position.
            </summary>
            <param name="stopChar">The char at which to stop reading.</param>
            <param name="escapeChar">If this char is met, the next char will be read and
            included directly no matter what it is.</param>
            <param name="result">The string token that was read, no matter whether a stop char
            was met or the parser has reached its end position.</param>
            <returns>Returns false if the parser has reached its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.Char[],System.Char,System.String@)">
            <summary>
            Reads a string from the current position (inclusive) to the first occurrence
            of one of the given stop chars (exclusive). The position of the first occurrence
            of the stop char becomes the new reading position. Returns false if the
            parser has reached its end position.
            </summary>
            <param name="stopChars">The chars at which to stop reading.</param>
            <param name="escapeChar">If this char is met, the next char will be read and
            included directly no matter what it is.</param>
            <param name="result">The string token that was read, no matter whether a stop char
            was met or the parser has reached its end position.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadToCloseChar(System.Char,System.Char,System.Int32@,System.Int32@)">
            <summary>
            <para>Reads to the given close char, regarding other open and close chars as
            nested scopes. For example the following string will be read as a single token
            and not only to the first closing brace:</para>
            <para>{</para>
            <para>p.test { font-family:verdana,sans-serif;font-size:14px; }</para>
            <para>}</para>
            </summary>
            <param name="openChar"></param>
            <param name="closeChar"></param>
            <param name="startIndex">The index at which the token starts.</param>
            <param name="endIndex">The index at which the token ends (i.e. the index
            of the char before close char).</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.String,System.String@)">
            <summary>
            Reads a string from the current position (inclusive) to the first
            occurrence of the given string (exclusive). The reading position
            is set just after the last char of the given end string. Returns
            false if the parser has reached its end position.
            </summary>
            <param name="endString"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.ReadTo(System.String,System.Int32@,System.Int32@)">
            <summary>
            Reads a string from the current position (inclusive) to the first
            occurrence of the given string (exclusive). The reading position
            is set just after the last char of the given end string. Returns
            false if the parser has reached its end position.
            </summary>
            <param name="endString"></param>
            <param name="startIndex">The index at which the token starts.</param>
            <param name="endIndex">The index at which the token ends (i.e. the index
            of the char before the first char of the end string).</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.CharactersMatch(System.String,System.Int32,System.Boolean)">
            <summary>
            Checks whether the next characters in the char array match the ones
            in the given string starting from the current reading position and
            from the specified position in the string. A case sensitive check is
            performed.
            </summary>
            <param name="str">The string whose characters to compare with the parser's char array.</param>
            <param name="strPos">The position in the given string at which to begin the comparison.</param>
            <param name="advanceReadingPosition">If set to true the reading position will be moved
            just after the last matched character in the char array if the characters in the char
            array match the ones in the specified string.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.CharactersMatch(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Checks whether the next characters in the char array match the ones
            in the given string starting from the current reading position and
            from the specified position in the string.
            </summary>
            <param name="str">The string whose characters to compare with the parser's char array.</param>
            <param name="strPos">The position in the given string at which to begin the comparison.</param>
            <param name="caseSensitive">Specifies whether the comparison should be case sensitive or not.</param>
            <param name="advanceReadingPosition">If set to true the reading position will be moved
            just after the last matched character in the char array if the characters in the char
            array match the ones in the specified string.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringParser.Trim(System.Int32@,System.Int32@)">
            <summary>
            Trims the leading and trailing white space characters and updates the
            start and end indexes.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NStringParser.m_Chars">
            <summary>
            The char array to parse.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NStringParser.m_Position">
            <summary>
            The current position in the char array.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NStringParser.m_StartPosition">
            <summary>
            The inclusive start position in the char array from which to begin parsing.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NStringParser.m_EndPosition">
            <summary>
            The inclusive end position in the char array at which to end parsing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.#ctor(Nevron.Nov.Xml.NXmlParserListener)">
            <summary>
            Creates a new Nevron XML parser using UTF8 as default encoding.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.#ctor(System.Int32,Nevron.Nov.Xml.NXmlParserListener)">
            <summary>
            Creates a new Nevron XML parser using UTF8 as default encoding.
            </summary>
            <param name="codePage"></param>
            <param name="listener"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.Parse(System.Char[],System.Int32,System.Int32)">
            <summary>
            Parses the given chars and returns true on success.
            </summary>
            <param name="chars">The char array to parse.</param>
            <param name="startPosition">The inclusive start position.</param>
            <param name="endPosition">The inclusive end position.</param>
            <returns>True on succcess.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.Parse(System.IO.Stream)">
            <summary>
            Parses the data from the given stream.
            </summary>
            <param name="stream">The stream to parse.</param>
            <returns>True if the stream was successfully parsed, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.CreateTextCharRefMap">
            <summary>
            Creates the text character reference map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.CreateAttributeValueCharRefMap">
            <summary>
            Creates the attribute value character reference map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.CreateTag(System.String,Nevron.Nov.Xml.ENTagType)">
            <summary>
            Creates a tag from the given tag name and type.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadAfterLessThan">
            <summary>
            Reads after a '&lt;' symbol.
            </summary>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadStartTag(System.String@)">
            <summary>
            Reads a start tag.
            </summary>
            <param name="tagName">The name of the read start tag.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadEndTag(System.String@)">
            <summary>
            Reads an end tag and returns its name as an out parameter. Returns false if the parser
            has reached its end position.
            </summary>
            <param name="tagName">The name of the read end tag.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadAttribute(System.String@,System.String@)">
            <summary>
            Reads an attribute name and value.
            </summary>
            <param name="name">The read attribute name.</param>
            <param name="value">The read attribute value.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadAttributeValue(System.String@)">
            <summary>
            Reads an attribute value.
            </summary>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadDeclaration(System.Char,System.String@)">
            <summary>
            Called when the given declaration character is read after a '&lt;' symbol.
            </summary>
            <param name="declarationChar">The character after the '&lt;' character.</param>
            <param name="declarationName">The read name of the declaration.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadAfterLessThanAndExclamation">
            <summary>
            Read after a "&lt;!" char sequence.
            </summary>
            <returns>False if the parser has reached its end position.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadComment(System.String@)">
            <summary>
            Reads to the end of the comment (i.e. a "-->" sequence).
            </summary>
            <param name="comment">The read comment.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadCData(System.String@)">
            <summary>
            Reads to the end of the CDATA sequence.
            </summary>
            <param name="cData"></param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ReadText(System.Int32,System.Int32,System.String@)">
            <summary>
            Reads the content of a text node.
            </summary>
            <param name="textStart">The inclusive start index of the text node's content in the parser's char array.</param>
            <param name="textEnd">The inclusive end index of the text node's content in the parser's char array.</param>
            <param name="text">The content of the text node.</param>
            <returns>False if the parser has reached its end position or should stop reading.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.OnStartTagRead(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser has read a start tag and its attributes (if any).
            </summary>
            <param name="tag">The read start tag.</param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.OnStartTagSelfClosed(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser has read a self closed start tag and its attributes (if any).
            </summary>
            <param name="tag">The read start tag.</param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.TryExpandCharRef(Nevron.Nov.Xml.NCharacterReferenceMap,System.String,System.Char@)">
            <summary>
            Tries to expand the given reference string to a char reference and
            returns true on success.
            </summary>
            <param name="map">The character reference map to use.</param>
            <param name="refString">The reference string to expand.</param>
            <param name="refChar">The character result of the expansion.</param>
            <returns>True if the given character reference has been successfully expanded.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlParser.ExpandAllCharRefs(Nevron.Nov.Xml.NCharacterReferenceMap,System.String)">
            <summary>
            Expands all character reference entitites in the given string and returns the result.
            </summary>
            <param name="map">The character reference map to use.</param>
            <param name="input">The string to expand.</param>
            <returns>A string in which all character references of the given input string has been expanded.</returns>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlDocumentParserListener">
            <summary>
            Implements a listening interface for the XML parser and builds a XML document
            as a result of the parsing process. You can get it through the <see cref="P:Nevron.Nov.Xml.NXmlDocumentParserListener.Document"/>
            property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.OnStartTag(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser detects a start tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.OnEndTag(Nevron.Nov.Xml.NXmlTag)">
            <summary>
            Called when the parser detects an end tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.OnStartDeclaration(Nevron.Nov.Xml.NXmlElement)">
            <summary>
            Called when the parser detects a declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.OnEndDeclaration">
            <summary>
            Called when the parser detects the end of a declaration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.OnText(Nevron.Nov.Xml.ENXmlNodeType,System.String)">
            <summary>
            Called when the parser has read text content.
            </summary>
            <param name="nodeType"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.Reset">
            <summary>
            Clears all data the listener has processed and puts it into initial state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlDocumentParserListener.CreateDocument">
            <summary>
            Creates a document this listener can operate on.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlDocumentParserListener.m_Document">
            <summary>
            The document this listener operates on.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlDocumentParserListener.m_CurrentNode">
            <summary>
            The current node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlDocumentParserListener.m_CurrentDeclaration">
            <summary>
            The current declaration.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlDocumentParserListener.Document">
            <summary>
            Gets the document this listener operates on.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to XML data
            (i.e. without building a XML document).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlReader.Read">
            <summary>
            Reads the next entry from the XML stream.
            </summary>
            <returns>False if the reader has reached to the end.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlReader.GetAttributeValue(System.String)">
            <summary>
            Gets the value of the attribute with the given name. This method is valid only when
            the current node type is <see cref="F:Nevron.Nov.Xml.ENXmlReaderNodeType.Declaration"/> or
            <see cref="F:Nevron.Nov.Xml.ENXmlReaderNodeType.StartTag"/>.
            </summary>
            <param name="attributeName">The attribute whose value to get.</param>
            <returns>The value of the attribute with the specified name or null if no such attribute found.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlReader.Create(System.IO.Stream)">
            <summary>
            Creates a XML reader for the given stream.
            </summary>
            <param name="stream">The stream that contains XML data and should be read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the given stream to read is null.</exception>
            <returns>A XML reader that can be used to read the XML data in the given stream.</returns>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlReader.Name">
            <summary>
            Gets the name of the current node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlReader.Value">
            <summary>
            Gets the value of the current node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlReader.IsSelfClosedTag">
            <summary>
            Indicates whether this is a self closed start tag.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
            <value>One of the <see cref="T:Nevron.Nov.Xml.ENXmlReaderNodeType"/> values representing the type of the current node.</value>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlTag">
            <summary>
            Represents a XML tag.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.#ctor(System.String,Nevron.Nov.Xml.ENTagType)">
            <summary>
            Creates a XML tag with the given name and type.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.#ctor(System.String,Nevron.Nov.Xml.ENTagType,Nevron.Nov.DataStructures.NMap{System.String,System.String})">
            <summary>
            Creates a XML tag with the given name, type and attributes.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.ToString">
            <summary>
            Returns the string representation of this tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.SetAttribute(System.String,System.String)">
            <summary>
            Sets the specified value to the attibute with the given name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.TryGetAttribute(System.String,System.String@)">
            <summary>
            Tries to the value of the attribute with the given name and returns true on success.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.ToElement">
            <summary>
            Converts this XML tag to an XML element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTag.CreateElement(System.String)">
            <summary>
            Creates an XML element with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlTag.Name">
            <summary>
            Gets the name of this XML tag.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlTag.Type">
            <summary>
            Gets the type of this XML tag (i.e. whether it is a start or an end tag).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlTextNode">
            <summary>
            Represents a XML node that has a text content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlTextNode.#ctor(Nevron.Nov.Xml.ENXmlNodeType,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="nodeType"></param>
            <param name="text"></param>
        </member>
        <member name="F:Nevron.Nov.Xml.NXmlTextNode.Text">
            <summary>
            The text of this text node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Xml.NXmlTextNode.NodeType">
            <summary>
            Gets the node type of this XML node.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Xml.NXmlWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only generation of XML data streams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.Close">
            <summary>
            Closes the stream this writer operates on.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteStartDocument">
            <summary>
            Writes a XML document declaration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteEndDocument">
            <summary>
            Closes all opened elements and puts the writer back in start state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteStartElement(System.String)">
            <summary>
            Writes a start tag with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteEndElement">
            <summary>
            Writes an end tag that closes the current element (e.g. &lt;/name>).
            If the current element has no content writes a a self closed tag (e.g. />).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteFullEndElement">
            <summary>
            Writes a full end tag that closes the current element (e.g. &lt;/name>).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteElementString(System.String,System.String)">
            <summary>
            Writes a start tag, a text node as its content and an end tag.
            </summary>
            <param name="name">The name of the start tag.</param>
            <param name="value">The value of the text node enclosed by the start and end tag.</param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteAttributeString(System.String,System.String)">
            <summary>
            Writes an attribute name/value pair to the current element.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.WriteValue(System.String)">
            <summary>
            Writes the given string as a value to the current element.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.CreateTextCharRefMap">
            <summary>
            Creates the text character reference map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.CreateAttributeValueCharRefMap">
            <summary>
            Creates the attribute value character reference map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.EncodeCharRefs(Nevron.Nov.Xml.NCharacterReferenceMap,System.String)">
            <summary>
            Encodes all reference characters in the given string to their corresponding reference strings.
            </summary>
            <param name="map"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.Create(System.IO.Stream)">
            <summary>
            Creates a XML writer to write data to the given stream encoding the string data
            with the UTF8 encoding.
            </summary>
            <param name="stream">The stream to use for writing XML data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the given stream to write to is null.</exception>
            <returns>A XML writer that can be used to write XML data to the given stream.</returns>
        </member>
        <member name="M:Nevron.Nov.Xml.NXmlWriter.Create(System.IO.Stream,Nevron.Nov.Text.NEncoding)">
            <summary>
            Creates a XML writer to write data to the given stream encoding the string data with the
            given encoding.
            </summary>
            <param name="stream">The stream to use for writing XML data.</param>
            <param name="encoding">The encoding to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the given stream to write to or the specified encoding is null.</exception>
            <returns>A XML writer that can be used to write XML data to the given stream.</returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEncoding">
            <summary>
            Represents a character encoding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetByteCount(System.Char[],System.Int32@,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters from the specified string.
            </summary>
            <param name="str">The characters to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <returns>The number of resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.Char[],System.Int32@,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes "charCount" characters from the given string, starting from the character at
            index "charIndex" and puts them in the specified byte array, starting from "byteIndex".
            </summary>
            <param name="str">The characters to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <param name="bytes">The byte array in which to put the resulting bytes.</param>
            <param name="byteIndex">The index in the byte array at which to begin putting bytes.</param>
            <returns>The number of resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetCharCount(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The array of bytes to convert to chars.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <returns>The number of chars inserted at char index.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetChars(System.Byte[],System.Int32@,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes "byteCount" bytes from the given byte array, starting from the byte at index
            "byteIndex" and puts them in the specified char array, starting from "charIndex".
            </summary>
            <param name="bytes">The array of bytes to convert to chars.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <param name="chars">The array of chars to fill with the decoded chars.</param>
            <param name="charIndex">The index in the char array at which to start placing the decoded chars.</param>
            <returns>The number of chars inserted at char index.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.AddAlias(System.String)">
            <summary>
            Adds an alias name for this encoding.
            </summary>
            <param name="name">The alias name to add.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.IsAliasOf(System.String)">
            <summary>
            Checks whether the given name is an alias of this encoding.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if the given name is an alias of this encoding and false otherwise.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes produced by encoding the characters in the specified string.
            </summary>
            <param name="str">The string to work on.</param>
            <returns>The number of bytes produced by encoding the characters in the specified string.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetByteCount(System.Char[])">
            <summary>
            Calculates the number of bytes produced by encoding the characters in the specified string.
            </summary>
            <param name="chars">The char array to work on.</param>
            <returns>The number of bytes produced by encoding the characters in the specified string.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters from the specified string.
            </summary>
            <param name="str">The characters to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <returns>The number of resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.String)">
            <summary>
            Encodes the given string and returns the resulting bytes.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>The resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.Char[])">
            <summary>
            Encodes the given string and returns the resulting bytes.
            </summary>
            <param name="chars">The chars to encode.</param>
            <returns>The resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.String,System.Int32,System.Int32)">
            <summary>
            Encodes "charCount" characters from the given string, starting from the character at index
            "charIndex" and returns the resulting byte array.
            </summary>
            <param name="str">The string to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <returns>The resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encodes "charCount" characters from the given string, starting from the character at index
            "charIndex" and returns the resulting byte array.
            </summary>
            <param name="chars">The characters to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <returns>The resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes "charCount" characters from the given string, starting from the character at
            index "charIndex" and puts them in the specified byte array, starting from "byteIndex".
            </summary>
            <param name="chars">The characters to encode.</param>
            <param name="charIndex">The char index at which to start encoding.</param>
            <param name="charCount">The number of chars to encode.</param>
            <param name="bytes">The byte array in which to put the resulting bytes.</param>
            <param name="byteIndex">The index in the byte array at which to begin putting bytes.</param>
            <returns>The number of resulting bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetString(System.Byte[])">
            <summary>
            Decodes the given byte array and returns the resulting string.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes "byteCount" bytes from the given byte array, starting from the byte at index
            "byteIndex" and returns the resulting string.
            </summary>
            <param name="bytes">The array of bytes to convert to string.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetCharCount(System.Byte[])">
            <summary>
            Calculates the number of characters produced by decoding all the bytes from the specified byte array.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <returns>The number of resulting characters.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The array of bytes to convert to chars.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <returns>The number of decoded chars.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetChars(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes "byteCount" bytes from the given byte array, starting from the byte at index
            "byteIndex" and returns the resulting string.
            </summary>
            <param name="bytes">The array of bytes to convert to chars.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <returns>The resulting chars.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes "byteCount" bytes from the given byte array, starting from the byte at index
            "byteIndex" and puts them in the specified char array, starting from "charIndex".
            </summary>
            <param name="bytes">The array of bytes to convert to chars.</param>
            <param name="byteIndex">The starting index in the byte array to start working from.</param>
            <param name="byteCount">The number of bytes to convert.</param>
            <param name="chars">The array of chars to fill with the decoded chars.</param>
            <param name="charIndex">The index in the char array at which to start placing the decoded chars.</param>
            <returns>The number of chars inserted at char index.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetChars(System.Byte[])">
            <summary>
            Gets the chars encoded by the specfiied bytes.
            </summary>
            <param name="bytes">The bytes to decode.</param>
            <returns>The decoded chars.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.CanEncodeChar(System.Char)">
            <summary>
            Returns true if the current encoding can encode the char.
            </summary>
            <param name="c">The char to encode.</param>
            <returns>True if the given char can be encoded and false otherwise.</returns>
        </member>
        <member name="F:Nevron.Nov.Text.NEncoding.m_Aliases">
            <summary>
            The alias names of this encoding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.AddCustomEncoding(Nevron.Nov.Text.NEncoding)">
            <summary>
            Adds a new custom encoding to the list of encodings.
            </summary>
            <param name="encoding">The encoding to add to the list.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetEncoding(System.Int32)">
            <summary>
            Returns the encoding associated with the specified code page or null
            if no such encoding is supported.
            </summary>
            <param name="codePage">The code page to get an encoding for.</param>
            <returns>The encoding associated with the specified code page or null
            if no such encoding is supported.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEncoding.GetEncoding(System.String)">
            <summary>
            Returns the encoding associated with specified name or null if no
            such encoding is supported.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.FallbackCharacter">
            <summary>
            Gets or sets the character to use when a character is not supported
            by this encoding.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.FallbackByte">
            <summary>
            Gets or sets the byte to use when a character is not supported
            by this encoding.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.Name">
            <summary>
            Gets the official name of this encoding - the name registered with
            the Internet Assigned Numbers Authority (IANA).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.CodePage">
            <summary>
            Gets the code page associated with this encoding.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.Encodings">
            <summary>
            Creates and returns an array that contains all supported encodings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.UTF8">
            <summary>
            Gets an encoding for the 8 bit unicode (UTF-8) format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.UTF16LittleEndian">
            <summary>
            Gets an encoding for the 16 bit unicode (UTF-16) format with little
            endian byte order. It is also know as simply 'Unicode' encoding in
            the .NET Framework and is used by default for strings.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.UTF16BigEndian">
            <summary>
            Gets an encoding for the 16 bit unicode (UTF-16) format with big endian byte order.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.ASCII">
            <summary>
            Gets an encoding for the 7 bit 'ASCII' (US-ASCII) character set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.WesternEuropean">
            <summary>
            Gets an encoding for the 'Western European (ISO)' (iso-8859-1) character set
            also known as 'Latin-1'.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.CentralEuropean">
            <summary>
            Gets an encoding for the 'Central European (ISO)' (iso-8859-2) character set
            also known as 'Latin-2'.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.Cyrillic">
            <summary>
            Gets an encoding for the 'Cyrillic (Windows)' (windows-1251) character set.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEncoding.Koi8r">
            <summary>
            Gets an encoding for the 'Cyrillic (KOI8-R)' character set.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMultiLengthPropertyEditor">
            <summary>
            The NMultiLengthPropertyEditor class is by default assigned to properties of NMultiLength type.
            The editor allows for editing of percentage and fixed length values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMultiLengthPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMultiLengthPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMultiLengthPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a pair box, which consists of a check box and a measure up down.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMultiLengthPropertyEditor.NMultiLengthPropertyEditorSchema">
            <summary>
            Schema associated with NMultiLengthPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENCaretMoveDirection">
            <summary>
            Enumerates the caret move directions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.None">
            <summary>
            Caret position does not change
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.PrevLine">
            <summary>
            Caret position is moved to the closest position on the previous line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.NextLine">
            <summary>
            Caret position is moved to the closest position on the next line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.PrevGrapheme">
            <summary>
            Caret position is moved to the previous grapheme
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.NextGrapheme">
            <summary>
            Caret position is moved to the next grapheme
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.PrevChar">
            <summary>
            Caret position is moved to the prev char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.LineBegin">
            <summary>
            Caret position is moved to the beggining of the current line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.LineEnd">
            <summary>
            Caret position is moved to the end of the current line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.PrevWord">
            <summary>
            Caret position is moved to the prev word
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.NextWord">
            <summary>
            Caret position is moved to the next word
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.DocumentBegin">
            <summary>
            Caret position is moved to the beginning of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.DocumentEnd">
            <summary>
            Caret position is moved to the end of the document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.PrevPage">
            <summary>
            Caret position is moved to the previous page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENCaretMoveDirection.NextPage">
            <summary>
            Caret position is moved to the next page
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTabStopAlignment">
            <summary>
            Enumerates the tab stop alignments
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopAlignment.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopAlignment.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopAlignment.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopAlignment.Decimal">
            <summary>
            Decimal alignment
            </summary>
        </member>
        <member name="T:Nevron.Nov.NMultiLength">
            <summary>
            Represents a length which is specified in dips or percentages of the parent block width or height
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.#ctor(Nevron.Nov.ENMultiLengthUnit,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mode"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this multi length.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.GetHashCode">
            <summary>
            Gets the hash code of this multi length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.ToString">
            <summary>
            Gets the string representation of this multi length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.ConvertToDIPs(System.Double)">
            <summary>
            Gets the length repsented in DIPs
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="F:Nevron.Nov.NMultiLength.Unit">
            <summary>
            The unit of this multi length
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMultiLength.Value">
            <summary>
            The value of this multi length
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.NewFixed(System.Double)">
            <summary>
            Creates a new NMultiLength instance and initializes it with a length specified in DIP units.
            </summary>
            <param name="length">Length specified in DIP units.</param>
            <returns>A new multi length object.</returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.NewPercentage(System.Double)">
            <summary>
            Creates a new NMultiLength instance and initializes it with a length specified in percent units.
            </summary>
            <param name="percent">Length specified in percent units.</param>
            <returns>A new multi length object.</returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.op_Equality(Nevron.Nov.NMultiLength,Nevron.Nov.NMultiLength)">
            <summary>
            Checks whether the given multi lengths are equal.
            </summary>
            <param name="length1"></param>
            <param name="length2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMultiLength.op_Inequality(Nevron.Nov.NMultiLength,Nevron.Nov.NMultiLength)">
            <summary>
            Checks whether the given multi lengths are different.
            </summary>
            <param name="length1"></param>
            <param name="length2"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPageSize">
            <summary>
            Represents a paper size specified either from a predefined paper kind or custom paper kind
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.#ctor(Nevron.Nov.Graphics.ENPaperKind)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paperSize"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="customWidth"></param>
            <param name="customHeight"></param>
            <param name="trySetKnownPaperKind"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.#ctor(Nevron.Nov.Graphics.NSize)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.ToSize">
            <summary>
            Converts the paper size to a size object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.op_Equality(Nevron.Nov.Graphics.NPageSize,Nevron.Nov.Graphics.NPageSize)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPageSize.op_Inequality(Nevron.Nov.Graphics.NPageSize,Nevron.Nov.Graphics.NPageSize)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPageSize.Kind">
            <summary>
            Gets the paper kind of this paper size object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPageSize.Width">
            <summary>
            Gets or sets the paper size width (in DIP).
            The set implementation updates the Kind property to match the current page size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPageSize.Height">
            <summary>
            Gets or sets the paper size height (in DIP).
            The set implementation updates the Kind property to match the current page size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENFontRasterizationMode">
            <summary>
            Enumerates the possible font rasterization modes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontRasterizationMode.Aliased">
            <summary>
            Font is rasterized in aliased mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontRasterizationMode.Antialiased">
            <summary>
            Font is rasterized in antialiased mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontRasterizationMode.AntialiasedGridFit">
            <summary>
            Font is rasterized in antialiased mode, with grid fitting enabled
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontRasterizationMode.SubPixel">
            <summary>
            Font is rasterized in subpixel antialiased mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontRasterizationMode.SubPixelGridFit">
            <summary>
            Font is rasterized in subpixel antialiased mode, with grid fitting enabled
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENFontVariant">
            <summary>
            Specifies font variant information. Used in font descriptor instead of ENFontStyle, because underline and strikeout are synthetic
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontVariant.Regular">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontVariant.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontVariant.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENTextHorzAlign">
            <summary>
            Enumerates the text aligns.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextHorzAlign.Left">
            <summary>
            Left alignment for text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextHorzAlign.Center">
            <summary>
            Center alignment for text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextHorzAlign.Right">
            <summary>
            Right alignment for text
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENTextVertAlign">
            <summary>
            Enumerates the text aligns.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextVertAlign.Top">
            <summary>
            Top alignment for text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextVertAlign.Center">
            <summary>
            Center alignment for text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextVertAlign.Bottom">
            <summary>
            Bottom alignment for text
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENTextWrapMode">
            <summary>
            Enumerates the text wrap modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextWrapMode.WordWrap">
            <summary>
            Text is wrapped inside the formatting rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextWrapMode.Clip">
            <summary>
            Text outside the formatting rectangle is clipped
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTextWrapMode.Ellipsis">
            <summary>
            Text that lies outside the formatting rectangle is replaced with ellipsis
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENFontStyle">
            <summary>
            Specifies style information applied to text such as Bold, Italic, Underline and Striketrough
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontStyle.Regular">
            <summary>
            Normal text. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontStyle.Underline">
            <summary>
            Underlined text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFontStyle.Strikethrough">
            <summary>
            Text with a line through the middle.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderAndThicknessPreview">
            <summary>
            A widget that shows previews of borders and their thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThicknessPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThicknessPreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderAndThicknessPreview.NBorderAndThicknessPreviewSchema">
            <summary>
            Schema associated with NBorderAndThicknessPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NBitmapEncoderSettings">
            <summary>
            Contains settings that are used for encoding a Bitmap image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageEncoderSettings">
            <summary>
            Abstract base class for image encoder settings classes.
            Derived types contain encoder settings for particular image formats like Png and Jpeg.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.INImageFormatProvider">
            <summary>
            Provides image format functionality.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.INImageFormatProvider.DataCompliesWithFormat(System.Byte[])">
            <summary>
            Checks whether the provided data complies with the image format. The method should perform 
            only a fast check - e.g. examine whether the data starts with the format signature bytes.
            </summary>
            <param name="imageData">The image data to be examined.</param>
            <returns>True if the byte array complies with the image format; otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.INImageFormatProvider.CreateDecoder(System.Byte[])">
            <summary>
            Creates a decoder for the image format.
            </summary>
            <remarks>
            The method throws an exception if a decoder cannot be created.
            </remarks>
            <returns>A decoder for the image format.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.INImageFormatProvider.CreateEncoder(Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Creates an encoder for the image format.
            </summary>
            <remarks>
            The method throws an exception if a decoder cannot be created.
            </remarks>
            <param name="settings">Settings for the encoder</param>
            <returns>An encoder for the image format.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.INImageFormatProvider.MimeType">
            <summary>
            Gets the MIME (Multipurpose Internet Mail Extensions) type of the image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.INImageFormatProvider.Name">
            <summary>
            Gets the name of the image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.INImageFormatProvider.FileExtensions">
            <summary>
            Gets the file extensions supported by the image format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENCodecPreference">
            <summary>
            Usage preferences for encoders/decoders.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCodecPreference.OnlyNOV">
            <summary>
            Only the codec regstered in NOV is used.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCodecPreference.PreferNOV">
            <summary>
            The NOV codec is used by default. In case it fails, the native codec for the platform is used.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCodecPreference.PreferNative">
            <summary>
            The native codec for the platform is used by default. In case it fails, the NOV codec is used.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENPixelFormat">
            <summary>
            Enumerates the supported pixel formats.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.XRGB32">
            <summary>
            XRGB channels, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.ARGB32">
            <summary>
            ARGB channels, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.pARGB32">
            <summary>
            ARGB channels, premultiplied Alpha, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.BGRA32">
            <summary>
            BGRA channels, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.ABGR32">
            <summary>
            ABGR channels, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.BGR24">
            <summary>
            BGR channels, 8 bits per channel, 24 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.RGB24">
            <summary>
            RGB channels, 8 bits per channel, 24 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.BGR48">
            <summary>
            BGR channels, 16 bits per channel, 48 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.BGRA64">
            <summary>
            BGRA channels, 16 bits per channel, 64 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.ABGR64">
            <summary>
            ABGR channels, 16 bits per channel, 64 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.A8">
            <summary>
            Alpha channel only, 8 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.Gray8">
            <summary>
            Gray channel only, 8 bits per pixel - this pixel format is used to represent grayscale images.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPixelFormat.GrayA16">
            <summary>
            Gray and alpha channels, 8 bits per channel - this pixel format is used to represent grayscale images.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageDecoder">
            <summary>
            Abstract base class for image decoders (readers).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageDecoder.#ctor(System.Byte[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="imageData">The image data to be decoded.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageDecoder.GetImageInfo(System.Boolean)">
            <summary>
            Reads image information (width, height, resolution) without fully decoding the image.
            </summary>
            <remarks>
            The function throws an exception if the image data is malformed.
            </remarks>
            <param name="getPerFrameInfo">
            Specified whether per-frame information must be extracted. Must be ignored for formats that do not support multiple frames.
            </param>
            <returns>An object containging the requested image information.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageDecoder.GetFrame(System.Int32)">
            <summary>
            Decodes the specified frame from the image data that is assigned to the decoder.
            </summary>
            <remarks>
            The function throws an exception if the image data is malformed.
            </remarks>
            <param name="frameIndex">
            Index of the frame to be decoded. Must be ignored for formats that do not support multiple frames.
            </param>
            <returns>A NRaster object containing the decoded image.</returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NEncodedImageSource">
            <summary>
            Base type for image sources that represent encoded images.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageSource">
            <summary>
            Serves as a base class for various image sources. Image sources provide the data for raster images.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.TryCreateRaster">
            <summary>
            Creates a new raster from the native image data of this source.
            </summary>
            <returns>Returns null if a raster could not be created.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.CreateRaster">
            <summary>
            Creates a new raster from the native image data of this source.
            </summary>
            <remakrs>
            The method throws an exception if a raster could not be created.
            </remakrs>
            <returns>A raster object representing the image.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.GetEncodedData(Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Obtains encoded image data for this image source.
            </summary>
            <remarks>
            If the original image data is in encoded form, the method creates a copy of the original data.
            If the original image data is in decoded form, the method encodes the original data.
            <br />
            The method throws an exception if encoded data could not be obtained.
            </remarks>
            <param name="preferredFormat">
            Specifies the format to be used when encoding the original image data (in case it is in decoded form).
            If this parameter is set to null, the method encodes the original raster in PNG format.
            </param>
            <param name="encoderSettings">
            If the original image data is in encoded form, this parameter is ignored.
            If the original image data is in decoded form, the method uses the specified encoder settings to encode the data.
            </param>
            <returns>
            Returns encoded image data.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.GetUniformAlpha(System.Single@)">
            <summary>
            Determines whether all of the image's pixels have the same alpha value and obtains this alpha value.
            </summary>
            <param name="alpha">Contains the uniform alpha value. Valid only if the method returns true.</param>
            <returns>Returns true if all pixels have the same alpha value, otherwise returns false.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Must override to serialize the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Must override to deserialize the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.DeepClone">
            <summary>
            Must override to create a copy of the current object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.ClearCachedInfo">
            <summary>
            Clears the image source's cached data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.GetImmutableKey(System.Boolean)">
            <summary>
            Gets an immutable image source that can be used as a hash table key for this image source.
            If this image source is immutable it can return itself as a key.
            </summary>
            <param name="startAnimation">If set to true the image source animation is ensured to be running.</param>
            <returns>An immutable image source.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.InternalUpdateCachedInfo">
            <summary>
            Updates the cached data of this image source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in its native form.
            </summary>
            <remarks>
            The method returns a structure that contains the image source's data as it is natively stored by the particular image source type.
            For encoded image sources the structure contains a byte array with encoded data, for NRaster-based image sources it contains a NRaster.
            <br />
            The method doesn't throw exceptions, but it is possible that it doesn't return any valid data.
            In this case you can check the DataException property for a possible exception that may have occured during data retrieval.
            </remarks>
            <returns>
            Returns a structure containing the image source's data.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSource.OnImageDataChanged">
            <summary>
            Clears cached data and raises the ImageDataChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageSource.m_CacheLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageSource.m_UniformAlpha">
            <summary>
            If all pixels of the image have the same alpha value, the field stores the alpha value as a number in the range [0, 1].
            If the alpha value varies accross pixels, the value must be -1.
            If not calculated yet, the value must be -2.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Graphics.NImageSource.ImageSourceChanged">
            <summary>
            Occurs when the image source is changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageSource.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageSource.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageSource.Resolution">
            <summary>
            Gets the image resolution in DPI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageSource.ImageInfo">
            <summary>
            Gets information about the current image data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageSource.DataException">
            <summary>
            Gets the exception that has been thrown during retrieval of image source data.
            Returns null if no exception has been thrown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.#ctor(Nevron.Nov.Graphics.NEncodedImageSource)">
            <summary>
            Copy constructor
            </summary>
            <param name="imageSource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.InternalUpdateCachedInfo">
            <summary>
            Updates the image format and the image info of this image source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.ClearCachedInfo">
            <summary>
            Clears the image source's cached data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEncodedImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEncodedImageSource.FrameIndex">
            <summary>
            Gets the index of the current frame.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEncodedImageSource.AnimateFrames">
            <summary>
            Gets a value indicating whether the image source's frames should be animated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEncodedImageSource.ImageFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageFrameInfo">
            <summary>
            Contains information about a single frame from a multiframe image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFrameInfo.Width">
            <summary>
            Gets the image width in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFrameInfo.Height">
            <summary>
            Gets the image height in pixels.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageSourceData">
            <summary>
            Contains image data in either encoded or decoded form.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSourceData.#ctor(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Initializes a new instance with the specified raster object (decoded data).
            </summary>
            <param name="raster">A raster containing decoded image data.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSourceData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance with the specified byte array (encoded data).
            In case the encoded image has multiple frames, frame 0 is used.
            </summary>
            <param name="encodedData">A byte array containing encoded image data.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageSourceData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance with the specified byte array (encoded data) and image index.
            </summary>
            <param name="encodedData">A byte array containing encoded image data.</param>
            <param name="imageIndex">Index of a specific frame from the encoded image.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageSourceData.Raster">
            <summary>
            A raster containing decoded image data. Must be null if the image source doesn't natively store decoded data.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageSourceData.EncodedData">
            <summary>
            A byte array containing image data in encoded form. Must be null if the image source doesn't natively store encoded data.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageSourceData.ImageIndex">
            <summary>
            Index of the selected frame from the encoded image (in case of image with multiple frames).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRaster">
            <summary>
            Represents a raster, which is a two dimensional array of pixel color values, encoded in a specific pixel format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRaster.DefaultResolution">
            <summary>
            The default resolution of a raster (in DPI).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.#ctor(System.Int32,System.Int32,Nevron.Nov.Graphics.NPixelFormat)">
            <summary>
            Creates a new raster with the specified width, height and pixel format.
            </summary>
            <remarks>
            The constructor automatically calculates the raster stride based on 
            the specified width and pixel format. The stride is aligned to four bytes (int).
            </remarks>
            <param name="width">Width of the raster (in pixels). Must be greater than zero.</param>
            <param name="height">Height of the raster (in pixels). Must be greater than zero.</param>
            <param name="pixelFormat">Pixel format of the raster. Must not be set to null.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.#ctor(System.Int32,System.Int32,Nevron.Nov.Graphics.NPixelFormat,System.Int32)">
            <summary>
            Creates a new raster with the specified width, height, pixel format and stride.
            </summary>
            <param name="width">Width of the raster (in pixels). Must be greater than zero.</param>
            <param name="height">Height of the raster (in pixels). Must be greater than zero.</param>
            <param name="pixelFormat">Pixel format of the raster. Must not be set to null.</param>
            <param name="stride">
            Raster stride in bytes. If the specified value is smaller than the minimal 
            possible stride for raster, the constructor throws an ArgumentException.
            </param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.#ctor(System.Int32,System.Int32,Nevron.Nov.Graphics.NPixelFormat,System.Int32[])">
            <summary>
            Creates a new raster with the specified pixel data, width, height and pixel format.
            </summary>
            <param name="width">Width of the raster (in pixels). Must be greater than zero.</param>
            <param name="height">Height of the raster (in pixels). Must be greater than zero.</param>
            <param name="pixelFormat">Pixel format of the raster. Must not be set to null.</param>
            <param name="data">A byte array containing the raster's pixel data.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.#ctor(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Copy constructor. Creates a new raster and copies the pixel data and the properties from the specified source raster.
            </summary>
            <param name="source">The source raster.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.GetPixelDataBytes">
            <summary>
            Gets the pixel data as a byte array.
            </summary>
            <returns>A byte array containing the pixel data.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.Clear(Nevron.Nov.Graphics.NColor)">
            <summary>
            Clears the raster by setting all pixels to the specified color.
            </summary>
            <param name="color">All raster pixels are set to this color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.FillRect(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Fills a rectangle in the raster with the specified color.
            </summary>
            <param name="color">The color to fill with.</param>
            <param name="rect">The rectangle to be filled.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.InvertColors">
            <summary>
            Inverts the colors of the raster pixels.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.ConvertToGrayscale">
            <summary>
            Converts the raster colors to grayscale.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.SetPixel(System.Int32,System.Int32,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets the color of the pixel at the specified coordinates.
            </summary>
            <param name="x">X coordinate of the target pixel.</param>
            <param name="y">Y coordinate of the target pixel.</param>
            <param name="color">The color to be set.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates.
            </summary>
            <param name="x">X coordinate of the source pixel.</param>
            <param name="y">Y coordinate of the source pixel.</param>
            <returns>Returns the color of the specified pixel.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.IsSingleColor">
            <summary>
            Determines whether the raster contains only one color.
            </summary>
            <returns>Returns true if all pixels have the same color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.GetUniformAlphaFromPixels(System.Single@)">
            <summary>
            Attempts to obtain an uniform alpha value from the raster pixels.
            </summary>
            <param name="alpha">
            If all pixels have the same alpha value, this parameter stores the unfiorm alpha value as a floating point number in the range [0, 1].
            If the alpha is not uniform this parameter is set to -1.0.
            </param>
            <returns>Returns true if all pixels have the same alpha value, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.CreateSubRaster(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new raster as a portion of the current raster.
            </summary>
            <remarks>
            The specified location and size must define a raster that fits within the current raster, otherwise an ArgumentException is thrown.
            </remarks>
            <param name="x">X location of the sub-raster's top-left corner.</param>
            <param name="y">Y location of the sub-raster's top-left corner.</param>
            <param name="width">Width of the sub-raster (in pixels).</param>
            <param name="height">Height of the sub-raster (in pixels).</param>
            <returns>A new raster object.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.FlipX">
            <summary>
            Creates a new raster by flipping the current raster horizontally.
            </summary>
            <returns>Returns the flipped raster.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.FlipY">
            <summary>
            Creates a new raster by flipping the current raster vertically.
            </summary>
            <returns>Returns the flipped raster.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.RotateClockwise">
            <summary>
            Creates a new raster by rotating the current raster at 90 degrees clockwise.
            </summary>
            <returns>Returns the rotated raster.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.RotateCounterClockwise">
            <summary>
            Creates a new raster by rotating the current raster at 90 degrees counterclockwise.
            </summary>
            <returns>Returns the rotated raster.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.GetTransparentMargins">
            <summary>
            Gets the offsets from the raster rim that are fully transparent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.Encode(Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Encodes the raster to the specified image format.
            </summary>
            <remarks>
            The method throws an exception if it fails to encode the raster.
            </remarks>
            <param name="imageFormat">
            Specifies the target image format. Cannot be null.
            </param>
            <param name="settings">
            An object that specifies format-specific settings for the image encoder. The target format and the settings type must match.
            For example in order to encode the image into PNG format you have to pass NImageFormat.Png as imageFormat and an instance of 
            the NPngEncoderSettings type as settings. If this parameter is set to null, the default encoder settings will be used.
            </param>
            <returns>Returns an object containing the encoded image data.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.Encode(Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings,Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Encodes the raster to the specified image format.
            </summary>
            <remarks>
            The method throws an exception if it fails to encode the raster.
            </remarks>
            <param name="imageFormat">
            Specifies the target image format. Cannot be null.
            </param>
            <param name="settings">
            An object that specifies format-specific settings for the image encoder. The target format and the settings type must match.
            For example in order to encode the image into PNG format you have to pass NImageFormat.Png as imageFormat and an instance of
            the NPngEncoderSettings type as settings. If this parameter is set to null, the default encoder settings will be used.
            </param>
            <param name="encoderPreference">
            Specifies preference for the image encoder.
            </param>
            <returns>Returns an object containing the encoded image data.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.Convert(Nevron.Nov.Graphics.NPixelFormat,System.Boolean)">
            <summary>
            Returns a raster with the specified pixel format, using the current raster as a source.
            </summary>
            <remarks>
            Throws an exception if either the source or the destination pixel format is not convertible.
            </remarks>
            <param name="destFormat">The target pixel format of the destination raster.</param>
            <param name="copySource">
            Specifies wheteher a copy of this raster must be returned in case that conversion is not necessary.
            </param>
            <returns>
            Returns a NRaster object containing the image data from the current raster, converted to the pixel format specified by destFormat.
            If destFormat is the same as the current raster's pixel format and copySource is set to false - then a reference to the current raster is returned.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.Convert(Nevron.Nov.Graphics.NPixelFormat,System.Int32,System.Boolean)">
            <summary>
            Creates a raster with the specified pixel format and stride, using the current raster as a source.
            </summary>
            <remarks>
            Throws an exception if either the source or the destination pixel format is not convertible.
            </remarks>
            <param name="destFormat">The target pixel format of the destination raster.</param>
            <param name="destStride">The stride of the destination raster (in bytes).</param>
            <param name="copySource">
            Specifies wheteher a copy of this raster must be returned in case that conversion is not necessary.
            </param>
            <returns>
            Returns a NRaster object containing the image data from the current raster, but converted to the pixel format 
            specified by destFormat and using the stride specified by destStride. If there is no need for actual conversions 
            and copySource is set to false - then a reference to the current raster is returned.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.RasterizePainting(System.Int32,System.Int32,System.Double,Nevron.Nov.Function{Nevron.Nov.Dom.NPaintVisitor})">
            <summary>
            Paints a 2D scene into a newly created raster with the specififed dimensions.
            </summary>
            <param name="width">Width (in pixels) of the output raster.</param>
            <param name="height">Height (in pixels) of the output raster.</param>
            <param name="resolution">Raster resolution, measured in DIP.</param>	
            <param name="paintDelegate">A function that paints the scene that should be rasterized.</param>
            <returns>A raster that contains the image painted in paintDelegate.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRaster.PixelsEqual(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NRaster,System.Byte,System.Int32)">
            <summary>
            Compares the given rasters pixel by pixel and returns whether they are considered equal
            obeying the specified tolerance and maximum number of pixels that may be different.
            </summary>
            <param name="raster1">The first raster to compare.</param>
            <param name="raster2">The second raster to compare.</param>
            <param name="tolerance">
            The maximum allowed difference between the color components of the same pixels of the two rasters.
            </param>
            <param name="allowedDifferentPixels">The maximum allowed number of different pixels.</param>
            <returns>A boolean value indicating whether the rasters are considered equal.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.Width">
            <summary>
            Gets the raster width (in pixels).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.Height">
            <summary>
            Gets the raster height (in pixels).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.PixelFormat">
            <summary>
            Gets the raster's pixel format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.PixelData">
            <summary>
            Gets a reference to the array that contains the raster's pixel data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.Stride">
            <summary>
            Gets the stride of the raster (number of bytes per raster row).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRaster.Resolution">
            <summary>
            Gets or sets the raster's resolution (in DPI).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENPngColorType">
            <summary>
            Enumerates the available PNG color types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPngColorType.Grayscale">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPngColorType.Truecolor">
            <summary>
            True color - Red, Green and Blue information.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPngColorType.IndexedColor">
            <summary>
            Palete based colors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPngColorType.GrayscaleWithAlpha">
            <summary>
            Grayscale with transparency information.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPngColorType.TruecolorWithAlpha">
            <summary>
            Truecolor with transparency information - Red, Green, Blue and Alpha information.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBoxBody">
            <summary>
            A 2D body, which serves as body for objects arranged by box layouts.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBody2D">
            <summary>
            A body, which behaves like a box
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBody">
            <summary>
            Represents a visually arrangeable abstract shape. Layouts actually arrange bodies.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.Translate(System.Double,System.Double)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.FlipX">
            <summary>
            Flips the X coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.FlipY">
            <summary>
            Flips the Y coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.Rotate(Nevron.Nov.Layout.ENLayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.GetBounds">
            <summary>
            Gets the bounds of the body 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody.RotatePoint(Nevron.Nov.Layout.ENLayoutRotation,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Rotates the specified point with the specified rotation
            </summary>
            <param name="rotation"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody.Object">
            <summary>
            Gets or sets the logical object represented by this body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody.Tag">
            <summary>
            Stores custom data associated with this cell body.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.SetBounds(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the bounds of the body
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.Translate(System.Double,System.Double)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.FlipX">
            <summary>
            Flips the X coordinates of body (e.g performs mirroring relatively to the Y axis)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.FlipY">
            <summary>
            Flips the Y coordinates of body (e.g performs mirroring relatively to the X axis)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.Rotate(Nevron.Nov.Layout.ENLayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBody2D.GetBounds">
            <summary>
            Gets the bounds of the body
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody2D.X">
            <summary>
            The X location of the body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody2D.Y">
            <summary>
            The Y location of the body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody2D.Width">
            <summary>
            The width of the body 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBody2D.Height">
            <summary>
            The height of the body 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Location">
            <summary>
            Gets or sets the body location
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Size">
            <summary>
            Gets or sets the body size
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Center">
            <summary>
            Gets or sets the center of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.CenterX">
            <summary>
            Gets or sets the X center of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.CenterY">
            <summary>
            Gets or sets the Y center of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Left">
            <summary>
            Gets or sets the left side of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Right">
            <summary>
            Gets or sets the right side of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Top">
            <summary>
            Gets or sets the top side of the body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody2D.Bottom">
            <summary>
            Gets or sets the bottom side of the body
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBody.SwapDimensions">
            <summary>
            Swaps the X and Y dimensions of the cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBody.MirrorX(System.Double)">
            <summary>
            Performs a X mirror of the cell bounds, relatively to the specified mirror coordinate
            </summary>
            <param name="mirror"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBody.MirrorY(System.Double)">
            <summary>
            Performs a Y mirror of the cell bounds, relatively to the specified mirror coordinate
            </summary>
            <param name="mirror"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBody.Initialize(Nevron.Nov.Layout.NBoxLayout,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Initializes the cell body
            </summary>
            <param name="layout"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxBody.MinWidth">
            <summary>
            The min width of the body.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxBody.MinHeight">
            <summary>
            The min height of the body.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxBody.MaxWidth">
            <summary>
            The max width of the body.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NBoxBody.MaxHeight">
            <summary>
            The max height of the body.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxBody.MinSize">
            <summary>
            Gets or sets the minimum size of the cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxBody.MaxSize">
            <summary>
            Gets or sets the maximum size of the cell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NDataUri">
            <summary>
            Represents a data URI, which is usually used to embed a resource in a
            text based document (HTML, XML, etc.).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NUriBase">
            <summary>
            Base class for all URIs and data URIs.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.CallToScheme">
            <summary>
            Launches a Skype call.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.DataScheme">
            <summary>
            The resource is a data URI.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.FileScheme">
            <summary>
            The resource is a file on the local computer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.FtpScheme">
            <summary>
            The resource is accessed through FTP.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.GopherScheme">
            <summary>
            The resource is accessed through the Gopher protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.HttpScheme">
            <summary>
            The resource is accessed through HTTP.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.HttpsScheme">
            <summary>
            The resource is accessed through SSL-encrypted HTTP.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.LdapScheme">
            <summary>
            The resource is accessed through the LDAP protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.MailToScheme">
            <summary>
            The resource is an e-mail address and accessed through the SMTP protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.NetPipeScheme">
            <summary>
            The resource is accessed through a named pipe.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.NetTcpScheme">
            <summary>
            The resource is accessed from a TCP endpoint.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.NewsScheme">
            <summary>
            The resource is accessed through the NNTP protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.NntpScheme">
            <summary>
            The resource is accessed through the NNTP protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.SkypeScheme">
            <summary>
            Launches a Skype call.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.TelnetScheme">
            <summary>
            The resource is accessed through the TELNET protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NUriBase.UuidScheme">
            <summary>
            The resource is accessed through a unique UUID endpoint name for communicating with a service.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.#ctor(Nevron.Nov.Networking.NUriBase)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.DeepClone">
            <summary>
            Must override to create a copy of the current object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.ToString">
            <summary>
            Gets a canonical string representation of this URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.GetHashCode">
            <summary>
            Returns the hash code for this URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this URI.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriBase.TryCreate(System.String,Nevron.Nov.Networking.ENUriKind,Nevron.Nov.Networking.NUriBase@)">
            <summary>
            Tries to create an URI from the given string.
            </summary>
            <param name="uriString"></param>
            <param name="uriKind"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.IsAbsolute">
            <summary>
            Indicates whether this URI is absolute.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.IsFile">
            <summary>
            Indicates whether this URI represents a file.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.OriginalString">
            <summary>
            Gets the string this URI was created from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.Scheme">
            <summary>
            Gets the scheme of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.IsData">
            <summary>
            Indicates whether this is a data URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriBase.IsHTTP">
            <summary>
            Indicates whether this URI represents an HTTP or an HTTPS resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NDataUri.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NDataUri.ToString">
            <summary>
            Gets the string representation of this data URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NDataUri.FromImage(Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a data URI by serializing the given image to PNG. Returns null if
            the image serialization fails.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied image is null.</exception>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NDataUri.FromImage(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Creates a data URI by serializing the given image to the specified binary format.
            Returns null if the image serialization fails.
            </summary>
            <param name="image"></param>
            <param name="imageFormat"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied image or image format is null.</exception>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NDataUri.IsAbsolute">
            <summary>
            Indicates whether this URI is absolute.
            Always returns true for data URIs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NDataUri.IsFile">
            <summary>
            Indicates whether this URI represents a file.
            Always returns false for data URIs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NDataUri.MimeType">
            <summary>
            Gets the MIME type of the data this data URI contains.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NDataUri.IsBase64">
            <summary>
            Indicates whether this data URI's data should be Base64 encoded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NDataUri.Data">
            <summary>
            Gets the data of this data URI.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NMimeType">
            <summary>
            Represents a MIME (Multipurpose Internet Mail Extensions) type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NMimeType.#ctor(Nevron.Nov.Networking.ENMimeContentType,System.String,System.String)">
            <summary>
            Initializes a MIME type.
            </summary>
            <param name="contentType"></param>
            <param name="subtype"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NMimeType.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NMimeType.GetHashCode">
            <summary>
            Computes a hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NMimeType.Equals(System.Object)">
            <summary>
            Checks whether this instance is equal to the specified object.
            </summary>
            <param name="obj"></param>
            <returns>True if the two objects are equal.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NMimeType.FromString(System.String)">
            <summary>
            Gets a mime type from the specified mime string.
            </summary>
            <param name="mime"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Networking.NMimeType.Unknown">
            <summary>
            The Unknow Mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NMimeType.ContentType">
            <summary>
            Gets the content type of this MIME type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NMimeType.SubType">
            <summary>
            Gets the sub type of this MIME type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NMimeType.Parameters">
            <summary>
            Gets the parameters of this MIME type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPaintTextPointSettings">
            <summary>
            Represents settings used for painting a string with formatting rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextPointSettings.HorzAlign">
            <summary>
            The horizontal text alignment relative to the formatting location
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextPointSettings.VertAlign">
            <summary>
            The vertical text alignment relative to the formatting location
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextPointSettings.SingleLine">
            <summary>
            Single line of text
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPaintTextRectSettings">
            <summary>
            Represents settings used for painting a string with formatting rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextRectSettings.WrapMode">
            <summary>
            The text wrap mode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextRectSettings.HorzAlign">
            <summary>
            The horizontal text alignment inside the formatting rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextRectSettings.VertAlign">
            <summary>
            The vertical text alignment inside the formatting rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPaintTextRectSettings.SingleLine">
            <summary>
            Single line of text
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NLocalFileRequest">
            <summary>
            Represents a request for a file on the local machine or network.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NUriRequest">
            <summary>
            An abstract base class that represents an asynchronous request for a resource.
            The requested resource is identified by an Uniform Resource Identifier (URI).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="uri">Specifies the URI that identifies the requested resource. Cannot be null.</param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.Submit">
            <summary>
            Submits the request.
            When a response arrives or if the request gets aborted, this request will raise the Completed event.
            Use the Status property of the response to determine whether the request has been executed successfully.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.Abort">
            <summary>
            Aborts this request.
            This method has no effect if the request has been completed. If the request is not submitted 
            or is in-progress, the Completed event is raised immediately, with an Aborted respose type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.OnStatusChanged(Nevron.Nov.Networking.ENAsyncRequestStatus,Nevron.Nov.Networking.ENAsyncRequestStatus)">
            <summary>
            Called whenever the request status is changed.
            </summary>
            <param name="oldStatus">The old status.</param>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.VerifyNotSubmitted">
            <summary>
            Throws an exception if the request is submitted and cannot be modified.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUriRequest.SetStatus(Nevron.Nov.Networking.ENAsyncRequestStatus)">
            <summary>
            Sets a new status for this request and calls OnStatusChanged.
            </summary>
            <param name="status">The new status.</param>
        </member>
        <member name="E:Nevron.Nov.Networking.NUriRequest.Completed">
            <summary>
            Raised when the request is completed. The request and the response are passed as arguments to the callback function.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriRequest.Uri">
            <summary>
            Gets the Uniform Resource Identifier (URI) associated with this request.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriRequest.Status">
            <summary>
            Gets the status of this request.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NLocalFileRequest.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates a new request for a local file identified by the specified URI. The URI's scheme must be "file".
            </summary>
            <param name="uri">Specifies the URI that identifies the requested resource. Cannot be null.</param>
        </member>
        <member name="M:Nevron.Nov.Networking.NLocalFileRequest.Submit">
            <summary>
            Submits the request.
            When the file is read or if the request gets aborted, this request will raise the Completed event.
            Use the Status property of the response to determine whether the request has been executed successfully.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NLocalFileRequest.Abort">
            <summary>
            Aborts this request.
            This method has no effect if the request has been completed. If the request is not submitted 
            or is in-progress, the Completed event is raised immediately, with an Aborted respose type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NUriResponse">
            <summary>
            Represents the response for an URI request.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriResponse.Status">
            <summary>
            Gets the response status.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriResponse.Data">
            <summary>
            Gets the response data.
            Valid only if the response status is equal to Succeeded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUriResponse.ErrorException">
            <summary>
            Gets an exception that describes the reason for failure of the request.
            Valid only if response status is equal to Failed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.ENSystemPrimitiveType">
            <summary>
            Enumerates the system primitive types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Byte">
            <summary>
            Byte type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Char">
            <summary>
            Char type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.SByte">
            <summary>
            Signed byte type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Int16">
            <summary>
            16-bit integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Int32">
            <summary>
            32-bit integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Int64">
            <summary>
            64-bit integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.UInt16">
            <summary>
            16-bit unsigned integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.UInt32">
            <summary>
            32-bit unsigned integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.UInt64">
            <summary>
            64-bit unsigned integer type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Single">
            <summary>
            Single precision floating point type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.Double">
            <summary>
            Double precision floaing point type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENSystemPrimitiveType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaAssembly">
            <summary>
            Represents an assembly in the meta object model.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaNamedElement">
            <summary>
            The base of all named elements in the meta object model.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaElement">
            <summary>
            The base of all meta object model elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaElement.IgnoreBaseScopes">
            <summary>
            Mark scope to ignore base scopes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaElement.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaElement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaElement.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaElement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.#ctor(Nevron.Nov.Serialization.NMetaNamedElement)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.SplitQualifiedName(System.String)">
            <summary>
            Splits a qualified name and takes care to analyze generic mangle
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.FullLastName(System.String)">
            <summary>
            Gets the full last name of the qualified name
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaNamedElement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="namedElement"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamedElement.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaNamedElement)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="namedElement"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaNamedElement.Name">
            <summary>
            Gets the name of the elemenet
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaNamedElement.Namespace">
            <summary>
            Gets the namespace of this element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaAssembly.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaElementCollection">
            <summary>
            Represents a collection of system primitive types.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaElementCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaNamespace">
            <summary>
            Represents a namespace in the meta object model.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaNamespace.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaDocument">
            <summary>
            Represents a meta object model document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.NMetaDocument.m_CurrentId">
            <summary>
            Current id
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaDocument.IgnoreBaseScopes_NoObf">
            <summary>
            Mark scope to ignore base scopes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaDocument.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaDocument)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaDocument.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaDocument)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="document"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaRoot">
            <summary>
            Represents the root of the meta object model
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaRoot.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaRoot.IgnoreBaseScopes">
            <summary>
            Mark scope to ignore base scopes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaRoot.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaRoot)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="root"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaRoot.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaRoot)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="root"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaEnum">
            <summary>
            Represents the enumeration type in the meta object model.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaDataType">
            <summary>
            The base of all data types in the meta object model.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaType">
            <summary>
            The base of all generalizable elements (equavalent to abstract Type).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaDataType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaEnum.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaEnum.#ctor(Nevron.Nov.Serialization.NMetaEnum)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaEnum.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaEnum.#ctor(System.String,Nevron.Nov.Serialization.NMetaEnumtemList)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="name"></param>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaEnumItem">
            <summary>
            Represents an item in a enumeration type
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaEnumtemList">
            <summary>
            Represents a list of enumeration item objects
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaEnumtemList.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaPrimitiveType">
            <summary>
            The base of all primitive types in the meta object model.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaPrimitiveType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaStructure">
            <summary>
            Represents the structure data type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaStructure.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaStructure.Surrogate">
            <summary>
            Gets or sets a value indicating whether the object is a surrogate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaStructure.CustomSerializable">
            <summary>
            Gets or sets a value indicating whether the object uses custom serialization
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaSystemPrimitiveType">
            <summary>
            The base of all system primitive types.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaSystemPrimitiveType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaSystemPrimitiveType.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaSystemPrimitiveType)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaSystemPrimitiveType"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaSystemPrimitiveType.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaSystemPrimitiveType)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaSystemPrimitiveType"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaGeneric">
            <summary>
            Represents the generic data type, that can optionally inherit from
            anohter (either generic or concrete type). The child elements of the generic type 
            are called parameters. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaGeneric.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaGeneric.AddParameterList(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaGeneric.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaGeneric)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaGeneric"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaGeneric.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaGeneric)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaGeneric"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaGeneric.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaGeneric.GenericTypeDefinition">
            <summary>
            Returns the generic type definition of this generic instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaGeneric.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaField">
            <summary>
            Represents an abstract meta object model field
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaField.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaField.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaField)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaField"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaField.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaField)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaField"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaField.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaArray">
            <summary>
            Represents a collection in the meta object model.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaReferenceTarget">
            <summary>
            Represents an abstract reference target.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaReferenceTarget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaArray.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaArray.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaArray)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaArray"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaArray.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaArray)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaArray"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaArray.Type">
            <summary>
            Gets / sets the type id
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaClass">
            <summary>
            Represents a meta object model class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaClass.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaClass.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaClass)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaClass"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaClass.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaClass)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="metaClass"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaClass.Type">
            <summary>
            Gets / sets the type id
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaClass.Surrogate">
            <summary>
            Gets or sets a value indicating whether the object is a surrogate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaClass.CustomSerializable">
            <summary>
            Gets or sets a value indicating whether the object uses custom serialization
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NMetaCollection">
            <summary>
            Represents a collection in the meta object model.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaCollection.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.Serialization.NMetaCollection)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NMetaCollection.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.Serialization.NMetaCollection)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="collection"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NMetaCollection.Type">
            <summary>
            Gets / sets the type id
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NFieldNameTransform">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NModelTransform">
            <summary>
            Transforms a model element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NModelTransform.Transform(Nevron.Nov.Serialization.NMetaDocument,Nevron.Nov.Serialization.NMetaDocument)">
            <summary>
            
            </summary>
            <param name="oldDocument"></param>
            <param name="newDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NFieldNameTransform.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NFieldNameTransform.Transform(Nevron.Nov.Serialization.NMetaDocument,Nevron.Nov.Serialization.NMetaDocument)">
            <summary>
            
            </summary>
            <param name="oldDocument"></param>
            <param name="newDocument"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NTypeNameTransform">
            <summary>
            Represents a name transform applied to a document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeNameTransform.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeNameTransform.Transform(Nevron.Nov.Serialization.NMetaDocument,Nevron.Nov.Serialization.NMetaDocument)">
            <summary>
            
            </summary>
            <param name="oldDocument"></param>
            <param name="newDocument"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NNonSerializedAttribute">
            <summary>
            Used to mark fields as binary non serialized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NNonSerializedAttribute.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.INCustomSerializable">
            <summary>
            Interface for custom serializable objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.INCustomSerializable.GetSerializeBaseScopeMembers">
            <summary>
            Returns true if the serialize must serialize members from base scopes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.INCustomSerializable.Serialize(Nevron.Nov.Serialization.NSerializationContext)">
            <summary>
            Serializes the object to a serialization context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.INCustomSerializable.Deserialize(Nevron.Nov.Serialization.NDeserializationContext)">
            <summary>
            Deserializes the object from a deserialization context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.INSurrogateSerializable">
            <summary>
            Implemented by objects that use surrogate serialization
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.INSurrogateSerializable.SurrogateSerializer">
            <summary>
            Gets the surrogate serializer for this object
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.INSurrogateSerializer">
            <summary>
            Implemented by surrogate serializers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.INSurrogateSerializer.GetRealObject">
            <summary>
            Gets the real object behind the surrogate
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.INSurrogateSerializer.ApplyToRealObject(System.Object)">
            <summary>
            Applies the surrogate to the real object (used when an object inherits a surrogate serializable object)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NArrayActivator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayActivator.#ctor(System.Type)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="itemType"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayActivator.CreateInstance(System.Int32)">
            <summary>
            Returns the new object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NTypeActivator">
            <summary>
            A generic type activator
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeActivator.#ctor(System.Type)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeActivator.CreateInstance">
            <summary>
            Returns the new object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NTypeActivatorFactory">
            <summary>
            Summary description for NTypeActivatorBuilder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeActivatorFactory.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeActivatorFactory.CreateArrayActivator(System.Type)">
            <summary>
            Creates a collection activator
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeActivatorFactory.CreateObjectActivator(System.Type)">
            <summary>
            Creates a class activator
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NArrayAdapter">
            <summary>
            An array adapter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NCollectionAdapter">
            <summary>
            Represents a generic collection instance adapter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NCollectionAdapter.GetCount(System.Object)">
            <summary>
            Retrieves the item count in the collection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NCollectionAdapter.GetItemAt(System.Object,System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NCollectionAdapter.SetItemAt(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the item at the specified index
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayAdapter.#ctor(System.Type)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayAdapter.GetCount(System.Object)">
            <summary>
            Retrieves the item count in the collection
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayAdapter.GetItemAt(System.Object,System.Int32)">
            <summary>
            Gets the item at the specified index
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NArrayAdapter.SetItemAt(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the item at the specified index
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NFieldAdapter">
            <summary>
            Adapts a meta object model field to instance field
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NFieldAdapter.GetValue(System.Object)">
            <summary>
            Gets the field value from the field parent
            </summary>
            <param name="fieldParent"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NFieldAdapter.SetValue(System.Object,System.Object)">
            <summary>
            Sets a field value from to the field parent
            </summary>
            <param name="fieldParent"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NFieldAdapter.Name">
            <summary>
            Gets the name of the field
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NIListCollectionAdapter">
            <summary>
            Represents a default adapter for collections implementing the IList interface
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NIListCollectionAdapter.#ctor(System.Type)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NIListCollectionAdapter.GetCount(System.Object)">
            <summary>
            Retrieves the item count in the collection
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NIListCollectionAdapter.GetItemAt(System.Object,System.Int32)">
            <summary>
            Gets the item at the specified index
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NIListCollectionAdapter.SetItemAt(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the item at the specified index
            </summary>
            <param name="instance"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NReflectionFieldInstanceAdapter">
            <summary>
            Implements a generic instance field adapter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NReflectionFieldInstanceAdapter.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fieldInfo"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NReflectionFieldInstanceAdapter.GetValue(System.Object)">
            <summary>
            Gets the field value from the field parent.
            </summary>
            <param name="fieldParent"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NReflectionFieldInstanceAdapter.SetValue(System.Object,System.Object)">
            <summary>
            Sets a field value from to the field parent
            </summary>
            <param name="fieldParent"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NReflectionFieldInstanceAdapter.Name">
            <summary>
            Gets the name of the field
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NTypeAdapterFactory">
            <summary>
            Generic implmenetation of the type adapter factory interface
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeAdapterFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeAdapterFactory.CreateCollectionAdapter(System.Type,System.Type)">
            <summary>
            Creates a collection adapter
            </summary>
            <param name="type"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeAdapterFactory.CreateArrayAdapter(System.Type)">
            <summary>
            
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeAdapterFactory.CreateFieldAdapter(Nevron.Nov.Serialization.NMetaField,System.Type)">
            <summary>
            Creates a field adapter.
            </summary>
            <param name="field"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NTypeResolver">
            <summary>
            Resolves a type name to actual type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeResolver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeResolver.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the assembly to the list of assemblies of the resolver.
            </summary>
            <param name="assemlby"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NTypeResolver.ResolveTypeByName(System.String)">
            <summary>
            Returns the type corresponding to the specified type name
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NContext">
            <summary>
            The base for the serialization and deserialization visitor contexts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NContext.ClearProviders">
            <summary>
            Clears the model and shell providers
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NContext.Log">
            <summary>
            Gets the current log
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NContext.TypeResolver">
            <summary>
            Gets the type resolver of this context
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDeserializationContext">
            <summary>
            Represents a deserialization context.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadReference(System.Object@)">
            <summary>
            Reads an object reference from the current stream
            </summary>
            <param name="result"></param>
            <returns>true if sucessful, false otherwise (result is null)</returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadReferenceUnchecked">
            <summary>
            Reads an object reference without checking for success
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadBoolean">
            <summary>
            Reads a Boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadByte">
            <summary>
            Reads a byte (8-bit unsigned integer).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadChar">
            <summary>
            Reads a char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadSByte">
            <summary>
            Reads a byte (8-bit signed integer).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt16">
            <summary>
            Reads an 16-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt32">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt64">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadSingle">
            <summary>
            Reads a single-precision floating-point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadDouble">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadDateTime">
            <summary>
            Reads a DateTime value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadTimeSpan">
            <summary>
            Reads a TimeSpan value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadString">
            <summary>
            Reads a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadStringNoCount">
            <summary>
            Reads a string to the end of the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>An array containing the read bytes.</returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadBooleanArray">
            <summary>
            Reads an array of Boolean values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadByteArray">
            <summary>
            Reads a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadCharArray">
            <summary>
            Reads a char array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadSByteArray">
            <summary>
            Reads an array of signed bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt16Array">
            <summary>
            Reads an array of signed 16-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt32Array">
            <summary>
            Reads an array of signed 32-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadInt64Array">
            <summary>
            Reads an array of signed 64-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt16Array">
            <summary>
            Reads an array of unsigned 16-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt32Array">
            <summary>
            Reads an array of unsigned 32-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadUInt64Array">
            <summary>
            Reads an array of unsigned 64-bit integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadSingleArray">
            <summary>
            Reads an array of single-precision floating-point numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadDoubleArray">
            <summary>
            Reads an array of double-precision floating-point numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadDateTimeArray">
            <summary>
            Reads an array of DateTime values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadTimeSpanArray">
            <summary>
            Reads an array of TimeSpan values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializationContext.ReadStringArray">
            <summary>
            Reads an array of strings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDeserializer">
            <summary>
            Represents a deserializer object that can create objects from their persisted state
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NSerializerBase">
            <summary>
            Base class for serializer / deserializer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializerBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializerBase.#ctor(Nevron.Nov.Serialization.NTypeResolver,Nevron.Nov.Serialization.NTypeActivatorFactory,Nevron.Nov.Serialization.NTypeAdapterFactory,Nevron.Nov.INLog)">
            <summary>
            Initializer constructor
            </summary>
            <param name="typeResolver"></param>
            <param name="typeActivatorFactory"></param>
            <param name="typeAdapterFactory"></param>
            <param name="log"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializerBase.GetMetaSerializationSettings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Serialization.NSerializerBase.m_TypeResolver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.NSerializerBase.m_TypeActivatorFactory">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.NSerializerBase.m_TypeAdapterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.NSerializerBase.m_Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializerBase.TypeResolver">
            <summary>
            Gets or sets the type resolver
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializerBase.TypeActivatorFactory">
            <summary>
            Gets or sets the type activator factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializerBase.TypeAdapterFactory">
            <summary>
            Gets or sets the type adapter factory
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializerBase.Log">
            <summary>
            Gets or sets the current log
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializer.#ctor(Nevron.Nov.DataStructures.NList{Nevron.Nov.Serialization.NModelTransform},Nevron.Nov.Serialization.NTypeResolver,Nevron.Nov.Serialization.NTypeActivatorFactory,Nevron.Nov.Serialization.NTypeAdapterFactory,Nevron.Nov.INLog)">
            <summary>
            Initializer constructor
            </summary>
            <param name="modelTransforms"></param>
            <param name="typeResolver"></param>
            <param name="typeActivatorFactory"></param>
            <param name="typeAdapterFactory"></param>
            <param name="log"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializer.LoadFromFile(System.String,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Loads an object from the file in the specified persistency format.
            </summary>
            <param name="filePath"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDeserializer.LoadFromStream(System.IO.Stream,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Loads an object from a stream in the specified persistency format
            </summary>
            <param name="stream"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NSerializationContext">
            <summary>
            Represents a serialization context
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteBoolean(System.Boolean)">
            <summary>
            Writes the given boolean value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteByte(System.Byte)">
            <summary>
            Writes the given byte value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteChar(System.Char)">
            <summary>
            Writes the given char value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteSByte(System.SByte)">
            <summary>
            Writes the given signed byte value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt16(System.Int16)">
            <summary>
            Writes the given 16-bit integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt32(System.Int32)">
            <summary>
            Writes the given 32-bit integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt64(System.Int64)">
            <summary>
            Writes the given 64-bit integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt16(System.UInt16)">
            <summary>
            Writes the given 16-bit unsigned integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt32(System.UInt32)">
            <summary>
            Writes the given 32-bit unsigned integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt64(System.UInt64)">
            <summary>
            Writes the given 64-bit unsigned integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteSingle(System.Single)">
            <summary>
            Writes the given single precision floating point value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteDouble(System.Double)">
            <summary>
            Writes the given double precision floating point value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteDateTime(System.DateTime)">
            <summary>
            Writes the given DateTime value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteTimeSpan(System.TimeSpan)">
            <summary>
            Writes the given TimeSpan value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteString(System.String)">
            <summary>
            Writes the given string value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteStringNoCount(System.String)">
            <summary>
            Writes the given string value, without prepending its count
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteBooleanArray(System.Boolean[])">
            <summary>
            Writes the given boolean array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteByteArray(System.Byte[])">
            <summary>
            Writes the given byte array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteCharArray(System.Char[])">
            <summary>
            Writes the given char array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteSByteArray(System.SByte[])">
            <summary>
            Writes the given signed byte array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt16Array(System.Int16[])">
            <summary>
            Writes the given 16-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt32Array(System.Int32[])">
            <summary>
            Writes the given 32-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteInt64Array(System.Int64[])">
            <summary>
            Writes the given 64-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt16Array(System.UInt16[])">
            <summary>
            Writes the given unsigned 16-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt32Array(System.UInt32[])">
            <summary>
            Writes the given unsigned 32-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteUInt64Array(System.UInt64[])">
            <summary>
            Writes the given unsigned 64-bit integer array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteSingleArray(System.Single[])">
            <summary>
            Writes the given single precision floating point array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteDoubleArray(System.Double[])">
            <summary>
            Writes the given double precision floating point array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteDateTimeArray(System.DateTime[])">
            <summary>
            Writes the given DateTime array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteTimeSpanArray(System.TimeSpan[])">
            <summary>
            Writes the given TimeSpan array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteStringArray(System.String[])">
            <summary>
            Writes the given string array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.WriteReference(System.Object)">
            <summary>
            Writes a reference.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.Flush">
            <summary>
            Ensures all contents is written to the underlying stream
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationContext.PopObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NSerializationSettings">
            <summary>
            Controls various aspects of the serialization process
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializationSettings.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="compactModel"></param>
            <param name="allowCustomSerialization"></param>
            <param name="allowSurrogates"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializationSettings.CompactModel">
            <summary>
            Whether or not serialization writes meta data in compact model (not version independent)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializationSettings.AllowCustomSerialization">
            <summary>
            Whether or not serialization allows custom object serialization
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializationSettings.AllowSurrogates">
            <summary>
            Whether or not serialization allows surrogate object serialization
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NSerializer">
            <summary>
            Represents a serializer object that can perist objects in stream or file with a specified persistency format
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializer.#ctor(Nevron.Nov.Serialization.NSerializationSettings,Nevron.Nov.Serialization.NTypeResolver,Nevron.Nov.Serialization.NTypeActivatorFactory,Nevron.Nov.Serialization.NTypeAdapterFactory,Nevron.Nov.INLog)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
            <param name="typeResolver"></param>
            <param name="typeActivatorFactory"></param>
            <param name="typeAdapterFactory"></param>
            <param name="log"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializer.SaveToFile(System.Object,System.String,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Saves the passed object to a file in the specified persistency format.
            </summary>
            <param name="root"></param>
            <param name="filePath"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NSerializer.SaveToStream(System.Object,System.IO.Stream,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Saves the passed object to a stream in the specified persistency format
            </summary>
            <param name="root"></param>
            <param name="stream"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NSerializer.Settings">
            <summary>
            Gets or sets the settings used during serialization
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.INDomSurrogateSerializable">
            <summary>
            Implemented by objects which can serialize / deserialize from a surrogate object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Serialization.INDomSurrogateSerializable.DomSurrogateSerializer">
            <summary>
            Gets a surrogate serializer.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDomDeserializationContext">
            <summary>
            Represents the context of serialization and deserialization
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomDeserializationContext.ResolveType(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomDeserializationContext.ResolveSchema(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomDeserializationContext.ResolveChild(Nevron.Nov.Dom.NSchema,System.String)">
            <summary>
            
            </summary>
            <param name="schema"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomDeserializationContext.ResolveProperty(Nevron.Nov.Dom.NSchema,System.String)">
            <summary>
            
            </summary>
            <param name="schema"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDomNodeDeserializer">
            <summary>
            Implements DOM node serialization
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomNodeDeserializer.LoadFromFile(System.String,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Loads a DOM node forest from the specified file
            </summary>
            <param name="fileName"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomNodeDeserializer.LoadFromStream(System.IO.Stream,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Loads a DOM node forest from the specified stream
            </summary>
            <param name="stream"></param>
            <param name="format"></param>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDomNodeSerializer">
            <summary>
            Implements DOM node serialization
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomNodeSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomNodeSerializer.SaveToFile(Nevron.Nov.Dom.NNode[],System.String,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Saves thespecified DOM node to the specified file.
            </summary>
            <param name="nodes"></param>
            <param name="fileName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NDomNodeSerializer.SaveToStream(Nevron.Nov.Dom.NNode[],System.IO.Stream,Nevron.Nov.Serialization.ENPersistencyFormat)">
            <summary>
            Saves thespecified DOM node to the specified stream.
            </summary>
            <param name="nodes"></param>
            <param name="stream"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Nov.Serialization.NDomNodeSerializer.SerializeDefaultValues">
            <summary>
            Whether to serialize properties with default values
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NDomSerializationContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.ENPersistencyFormat">
            <summary>
            Enumerates the persistency formats
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENPersistencyFormat.Binary">
            <summary>
            Binary format
            </summary>
        </member>
        <member name="F:Nevron.Nov.Serialization.ENPersistencyFormat.Xml">
            <summary>
            Xml format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Serialization.NPropertyBag">
            <summary>
            Represents a propery bag serialization helper. Can be used in conjunction with 
            custom serialization to reduce stored object space and provide backward compatibility
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.Clear">
            <summary>
            Clears the property bag valid entries
            </summary>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetBooleanValue(System.String,System.Boolean)">
            <summary>
            Adds a boolean entry value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetByteValue(System.String,System.Byte)">
            <summary>
            Adds a byte entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetCharValue(System.String,System.Char)">
            <summary>
            Adds a char entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetSByteValue(System.String,System.SByte)">
            <summary>
            Adds a sbyte entry value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt16Value(System.String,System.Int16)">
            <summary>
            Adds an Int16 entry value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt32Value(System.String,System.Int32)">
            <summary>
            Adds an Int32 entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt64Value(System.String,System.Int64)">
            <summary>
            Adds an Int64 entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt16Value(System.String,System.UInt16)">
            <summary>
            Adds an UInt16 entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt32Value(System.String,System.UInt32)">
            <summary>
            Adds an UInt32 entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt64Value(System.String,System.UInt64)">
            <summary>
            Adds an UInt64 entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetSingleValue(System.String,System.Single)">
            <summary>
            Adds a single (float) entry value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetDoubleValue(System.String,System.Double)">
            <summary>
            Adds a double entry value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetStringValue(System.String,System.String)">
            <summary>
            Adds a string entry value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetPropertyBagValue(System.String,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Adds a property bag
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetBooleanArrayValue(System.String,System.Boolean[])">
            <summary>
            Adds a boolean array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetByteArrayValue(System.String,System.Byte[])">
            <summary>
            Adds a byte array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetCharArrayValue(System.String,System.Char[])">
            <summary>
            Adds a char array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetSByteArrayValue(System.String,System.SByte[])">
            <summary>
            Adds a sbyte array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt16ArrayValue(System.String,System.Int16[])">
            <summary>
            Adds an Int16 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt32ArrayValue(System.String,System.Int32[])">
            <summary>
            Adds an Int32 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetInt64ArrayValue(System.String,System.Int64[])">
            <summary>
            Adds an Int64 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt16ArrayValue(System.String,System.UInt16[])">
            <summary>
            Adds an UInt16 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt32ArrayValue(System.String,System.UInt32[])">
            <summary>
            Adds an UInt32 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetUInt64ArrayValue(System.String,System.UInt64[])">
            <summary>
            Adds an UInt64 array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetSingleArrayValue(System.String,System.Single[])">
            <summary>
            Adds a single (float) array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetDoubleArrayValue(System.String,System.Double[])">
            <summary>
            Adds a double array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetStringArrayValue(System.String,System.String[])">
            <summary>
            Adds a string array
            </summary>
            <param name="name"></param>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.SetPropertyBarArrayValue(System.String,Nevron.Nov.Serialization.NPropertyBag[])">
            <summary>
            Adds a property bag array.
            </summary>
            <param name="name"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetBooleanValue(System.String)">
            <summary>
            Gets a boolean entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetByteValue(System.String)">
            <summary>
            Gets a byte entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetCharValue(System.String)">
            <summary>
            Gets a char entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetSByteValue(System.String)">
            <summary>
            Gets a sbyte entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt16Value(System.String)">
            <summary>
            Gets an Int16 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt32Value(System.String)">
            <summary>
            Gets an Int32 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt64Value(System.String)">
            <summary>
            Gets an Int64 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt16Value(System.String)">
            <summary>
            Gets an UInt16 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt32Value(System.String)">
            <summary>
            Gets an UInt32 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt64Value(System.String)">
            <summary>
            Gets an UInt64 entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetSingleValue(System.String)">
            <summary>
            Gets a single (float) entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetDoubleValue(System.String)">
            <summary>
            Gets a double entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetStringValue(System.String)">
            <summary>
            Gets a string entry value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetBooleanArray(System.String)">
            <summary>
            Gets a boolean array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetByteArray(System.String)">
            <summary>
            Gets a byte array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetCharArray(System.String)">
            <summary>
            Gets a char array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetSByteArray(System.String)">
            <summary>
            Gets a sbyte array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt16Array(System.String)">
            <summary>
            Gets an Int16 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt32Array(System.String)">
            <summary>
            Gets an Int32 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetInt64Array(System.String)">
            <summary>
            Gets an Int64 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt16Array(System.String)">
            <summary>
            Gets an UInt16 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt32Array(System.String)">
            <summary>
            Gets an UInt32 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetUInt64Array(System.String)">
            <summary>
            Gets an UInt64 array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetSingleArray(System.String)">
            <summary>
            Gets a single (float) array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetDoubleArray(System.String)">
            <summary>
            Gets a double array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetStringArray(System.String)">
            <summary>
            Gets a string array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetPropertyBag(System.String)">
            <summary>
            Gets a property bag
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetPropertyBagArray(System.String)">
            <summary>
            Gets a property bag array
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.Equals(System.Object)">
            <summary>
            Returns true if the object is equal to this object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Serialization.NPropertyBag.GetHashCode">
            <summary>
            Gets the hascode for this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NCenturyDateTimeUnit">
            <summary>
            Represents the century day date time unit (100 years).
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDateTimeUnit">
            <summary>
            Represents a date/time unit
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.ToString">
            <summary>
            Returns the string representation of this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.FromName(System.String)">
            <summary>
            Returns the date unit corresponding to the specified unit name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.GetFromEnum(Nevron.Nov.ENDateTimeUnit)">
            <summary>
            Returns the NDateTimeUnit object corresponding to the date time unit enum value
            </summary>
            <param name="dateTimeUnit"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Century">
            <summary>
            The century unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Decade">
            <summary>
            The decade unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Year">
            <summary>
            The year unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.HalfYear">
            <summary>
            Half year unit. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Quarter">
            <summary>
            The quarter of a year.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Month">
            <summary>
            A month.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Week">
            <summary>
            A week.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Day">
            <summary>
            A day.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.HalfDay">
            <summary>
            Half of a day.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Hour">
            <summary>
            An hour
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Minute">
            <summary>
            A minute.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Second">
            <summary>
            A second
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Millisecond">
            <summary>
            A millisecond. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeUnit.Tick">
            <summary>
            A tick
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnit.GetSurrogateSerializer(Nevron.Nov.NDateTimeUnit)">
            <summary>
            Returns the surrogate serializer for this type
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NCenturyDateTimeUnit.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NCenturyDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NCenturyDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NCenturyDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NCenturyDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDateTimeUnitSerializer">
            <summary>
            Serializes date / time units
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnitSerializer.#ctor(Nevron.Nov.NDateTimeUnit)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnitSerializer.GetRealObject">
            <summary>
            Returns the object represented by this surrogate serializer
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeUnitSerializer.ApplyToRealObject(System.Object)">
            <summary>
            Expands the surrogate in the real object (used when an object inherits a surrogate serializable object)
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDayDateTimeUnit">
            <summary>
            Represents the day date time unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.INTimeSpanConvertable">
            <summary>
            Implemented by date/time units that can be converted to a TimeSpan
            </summary>
        </member>
        <member name="M:Nevron.Nov.INTimeSpanConvertable.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDayDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDayDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDayDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDayDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDecadeDateTimeUnit">
            <summary>
            Represents the decade day date time unit (10 years).
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDecadeDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDecadeDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDecadeDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDecadeDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NHalfDayDateTimeUnit">
            <summary>
            Represents the half day date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NHalfDayDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NHalfDayDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHalfDayDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHalfDayDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NHalfYearDateTimeUnit">
            <summary>
            Represents the half year date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NHalfYearDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHalfYearDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHalfYearDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NHalfYearDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NHourDateTimeUnit">
            <summary>
            Represents the hour date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NHourDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NHourDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHourDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NHourDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NMillisecondDateTimeUnit">
            <summary>
            Represents the millisecond date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMillisecondDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMillisecondDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMillisecondDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMillisecondDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NMinuteDateTimeUnit">
            <summary>
            Represents the minute date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMinuteDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMinuteDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMinuteDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMinuteDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NMonthDateTimeUnit">
            <summary>
            Represents the month date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMonthDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMonthDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NMonthDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NMonthDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NQuarterDateTimeUnit">
            <summary>
            Represents the quarter date time unit (3 months).
            </summary>
        </member>
        <member name="M:Nevron.Nov.NQuarterDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NQuarterDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NQuarterDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NQuarterDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NSecondDateTimeUnit">
            <summary>
            Represents the second date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NSecondDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSecondDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NSecondDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NSecondDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NTickDateTimeUnit">
            <summary>
            Represents the tick date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTickDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NTickDateTimeUnit.ToTimSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NTickDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NTickDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NWeekDateTimeUnit">
            <summary>
            Represents the week date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NWeekDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWeekDateTimeUnit.GetIsoWeekOne(System.Int32)">
            <summary>
            Returns the date time corresponding to first ISO week in the year
            </summary>
            <param name="Year"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWeekDateTimeUnit.GetIsoWeekNumer(System.DateTime)">
            <summary>
            Obtains the ISO week number given a DateTime
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWeekDateTimeUnit.ToTimeSpan">
            <summary>
            Returns the time span equivalent of this date/time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NWeekDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NWeekDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NYearDateTimeUnit">
            <summary>
            Represents the year date time unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NYearDateTimeUnit.Add(System.DateTime,System.Int64)">
            <summary>
            Add the unitCount to the dateTime.
            </summary>
            <param name="dateTime"></param>
            <param name="unitCount"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NYearDateTimeUnit.Ticks">
            <summary>
            Returns the number of ticks in this date time unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NYearDateTimeUnit.IsRegular">
            <summary>
            Returns true if the unit is regular (e.g. always expressed with a fixed number of ticks)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NYearDateTimeUnit.DateTimeUnit">
            <summary>
            The date/time unit enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDateTimeRange">
            <summary>
            Represents a date / time range specified by a Begin and End date time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializer constructor
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.ToString">
            <summary>
            Returns the string representation of this date time range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Combine(Nevron.Nov.NDateTimeRange)">
            <summary>
            Combines the two ranges. 
            </summary>
            <remarks>
            Both ranges must be normalized.
            </remarks>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.GetLength">
            <summary>
            Returns the absolute length of this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Contains(System.DateTime)">
            <summary>
            Returns true if the range contains the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Normalize">
            <summary>
            Normalizes the range.
            </summary>
            <remarks>
            A normalized  range End value is bigger or equal to the Begin value.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Invert">
            <summary>
            Changes the Begin and End values of this range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.IsInverted">
            <summary>
            Returns true if the  range is inverted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Intersects(Nevron.Nov.NDateTimeRange)">
            <summary>
            Checks if the ranges intersect each other.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeRange.Intersect(Nevron.Nov.NDateTimeRange,Nevron.Nov.NDateTimeRange@)">
            <summary>
            Interscects the range with another one
            </summary>
            <returns>True if intersection exists, false otherwise</returns>
            <remarks>Ranges must be normalized</remarks>
        </member>
        <member name="F:Nevron.Nov.NDateTimeRange.Begin">
            <summary>
            Begin value
            </summary>
        </member>
        <member name="F:Nevron.Nov.NDateTimeRange.End">
            <summary>
            End value
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeRange.IsNormalized">
            <summary>
            Returns true if the range is normal.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NDateTimeSpan">
            <summary>
            Represents a date time span as a pair of date/time unit and unit count.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.#ctor(System.Int64,Nevron.Nov.NDateTimeUnit)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Nevron#Nov#Serialization#INDomCustomSerializable#Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Nevron#Nov#Serialization#INDomCustomSerializable#Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.GetHashCode">
            <summary>
            Gets the hash code of the date time span. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.ToString">
            <summary>
            Returns the string representation of this date/time span
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Parse(System.String)">
            <summary>
            Creates a NDateTimeSpan from its string representation
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Add(System.DateTime)">
            <summary>
            Adds the span to the specified date time
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.Substract(System.DateTime)">
            <summary>
            Substracts the span from the specified date time
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.AddMultiplied(System.DateTime,System.Int64)">
            <summary>
            Adds this span to the specified date time multiplied by the specified amount
            </summary>
            <param name="dateTime"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.SubtractMultiplied(System.DateTime,System.Int64)">
            <summary>
            Substracts the date time span from the specified DateTime multiplied by the specified multiplier.
            </summary>
            <param name="dateTime"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.GetSpanCountInRange(Nevron.Nov.NDateTimeRange)">
            <summary>
            Obtains the number of spans that can fit in the specified range. 
            </summary>
            <param name="range">the date/time range</param>
        </member>
        <member name="M:Nevron.Nov.NDateTimeSpan.ConvertTo(Nevron.Nov.NDateTimeUnit)">
            <summary>
            Converts this date time span to the given unit.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NDateTimeSpan.Value">
            <summary>
            Gets / sets the units of this span
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeSpan.Ticks">
            <summary>
            Returns the numer of tick in this date time span
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeSpan.Unit">
            <summary>
            Gets / sets the date/time unit of this span
            </summary>
        </member>
        <member name="P:Nevron.Nov.NDateTimeSpan.ENDateTimeUnitXML">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.NUnit">
            <summary>
            Represents a measurement unit
            </summary>
        </member>
        <member name="M:Nevron.Nov.NUnit.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.ToString">
            <summary>
            Gets a string representation of this unit
            </summary>
        </member>
        <member name="M:Nevron.Nov.NUnit.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this base unit.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.GetHashCode">
            <summary>
            Gets the hash code for this base unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.ConvertTo(Nevron.Nov.NUnit)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the target unit.
            Throws an exception if the conversion is not possible.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.ConvertTo(Nevron.Nov.NUnit,System.Double)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the target unit.
            Throws an exception if the conversion is not possible.
            </summary>
            <param name="to"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.ConvertToPixels(System.Double)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the pixel unit for the specified resolution.
            Throws an exception if the conversion is not possible.
            </summary>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.TryConvertTo(Nevron.Nov.NUnit,System.Double@)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the target unit.
            Returns true if the conversion is possible, otherwise returns false.
            </summary>
            <param name="to"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.TryConvertTo(Nevron.Nov.NUnit,System.Double,System.Double@)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the target unit.
            Returns true if the conversion is possible, otherwise returns false.
            </summary>
            <param name="to"></param>
            <param name="dpi"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.TryConvertToPixels(System.Double,System.Double@)">
            <summary>
            Gets the conversion factor for converting a quantity measured in this unit to the pixel unit for the specified resolution.
            Returns true if the conversion is possible, otherwise returns false.
            </summary>
            <param name="dpi"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.GetAbbreviation">
            <summary>
            Gets the unit short name (abbreviation)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.GetName">
            <summary>
            Gets the unit full name
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NUnit.DimlessOne">
            <summary>
            The dimensionless 1 unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Pixel">
            <summary>
            Pixel (device dependent unit)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Radian">
            <summary>
            The radian angle unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Degree">
            <summary>
            The degree angle unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Grad">
            <summary>
            The grad angle unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Millimeter">
            <summary>
            Millimeter (SI - length). Base for the NOV system, but not for the SI system.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Centimeter">
            <summary>
            Centerimeter (SI - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Meter">
            <summary>
            Meter (SI - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Kilometer">
            <summary>
            Kilometer (SI - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Inch">
            <summary>
            Inch (Imperial - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Foot">
            <summary>
            Foot (Imperial - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Yard">
            <summary>
            Yard (Imperial - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Mile">
            <summary>
            Mile (Imperial - length)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Point">
            <summary>
            The Point (Typographic - length). Equal to 1/72 of an inch.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Pica">
            <summary>
            The Pica (Typographic - length). Equal to 12 points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Twip">
            <summary>
            The Twip (Typographic - length). Equal to 1/20 of a point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.DIP">
            <summary>
            Device Independent Pixel (length). Equal to 1/96 of an inch.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Week">
            <summary>
            Week unit (equal to seven days)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Day">
            <summary>
            Day unit (has 24 hours)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Hour">
            <summary>
            Hour unit (1/24) of a day
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Minute">
            <summary>
            Millisecond unit (1/60) of an hour.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Second">
            <summary>
            Millisecond unit (1/60) of a minute (base for both NOV and the SI system).
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Millisecond">
            <summary>
            Millisecond unit (1/1000) of a second.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Tick">
            <summary>
            Tick unit (1/10000) of a millisecond.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Kilogram">
            <summary>
            Kilogram (SI - mass).
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Gram">
            <summary>
            Gram unit (SI - mass). (1/1000) of a kilogram
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Milligram">
            <summary>
            Milligram unit (SI - mass). (1/1000) of a gram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Grain">
            <summary>
            Grain unit (Imperial - mass). Equal to 0.06479891 grams.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Drachm">
            <summary>
            Drachm unit (Imperial - mass). Equal to 1.7718451953125 grams.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Ounce">
            <summary>
            The Ounce unit (Imperial - mass). Equal to 28.349523125 grams.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Pound">
            <summary>
            The Pound unit (Imperial - mass). Equal to 453.59237 grams.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Stone">
            <summary>
            The Stone unit (Imperial - mass). Equal to 6.35029318 kilograms.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Ampere">
            <summary>
            Ampere (SI - electric current).
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Kelvin">
            <summary>
            Kelvin (SI - thermodynamic temperature).
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Mole">
            <summary>
            Mole (SI - amount of substance)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.Candela">
            <summary>
            Candela (SI - luminous intensity)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.DrawingUnits">
            <summary>
            An array of units typically used in drawing and text documents.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NUnit.LengthUnits">
            <summary>
            An array of units typically used in drawing and text documents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NUnit.TryGetUnitByAlias(System.String,Nevron.Nov.NUnit@)">
            <summary>
            Tries to get the simple unit with the specified abbreviation.
            </summary>
            <param name="abbreviation"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NUnit.GetDimensionBaseUnit(Nevron.Nov.ENUnitDimension)">
            <summary>
            Gets the base unit for the specified dimension
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NUnit.Nevron#Nov#Serialization#INDomSurrogateSerializable#DomSurrogateSerializer">
            <summary>
            Gets the DOM surrogate serializer, which should serialize/deserialize this object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NUnit.Dimension">
            <summary>
            Gets this unit dimension
            </summary>
        </member>
        <member name="P:Nevron.Nov.NUnit.DimensionBaseUnit">
            <summary>
            Gets the base unit for this unit dimension
            </summary>
        </member>
        <member name="P:Nevron.Nov.NUnit.DimensionBaseUnitFactor">
            <summary>
            Gets the factor for converting a value measured in this unit, to the base unit for this unit dimension.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NUri">
            <summary>
            Provides an object representation of a uniform resource identifier (URI)
            and easy access to the parts of the URI. To create URIs use the TryCreate
            static method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.#ctor(System.String)">
            <summary>
            Creates an absolute URI from the given string. Throws an exception
            if the given string does not represent a valid absolute URI.
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.#ctor(System.String,Nevron.Nov.Networking.ENUriKind)">
            <summary>
            Creates an URI of the specified kind from the given string. Throws
            an exception if the URI string is not valid.
            </summary>
            <param name="uriString"></param>
            <param name="uriKind"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.ToString">
            <summary>
            Gets a canonical string representation of this URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.GetHashCode">
            <summary>
            Returns the hash code for this URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this URI.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.RequestData(Nevron.Nov.Function{Nevron.Nov.Networking.NUriRequest,Nevron.Nov.Networking.NUriResponse})">
            <summary>
            Request the resource pointed by this URI. The response is received in a callback method.
            </summary>
            <param name="onCompletedCallback">The callback method that should be executed when the response is received.</param>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.MakeRelativeUri(Nevron.Nov.Networking.NUri)">
            <summary>
            Determines the difference between two <see cref="T:Nevron.Nov.Networking.NUri"/> instances.
            </summary>
            <param name="uri">The URI to compare to the current URI.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The current or the provided URI is not absolute.</exception>
            <returns>If the hostname and scheme of this URI instance and <paramref name="uri"/> are the same,
            then this method returns a relative Uri that, when appended to the current URI instance, yields uri.
            If the hostname or scheme is different, then this method returns an Uri that represents the
            <paramref name="uri"/> parameter.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.TryCombine(Nevron.Nov.Networking.NUri,System.String,Nevron.Nov.Networking.NUri@)">
            <summary>
            Tries to create an URI combining the specified base URI instance and relative URI string.
            </summary>
            <param name="baseUri"></param>
            <param name="relativeUriString"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.TryCombine(Nevron.Nov.Networking.NUri,Nevron.Nov.Networking.NUri,Nevron.Nov.Networking.NUri@)">
            <summary>
            Tries to create an URI combining the specified base and relative URI instances.
            </summary>
            <param name="baseUri"></param>
            <param name="relativeUri"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.TryResolve(Nevron.Nov.Networking.NUri,System.String,Nevron.Nov.Networking.NUriBase@)">
            <summary>
            Tries to get an absolute URI (an URL or a data URI) from the given string.
            If the string represents a relative URI, it is combined with the given base
            URI in order to resolve it, i.e. to create an absolute URI.
            </summary>
            <param name="baseUri">The absolute URI to use for URI resolution.</param>
            <param name="uriString">The string to create an absolute URI from.</param>
            <param name="result">The resulting absolute URI.</param>
            <returns>True if an absolute URI was successfully created.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.op_Equality(Nevron.Nov.Networking.NUri,Nevron.Nov.Networking.NUri)">
            <summary>
            Checks whether the given URIs are equal.
            </summary>
            <param name="uri1"></param>
            <param name="uri2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NUri.op_Inequality(Nevron.Nov.Networking.NUri,Nevron.Nov.Networking.NUri)">
            <summary>
            Checks whether the given URIs are not equal.
            </summary>
            <param name="uri1"></param>
            <param name="uri2"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.IsAbsolute">
            <summary>
            Indicates whether this URI is absolute.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.IsFile">
            <summary>
            Indicates whether this URI represents a local file system object (i.e. a file or a folder).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.UserInfo">
            <summary>
            Gets the user related information (username, password, etc.) of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.HostName">
            <summary>
            Gets the host name of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.Port">
            <summary>
            Gets the port number of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.Path">
            <summary>
            Gets the path of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.Query">
            <summary>
            Gets the query string of this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.Fragment">
            <summary>
            Gets the fragment part of this URi.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.NormalizedUri">
            <summary>
            Gets the normalized URI string corresponding to this URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.LocalPathNotation">
            <summary>
            Gets the local path notation of this URI. Valid only if this URI
            represents an absolute file path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NUri.LocalPath">
            <summary>
            Gets a local operating system representation of a file name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphicsPathPoint">
            <summary>
            Represents a point from a graphics path.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPathPoint.#ctor(System.Double,System.Double,System.Byte)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="x">X coordinate of the point.</param>
            <param name="y">Y coordinate of the point.</param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPathPoint.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPathPoint.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPathPoint.ToPoint">
            <summary>
            Gets the point defined by the X and Y coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathPoint.X">
            <summary>
            X coordinate of the point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathPoint.Y">
            <summary>
            Y coordinate of the point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathPoint.Type">
            <summary>
            Point type - for possible values see the constants defined in NGraphicsPath.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRegion">
            <summary>
            Represents a closed region of geometry space.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.DeepClone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.GetPath">
            <summary>
            Gets the path that represents the outline of this region closed area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether this region contains the specified point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.IntersectsWith(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Returns true if this region interesects with the specified other region
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.Intersect(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Intersects this region with the specified other region and returns the resulting region.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.Subtract(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Subtracts the specified region from this region and returns the resulting region.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.Union(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Computes the union of this region with the specified other region and returns the resulting region.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.ExclusiveOr(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Performs exclusive OR operation on this region and the specified other region and returns the resulting region.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.CanSeal">
            <summary>
            Determines whether this object can be sealed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.FromRectangle(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a new region from the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.FromQuadrangle(Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Creates a new region from the specified quadrangle.
            </summary>
            <param name="quad"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRegion.FromPath(Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Creates a new region from the specified path.
            </summary>
            <param name="path"></param>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRegion.IsEmpty">
            <summary>
            Returns true if the clip is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRegion.Bounds">
            <summary>
            Gets the bounding renctangle of this clip.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRegion.Empty">
            <summary>
            The empty region
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAdvancedGradientFill">
            <summary>
            Represents an advanced gradient that is defined by a background color and 
            an arbitrary number of points with different color, shape and intensity.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTextureFill">
            <summary>
            An abstract base class for fill types that use a texture: image fill, hatch fill and advanced gradient fill.
            </summary>
            <remarks>
            This class is not intended for direct usage. You should use fill types deriving from it like NImageFill, NHatchFill and NAdvancedGradientFill.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFill">
            <summary>
            Abstract base class of all classes that represent filling types like solid color, gradient, hatch, image, etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local value of a property has changed.
            Raises the property LocalValueChanged event.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.GetPrimaryColor">
            <summary>
            Gets the primary color of the fill. Must be overriden 
            in fill types for which a primary color can be defined.
            </summary>
            <returns>Returns the primary color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.CreateInverseFill">
            <summary>
            Must override to create a new fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created fill with inverted colors.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.CreatePredefinedFill(Nevron.Nov.Graphics.ENPredefinedFillPattern,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a fill from the specified pattern and two colors.
            </summary>
            <param name="pattern">A pattern defining the fill type.</param>
            <param name="primaryColor">Primary color.</param>
            <param name="secondaryColor">Secondary color.</param>
            <returns>A reference to the new fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFill.NFillSchema">
            <summary>
            Schema associated with NFill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFill.FillType">
            <summary>
            Gets the fill type as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFill.NFillDesigner">
            <summary>
            Designer for NFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.NFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.NFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFill.NFillDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureFill.#ctor(Nevron.Nov.Graphics.NTextureFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTextureFill.NTextureFillSchema">
            <summary>
            Schema associated with NTextureFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTextureFill.TextureMappingProperty">
            <summary>
            Reference to the TextureMapping property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTextureFill.TextureMapping">
            <summary>
            Gets or sets the texture mapping for this fill.
            </summary>
            <remarks>
            By default the texture mapping attribute is set to null.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTextureFill.NTextureFillDesigner">
            <summary>
            Designer for NTextureFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureFill.NTextureFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTextureFill.NTextureFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.#ctor(Nevron.Nov.Graphics.NAdvancedGradientFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.GetPrimaryColor">
            <summary>
            Overriden to return the background color as the fill's primary color.
            </summary>
            <returns>Returns the background color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.CreateInverseFill">
            <summary>
            Creates a new advanced gradient fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created advanced gradient fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillSchema">
            <summary>
            Schema associated with NAdvancedGradientFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientFill.BackgroundColorProperty">
            <summary>
            Schema associated with BackgroundColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientFill.PointsProperty">
            <summary>
            Schema associated with Points property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.Create(Nevron.Nov.Graphics.ENAdvancedGradientColorScheme,System.Int32)">
            <summary>
            Creates a new advanced gradient fill based on the specified color scheme and variant.
            </summary>
            <param name="colorScheme">Defines the gradient colors.</param>
            <param name="variant">Defines the point count and configuration. Must be an integer in the range [0, 15].</param>
            <returns>Returns the newly created advanced gradient fill.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientFill.BackgroundColor">
            <summary>
            The background color of the gradient.
            </summary>
            <remarks>
            The background color merges with all the points in the Points collection.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientFill.Points">
            <summary>
            An array of NAdvancedGradientPoint objects, which describe the advanced gradient.
            </summary>
            <remarks>
            Each object in the collection represents a gradient point with 
            properties for shape, color, position, rotation and intensity.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientFill.FillType">
            <summary>
            Gets the fill type (Advanced Gradient) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillDesigner">
            <summary>
            Designer type for NAdvancedGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillDesigner.CreateInstanceForSurrogateEditing(Nevron.Nov.Editors.NNodeSurrogate)">
            <summary>
            Creates a default NAdvancedGradientFill instance for the purpose of surrogate editing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientFill.NAdvancedGradientFillDesigner.CreateVerbCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates a list of the commands, which can modify the state of the specified node
            in the context of the specified editor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAdvancedGradientPoint">
            <summary>
            Represents an advanced gradient point.
            </summary>
            <remarks>
            An advanced gradient consists of a background color and an arbitrary number of 
            color points. Each point has properties for shape, color, intensity and rotation.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPoint.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            By default a new gradient point is placed in the center of the gradient, has white color and circular shape.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPoint.#ctor(Nevron.Nov.Graphics.NAdvancedGradientPoint)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">Specifies the source object.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPoint.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.NAngle,System.Single,System.Single,System.Single,Nevron.Nov.Graphics.ENAdvancedGradientPointShape)">
            <summary>
            Creates a new advanced gradient point with the specified properties.
            </summary>
            <param name="color">The color of the point.</param>
            <param name="angle">The rotation angle (in degrees) of the point shape. The point is rotated around its center.</param>
            <param name="positionX">
            The horizontal position of the point within the gradient box. Specified as a 
            floating-point value in the range [0, 1], whereas 0 means leftmost and 1 rightmost.
            </param>
            <param name="positionY">
            The vertical position of the point within the gradient box. Specified as a 
            floating point value in the range [0, 1], whereas 0 means topmost and 1 bottommost.
            </param>
            <param name="intensity">The intensisity of the point as a floating-point value in the range [0, 1].</param>
            <param name="shape">The shape of the point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPoint.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.NAdvancedGradientPointSchema">
            <summary>
            Schema associated with NAdvancedGradientPoint
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.ColorProperty">
            <summary>
            Schema associated with Color property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.PositionXProperty">
            <summary>
            Schema associated with CenterX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.PositionYProperty">
            <summary>
            Schema associated with CenterY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.AngleProperty">
            <summary>
            Schema associated with Angle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.IntensityProperty">
            <summary>
            Schema associated with Intensity property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPoint.ShapeProperty">
            <summary>
            Schema associated with Shape property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.Color">
            <summary>
            Gets or sets the color of the advanced gradient point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.Angle">
            <summary>
            Gets or sets the angle of rotation of the point shape. Applicable when the shape is line or rectangle.
            </summary>
            <remarks>
            The angle is specified in degrees. The gradient point is rotated around its center.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.PositionX">
            <summary>
            Gets or sets the horizontal position of the point within the gradient box.
            </summary>
            <remarks>
            The position is specified with a value between 0.0 (leftmost) and 1.0 (rightmost).
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.PositionY">
            <summary>
            Gets or sets the vertical position of the point within the gradient box.
            </summary>
            <remarks>
            The position is specified with a value between 0.0 (topmost) and 1.0 (bottommost).
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.Intensity">
            <summary>
            Gets or sets the intensity of the point.
            </summary>
            <remarks>
            The intensity is specified with a value between 0.0 and 1.0. The default value is 1.0.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NAdvancedGradientPoint.Shape">
            <summary>
            Gets or sets the shape of the advanced gradient point.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAdvancedGradientPoint.NAdvancedGradientPointDesigner">
            <summary>
            Designer for NAdvancedGradientPoint.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPoint.NAdvancedGradientPointDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NAdvancedGradientPointCollection">
            <summary>
            Represents a collection of gradient points used in advanced gradients. An advanced gradient consists 
            of a background color and an arbitrary number of color points with different shape and intensity.
            </summary>	
        </member>
        <member name="T:Nevron.Nov.Dom.NAttributeCollection`1">
            <summary>
            A collection attribute, that serves as base class for collections that contain other attribute.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.#ctor(Nevron.Nov.Dom.NAttributeCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NAttributeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NAttributeCollection`1.NAttributeCollectionSchema">
            <summary>
            Schema associated with NAttributeCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NAttributeCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NAttributeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPointCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPointCollection.#ctor(Nevron.Nov.Graphics.NAdvancedGradientPointCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NAdvancedGradientPointCollection.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NAdvancedGradientPointCollection.NAdvancedGradientPointCollectionSchema">
            <summary>
            Schema associated with NAdvancedGradientPointCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGradientFill">
            <summary>
            An abstract base class for gradient fills that use a color ramp with custom gradient stops.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientFill.#ctor(Nevron.Nov.Graphics.NColor[])">
            <summary>
            Initializes the gradient fill's gradient stop collection with equaly spaced gradient stops with the specified colors.
            </summary>
            <param name="colors">An array of colors to be used for the gradient stops.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientFill.#ctor(Nevron.Nov.Graphics.NGradientFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientFill.NGradientFillSchema">
            <summary>
            Schema associated with NGradientFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientFill.MappingModeProperty">
            <summary>
            Schema associated with MappingMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientFill.GradientStopsProperty">
            <summary>
            Schema associated with GradientStops property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGradientFill.MappingMode">
            <summary>
            Gets or sets the gradient mapping mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGradientFill.GradientStops">
            <summary>
            Gets or sets a collection of gradient stops that define the gradient's color ramp.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGradientStop">
            <summary>
            Represents a gradient stop used in gradient definitions.
            </summary>
            <remarks>
            Gradients with two or more colors are defined with the help of gradient stop objects. 
            A gradient stop has a position value and a color. Two or more gradient stops must be 
            added to the gradient stop collection of a linear or radial gradient fill.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            By default the gradient stop is placed at position 0 and has white color.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.#ctor(Nevron.Nov.Graphics.NGradientStop)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.#ctor(System.Single,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new gradient stop with the specified position and color.
            </summary>
            <param name="position">The position of the point in the gradient. The value must be in the range [0, 1].</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.Equals(Nevron.Nov.Graphics.NGradientStop)">
            <summary>
            Checks if this gradient stop is equal to the specified gradient stop.
            </summary>
            <param name="other">The gradient stop to compare with.</param>
            <returns>Returns true if the two gradient stops have the same position and color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientStop.NGradientStopSchema">
            <summary>
            Schema associated with NGradientStop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientStop.PositionProperty">
            <summary>
            Schema associated with Position property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientStop.ColorProperty">
            <summary>
            Schema associated with Color property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGradientStop.Position">
            <summary>
            Gets or sets the position of the gradient stop.
            </summary>
            <remarks>
            The position value must be in the range [0, 1].
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGradientStop.Color">
            <summary>
            Gets or sets the color of the gradient stop.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGradientStop.NGradientStopDesigner">
            <summary>
            Designer for NGradientStop.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStop.NGradientStopDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGradientStopCollection">
            <summary>
            Represents a collection of gradient points used in advanced gradients. An advanced gradient consists 
            of a background color and an arbitrary number of color points with different shape and intensity.
            </summary>	
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStopCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStopCollection.#ctor(Nevron.Nov.Graphics.NGradientStopCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGradientStopCollection.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGradientStopCollection.NGradientStopCollectionSchema">
            <summary>
            Schema associated with NGradientStopCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NLinearGradientFill">
            <summary>
            Represents a linear gradient filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.#ctor(Nevron.Nov.NAngle,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Creates a linear gradient fill with equally spaced gradient stops with the specified colors.
            </summary>
            <param name="angle">Angle of rotation of the gradient axis.</param>
            <param name="colors">An array of colors to be used for the gradient stops.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.#ctor(Nevron.Nov.Graphics.NLinearGradientFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.CreateInverseFill">
            <summary>
            Creates a new linear gradient fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created linear gradient fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLinearGradientFill.NLinearGradientFillSchema">
            <summary>
            Schema associated with NLinearGradientFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NLinearGradientFill.AngleProperty">
            <summary>
            Schema associated with Angle property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLinearGradientFill.Angle">
            <summary>
            Gets or sets the angle of rotation of the gradient axis.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NLinearGradientFill.FillType">
            <summary>
            Gets the fill type (Linear Gradient) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NLinearGradientFill.NLinearGradientFillDesigner">
            <summary>
            Designer for NLinearGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.NLinearGradientFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NLinearGradientFill.NLinearGradientFillDesigner.CreateInstanceForSurrogateEditing(Nevron.Nov.Editors.NNodeSurrogate)">
            <summary>
            Creates a default NLinearGradientFill instance for the purpose of surrogate editing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRadialGradientFill">
            <summary>
            Represents a radial gradient filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.#ctor(System.Single,System.Single,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Creates a radial gradient fill with equally spaced gradient stops with the specified colors.
            </summary>
            <param name="centerX">A value between 0.0 and 1.0 specifying the horizontal position of the gradient center.</param>
            <param name="centerY">A value between 0.0 and 1.0 specifying the vertical position of the gradient center.</param>
            <param name="colors">An array of colors to be used for the gradient stops.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.#ctor(Nevron.Nov.Graphics.NRadialGradientFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.CreateInverseFill">
            <summary>
            Creates a new radial gradient fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created radial gradient fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRadialGradientFill.NRadialGradientFillSchema">
            <summary>
            Schema associated with NRadialGradientFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRadialGradientFill.CenterXProperty">
            <summary>
            Schema associated with CenterX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRadialGradientFill.CenterYProperty">
            <summary>
            Schema associated with CenterY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRadialGradientFill.FocusFactorXProperty">
            <summary>
            Schema associated with FocusFactorX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRadialGradientFill.FocusFactorYProperty">
            <summary>
            Schema associated with FocusFactorY property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRadialGradientFill.CenterX">
            <summary>
            Gets or sets the X position of the gradient point.
            </summary>
            <remarks>
            The position is relative to the shape bounding box and is specified with a value between 0.0 and 1.0.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRadialGradientFill.CenterY">
            <summary>
            Gets or sets the Y position of the gradient center.
            </summary>
            <remarks>
            The position is relative to the shape bounding box and is specified with a value between 0.0 and 1.0.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRadialGradientFill.FocusFactorX">
            <summary>
            Gets or sets the X offset of the gradient focus point from the gradient center.
            </summary>
            <remakrs>
            The value is relative to the gradient's radius. A value of 0.5 offsets the focus 
            point with half radius length. The sign determines the direction of the offset.
            </remakrs>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRadialGradientFill.FocusFactorY">
            <summary>
            Gets or sets the Y offset of the gradient focus point from the gradient center.
            </summary>
            <remarks>
            The value is relative to the gradient's radius. A value of 0.5 offsets the focus 
            point with half radius length. The sign determines the direction of the offset.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRadialGradientFill.FillType">
            <summary>
            Gets the fill type (Radial Gradient) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRadialGradientFill.NRadialGradientFillDesigner">
            <summary>
            Designer for NRadialGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.NRadialGradientFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRadialGradientFill.NRadialGradientFillDesigner.CreateInstanceForSurrogateEditing(Nevron.Nov.Editors.NNodeSurrogate)">
            <summary>
            Creates a default NRadialGradientFill instance for the purpose of surrogate editing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorFill">
            <summary>
            Represents a solid color filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.#ctor(Nevron.Nov.Graphics.NColorFill)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new NColorFill object with the specified color.
            </summary>
            <param name="color">Specifies the fill color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.#ctor(Nevron.Nov.Graphics.ENNamedColor)">
            <summary>
            Creates a new NColorFill object based on the specified named color.
            </summary>
            <param name="value">Specifies the fill color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.GetPrimaryColor">
            <summary>
            Overriden to return this fill's color.
            </summary>
            <returns>Returns the fill's color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.CreateInverseFill">
            <summary>
            Creates a new solid color fill by inverting the color of this fill.
            </summary>
            <returns>Returns the newly created color fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorFill.NColorFillSchema">
            <summary>
            Schema associated with NColorFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorFill.ColorProperty">
            <summary>
            Schema associated with Color property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColorFill.Color">
            <summary>
            Gets or sets the fill color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColorFill.FillType">
            <summary>
            Gets the fill type (Color) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorFill.NColorFillDesigner">
            <summary>
            Designer for NColorFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.NColorFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorFill.NColorFillDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NHatchFill">
            <summary>
            Represents a hatch filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.#ctor(Nevron.Nov.Graphics.NHatchFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.#ctor(Nevron.Nov.Graphics.ENHatchStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="style">Hatch style.</param>
            <param name="foregroundColor">Foreground color.</param>
            <param name="backgroundColor">Background color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.GetPrimaryColor">
            <summary>
            Overriden to return the background color as the fill's primary color.
            </summary>
            <returns>Returns the background color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.CreateInverseFill">
            <summary>
            Creates a new hatch fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created hatch fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NHatchFill.NHatchFillSchema">
            <summary>
            Schema associated with NHatchFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NHatchFill.StyleProperty">
            <summary>
            Reference to the Style property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NHatchFill.ForegroundColorProperty">
            <summary>
            Reference to the ForegroundColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NHatchFill.BackgroundColorProperty">
            <summary>
            Reference to the BackgroundColor property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHatchFill.Style">
            <summary>
            Gets or sets the hatch style as an enum value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHatchFill.ForegroundColor">
            <summary>
            The foreground color of the hatch fill.
            </summary>
            <remarks>
            By default set to white color.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHatchFill.BackgroundColor">
            <summary>
            The background color of the hatch fill. 
            </summary>
            <remarks>
            By default set to black color.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHatchFill.FillType">
            <summary>
            Gets the fill type (Hatch) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NHatchFill.NHatchFillDesigner">
            <summary>
            Designer for NHatchFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.NHatchFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHatchFill.NHatchFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageFill">
            <summary>
            Represents a filling based on a raster image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.#ctor(Nevron.Nov.Graphics.NImageFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.#ctor(Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates an image fill with the specified image.
            </summary>
            <param name="image">The image to be used with the new fill.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.CreateInverseFill">
            <summary>
            Creates a new image fill by inverting the colors of the source image.
            </summary>
            <returns>Returns the newly created image fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFill.NImageFillSchema">
            <summary>
            Schema associated with NImageFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFill.ImageProperty">
            <summary>
            Schema associated with Image property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFill.Image">
            <summary>
            Gets or sets the image for this fill.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFill.FillType">
            <summary>
            Gets the fill type (Image) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageFill.NImageFillDesigner">
            <summary>
            Designer for NImageFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.NImageFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFill.NImageFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStockGradientFill">
            <summary>
            Represents a gradient filling based on two colors and predefined styles and variations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.#ctor(Nevron.Nov.Graphics.ENGradientStyle,Nevron.Nov.Graphics.ENGradientVariant,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="style">Gradient style.</param>
            <param name="variant">Gradient variant.</param>
            <param name="beginColor">Gradient begin color.</param>
            <param name="endColor">Gradient end color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a horizontal gradient with variant 1 and the specified colors.
            </summary>
            <param name="beginColor">Gradient begin color.</param>
            <param name="endColor">Gradient end color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.#ctor(Nevron.Nov.Graphics.NStockGradientFill)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.GetPrimaryColor">
            <summary>
            Overriden to return the begin color as the fill's primary color.
            </summary>
            <returns>Returns the begin color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.CreateInverseFill">
            <summary>
            Creates a new stock gradient fill by inverting the colors of this fill.
            </summary>
            <returns>Returns the newly created stock gradient fill object.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStockGradientFill.NStockGradientFillSchema">
            <summary>
            Schema associated with NStockGradientFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStockGradientFill.StyleProperty">
            <summary>
            Schema associated with Style property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStockGradientFill.VariantProperty">
            <summary>
            Schema associated with Variant property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStockGradientFill.BeginColorProperty">
            <summary>
            Schema associated with BeginColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStockGradientFill.EndColorProperty">
            <summary>
            Schema associated with EndColor property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStockGradientFill.Style">
            <summary>
            Gets or sets the gradient style.
            </summary>
            <remarks>
            The default value is ENGradientStyle.Horizontal.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStockGradientFill.Variant">
            <summary>
            Gets or sets the gradient variant. There are four variants available for each gradient style.
            </summary>
            <remarks>
            By default set to Variant1.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStockGradientFill.BeginColor">
            <summary>
            The begin color of the gradient. 
            </summary>
            <remarks>
            By default set to white color.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStockGradientFill.EndColor">
            <summary>
            The end color of the gradient. 
            </summary>
            <remarks>
            By default set to black color.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStockGradientFill.FillType">
            <summary>
            Gets the fill type (Stock Gradient) as an enum value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStockGradientFill.NStockGradientFillDesigner">
            <summary>
            Designer for NStockGradientFill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.NStockGradientFillDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStockGradientFill.NStockGradientFillDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping">
            <summary>
            A texture mapping that streches the texture to the target bounds in the Y dimension and aligns the texture at its normal size in the X dimension.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.#ctor(Nevron.Nov.ENHorizontalAlignment,Nevron.Nov.Graphics.ENTileMode)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="horizontalAlignment">Specifies the initial horizontal alignment of the texture.</param>
            <param name="tileMode">Specifies the initial tiling mode.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.NStretchYAlignXTextureMappingSchema">
            <summary>
            Schema associated with NFitTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.HorizontalAlignmentProperty">
            <summary>
            Reference to the HorizontalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.TileModeProperty">
            <summary>
            Reference to the Tile property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the texture.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStretchYAlignXTextureMapping.TileMode">
            <summary>
            Gets or sets the texture tiling mode.
            By default set to None.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping">
            <summary>
            A texture mapping that streches the texture to the target bounds in the X dimension and aligns the texture at its normal size in the Y dimension.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.#ctor(Nevron.Nov.ENVerticalAlignment,Nevron.Nov.Graphics.ENTileMode)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="verticalAlignment">Specifies the initial vertical alignment of the texture.</param>
            <param name="tileMode">Specifies the initial tiling mode.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.NStretchXAlignYTextureMappingSchema">
            <summary>
            Schema associated with NFitTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.VerticalAlignmentProperty">
            <summary>
            Reference to the VerticalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.TileModeProperty">
            <summary>
            Reference to the TileMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the texture.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStretchXAlignYTextureMapping.TileMode">
            <summary>
            Gets or sets the texture tiling mode.
            By default set to None.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFitAndAlignTextureMapping">
            <summary>
            A texture mapping that fits the texture in the target bounds, preserving the original aspect ratio of the texture image.
            Either one of the dimensions the image touches the target bounding rectangle from the inside.
            For the other dimension, the image is aligned to the bounding rectangle according to the respective setting.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.#ctor(Nevron.Nov.ENHorizontalAlignment,Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Initializes a new instance of the NFitAndAlignTextureMapping class.
            </summary>
            <param name="halign">Horizontal alignment of the texture image inside the target bounding rectangle.</param>
            <param name="valign">Vertical alignment of the texture image inside the target bounding rectangle.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.NFitAndAlignTextureMappingSchema">
            <summary>
            Schema associated with NFitTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.HorizontalAlignmentProperty">
            <summary>
            Schema associated with HorizontalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.VerticalAlignmentProperty">
            <summary>
            Schema associated with VerticalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.TileModeProperty">
            <summary>
            Reference to the TileMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the texture.
            Taken into account if the texture is fitted vertically.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the texture.
            Taken into account if the texture is fitted horizontally.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFitAndAlignTextureMapping.TileMode">
            <summary>
            Gets or sets the texture tiling mode. By default set to None.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStretchTextureMapping">
            <summary>
            A texture mapping that streches the texture to the target bounds.
            The original aspect ratio of the texture image is not preserved.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStretchTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchTextureMapping.NStretchTextureMappingSchema">
            <summary>
            Schema associated with NStretchTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchTextureMapping.TileXProperty">
            <summary>
            Reference to the TileX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStretchTextureMapping.TileYProperty">
            <summary>
            Reference to the TileY property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NTileTextureMapping">
            <summary>
            A texture mapping that fills the entire surface of a target object by repeating 
            the texture image in the X and Y dimensions. The original image is not scaled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTileTextureMapping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NTileTextureMapping.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="flipX">Indicates whether alternate columns of tiles are flipped horizontally.</param>
            <param name="flipY">Indicates whether alternate rows of tiles are flipped vertically.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTileTextureMapping.NTileTextureMappingSchema">
            <summary>
            Schema associated with NTileTextureMapping
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTileTextureMapping.FlipXProperty">
            <summary>
            Reference to the FlipX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NTileTextureMapping.FlipYProperty">
            <summary>
            Reference to the FlipY property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTileTextureMapping.FlipX">
            <summary>
            Gets or sets a value indicating whether alternate columns of tiles are flipped horizontally.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NTileTextureMapping.FlipY">
            <summary>
            Gets or sets a value indicating whether alternate rows of tiles are flipped vertically.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFont">
            <summary>
            Represents a font.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Creates a default font style (Arial, 9pt).
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor(Nevron.Nov.Graphics.NFont)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor(System.String)">
            <summary>
            Creates a font style with the specified font name.
            </summary>
            <param name="name">The name of the font.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor(System.String,System.Double)">
            <summary>
            Creates a font style with the specified name and em size.
            </summary>
            <param name="name">The font family name.</param>
            <param name="size">The font size (specified in points).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor(System.String,System.Double,Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Creates a font style from the specified name, em size and fontStyle.
            </summary>
            <param name="name">The font family name.</param>
            <param name="size">The font size (specified in points).</param>
            <param name="fontStyle">The font style (bold, italic, underlined, strike trough or combination).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.#ctor(System.String,System.Double,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Graphics.ENFontRasterizationMode)">
            <summary>
            Creates a font style from the specified name, em size, fontStyle and rasterization mode.
            </summary>
            <param name="name">The font family name.</param>
            <param name="size">The font size (specified in points).</param>
            <param name="fontStyle">The font style (bold, italic, underlined, strike trough or combination).</param>
            <param name="rasterizationMode">The font rasterization mode (aliased, antialised etc.)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.GetFontFaceDescriptor">
            <summary>
            Gets a font face descriptor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.InvalidateFontFaceDescriptor">
            <summary>
            Invalidates the font face descriptor, thus causing the descriptor to be recreated next time GetFontFaceDescriptor is called.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.String)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.String,Nevron.Nov.Dom.NDocument)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.Char[],Nevron.Nov.Dom.NDocument)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.Char[])">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.Char[],System.Double)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.Char[],System.Double,System.Boolean,Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <param name="maxWidth"></param>
            <param name="snapToPixels"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.MeasureString(System.Char[],System.Double,System.Double,System.Boolean,Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Measures the given text.
            </summary>
            <param name="text"></param>
            <param name="resolution"></param>
            <param name="maxWidth"></param>
            <param name="snapToPixels"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.GetTextPath(System.String,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Dom.NDocument,Nevron.Nov.Graphics.NPaintTextPointSettings@)">
            <summary>
            Gets the text path
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="document"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.GetTextPath(System.Char[],Nevron.Nov.Graphics.NPoint,Nevron.Nov.Dom.NDocument,Nevron.Nov.Graphics.NPaintTextPointSettings@)">
            <summary>
            Gets the text path
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="document"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.GetTextPath(System.String,Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Dom.NDocument,Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Gets the text path.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <param name="document"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.GetTextPath(System.Char[],Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Dom.NDocument,Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Gets the text path.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <param name="document"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local value of a property has changed.
            Raises the property LocalValueChanged event.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFont.NFontSchema">
            <summary>
            Schema associated with NFont.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFont.NameProperty">
            <summary>
            Schema associated with Name property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFont.SizeProperty">
            <summary>
            Schema associated with EmSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFont.StyleProperty">
            <summary>
            Schema associated with Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFont.RasterizationModeProperty">
            <summary>
            Schema associated with RasterizationMode property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Name">
            <summary>
            Gets or sets the font name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Size">
            <summary>
            Gets or sets the size of the font in points.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Style">
            <summary>
            Gets or sets the style of the font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Bold">
            <summary>
            Gets or sets whether the style is bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Italic">
            <summary>
            Gets or sets whether the style is italic
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Underline">
            <summary>
            Gets or sets whether the style is underline
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.Strikethrough">
            <summary>
            Gets or sets whether the style is strikethrough
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFont.RasterizationMode">
            <summary>
            Gets or sets the font's rasterization mode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFont.NFontDesigner">
            <summary>
            Designer for NFont.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.NFontDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFont.NFontDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NShadow">
            <summary>
            An attribute that controls shadow appearance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new shadow with the specified color.
            </summary>
            <param name="color">The shadow color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.#ctor(Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a new shadow with the specified color and offsets.
            </summary>
            <param name="color">The shadow color.</param>
            <param name="offsetX">The shadow's X offset.</param>
            <param name="offsetY">The shadow's Y offset.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.#ctor(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.NShadowSchema">
            <summary>
            Schema associated with NShadow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.ColorProperty">
            <summary>
            Reference to the Color property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.OffsetXProperty">
            <summary>
            Reference to the OffsetX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.OffsetYProperty">
            <summary>
            Reference to the OffsetY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.ScalePinPointProperty">
            <summary>
            Reference to the ScalePinPoint property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.ScaleProperty">
            <summary>
            Reference to the Scale property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.UseFillAndStrokeAlphaProperty">
            <summary>
            Reference to the UseFillAndStrokeAlpha property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.ApplyToFillingProperty">
            <summary>
            Reference to the AppliesToFilling property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NShadow.ApplyToOutlineProperty">
            <summary>
            Reference to the AppliesToClosedFigureBorders property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.OffsetX">
            <summary>
            Gets or sets the shadow's X offset.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.OffsetY">
            <summary>
            Gets or sets the shadow's Y offset.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.ScalePinPoint">
            <summary>
            Gets or sets the pin-point for shadow scaling. 
            Specified as factors relative to the geometry bounds (pen width is not taken into account).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.Scale">
            <summary>
            Gets or sets the shadow's scaling factor. Must be greater than 0.01.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.UseFillAndStrokeAlpha">
            <summary>
            Gets or sets a value indicating whether the shadow should use the 
            alpha values (fill and stroke) of the object that casts the shadow.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.ApplyToFilling">
            <summary>
            Get or sets a value indicating whether the shadow needs to be applied to the filling of the displayed object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NShadow.ApplyToOutline">
            <summary>
            Get or sets a value indicating whether the shadow needs to be applied to the outline of the displayed object.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NShadow.NShadowDesigner">
            <summary>
            Designer for NShadow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.NShadowDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NShadow.NShadowDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStroke">
            <summary>
            An attribute that controls the appearance of lines and shape borders.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new NStroke instance with the specified color.
            </summary>
            <param name="color">Stroke color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor(System.Double,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new NStroke instance with the specified width and color.
            </summary>
            <param name="width">Stroke width (in DIP).</param>
            <param name="color">Stroke color.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor(System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.ENDashStyle)">
            <summary>
            Creates a new NStroke instance with the specified width, color and dash style.
            </summary>
            <param name="width">Stroke width (in DIP).</param>
            <param name="color">Stroke color.</param>
            <param name="dashStyle">Dash style. Must be different than Custom</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor(System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NDashPattern)">
            <summary>
            Creates a new NStroke instance with the specified width, color and a custom dash pattern.
            </summary>
            <param name="width">Stroke width (in DIP).</param>
            <param name="color">Stroke color.</param>
            <param name="customDashPattern">Custom dash pattern</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.#ctor(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.InvalidatePen">
            <summary>
            Invalidates the pen, thus causing the pen to be recreated the next time when GetPen is called.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.GetDirtyPaintInflate">
            <summary>
            Gets the maximum area around a geometry that can be affected by this stoke style, if the geometry is stroked with it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local value of a property has changed.
            Raises the property LocalValueChanged event.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.NStrokeSchema">
            <summary>
            Schema associated with NStroke
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.ColorProperty">
            <summary>
            Schema associated with Color property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.WidthProperty">
            <summary>
            Schema associated with Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.MiterLimitProperty">
            <summary>
            Schema associated with MiterLimit property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.StartCapProperty">
            <summary>
            Schema associated with StartCap property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.EndCapProperty">
            <summary>
            Schema associated with EndCap property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.LineJoinProperty">
            <summary>
            Schema associated with LineJoin property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.DashStyleProperty">
            <summary>
            Schema associated with DashStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.DashPatternProperty">
            <summary>
            Schema associated with DashPattern property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NStroke.DashCapProperty">
            <summary>
            Schema associated with DashCap property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.Width">
            <summary>
            Gets or sets the stroke width (in DIP).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.Color">
            <summary>
            Gets or sets the stroke color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.StartCap">
            <summary>
            Gets or sets the cap style used at the beginning of a line or an open figure.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.EndCap">
            <summary>
            Gets or sets the cap style used at the end of a line or an open figure.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.LineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in polygons, polylines and graphics path figures.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.DashStyle">
            <summary>
            Gets or sets the dash pattern.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.DashPattern">
            <summary>
            Gets or sets a custom dash pattern. Only applicable if DashStyle is set to Custom.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.DashCap">
            <summary>
            Gets or sets the cap style used at the end of the line dashes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NStroke.MiterLimit">
            <summary>
            Gets or sets the upper limit on the ratio of the miter length to half of this stroke's width.
            </summary>
            <remarks>
            The miter length is the distance between the central line and the outer corner where two line segments meet.
            The miter limit is the maximum allowed ratio between the miter length and half the stroke's width. In general the miter length increases
            as the angle of the corner gets smaller. If the miter limit is exceeded - the join is beveled to keep it within the allowed limit.
            The miter limit is applied only if the LineJoin is set to "Miter".
            The value for the miter limit must be a positive number greater than or equal to 1. The default value is 10.0.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Graphics.NStroke.NStrokeDesigner">
            <summary>
            Designer for NStroke.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.NStrokeDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NStroke.NStrokeDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGlyphRunRange">
            <summary>
            Represents a range of a glyph run that can be rendered in IN2DGraphics object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGlyphRunRange.#ctor(Nevron.Nov.TrueType.NGlyphRun,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="glyphRun"></param>
            <param name="charIndices"></param>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGlyphRunRange.#ctor(Nevron.Nov.TrueType.NGlyphRun,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="glyphRun"></param>
            <param name="charIndices"></param>
            <param name="beginCharIndex"></param>
            <param name="endCharIndex"></param>
            <param name="beginGlyphIndex"></param>
            <param name="endGlyphIndex"></param>
        </member>
        <member name="T:Nevron.Nov.NDebug">
            <summary>
            A helper class for debugging Nevron Open Vision.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NDebug.Assert(System.Boolean)">
            <summary>
            Checks for a condition, and outputs the call stack if the condition is false.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Nevron.Nov.NDebug.Assert(System.Boolean,System.String)">
            <summary>
            Checks for a condition, and displays a message if the condition is false.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.NDebug.WriteLine(System.String)">
            <summary>
            Safely writes a message to the trace
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTMemoryInstalledFont">
            <summary>
            Represents an installed font from a byte array.
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTInstalledFont">
            <summary>
            Represents an installed font.
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTInstalledFont.#ctor">
            <summary>
            Region constructors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTInstalledFont.GetFontStream">
            <summary>
            Gets the stream correponding to this installed font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTInstalledFont.Descriptor">
            <summary>
            Gets the descriptor of this font
            </summary>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTInstalledFont.URL">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTMemoryInstalledFont.#ctor(System.Byte[])">
            <summary>
            Creates a new memory installed font from the given array of bytes.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTMemoryInstalledFont.GetFontStream">
            <summary>
            Gets a memory stream that contains the font data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTMemoryInstalledFont.URL">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPrintRangeMode">
            <summary>
            Enumerates different print range modes that specify which part of a document should be printed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPrintRangeMode.AllPages">
            <summary>
            All pages should be printed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPrintRangeMode.CurrentPage">
            <summary>
            Only the current page should be printed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPrintRangeMode.CustomRange">
            <summary>
            The pages specified with the custom range should be printed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPrintRangeMode.Selection">
            <summary>
            The currently selected content should be printed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NQueryPageSettingsEventArgs">
            <summary>
            Provides data for the QueryPageSettings event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NQueryPageSettingsEventArgs.PaperSize">
            <summary>
            Gets or sets the paper size that is used for printing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NQueryPageSettingsEventArgs.PageOrientation">
            <summary>
            Gets or sets the page orientation (portrait or landscape).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NQueryPageSettingsEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the printing process should be canceled.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NEndPrintEventArgs">
            <summary>
            Provides data for the EndPrint event.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPrintDialogResult">
            <summary>
            Represents the dialog result of the Print dialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommonDialogResult`1">
            <summary>
            An abstract base class for dialog results.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommonDialogResult`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommonDialogResult`1.Result">
            <summary>
            Gets the result code returned by the dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommonDialogResult`1.ErrorException">
            <summary>
            If the result code is ENDialogResult.Error this property contains the exception that was 
            thrown while displaying the platform's dialog box. Otherwise it returns null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommonDialogResult`1.Dialog">
            <summary>
            Gets the dialog for which this result is created.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderAndThickness">
            <summary>
            A class that holds a border and a border thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.#ctor(Nevron.Nov.UI.NBorder)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="border"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.#ctor(Nevron.Nov.UI.NBorder,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="border"></param>
            <param name="thickness"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderAndThickness.NBorderAndThicknessSchema">
            <summary>
            Schema associated with NBorderAndThickness.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderAndThickness.BorderProperty">
            <summary>
            Reference to the Border property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderAndThickness.ThicknessProperty">
            <summary>
            Reference to the Thickness property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderAndThickness.Border">
            <summary>
            Gets or sets the value of the Border property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderAndThickness.Thickness">
            <summary>
            Gets or sets the value of the Thickness property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderAndThickness.NBorderAndThicknessDesigner">
            <summary>
            Designer for border and thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.NBorderAndThicknessDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.NBorderAndThicknessDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderAndThickness.NBorderAndThicknessDesigner.CreateVerbCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates a list of the commands, which can modify the state of the specified node
            in the context of the specified editor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor">
            <summary>
            A node property editor, which embeds the editor of a node exposed by a property value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.CreateControl">
            <summary>
            Overriden to create and embed the embedded editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.OnSurrogateValueChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the value of the surrogate has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.GetEditedPropertyTypeDesigner">
            <summary>
            Gets the designer, applicable for the specified edited property value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.NEmbeddedNodePropertyEditorSchema">
            <summary>
            Schema associated with NEmbeddedNodePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.DefaultTemplate">
            <summary>
            The default editor template.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEmbeddedNodePropertyEditor.EmbedInGroupBoxTemplate">
            <summary>
            Embeds the node property editor in a group box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMaskedEnumPanelCommandSource">
            <summary>
            A command source that can be applied to masked enum panels. 
            The checked checked boxes are updated from the command active parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the masked enum panel.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.OnEnumValueChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the enum value of the masked enum panel has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMaskedEnumPanelCommandSource.NMaskedEnumPanelCommandSourceSchema">
            <summary>
            Schema associated with NMaskedEnumPanelCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMeasureUpDownCommandSource">
            <summary>
            A command source that can be applied to measure up downs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNumericUpDownCommandSource">
            <summary>
            A command source that can be applied to numeric up downs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated
            at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.UpdateNumericUpDownValue(System.Double)">
            <summary>
            Updates the value of the owner numeric up down.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownCommandSource.OnNumericUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the value of the owner numeric up down has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDownCommandSource.NNumericUpDownCommandSourceSchema">
            <summary>
            Schema associated with NNumericUpDownCommandSource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDownCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDownCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDownCommandSource.#ctor(Nevron.Nov.UI.NCommand,Nevron.Nov.NUnit)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
            <param name="baseUnit"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDownCommandSource.UpdateNumericUpDownValue(System.Double)">
            <summary>
            Updates the value of the owner numeric up down.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDownCommandSource.OnNumericUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the value of the owner numeric up down has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMeasureUpDownCommandSource.NMeasureUpDownCommandSourceSchema">
            <summary>
            Schema associated with NMeasureUpDownCommandSource.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMeasureUpDownCommandSource.BaseUnitProperty">
            <summary>
            Reference to the BaseUnit property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMeasureUpDownCommandSource.BaseUnit">
            <summary>
            Gets or sets the base unit of this measure up down command source. This is the unit to
            which the value of the measure up down is converted when the command is executed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGalleryCommandSource">
            <summary>
            Base class for command sources that can be applied to ribbon galleries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGalleryCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGalleryCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGalleryCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element SelectedIndex property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGalleryCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGalleryCommandSource.GetParameter(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the parameter associated with the given table picker cell.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGalleryCommandSource.NRibbonGalleryCommandSourceSchema">
            <summary>
            Schema associated with NRibbonGalleryCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTexBoxCommandSource">
            <summary>
            A command source that can be applied to text boxes. 
            The text of the text box is updated from the command active parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a new label command source and associates it with the given command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated
            at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTexBoxCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTexBoxCommandSource.NTexBoxCommandSourceSchema">
            <summary>
            Schema associated with NTexBoxCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLabelCommandSource">
            <summary>
            A command source that can be applied to labels. 
            The text of the label is updated from the command active parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLabelCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLabelCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a new label command source and associates it with the given command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NLabelCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated
            at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLabelCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NLabelCommandSource.NLabelCommandSourceSchema">
            <summary>
            Schema associated with NLabelCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1">
            <summary>
            A split button command source that can be applied to style split buttons.
            </summary>
            <remarks>
            Style split buttons execute the command when the style split button selecteced value has changed or the action button is clicked.
            In both cases the selected value is passed as argument. If the selected value Automatic property is true, the command argument is set to NNode.ClearValueObject.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitButtonCommandSource">
            <summary>
            A command source that can be applied to all types of buttons that derive from NSplitButton.
            It subsrcibes for the NSplitButton.Click event to execute the command with empty parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonCommandSource.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the owner split button has been clicked. Calls the ExecuteCommand method with an empty parameter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitButtonCommandSource.NSplitButtonCommandSourceSchema">
            <summary>
            Schema associated with NSplitButtonCommandSource
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the owner style split button has been clicked.
            Calls the ExecuteCommand method with the currently selected fill.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.OnSelectedValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected fill of the owner fill split button has changed.
            Executes the command with the currently selected style.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.ExecuteCommand(Nevron.Nov.UI.NStyleSplitButton{`0}.NSelectedValue)">
            <summary>
            Executes the command by passing as parameter NNode.ClearValueObject if value.Automatic is true, 
            or the value contained inside in the value in the other case.
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButtonCommandSource`1.NStyleSplitButtonCommandSourceSchema">
            <summary>
            Schema associated with NStyleSplitButtonCommandSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandUIBuilder">
            <summary>
            Base class for all command UI builders.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.CreateStatusBar">
            <summary>
            Creates the status bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.CreateUI(Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the UI.
            </summary>
            <param name="commandTarget">The widget, which should be the target of the commands.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.CreateUI(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the UI.
            </summary>
            <param name="content">The content, which should be placed in the center of the created UI.</param>
            <param name="commandTarget">The widget, which should be the target of the commands.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.CreateStatusBarBuilder">
            <summary>
            Creates the status bar builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandUIBuilder.CreateUIHolder(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the widget, which holds the commanding UI and the command target.
            </summary>
            <param name="commandTarget"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandUIBuilder.StatusBarBuilder">
            <summary>
            Gets or sets the status bar builder.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollAndZoomToolBase">
            <summary>
            A tool, which implements mouse wheel scrolling and zooming of a NViewport instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NViewportDragTool">
            <summary>
            A drag tool, which serves as base class for drag tools that are associated with instances of NViewportBase.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragTool">
            <summary>
            A tool, which serves as base class for all tools, which perform some drag operations.
            </summary>
            <remarks>
            Drag tool derivates are typically activated and deactivated on left mouse down and left mouse up events respectively
            The NDragTool class exposes the StartMouseButtonEvent and EndMouseButtonEvent properties, which help you control the drag tool start and end events (by default set to LeftButtonDown and LeftButtonUp respectively).
            The AbortKey property controls the key, which aborts the tool and is by default set to the Escape key.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NTool">
            <summary>
            Serves as base class for all tools. It is a pluggable part of an interactor.
            </summary>
            <remarks>
            In essence tools are UI event handlers, which interpret the events dispatched to them by the interactor to perform tool specific actions.
            <para>
            In order for a tool to process any events at all it must be enabled, which is controlled by the Enabled property.
            Disabled tools are ignored by the interactor when it dispatches events for processing.
            </para>
            <para>
            Tools can operate in two states - active and inactive. When a tool is active it will be the first tool to receive a chance to process all user events.
            </para>
            <para>
            The transition between these states is performed by the Activate and Deactivate/Abort methods.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Handler for the NMouse.WheelEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseEnter(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.EnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.LeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnGotMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.GotCaptureEvent events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseCaptureIn(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureInEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnMouseCaptureOut(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureOutEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.LostCaptureEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyDownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyUpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Handler for the NKeyboard.InputCharEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.LostFocus event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOverEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragDropEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragEnter(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragEnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDragLeave(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragLeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.Activate">
            <summary>
            Activates the tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.Abort">
            <summary>
            Aborts the tool 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.CanActivate">
            <summary>
            Determines whether the tool can activate.
            </summary>
            <returns>true if the tool can activate, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.CanDeactivate">
            <summary>
            Determines whether the tool can deactivate
            </summary>
            <returns>true if the tool can deactivate, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.CanAbort">
            <summary>
            Determines whether the tool can abort
            </summary>
            <returns>true if the tool can abort, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.UpdateAids">
            <summary>
            Called to update the visual aids of this tool. 
            </summary>
            <remarks>
            This method is called each time when the tool processes a mouse event, or has been enabled/disabled or activated or deactivated/aborted.
            The tool can use this method to update any visual aids it displays inside its interactor.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnActivated">
            <summary>
            Called when the tool was activated. Raises the Activated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnAborted">
            <summary>
            Called when the tool was aborted. Raises the Aborted event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnEnabledChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the enabled property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTool.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed. Raises the ParentChangedEvet
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.NToolSchema">
            <summary>
            Schema associated with NTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.EnabledProperty">
            <summary>
            Reference to the Enabled property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.AmbientProperty">
            <summary>
            Reference to the Ambient property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.ActivatedEvent">
            <summary>
            Reference to the Activated event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.DeactivatedEvent">
            <summary>
            Reference to the Deactivated event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTool.AbortedEvent">
            <summary>
            Reference to the Aborted event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTool.Activated">
            <summary>
            Occurs when a tool has been activated
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTool.Deactivated">
            <summary>
            Occurs when a tool has been deactivated
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTool.Aborted">
            <summary>
            Occurs when a tool has been aborted
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.Enabled">
            <summary>
            Gets or sets whether the tool is enabled. By default false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.Ambient">
            <summary>
            Gets or sets whether the tool is ambient. Ambient tools are such tools that are usually not disabled by the NInteractor.EnableTool method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.IsActive">
            <summary>
            Gets whether the tool is currently active
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.OwnerInteractor">
            <summary>
            Gets a reference to the interactor to which the tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.OwnerCompositeTool">
            <summary>
            Gets a reference to the composite tool to which the tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTool.OwnerInputTarget">
            <summary>
            Gets the input target to which this interactor belongs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <remarks>
            Updates the cursor and tooltip depending on whether the tool is active or not.
            If the tool is active the cursor and tooltip are provided by the GetActiveCursorAndTooltip method.
            If the tool is not active the cursor and tooltip are provided by the GetReadyCursorAndTooltip method.
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <remarks>
            Calls the Activate method, if the tool can activate on the specified mouse button events.
            Calls the Deactivate method, if the tool can deactivate on the specified mouse button events.
            </remarks>
            <param name="args">mouse event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            Calls the Activate method, if the tool can activate on the specified mouse button events.
            Calls the Deactivate method, if the tool can deactivate on the specified mouse button events.
            </remarks>
            <param name="args">mouse event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <remarks>
            Overriden to call the Abort method if the tool is active and the AbortKey was pressed
            </remarks>
            <param name="args">key event args</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.TryActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Tries to activate the tool in response to the specified mouse event.
            Returns true if the tool is activated after the call.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.TryDeactivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Tries to deactivate the tool in response to the specified mouse event.
            Returns true if the tool is deactivated after the call.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse button args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.CanDeactivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can decactivate itself in response to a mouse button args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.CanAbort(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnActivated">
            <summary>
            Called when the tool was activated. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnAborted">
            <summary>
            Called when the tool was aborted. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.CaptureMouseOnActivated">
            <summary>
            Gets whether the tool must capture the mouse on the interactor target when activated.
            This implementation returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.FocusOnActivated">
            <summary>
            Gets whether the tool must focus the interactor target when activated.
            This implementation returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.UpdateCursorAndTooltip(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Requests cursor and tooltip depending on the tool state.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NMouseEventArgs,Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="args"></param>
            <param name="cursor"></param>
            <param name="toolTip"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NMouseEventArgs,Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when not active.
            </summary>
            <param name="args"></param>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.CreateActivationArea">
            <summary>
            Gets the area in which this tool can activate. 
            A return value of null, means that the tool can activate in any area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.ActivationHandlesEvent">
            <summary>
            Returns whether the activation of the tool must handle(cancel) the event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.DeactivationHandlesEvent">
            <summary>
            Returns whether the deactivation of the tool must handle(cancel) the event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragTool.OnMouseDownOrUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NDragTool.NDragToolSchema">
            <summary>
            Schema associated with NDragTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragTool.StartMouseButtonEventProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragTool.EndMouseButtonEventProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragTool.AbortKeyProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragTool.StartMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event that activates this drag tool.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragTool.EndMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event that deactivates this drag tool.
            By default set to LeftButtonDown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragTool.AbortKey">
            <summary>
            Gets or sets the keyboard key that aborts this drag tool.
            By default set to LeftButtonUp.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragTool.StartScreenPos">
            <summary>
            Gets mouse position in screen coordinates at drag tool activation time.
            Valid only when the tool is active.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can decactivate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.OnAborted">
            <summary>
            Called when the tool was aborted. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.OperatesInWindowArea">
            <summary>
            Determines whether the tool operates in the RichText window area.
            This implementation returns true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportDragTool.NViewportDragToolSchema">
            <summary>
            Schema associated with NViewportDragTool
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportDragTool.OwnerViewport(Nevron.Nov.UI.NViewportDragTool)">
            <summary>
            Helper method that gets the viewport to which a specific NViewportDragTool belongs.
            </summary>
            <param name="tool"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Handler for the NMouse.WheelEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.CanDeactivate">
            <summary>
            Overriden to block deactivation, if the DeactiveDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.CanActivate">
            <summary>
            Overriden to block activation, if the ActivateDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnActivated">
            <summary>
            Overriden to start the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnDeactivated">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnAborted">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.CanZoom">
            <summary>
            Determines whether zooming can be performed at all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.GetActiveCursorAndTooltip(Nevron.Nov.UI.NMouseEventArgs,Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Overriden to define the anchor scrolling cursor.
            </summary>
            <param name="args"></param>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OperatesInWindowArea">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.StartAnchorScrolling">
            <summary>
            Starts the anchor scrollings
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.StopAnchorScrolling">
            <summary>
            Stops the anchor scrolling
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoWheelZoom(System.Int32)">
            <summary>
            Performs wheel zooming, if allowed and returns true if zooming is performed
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoWheelScroll(System.Int32)">
            <summary>
            Performs wheel scrolling
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnScrollTimerTick">
            <summary>
            Called when the internal scroll timer ticks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.OnPanAndZoomControlPrePaint(Nevron.Nov.UI.NCanvasPaintEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Must override to scroll the owner element in the specified direction.
            </summary>
            <param name="dir"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoZoomIn">
            <summary>
            Must override to ZoomIn the owner element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoZoomOut">
            <summary>
            Must override to ZoomOut the owner element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Must override to ZoomIn the owner element. The ZoomIn preserves the location of the specified pin.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollAndZoomToolBase.DoZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Must override to ZoomOut the owner element. The ZoomOut preserves the location of the specified pin.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.NScrollAndZoomToolBaseSchema">
            <summary>
            Schema associated with NScrollAndZoomToolBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.ScrollByDefaultProperty">
            <summary>
            Reference to the ScrollByDefault property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.ZoomToMouseCursorProperty">
            <summary>
            Reference to the ZoomToMouseCursor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowAnchorScrollingProperty">
            <summary>
            Reference to the AllowAnchorScrolling property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowWheelScrollingProperty">
            <summary>
            Reference to the AllowWheelScrolling property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowWheelZoomingProperty">
            <summary>
            Reference to the AllowWheelZooming property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.DeactiveDelayProperty">
            <summary>
            Reference to the DeactiveDelay property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.ActivateDelayProperty">
            <summary>
            Reference to the ActivateDelay property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.TimeProperty">
            <summary>
            Reference to the Time property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.UnitScrollDistanceProperty">
            <summary>
            Reference to the UnitScrollDistance property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.NoScrollDistanceProperty">
            <summary>
            Reference to the NoScrollDistance property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.ToggleScrollZoomModifierKeyProperty">
            <summary>
            Reference to the ToggleScrollZoomModifierKey property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.FlipScrollDirectionModifierKeyProperty">
            <summary>
            Reference to the FlipScrollDirectionModifierKey property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollAndZoomToolBase.DefaultScrollVerticalProperty">
            <summary>
            Reference to the DefaultScrollVertical property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.OwnerViewportBase">
            <summary>
            Safely gets the owner viewport base.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.ScrollByDefault">
            <summary>
            When set to true the tool will scroll the view by default, otherwise it will zoom it. Use the ToggleScrollZoomModifierKey to switch to the other action). By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowAnchorScrolling">
            <summary>
            Specifies whether anchor scrolling is allowed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowWheelScrolling">
            <summary>
            Specifies whether wheel scrolling is allowed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.AllowWheelZooming">
            <summary>
            Specifies whether wheel zooming is allowed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.Time">
            <summary>
            Controls the speed of the anchor scrolling. Measured in milliseconds. By default set to 50.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.DeactiveDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be deactivated (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.ActivateDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be activated again (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.UnitScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position for which the tool must perform a single unit scroll. Measured in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.NoScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position below which no scolling is performed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.ToggleScrollZoomModifierKey">
            <summary>
            Gets or sets the modifier key, which when pressed, toggles wheel zooming and scrolling. Whether zooming or scrolling is performed by default is specified by the ScrollByDefault property.
            By default set to Control.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.DefaultScrollVertical">
            <summary>
            Gets or sets whether to perform vertical or horizontal scrolling when the mouse wheel is rotated. By default set to true (e.g. scroll vertically)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.FlipScrollDirectionModifierKey">
            <summary>
            Gets or sets the modifier key, which flips the wheel scroll direction. By default the tool will scroll either horizontally or vertically as specified by the DefaultScrollVertical property. By default set to Shift.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollAndZoomToolBase.ZoomToMouseCursor">
            <summary>
            Gets or sets whether to zoom to the the mouse cursor center. 
            When set to true, the zooming will preserve the current mouse position projection in viewport coordinates.
            When set to false, the zooming will preserve the current viewport center.
            By default set to true;
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleButtonBase">
            <summary>
            A button which serves as base class for all toggle buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonBase.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonBase.OnClick">
            <summary>
            Raises the button click event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonBase.ToggleChecked">
            <summary>
            Toggles the checked state of the button
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonBase.OnCheckedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the Checked proprety has changed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonBase.NToggleButtonBaseSchema">
            <summary>
            Schema associated with NToggleButtonBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonBase.CheckedProperty">
            <summary>
            Reference to the Checked property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NToggleButtonBase.CheckedChanged">
            <summary>
            Occurs when the checked property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NToggleButtonBase.CheckedChanging">
            <summary>
            Occurs when the checked property is about to be changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NToggleButtonBase.Checked">
            <summary>
            Gets or sets the checked state of the toggle button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleButtonGroup">
            <summary>
            A toggle button group for toggle buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroup.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroup.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonGroup.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonGroup.NToggleButtonGroupSchema">
            <summary>
            Schema associated with NToggleButtonGroup.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonGroup.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NToggleButtonGroup.Content">
            <summary>
            Gets or sets the content widget.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBuilderCollection`1">
            <summary>
            A list of of NCommandBuilder instances
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilderCollection`1.IndexOf(System.String)">
            <summary>
            Returns the index of the command builder with the given name or -1 if such command
            builder does not exist in this collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBuilderCollection`1.Remove(System.String)">
            <summary>
            Finds a command builder with the given name and if found removes it from this collection
            and returns true, otherwise the method does nothing and returns false.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBuilderCollection`1.Item(System.String)">
            <summary>
            Gets the command builder with the given name. Throws an exception
            if a command builder with the given name does not exist in this collection.
            </summary>
            <param name="name"></param>
            <exception cref="T:System.ArgumentException">If a command builder
            with the given name does not exist in this collection.</exception>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarUIBuilder">
            <summary>
            Creates a command bar based UI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarUIBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarUIBuilder.CreateMenuBar">
            <summary>
            Creates the menu bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarUIBuilder.CreateUIHolder(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the widget, which holds the commanding UI and the command target.
            Overriden to create a command bar manager.
            </summary>
            <param name="commandTarget"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarUIBuilder.AddMenuDropDownBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NMenuDropDownBuilder})">
            <summary>
            Adds the menu drop down builders.
            </summary>
            <param name="menuBuilders"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarUIBuilder.AddToolBarBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NToolBarBuilder})">
            <summary>
            Adds the toolbar builders.
            </summary>
            <param name="toolBarBuilders"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarUIBuilder.ToolBarBuilders">
            <summary>
            Gets / sets the toolbar builders.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarUIBuilder.MenuDropDownBuilders">
            <summary>
            Gets / sets the menu drop down builders.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTextRepresentableItem">
            <summary>
            A content holder widget that has a text representation. This class serves as base for
            combo box and list box items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItem.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItem.GetSearchMap">
            <summary>
            Gets the search map (if any) this item is placed in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItem.OnTextChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Text property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTextRepresentableItem.NTextRepresentableItemSchema">
            <summary>
            Schema associated with NTextRepresentableItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextRepresentableItem.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextRepresentableItem.Text">
            <summary>
            Gets or sets the string representation of this item.
            </summary>
            <remarks>
            You should explicitly set this property when you pass a widget or an image
            to the constructor.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NTextRepresentableItemMap">
            <summary>
            A map of text representable items optimized for search by the first char
            of the item's text (case insensitive checks are performed). This map is
            used by combo boxes and list boxes for keyboard navigation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItemMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItemMap.Add(Nevron.Nov.UI.NTextRepresentableItem)">
            <summary>
            Adds the given item to the map.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItemMap.Remove(Nevron.Nov.UI.NTextRepresentableItem)">
            <summary>
            Removes the given item from the map.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItemMap.Update(Nevron.Nov.UI.NTextRepresentableItem,System.String)">
            <summary>
            Updates the location of the given item in the map. This method should
            always be called when the text of the item has changed.
            </summary>
            <param name="item"></param>
            <param name="oldText"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextRepresentableItemMap.GetNext(System.Char,System.Int32)">
            <summary>
            Get an item, whose text starts with the given character, and which is
            after the item with the given index in the items collection it resides in.
            Returns null if no item with the given first char exist.
            </summary>
            <param name="firstChar"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentView`6">
            <summary>
            A viewport that hosts a document of a certain type and provides facility methods for loading and saving this document into different medias.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NViewportBase">
            <summary>
            Serves as base class for viewports, that are scrollable and optionally zoomable inner adorners for other types of content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInnerAdorners">
            <summary>
            Serves as base class for widgets that arrange side and corner adorner widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the display children of the node to the provided list
            </summary>
            <remarks>
            This implementation adds only the inner adorners.
            </remarks>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.AccumulateInnerAddorners(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the inner adorners.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the inner adorners.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the window background, after the widget background and border are painted.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.OnPaintWindowBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the window background
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.ArrangeInnerAdorners(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the inner adorners. 
            This method is typically called last - after the visibility of the adorners has been computed in the layout phase.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetInnerAdornersArea(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Given the content area for arrangement, returns the area in which inner addorners must be arranged.
            This implementation simply returns the content area.
            </summary>
            <param name="contentArea"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetLeftSideAdorner">
            <summary>
            Gets the left side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetTopSideAdorner">
            <summary>
            Gets the top side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetRightSideAdorner">
            <summary>
            Gets the right side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetBottomSideAdorner">
            <summary>
            Gets the bottom side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetLeftTopCornerAdorner">
            <summary>
            Gets the left top corner adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetRightTopCornerAdorner">
            <summary>
            Gets the right top corner adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetRightBottomCornerAdorner">
            <summary>
            Gets the right bottom corner adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.GetLeftBottomCornerAdorner">
            <summary>
            Gets the left bottom corner side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the desired size for the specified adorner element.
            </summary>
            <param name="position"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.ArrangeAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the bounds of the specified adorner element.
            </summary>
            <param name="position"></param>
            <param name="adorner"></param>
            <param name="slot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInnerAdorners.OnWindowChanged">
            <summary>
            Called when the window area has changed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.NInnerAdornersSchema">
            <summary>
            Schema associated with NInnerAdornersPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.WindowXProperty">
            <summary>
            Reference to the WindowX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.WindowYProperty">
            <summary>
            Reference to the WindowY property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInnerAdorners.WindowBackgroundFillProperty">
            <summary>
            Reference to the WindowBackground property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowX">
            <summary>
            Gets the window X coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowY">
            <summary>
            Gets the window Y coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowWidth">
            <summary>
            Gets the window Width.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowHeight">
            <summary>
            Gets the window Height.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowArea">
            <summary>
            Gets the window area.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInnerAdorners.WindowBackgroundFill">
            <summary>
            Gets or sets the background of the window area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the display children of the node to the provided list
            </summary>
            <remarks>
            This is a sealed implementation that first adds the content display children by calling the AccumulateContentDisplayChildren() method, 
            and then adds the inner adorners and the preview layer.
            </remarks>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the viewport in the specified direction, with the specified amount of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeViewport">
            <summary>
            Arranges the viewport. This operation performs a viewport ZoomMode specific action.
            This method should be called by derived classes, to update the ViewportOrigin, ZoomFactor and Scrollbars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeViewportNormal">
            <summary>
            Performs the viewport layout in case of a Normal zoom mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeViewportFit">
            <summary>
            Performs the viewport layout in case of a Fit zoom mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeViewportFitToWidth">
            <summary>
            Performs the viewport layout in case of a FitToWidth zoom mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeViewportFitToHeight">
            <summary>
            Performs the viewport layout in case of a FitToHeight zoom mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ComputeViewportSize(Nevron.Nov.Graphics.NSize,System.Double)">
            <summary>
            Computes the viewport size based on the specified window size
            </summary>
            <param name="wndSize">window size for which to compute viewport size</param>
            <param name="zoomFactor">zoom factor for which to compute viewport size</param>
            <returns>size of the viewport</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.NeedsHScrollBar(Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines the need for a horizontal scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the horizontal scrollbar must be shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.NeedsVScrollBar(Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines the need for a vertical scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the vertical scrollbar must be shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.OnHScrollBarScroll(Nevron.Nov.UI.NScrollEventArgs)">
            <summary>
            Called when the HScrollbar is scrolled. Updates the viewport origin from the scrollbar value.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.OnVScrollBarScroll(Nevron.Nov.UI.NScrollEventArgs)">
            <summary>
            Called when the VScrollbar is scrolled. Updates the viewport origin from the scrollbar value.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.OnStartScrolling">
            <summary>
            Called when the viewport starts to be continuosly scrolled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.OnEndScrolling">
            <summary>
            Called when the viewport stops to be continuosly scrolled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.UpdateScrollbars(System.Boolean,System.Boolean,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize,System.Double)">
            <summary>
            Updates the scrollbars of the viewport.
            </summary>
            <param name="showH"></param>
            <param name="showV"></param>
            <param name="wndSize"></param>
            <param name="viewportSize"></param>
            <param name="zoomFactor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetHScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the HScrollBar for the specified viewport parameters, in case the HScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollBar for the viewport parameters, in case the VScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ArrangeInnerAdorners(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the inner adorners. 
            This method is typically called last - after the visibility of the adorners has been computed in the layout phase.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetViewportOrigin">
            <summary>
            Gets the viewport origin
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the viewport origin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetTotalViewport">
            <summary>
            Gets the total viewport rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetZoomMode">
            <summary>
            Get the zoom mode which defines the way in which the viewport is scaled to the window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetZoomFactor">
            <summary>
            Gets the viewport zoom factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.SetZoomFactor(System.Double)">
            <summary>
            Sets the viewport zoom factor
            </summary>
            <param name="zoomFactor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetHScrollMode">
            <summary>
            Gets the horizontal scrolling mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetVScrollMode">
            <summary>
            Gets the vertical scrolling mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetNoScrollHAlign">
            <summary>
            Gets the horizontal alignment of the viewport relative to the window in case there is no horizontal scrollbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetNoScrollVAlign">
            <summary>
            Gets the vertical alignment of the viewport relative to the window in case there is no horizontal scrollbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetHScrollBar">
            <summary>
            Must override to return the horizontal scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.GetVScrollBar">
            <summary>
            Must override to return the vertical scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            Computes the window size based on a content rect and the specified scrollbars visibility.
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrollBar"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NViewportBaseSchema">
            <summary>
            Schema associated with NViewportBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.AutoScrollerChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.PreviewLayerChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.IsScrollingProperty">
            <summary>
            Gets a reference to the Scrolling property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportBase.IsScrolling">
            <summary>
            Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportBase.AutoScroller">
            <summary>
            Gets or sets the auto scroller child that control the auto scroll capabilities of this viewport.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportBase.PreviewLayer">
            <summary>
            Gets or sets the preview layer of this viewport.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NViewportBase.NScrollBarSettings">
            <summary>
            Encapsulates the settings of a scrollbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.Apply(Nevron.Nov.UI.NScrollBar)">
            <summary>
            Applies this scrollbar settings to the given scrollbar.
            </summary>
            <param name="scrollBar"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.Enabled">
            <summary>
            Determines whether the scrollbar should be enabled or not.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.Minimum">
            <summary>
            The scrollbar's minimum value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.Maximum">
            <summary>
            The scrollbar's maximum value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.Value">
            <summary>
            The scrollbar's value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.SmallChange">
            <summary>
            The scrollbar's small change.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportBase.NScrollBarSettings.LargeChange">
            <summary>
            The scrollbar's large change.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INUndoRedoCommandActionHost">
            <summary>
            Implemented by input elements, the commanders of which may contain the predefined Undo/Redo command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INUndoRedoCommandActionHost.GetUndoRedoHistoryService">
            <summary>
            Gets the history service which is used by the Undo/Redo commands
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.Nevron#Nov#UI#INUndoRedoCommandActionHost#GetUndoRedoHistoryService">
            <summary>
            Returns the effective history service of the drawing document displayed by the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.StartDragging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.EndDragging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromUri(Nevron.Nov.Networking.NUri)">
            <summary>
            Loads a document from the given URI.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromFile">
            <summary>
            Loads a document from a user specified file. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromFile(Nevron.Nov.Function{Nevron.Nov.UI.NOpenFileDialogResult})">
            <summary>
            Loads a document from a user specified file. 
            </summary>
            <param name="onOpenFileDialogClosed">Optional delegate, which is called when the OpenFile dialog has been closed.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromFile(System.String)">
            <summary>
            Loads a document from the file with the given name.
            </summary>
            <param name="fileName">The name of the file to load from.</param>
            <remarks>
            Due to security concerns, this method does not work for Silverlight applications. Use the
            LoadFromFile method, which accepts an NFile object passing a file from an open file dialog.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromFile(System.String,`2)">
            <summary>
            Loads a document from the file with the given name using the specified document format.
            </summary>
            <param name="fileName">The name of the file to load from.</param>
            <param name="docFormat">The document format to use. If null, the format will be
            determined automatically.</param>
            <remarks>
            Due to security concerns, this method does not work for Silverlight applications. Use the
            LoadFromFile method, which accepts an NFile object passing a file from an open file dialog.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromFile(Nevron.Nov.IO.NFile,`2)">
            <summary>
            Loads a document from the given file using the specified document format.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="docFormat">The document format to use. If null, the format will be
            determined automatically.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a document from the given stream.
            </summary>
            <param name="stream">The stream to load from.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromStream(System.IO.Stream,`2)">
            <summary>
            Loads a document from the given stream.
            </summary>
            <param name="stream">The stream to load from.</param>
            <param name="docFormat">The document format to use. If null, the format will be
            determined automatically.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadFromStream(System.IO.Stream,`2,`4)">
            <summary>
            Loads a document from the given stream using the specified document format.
            </summary>
            <param name="stream">The stream to load from.</param>
            <param name="docFormat">The document format to use. If null, the format will be
            determined automatically.</param>
            <param name="docLoadSettings">The document load settings. If null, the default 
            load settings for the document format will be used.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadNewDocument">
            <summary>
            Loads a new document in the view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToFile">
            <summary>
            Saves the current document to a file, that the user chooses from a Save File Dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToFile(Nevron.Nov.Function{Nevron.Nov.UI.NSaveFileDialogResult})">
            <summary>
            Saves the current document to a file, that the user chooses from a Save File Dialog.
            </summary>
            <param name="onSaveFileDialogClosed">Optional delegate, which is called when the SaveFile dialog has been closed.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToFile(System.String)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToFile(System.String,`2)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="fileName"></param>
            <param name="docFormat"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToFile(System.String,`2,`5)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="fileName"></param>
            <param name="docFormat"></param>
            <param name="docFormatSaveSettings"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToStream(System.IO.Stream,`2)">
            <summary>
            Saves the currently 
            </summary>
            <param name="stream"></param>
            <param name="docFormat"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveToStream(System.IO.Stream,`2,`5)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="docFormat"></param>
            <param name="docFormatSaveSettings"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.ShowMessage(Nevron.Nov.NTransactionResult)">
            <summary>
            Shows a view message for a non-succeeded transaciton
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.ShowMessage(System.String)">
            <summary>
            Shows a view message
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.HideMessage">
            <summary>
            Hides the currently show view message, if shown at all
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.RequestDisabledCursor">
            <summary>
            Overriden to request a wait cursor, if the loader is shown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the NKeyboard.KeyDownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the document view commander, by adding command actions to the specified commander
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the document view interactor, by adding tools to the specified interactor
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnDocumentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Document property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnLoadFromUriRequestCompleted(Nevron.Nov.Networking.NUriRequest,Nevron.Nov.Networking.NUriResponse)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.SaveDocumentToFile(Nevron.Nov.UI.NSaveFileDialogResult)">
            <summary>
            Called when the save dialog, shown by a SaveAs command has been closed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.LoadDocumentFromFile(Nevron.Nov.UI.NOpenFileDialogResult)">
            <summary>
            Called when the open dialog, shown by an Open command has been closed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.CreateOpenFileDialog">
            <summary>
            Creates the open file dialog shown by the LoadFromFile methods that do not have a fileName parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.CreateSaveFileDialog">
            <summary>
            Creates the save file dialog shown by the SaveToFile methods that do not have a fileName parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.CreateSaveChangesDialog">
            <summary>
            Creates the Save Changes task dialog, which is shown when the user wants to create a new
            document or open a document from file and the current document has unsaved changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnSaveChangesClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Save Changes task dialog has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnSaveChangesSaveFileDialogClosed(Nevron.Nov.UI.NSaveFileDialogResult)">
            <summary>
            Called when the Save File dialog shown when the user has clicked the "Save" button
            in the Save Changes task dialog has been closed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.CreateNewDocument">
            <summary>
            Creates a new document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnDocumentLoaded(`0,`4)">
            <summary>
            Called when a document has been loaded.
            </summary>
            <param name="document"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.ShowLoader">
            <summary>
            Shows the loader above this item and disables the widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.HideLoader">
            <summary>
            Hides the loader, if shown and restores the previous enabled state of the widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnDocumentLoaded">
            <summary>
            Raises the document loaded event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.OnDocumentSaved">
            <summary>
            Raises the document saved event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.ArrangeInnerAdorners(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overrin to also arrange the view message
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentView`6.AccumulateInnerAddorners(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.NDocumentViewSchema">
            <summary>
            Schema associated with NDocumentView.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.DocumentLoadedEvent">
            <summary>
            Reference to the DocumentLoaded event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.DocumentSavedEvent">
            <summary>
            Reference to the DocumentLoaded event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.MessageChild">
            <summary>
            Reference to the Message child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.DocumentProperty">
            <summary>
            Reference to the Document property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.ReadOnlyProperty">
            <summary>
            Reference to the ReadOnly property. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.OpenDocumentErrorEvent">
            <summary>
            Reference to the OpenDocumentError event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentView`6.SaveDocumentErrorEvent">
            <summary>
            Reference to the SaveDocumentError event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDocumentView`6.DocumentLoaded">
            <summary>
            Occurs when a new document was loaded by the view
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDocumentView`6.DocumentSaved">
            <summary>
            Occurs when the current document was saved by the view
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDocumentView`6.OpenDocumentError">
            <summary>
            Occurs when an error occurs during the opening of a document
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDocumentView`6.SaveDocumentError">
            <summary>
            Occurs when an error occurs during the saving of a document
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentView`6.Document">
            <summary>
            Gets or sets the document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentView`6.Content">
            <summary>
            A shortcut property that gets or sets the content inside the document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentView`6.Message">
            <summary>
            Gets or sets the message element. The message is automatically managed by Nevron via the ShowMessage and HideMessage methods.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentView`6.ReadOnly">
            <summary>
            Gets or sets whether the user is able to modify the document visually.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFileSelector">
            <summary>
            Represents a widget that allows the user to type or pick a file using the built in
            file open dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFileSelector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFileSelector.NFileSelectorSchema">
            <summary>
            Schema associated with NFileSelector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileSelector.FileName">
            <summary>
            Gets or sets the currently selected file name
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileSelector.FileTypes">
            <summary>
            Gets or sets the allowed file types.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuDropDownBuilder">
            <summary>
            Creates a menu drop down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarBuilder">
            <summary>
            Provides facility methods for creating widgets that are bound to commands and reside in command bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.#ctor(System.String)">
            <summary>
            Creates a command bar builder with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateComboBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a combo box and associates a NComboBoxCommandSource to it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateFontNameComboBox(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a font name combo box and associates a NComboBoxCommandSource to it.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Create a split button and associates it with the given command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="image">The image for the action button of the split button.</param>
            <param name="moreOptionsImage">The image for the split button popup's "More Options..." button (if it has one).</param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateComboBox(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a combo box and associates a NComboBoxCommandSource to it.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateFontNameComboBox(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a font name combo box and associates a NComboBoxCommandSource to it.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a button, that contains the specified image. Associates a NButtonBaseCommandSource
            to the button.
            </summary>
            <param name="image"></param>	
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateRepeatButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a repeat button, that contains the specified image. Associates a NButtonBaseCommandSource
            to the button.
            </summary>
            <param name="image"></param>	
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateToggleButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a toggle button, that contains the specified image. 
            Associates a NToggleButtonCommandSource to the button.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateCommandBarSeparator">
            <summary>
            Creates a command bar separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarBuilder.CreateMenuSplitButton(Nevron.Nov.Graphics.NImage[],System.String[],Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a menu split button.
            </summary>
            <param name="images"></param>
            <param name="titles"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDownBuilder.#ctor(System.String)">
            <summary>
            Creates a menu drop down builder with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDownBuilder.Create">
            <summary>
            Creates a menu drop down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuDropDownBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items of this builder to the given menu item collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarOptionsDialog">
            <summary>
            Represents the NavigationBar options dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.Initialize(Nevron.Nov.UI.NNavigationBar)">
            <summary>
            Initializes the NavigationBar options dialog.
            </summary>
            <param name="navigationBar"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.OnClosed">
            <summary>
            Called when this window is closed
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.OnMoveDownButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the MoveDown button is clicked
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.OnMoveUpButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the MoveUp button is clicked
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.UpdateMoveUpDownButtons">
            <summary>
            Updates the Move Up and Down buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.OnPaneListBoxItemMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the user clicks the mouse over a pane list box item.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarOptionsDialog.OnSelectionSelectionChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Selection of the panes list has changed
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarOptionsDialog.NNavigationBarOptionsDialogSchema">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarOptionsDialog.OwnerNavigationBar">
            <summary>
            Gets the NavigationBar for which this dialog is displayed
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPendant">
            <summary>
            Represents the pendant of an outlook bar, that shows a dynamically constructed menu,
            that displays options to show/hide panes, as well as modify the panes order.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.OnPopupClosed">
            <summary>
            Called when the popup has closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.IsPopupEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPendant.GetAutomaticPopupYPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup Y position, in case the PopupYPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPendant.NNavigationBarPendantSchema">
            <summary>
            Schema associated with NNavigationBarPendant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPendant.OwnerNavigationBar">
            <summary>
            Gets the outlook bar to which this pendant belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPaneContent">
            <summary>
            Represents the header of an NNavigationBarPane
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneContent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPaneContent.NNavigationBarPaneContentSchema">
            <summary>
            Schema associated with NNavigationBarPaneContent
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBar">
            <summary>
            A widget, which mimics the Microsoft Outlook Navigation bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the element to the provided list.  This
            implementation accumulates the children of this this element, which are NVisual instances.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.PopulatePendantMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Populates the pendant menu with menu items.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.ShowOptionsDialog">
            <summary>
            Shows the NavigationBar Options dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the SelectedIndex property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when the thumb is dragged.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnShowMoreButtonsClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when teh "Show More Buttons" menu item is clicked
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnShowFewerButtonsClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when teh "Show Fewer Buttons" menu item is clicked
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.CreateAddRemoveButtonMenuItem">
            <summary>
            Creates the root "Add/Remove" menu item, the subitems of which 
            are the menu items for each command bar that resides in this command bar owner lane.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.CreateShowHidePaneMenuItem(Nevron.Nov.UI.NNavigationBarPane)">
            <summary>
            Creates a menu item that should be placed in the "Add/Remove" root menu item, and that represents the specified pane.
            </summary>
            <param name="pane"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnAddRemoveMenuItemClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an add/remove menu item was clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.AddOverflowIconsMenuItems(Nevron.Nov.UI.NMenu)">
            <summary>
            Adds menu items for the hidden buttons (buttons that are not in the icons or headers lists)
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnOverlflowIconsMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user clicks on a menu item in the overflow buttons list, that appears in the context menu.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBar.OnOptionsMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user clicks on the Options menu item.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.NNavigationBarSchema">
            <summary>
            Schema associated with NNavigationBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.PanesChild">
            <summary>
            Reference to the panes child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.ThumbChild">
            <summary>
            Reference to the Thumb child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.PendantChild">
            <summary>
            Reference to the Pendant child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.VisibleHeadersCountProperty">
            <summary>
            Reference to the VisibleHeadersCount property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.HeadersPaddingProperty">
            <summary>
            Reference to the HeadersPadding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.HeadersSpacingProperty">
            <summary>
            Reference to the HeadersSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.IconsPaddingProperty">
            <summary>
            Reference to the IconsPadding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBar.IconsSpacingProperty">
            <summary>
            Reference to the IconsSpacing property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NNavigationBar.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.Panes">
            <summary>
            Gets or sets the panes of the outlook bar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.Thumb">
            <summary>
            Gets or sets the thumb of the outlookbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.Pendant">
            <summary>
            Gets or sets the pendant of the outlookbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.SelectedPane">
            <summary>
            Gets or sets the selected pane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.SelectedIndex">
            <summary>
            Gets or sets the panes of the outlook bar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.VisibleHeadersCount">
            <summary>
            Gets or sets the number of pane headers from the start of the Panes collection that are considered "visible"
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.HeadersPadding">
            <summary>
            Gets or sets the padding that is applied to the headers stack.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.HeadersSpacing">
            <summary>
            Gets or sets the spacing between the headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.IconsPadding">
            <summary>
            Gets or sets the padding that is applied to the icons stack.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBar.IconsSpacing">
            <summary>
            Gets or sets the spacing between the icons.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPane">
            <summary>
            Represents a pane from an Outlook bar. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPane.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.NNavigationBarPaneSchema">
            <summary>
            Schema associated with NNavigationBarPane.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.HeaderChild">
            <summary>
            Reference to the Header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.IconChild">
            <summary>
            Reference to the Icon child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.ShowProperty">
            <summary>
            Reference to the Show property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.TextProperty">
            <summary>
            Reference to the Text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPane.ImageProperty">
            <summary>
            Reference to the Image property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.OwnerNavigationBar">
            <summary>
            Gets the outlookbar pane to which this element belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Content">
            <summary>
            Gets or sets the content of the outlookbar pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Header">
            <summary>
            Gets or sets the header of the outlookbar pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Icon">
            <summary>
            Gets or sets the header of the outlookbar pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Text">
            <summary>
            Gets or sets the name of the outlook bar pane. 
            The name appears in the pendant menu
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Image">
            <summary>
            Gets or sets the image that is associated with the outlook bar pane. 
            The image appears in the pendant menu and the pane options dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPane.Show">
            <summary>
            Gets or sets whether the pane should be displayed or not.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPaneButton">
            <summary>
            A content holder that serves as base class for NNavigationBarPaneHeader and NNavigationBarPaneIcon
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneButton.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPaneButton.NNavigationBarPaneButtonSchema">
            <summary>
            Schema associated with NNavigationBarPaneButton
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPaneButton.OwnerNavigationBarPane">
            <summary>
            Gets the NavigationBar pane to which this element belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarPaneButton.OwnerNavigationBar">
            <summary>
            Gets the NavigationBar bar to which this element belongs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPaneCollection">
            <summary>
            Represents a collection of outlookbar panes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPaneCollection.NNavigationBarPaneCollectionSchema">
            <summary>
            Schema associated with NNavigationBarPaneCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPaneHeader">
            <summary>
            Represents the header of an NNavigationBarPane
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneHeader.OnCheckedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the Checked proprety has changed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPaneHeader.NNavigationBarPaneHeaderSchema">
            <summary>
            Schema associated with NNavigationBarPaneHeader
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarPaneIcon">
            <summary>
            Represents the header of an NNavigationBarPane
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneIcon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarPaneIcon.OnCheckedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the Checked proprety has changed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarPaneIcon.NNavigationBarPaneIconSchema">
            <summary>
            Schema associated with NNavigationBarPaneIcon
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNavigationBarThumb">
            <summary>
            Represents the thumb of an outlook bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNavigationBarThumb.RequestCursor">
            <summary>
            Overriden to request a horizontal split cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNavigationBarThumb.NNavigationBarThumbSchema">
            <summary>
            Schema associated with NThumb
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNavigationBarThumb.OwnerNavigationBar">
            <summary>
            Gets the splitter in which this splitter thumb resides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUserPanel">
            <summary>
            A panel that does not measure and arrange its child widgets. Used when you want to explicitly position widgets.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPanel">
            <summary>
            A widget, which is a collection other widgets. Serves as base class for all panels.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPanel.NPanelSchema">
            <summary>
            Schema associated with NPanel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUserPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUserPanel.NUserPanelSchema">
            <summary>
            Schema associated with NUserPanel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NProgressBarPart">
            <summary>
            Represents a progress bar part.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBarPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBarPart.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBarPart.NProgressBarPartSchema">
            <summary>
            Schema associated with NProgressBarPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroupBuilder">
            <summary>
            Provides facility methods for creating widgets that are bound to commands and reside in ribbon groups.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.#ctor(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon group builder with the given name and icon.
            </summary>
            <param name="name">The name of the ribbon group. This is the text of its header.</param>
            <param name="icon">The icon of the ribbon group. This is the image shown when the
            ribbon group is in collapsed state.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates a ribbon group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon button.
            </summary>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonLargeButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon button that is always in large state.
            </summary>
            <param name="largeImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonMediumButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand,System.Boolean)">
            <summary>
            Creates a ribbon button that is in medium state.
            </summary>
            <param name="smallImage"></param>
            <param name="command"></param>
            <param name="canCollapseToSmall"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonSmallButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon button that is always in small state.
            </summary>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonToggleButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon toggle button.
            </summary>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonLargeToggleButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon toggle button that is always in large state.
            </summary>
            <param name="largeImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonSmallToggleButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon toggle button in small state.
            </summary>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonSeparator">
            <summary>
            Creates a new ribbon separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonWrapFlowPanel">
            <summary>
            Creates a ribbon wrap flow panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonStackPanel">
            <summary>
            Creates a ribbon stack panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonCollapsiblePanel">
            <summary>
            Creates a ribbon collapsible panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonContentDropDown(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon content drop down.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonMenuDropDown(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon menu drop down.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonSplitButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon split button with the given large and small image.
            </summary>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupBuilder.CreateRibbonGallery(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NTablePicker,Nevron.Nov.UI.NRibbonGalleryCommandSource)">
            <summary>
            Creates a ribbon gallery.
            </summary>
            <param name="icon">The icon of the gallery when in collapsed state.</param>
            <param name="commandSource"></param>
            <param name="tablePicker"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupBuilder.m_Icon">
            <summary>
            The icon of the ribbon group. This is the image shown when the ribbon group is in collapsed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupBuilder.DialogLauncherButtonCommand">
            <summary>
            Gets the command that should be associated with the dialog launcher button.
            By default set to null, which means that the dialog launcher button will not be visible.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonTabPageBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageBuilder.#ctor(System.String)">
            <summary>
            Creates a ribbon tab page builder with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageBuilder.Create">
            <summary>
            Creates a ribbon tab page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPageBuilder.RibbonGroupBuilders">
            <summary>
            Gets the ribbon group builders.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonUIBuilder">
            <summary>
            Creates a ribbon based UI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.CreateRibbon">
            <summary>
            Creates the ribbon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.CreateApplicationMenu">
            <summary>
            Creates the ribbon application menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.AddTabPageBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageBuilder})">
            <summary>
            Adds the tab page builders.
            </summary>
            <param name="tabPageBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.CreateUIHolder(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the widget, which holds the commanding UI and the command target.
            Overriden to create a dock panel.
            </summary>
            <param name="commandTarget"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonUIBuilder.CreateFooterButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a button for the footer of the ribbon's application menu.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonUIBuilder.HelpButtonCommand">
            <summary>
            Gets the command that should be associated with the help button of the ribbon.
            By default set to null, which means that the ribbon won't have a help button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonUIBuilder.TabPageBuilders">
            <summary>
            Gets the tab page builders.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENRibbonGroupState">
            <summary>
            Enumerates the supported ribbon group states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonGroupState.Collapsed">
            <summary>
            The ribbon group is collapsed showing only its icon and text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonGroupState.Small">
            <summary>
            The ribbon group is shrinked a lot in order to fit in the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonGroupState.Medium">
            <summary>
            The ribbon group is shrinked slightly in order to fit in the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonGroupState.Large">
            <summary>
            The ribbon group occupies its desired size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENRibbonWidgetState">
            <summary>
            Enumerates the states of widgets placed in ribbon groups.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonWidgetState.Small">
            <summary>
            Only the small image of the button is shown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonWidgetState.Medium">
            <summary>
            The small image and the text of the button are shown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENRibbonWidgetState.Large">
            <summary>
            The large image and the text of the button are shown.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCollapseCondition">
            <summary>
            Enumerates the collapse conditions for widgets that reside in ribbon groups.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCollapseCondition.Never">
            <summary>
            The widget never collapses.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCollapseCondition.WhenParentIsMedium">
            <summary>
            The widget collapses when its parent is in medium state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCollapseCondition.WhenParentIsSmall">
            <summary>
            The widget collapses when its parent is in small state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCollapsedStateDropDown">
            <summary>
            A menu drop down for the collapsed state of a ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCollapsedStateDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCollapsedStateDropDown.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent of this node has changed. Overriden to update
            the image and the text of this drop down.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCollapsedStateDropDown.OnClick">
            <summary>
            Overriden to toggle the popup when this drop down is clicked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCollapsedStateDropDown.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCollapsedStateDropDown.OnPopupClosed">
            <summary>
            Called when the popup is closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCollapsedStateDropDown.NCollapsedStateDropDownSchema">
            <summary>
            Schema associated with NCollapsedStateDropDown.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroup">
            <summary>
            Represents a ribbon group that consists of a header and a collection of ribbon group items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.GetSize(System.Int32)">
            <summary>
            Gets the size of the group for the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.GetStatePriority(Nevron.Nov.UI.ENRibbonGroupState)">
            <summary>
            Gets the priority of the given state or -1 if the given state is not defined
            for this ribbon group.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.GetStatePriority(System.Int32)">
            <summary>
            Gets the priority of the given state or -1 if the given state is not defined
            for this ribbon group.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.SetStatePriority(Nevron.Nov.UI.ENRibbonGroupState,System.Int32)">
            <summary>
            Sets the priority of the given state. States with larger priorities are
            collapsed first by the ribbon layout algorithm.
            </summary>
            <param name="state"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.SetStatePriority(System.Int32,System.Int32)">
            <summary>
            Sets the priority of the given state. States with larger priorities are
            collapsed first by the ribbon layout algorithm.
            </summary>
            <param name="state"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.GetStatesIterator">
            <summary>
            Gets an iterator that iterates through the state-priority map of this ribbon group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.MeasureContent(System.Boolean)">
            <summary>
            Measures the size of the ribbon group's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the ribbon group's content in the given area.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.CreatePopupWindow">
            <summary>
            Creates a popup window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroup.GetContentSize(System.Int32)">
            <summary>
            Gets the size of this ribbon group items, when the group is in the given state or
            the size of the collapsed drop down if the given state is "Collapsed".
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.NRibbonGroupSchema">
            <summary>
            Schema associated with NRibbonGroup.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.HeaderChild">
            <summary>
            Reference to the Header child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.ItemsChild">
            <summary>
            Reference to the Items child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.CollapsedDropDownChild">
            <summary>
            Reference to the CollapsedDropDown child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.IconProperty">
            <summary>
            Reference to the Icon property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroup.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.Header">
            <summary>
            Gets or sets the Header child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.Items">
            <summary>
            Gets or sets the items of this ribbon group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.CollapsedDropDown">
            <summary>
            Gets or sets the CollapsedDropDown child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.Icon">
            <summary>
            Gets or sets the image that is shown for this group when its in collapsed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.InitialState">
            <summary>
            Gets or sets the initial state of the group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroup.CurrentState">
            <summary>
            Gets or sets the current state of the group. Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroupHeader">
            <summary>
            Represents the header of a ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupHeader.MeasureContent(System.Boolean)">
            <summary>
            Measures the size of this ribbon group header child elements.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupHeader.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the child elements of this ribbon group header.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupHeader.NRibbonGroupHeaderSchema">
            <summary>
            Schema associated with NRibbonGroupHeader.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupHeader.TitleLabelChild">
            <summary>
            Reference to the TitleLabel child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupHeader.DialogLauncherButtonChild">
            <summary>
            Reference to the DialogLauncherButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupHeader.TitleLabel">
            <summary>
            Gets or sets the TitleLabel child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupHeader.DialogLauncherButton">
            <summary>
            Gets or sets the DialogLauncherButton child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroupItemCollection">
            <summary>
            A collection of widgets that belongs to a ribbon group. The ribbon group item collection's
            horizontal and vertical placements  are by default set to "Center" and "Top" respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupItemCollection.GetLayout">
            <summary>
            Initializes and returns the layout for arranging the widgets in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupItemCollection.CreateLayout">
            <summary>
            Creates the layout to use for arranging the widgets in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupItemCollection.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupItemCollection.NRibbonGroupItemCollectionSchema">
            <summary>
            Schema associated with NRibbonGroupItemCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INRibbonButton">
            <summary>
            Interface implemented by all ribbon buttons.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INRibbonWidget">
            <summary>
            Interface implemented by widgets that reside in a ribbon group. It provides support
            for different size states, that are used by the ribbon group layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INRibbonWidget.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INRibbonWidget.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INRibbonWidget.OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState of this ribbon widget has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.INRibbonWidget.OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Initial state of this ribbon widget has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonWidget.CurrentState">
            <summary>
            Gets or sets the state of the ribbon widget. Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonWidget.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon widget. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonWidget.CollapseToMedium">
            <summary>
            Determines when the widget should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonWidget.CollapseToSmall">
            <summary>
            Determines when the widget should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonButton.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonButton.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonButton.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INRibbonButton.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of the ribbon button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWidgetBodyAdapter">
            <summary>
            A body adapter, which provides layouts with the ability to threat widgets as layout bodies.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBodyAdapter">
            <summary>
            Used to abstract layouts, from the actual objects that are represented by bodies.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.StartBodiesUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of a bodies update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.EndBodiesUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of a bodies update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.UpdateBody2DFromObject(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates the shape of a 2D body from the object it represents
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.UpdateBody1DFromObject(System.Object,Nevron.Nov.Layout.NBody1D)">
            <summary>
            Updates the shape of a 1D body from the object it represents
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.TryGetBody2DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Gets a property of a 2D body.
            </summary>
            <param name="obj"></param>
            <param name="propertyKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.TryGetBody1DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Gets a property of a 1D body.
            </summary>
            <param name="obj"></param>
            <param name="propertyKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.StartObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.EndObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.UpdateObjectFromBody2D(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates the shape of an object from the 2D body which represents it
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NBodyAdapter.UpdateObjectFromBody1D(System.Object,Nevron.Nov.Layout.NBody1D)">
            <summary>
            Updates the shape of an object from the 1D body which represents it
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidgetBodyAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWidgetBodyAdapter.UpdateBody2DFromObject(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates a 2D body from the specified object
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWidgetBodyAdapter.TryGetBody2DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Reads a property of a 2D body
            </summary>
            <param name="obj"></param>
            <param name="propertyKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWidgetBodyAdapter.UpdateObjectFromBody2D(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates an object from the specified 2D body
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroupState">
            <summary>
            Contains information about a ribbon group state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupState.#ctor(Nevron.Nov.UI.NRibbonGroup,System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="group"></param>
            <param name="state"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupState.CompareTo(Nevron.Nov.UI.NRibbonGroupState)">
            <summary>
            Compares this state to the given one by priority and returns -1
            if the priority of this state is smaller than that of the given one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupState.GetGroupSize">
            <summary>
            Gets the size of the ribbon group when in this state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupState.GetLargerStateGroupSize">
            <summary>
            Gets the size of the ribbon grou when in a 1 step larger state than this one.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupState.State">
            <summary>
            Gets the type of the state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupState.Group">
            <summary>
            Gets the parent group of the state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGroupState.Priority">
            <summary>
            Gets or sets the layout priority of the state. Larger value means higher priority.
            By default set to 1.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonCollapsiblePanel">
            <summary>
            A layout panel that arranges ribbon group widgets and can collapse or expand
            based on the available area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonLayoutPanel`1">
            <summary>
            Base class for all ribbon layout panels.
            </summary>
            <typeparam name="TLayout"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.GetLayout">
            <summary>
            Creates a new layout and configures it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonLayoutPanel`1.ConfigureLayoutForState(`0,System.Int32)">
            <summary>
            Configures the specified layout for the given state.
            </summary>
            <param name="layout"></param>
            <param name="state"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonLayoutPanel`1.NRibbonLayoutPanelSchema">
            <summary>
            Schema associated with NRibbonLayoutPanel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonLayoutPanel`1.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonLayoutPanel`1.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonLayoutPanel`1.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonLayoutPanel`1.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonLayoutPanel`1.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon button.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonLayoutPanel`1.InitialState">
            <summary>
            Gets or sets the initial state of a ribbon button. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonLayoutPanel`1.CollapseToMedium">
            <summary>
            Determines when the button should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonLayoutPanel`1.CollapseToSmall">
            <summary>
            Determines when the button should collapse to Small state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonCollapsiblePanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonCollapsiblePanel.GetSize(System.Int32)">
            <summary>
            Overriden to return a width equal to the width of the large state and height equal
            to the larger height among large and medium state when requested for large state,
            because for the collapsible panel the medium state might have larger height than
            the large state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonCollapsiblePanel.ConfigureLayoutForState(Nevron.Nov.Layout.NTableFlowLayout,System.Int32)">
            <summary>
            Configures the specified layout for the given state.
            </summary>
            <param name="layout"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonCollapsiblePanel.CreateLayout">
            <summary>
            Creates a new table flow layout.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonCollapsiblePanel.NRibbonCollapsiblePanelSchema">
            <summary>
            Schema associated with NRibbonCollapsiblePanel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonCollapsiblePanel.SmallWidgetsPerColumnProperty">
            <summary>
            Reference to the SmallWidgetsPerColumn property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonCollapsiblePanel.SmallWidgetsPerColumn">
            <summary>
            Gets or sets the number of small buttons per column. By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonStackPanel">
            <summary>
            A stack panel placed in a ribbon. It automatically sets the extended look of its children to Flat.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonStackPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonStackPanel.ConfigureLayoutForState(Nevron.Nov.Layout.NStackLayout,System.Int32)">
            <summary>
            Configures the given layout for the specified state.
            </summary>
            <param name="layout"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonStackPanel.CreateLayout">
            <summary>
            Creates the layout.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonStackPanel.NRibbonStackPanelSchema">
            <summary>
            Schema associated with NRibbonStackPanel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonWrapFlowLayout">
            <summary>
            Represents a variation of the wrap flow layout, which layouts boxes on a given number
            of lanes (typically 2 or 3) and is used by the ribbon wrap flow panel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NWrapFlowLayout">
            <summary>
            Represents a flow layout, which places boxes on a new lane, when the current lane breaches the size constraint of the layout area,
            in the current layout flow direction (i.e. wraps the boxes in the layout flow direction).
            </summary>
            <remarks>
            <para>
            Each lane of boxes generated by the layout can be threated as a stack that has the orientation of the layout flow direction, and is hence a subject to stack arrangement. 
            Because the lane is never large enough to be fitted (e.g. the wrap flow layout goes to a new lane when that happens),
            it only makes sense to instruct the layout to fill the lanes. This is controlled by the LaneFillMode property.
            </para>
            <para>
            The lanes themselves can also be threated as a stack that flows in the counter orientation of the layout flow direction, and are hence subject to stack arrangement too.
            The FillMode and FitMode properties control the way in which the lanes fill/fit the currently available area.
            </para>
            <para>
            The wrap flow layout always measures to fit the boxes in a single lane.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.CreateBoxBody">
            <summary>
            Called in the boxes creation process to create a cell instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Measures the desired size of the boxes.
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Layouts the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NWrapFlowLayout.NWrapFlowLayoutSchema">
            <summary>
            Schema associated with NWrapFlowLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NWrapFlowLayout.LaneFillModeProperty">
            <summary>
            Reference to the LaneFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NWrapFlowLayout.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NWrapFlowLayout.FitModeProperty">
            <summary>
            Reference to the FitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NWrapFlowLayout.BreakPropertyEx">
            <summary>
            Reference to the Break extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.GetBreak(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the value of the BreakPropertyEx property of the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.SetBreak(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Sets the value of the BreakPropertyEx property of the given node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NWrapFlowLayout.ClearBreak(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the value of the BreakPropertyEx extended property for the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.Nov.Layout.NWrapFlowLayout.LaneFillMode">
            <summary>
            Gets or sets the mode in which the layout tries to fill the extra space in each lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NWrapFlowLayout.FillMode">
            <summary>
            Gets or sets the mode in which the layout tries to fill the layout area, 
            when the desired size of the generated lanes is smaller than the layout area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NWrapFlowLayout.FitMode">
            <summary>
            Gets or sets the mode in which the layout tries to fit into the layout area, 
            when the desired size of the generated lanes is larger than the layout area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Measures the desired size of the boxes.
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Layouts the boxes.
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonWrapFlowLayout.NRibbonWrapFlowLayoutSchema">
            <summary>
            Schema ssociated with NRibbonWrapFlowLayout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonWrapFlowLayout.MaxLanesProperty">
            <summary>
            Reference to the MaxLanes property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonWrapFlowLayout.MaxLanes">
            <summary>
            Gets or sets the maximum number of lanes this layout should arrange its widgets on.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonWrapFlowPanel">
            <summary>
            A layout panel that arranges ribbon group widgets on 2 or 3 lanes based on the available area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowPanel.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowPanel.ConfigureLayoutForState(Nevron.Nov.UI.NRibbonWrapFlowLayout,System.Int32)">
            <summary>
            Configures the specified layout for the given state.
            </summary>
            <param name="layout"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonWrapFlowPanel.CreateLayout">
            <summary>
            Creates a new wrap flow layout.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonWrapFlowPanel.NRibbonWrapFlowPanelSchema">
            <summary>
            Schema associated with NRibbonWrapFlowPanel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbon">
            <summary>
            Represents a ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbon.MeasureContent(System.Boolean)">
            <summary>
            Measures the size of the ribbon's child elements.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbon.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the child elements of the ribbon in the given area.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbon.NRibbonSchema">
            <summary>
            Schema associated with NRibbon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbon.TabChild">
            <summary>
            Reference to the Tab child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbon.Tab">
            <summary>
            Gets or sets the Tab child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonHelpers">
            <summary>
            Contains helper methods for working with ribbons and ribbon widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonHelpers.OnInitialStateChanged(Nevron.Nov.UI.INRibbonWidget)">
            <summary>
            Default implementation of the handler called on a widget when its initial state has changed.
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonHelpers.GetWidgetStateForGroupState(Nevron.Nov.UI.INRibbonWidget,System.Int32)">
            <summary>
            Default implementation that returns the state the given widget should be in when
            its owner group is in the specified state.
            </summary>
            <param name="widget"></param>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGroupCollection">
            <summary>
            Represents a collection of ribbon groups.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupCollection.CreateLayout">
            <summary>
            Creates the layout to use for arranging the ribbon groups in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGroupCollection.GetLayoutContext(Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Gets a widget layout context for the specified content area.
            </summary>
            <param name="contentArea"></param>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGroupCollection.NRibbonGroupCollectionSchema">
            <summary>
            Schema associated with NRibbonGroupCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonTab">
            <summary>
            Represents a ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.GetBorderThickness">
            <summary>
            Overriden to include the headers measure in the border thickness measure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.NavigateToPage(Nevron.Nov.UI.NRibbonTabPage)">
            <summary>
            Navigates to the given page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.EnsureVisible(Nevron.Nov.UI.NRibbonTabPage)">
            <summary>
            Ensures that the given tab page is visible.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.CreateBorderWall">
            <summary>
            Overriden to return a border wall for the group box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.OnCollapseButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the collapse button was clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.OnScrollLeftButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the scroll left button was clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTab.OnScrollRightButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the scroll right button was clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.NRibbonTabSchema">
            <summary>
            Schema associated with NRibbonTab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.ApplicationMenuChild">
            <summary>
            Reference to the ApplicationMenu child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.TabPagesChild">
            <summary>
            Reference to the TabPages child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.CollapseButtonChild">
            <summary>
            Reference to the CollapseButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.AdditionalContentChild">
            <summary>
            Reference to the AdditionalContent child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.ScrollLeftButtonChild">
            <summary>
            Reference to the ScrollLeftButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.ScrollRightButtonChild">
            <summary>
            Reference to the ScrollRightButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.HeadersSpacingProperty">
            <summary>
            Reference to the HeadersSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.ExpandedProperty">
            <summary>
            Reference to the Expanded property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTab.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRibbonTab.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.ApplicationMenu">
            <summary>
            Gets or sets the application menu.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.TabPages">
            <summary>
            Gets or sets the tab pages of this ribbon tab.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.CollapseButton">
            <summary>
            Gets or sets the collapse button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.AdditionalContent">
            <summary>
            Gets or sets the additional content of the ribbon tab. This most commonly is a Help button,
            but can be any widget. By default set to null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.ScrollLeftButton">
            <summary>
            Gets or sets the ScrollLeftButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.ScrollRightButton">
            <summary>
            Gets or sets the ScrollRightButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.HeadersSpacing">
            <summary>
            Gets or sets the value of the HeadersSpacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.Expanded">
            <summary>
            Gets or sets whether the ribbon is expanded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.SelectedIndex">
            <summary>
            Gets or sets the value of the SelectedIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTab.SelectedPage">
            <summary>
            Gets or sets the selected page.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonTabPage">
            <summary>
            Represents a ribbon tab page that couples a header and a ribbon group collection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPage.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTabPage.NRibbonTabPageSchema">
            <summary>
            Schema associated with NRibbonTabPage.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTabPage.HeaderChild">
            <summary>
            Reference to the Header child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTabPage.GroupsChild">
            <summary>
            Reference to the Groups child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPage.Header">
            <summary>
            Gets or sets the Header child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPage.Groups">
            <summary>
            Gets or sets the Groups child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPage.IsSelected">
            <summary>
            Gets whether the tab page is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonTabPageCollection">
            <summary>
            Represents a collection of ribbon tab pages.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTabPageCollection.NRibbonTabPageCollectionSchema">
            <summary>
            Schema associated with NRibbonTabPageCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonTabPageHeader">
            <summary>
            Represents the header of a ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageHeader.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonTabPageHeader.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to select the tab page to which this header belongs
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonTabPageHeader.NRibbonTabPageHeaderSchema">
            <summary>
            Schema associated with NRibbonTabPageHeader.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPageHeader.OwnerTabPage">
            <summary>
            Gets the tab page that owns this header
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonTabPageHeader.OwnerTab">
            <summary>
            Gets the tab that owns this header
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NApplicationMenu">
            <summary>
            Represents the application menu of a ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenu.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenu.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenu.CreatePopupWindow">
            <summary>
            Overriden to create the popup window shown when this application menu is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenu.OnClick">
            <summary>
            Called when this drop down is clicked. Overriden to toggle the popup window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NApplicationMenu.NApplicationMenuSchema">
            <summary>
            Schema associated with NApplicationMenu.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NApplicationMenu.MenuPane">
            <summary>
            Gets the menu associated with this menu action.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NApplicationMenu.ContentPane">
            <summary>
            Gets or sets the content of this application menu.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NApplicationMenu.FooterPane">
            <summary>
            Gets or sets the footer panel of this application menu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NApplicationMenuFooterPanel">
            <summary>
            The wrap flow panel use in the footer of an application menu popup window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWrapFlowPanel">
            <summary>
            A layout panel, which integrates the NWrapFlowLayout in the context of the Nevron User Interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWrapFlowPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWrapFlowPanel.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWrapFlowPanel.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWrapFlowPanel.CreateLayout">
            <summary>
            Overriden to create a new instance of the NWrapFlowLayout
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NWrapFlowPanel.NWrapFlowPanelSchema">
            <summary>
            Schema associated with NLayoutPanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWrapFlowPanel.LaneFillModeProperty">
            <summary>
            Reference to the LaneFillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWrapFlowPanel.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWrapFlowPanel.FitModeProperty">
            <summary>
            Reference to the FitMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWrapFlowPanel.LaneFillMode">
            <summary>
            Gets or sets the mode in which the layout tries to fill the extra space in each lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWrapFlowPanel.FillMode">
            <summary>
            Gets or sets the mode in which the layout tries to fill the layout area, 
            when the desired size of the generated lanes is smaller than the layout area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NWrapFlowPanel.FitMode">
            <summary>
            Gets or sets the mode in which the layout tries to fit into the layout area, 
            when the desired size of the generated lanes is larger than the layout area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenuFooterPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NApplicationMenuFooterPanel.NApplicationMenuFooterPanelSchema">
            <summary>
            Schema associated with NApplicationMenuFooterPanel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NApplicationMenuPopupWindow">
            <summary>
            The popup window shown when the application menu is clicked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPopupWindow">
            <summary>
            A top-level window that is by default displayed without a title bar and raises a QueryStayOpened event.
            Because of the temporary nature of a popup window, it is typically contained in a NPopupWindowHost element, that defines its closing conditions and start position.
            A popup window can however be opened in any node window context, thus enabling context popups and menus for virtually all descendants of a window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the key down events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.OnOpened">
            <summary>
            Raises the Opened event.
            Overriden to reset the window result to none.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.OnClosed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.DoQueryStayOpened">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.OnQueryStayOpened">
            <summary>
            Raises the QueryStayOpened event. 
            Returns true if the popup window should stay opened. Otherwise returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindow.NPopupWindowSchema">
            <summary>
            Schema associated with NPopupWindow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindow.QueryStayOpenedEvent">
            <summary>
            Reference to the QueryStayOpened event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPopupWindow.CloseOnEnterProperty">
            <summary>
            Reference to the CloseOnEnter property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPopupWindow.OpenInContext(Nevron.Nov.UI.NPopupWindow,Nevron.Nov.Dom.NNode,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Opens a popup window in a context fashion.
            </summary>
            <param name="popupWindow">popup window to open</param>
            <param name="targetNode">target node</param>
            <param name="screenPos">screen position</param>
            <returns></returns>
        </member>
        <member name="E:Nevron.Nov.UI.NPopupWindow.QueryStayOpened">
            <summary>
            Occurs when the popup is opened and queries whether it must remain opened.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPopupWindow.CloseOnEnter">
            <summary>
            Gets or sets whether the popup must be automatically closed, when an unhandled Enter key down event is received by the popup.
            The popup result is automatically set to OK.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenuPopupWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NApplicationMenuPopupWindow.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NApplicationMenuPopupWindow.NApplicationMenuPopupWindowSchema">
            <summary>
            Schema associated with NApplicationMenuPopupWindow.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonButton">
            <summary>
            Represents a ribbon button, which is a button that has image and text and
            resides in a ribbon. It provides support for 3 states: Large, Medium and Small.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButton.NRibbonButtonSchema">
            <summary>
            Schema associated with NRibbonButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButton.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButton.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButton.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButton.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButton.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon button.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon button. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.CollapseToMedium">
            <summary>
            Determines when the button should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.CollapseToSmall">
            <summary>
            Determines when the button should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButton.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon button.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonButtonContent">
            <summary>
            Represents the content of a ribbon button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this widget. The size returned by this method depends on the
            state of the ribbon widget that owns this ribbon button content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of this widget.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.CreateLargeContent">
            <summary>
            Creates the large content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.CreateMediumContent">
            <summary>
            Creates the medium content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.CreateSmallContent">
            <summary>
            Creates the small content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.CreateContent(Nevron.Nov.Graphics.NImage,System.String,Nevron.Nov.UI.ENPairBoxRelation)">
            <summary>
            Creates a content widget based on the given image, text and box relation.
            </summary>
            <param name="image"></param>
            <param name="text"></param>
            <param name="boxRelation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.SetImage(Nevron.Nov.UI.NWidget,Nevron.Nov.Graphics.NImage)">
            <summary>
            Sets the image of the given content widget.
            </summary>
            <param name="widget"></param>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.SetText(Nevron.Nov.UI.NWidget,System.String)">
            <summary>
            Sets the text of the given content widget.
            </summary>
            <param name="widget"></param>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.SetSpacing(Nevron.Nov.UI.NWidget,System.Double)">
            <summary>
            Sets the spacing between the parts of the given content widget.
            </summary>
            <param name="widget"></param>
            <param name="spacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.ProcessTextForLargeState(System.String)">
            <summary>
            Processes the given text to the text that should be shown in large state.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>
            In large state the text may be on two lines, so the default implementation
            of this method finds the space most close to the center of the text and replaces
            it with a new line.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonButtonContent.ProcessTextForMediumState(System.String)">
            <summary>
            Processes the given text to the text that should be shown in medium state.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>
            In medium state the text should fit on one line, so the default implementation
            of this method replaces all new lines in the text with spaces.
            </remarks>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.NRibbonButtonContentSchema">
            <summary>
            Schema associated with NRibbonButtonContent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.LargeContentChild">
            <summary>
            Reference to the LargeContent child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.MediumContentChild">
            <summary>
            Reference to the MediumContent child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.SmallContentChild">
            <summary>
            Reference to the SmallContent child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.LargeImageProperty">
            <summary>
            Reference to the LargeImage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.SmallImageProperty">
            <summary>
            Reference to the SmallImage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonButtonContent.ImageTextSpacingProperty">
            <summary>
            Reference to the ImageTextSpacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.LargeContent">
            <summary>
            Gets or sets the LargeContent child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.MediumContent">
            <summary>
            Gets or sets the MediumContent child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.SmallContent">
            <summary>
            Gets or sets the SmallContent child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonButtonContent.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon button.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonHelpButton">
            <summary>
            Represents a ribbon help button that typically resides in the top right content of a ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonHelpButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonHelpButton.NRibbonHelpButtonSchema">
            <summary>
            Schema associated with NRibbonHelpButton.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonHelpButton.Image">
            <summary>
            Gets or sets the image shown in the help button. By default set to a 16x16 image of a white
            question mark in a blue circle.
            </summary>
            <remarks>
            This is a shortcut to the Image property of the image box hosted in this button.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonRepeatButton">
            <summary>
            Represents a ribbon repeat button, which is a repeat button that has image
            and text and resides in a ribbon. It provides support for 3 states: Large,
            Medium and Small.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRepeatButton">
            <summary>
            Represents a button, which repeatingly raises the Click event.
            The initial delay and repeating clicks time intervals are user specifiable.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.#ctor(System.Object)">
            <summary>
            Initializer ctor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.OnDelayTimerTick">
            <summary>
            Called when the delay timer is ticked
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.OnClickTimerTick">
            <summary>
            Called when the click timer is ticked
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.OnStartClicking">
            <summary>
            Raises the StartClicking event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.OnEndClicking">
            <summary>
            Raises the EndClicking event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.OnButtonStateChanged(Nevron.Nov.UI.ENButtonState)">
            <summary>
            Called when the pressed state of the button was changed
            </summary>
            <param name="oldState"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.StopDelayTimer">
            <summary>
            Stops the delay timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.RestartDelayTimer">
            <summary>
            Restarts the delay timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.StopClickTimer">
            <summary>
            Stops the click timer. If it was started raises the EndClicking event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRepeatButton.RestartClickTimer">
            <summary>
            Restarts the StartClicking timer. Raises the StartClicking event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRepeatButton.NRepeatButtonSchema">
            <summary>
            Schema associated with NRepeatButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRepeatButton.DelayProperty">
            <summary>
            Reference to the Delay property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRepeatButton.IntervalProperty">
            <summary>
            Reference to the Interval property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRepeatButton.StartClickingEvent">
            <summary>
            Reference to the StartClicking event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRepeatButton.EndClickingEvent">
            <summary>
            Reference to the EndClicking event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRepeatButton.StartClicking">
            <summary>
            Event, which occurs when the repeat button is about to start raising continuous click events.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRepeatButton.EndClicking">
            <summary>
            Event, which occurs when the repeat button has stopped raising continuous click events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRepeatButton.Delay">
            <summary>
            Gets or sets the amount of time (in milliseconds), 
            that the button waits while it is pressed before it starts repeating clicks. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRepeatButton.Interval">
            <summary>
            Gets or sets the amount of time (in milliseconds), 
            between repeating clicks once repeating clicks starts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonRepeatButton.NRibbonRepeatButtonSchema">
            <summary>
            Schema associated with NRibbonRepeatButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonRepeatButton.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonRepeatButton.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonRepeatButton.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonRepeatButton.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonRepeatButton.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon button.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon button. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.CollapseToMedium">
            <summary>
            Determines when the button should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.CollapseToSmall">
            <summary>
            Determines when the button should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonRepeatButton.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon button.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonToggleButton">
            <summary>
            Represents a toggle ribbon button, which is a toggle button that has image
            and text and resides in a ribbon. It provides support for 3 states: Large,
            Medium and Small.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleButton">
            <summary>
            A general purpose toggle button, which can also act like a radio button.
            A radio button is considered grouped, when it is a descendand of a NToggleButtonGroup.
            For a single NToggleButtonGroup element, only one descendant toggle button can be checked at a time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButton.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButton.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButton.NToggleButtonSchema">
            <summary>
            Schema associated with NToggleButton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonToggleButton.NRibbonToggleButtonSchema">
            <summary>
            Schema associated with NRibbonToggleButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonToggleButton.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonToggleButton.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonToggleButton.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonToggleButton.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonToggleButton.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon button.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon button. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.CollapseToMedium">
            <summary>
            Determines when the button should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.CollapseToSmall">
            <summary>
            Determines when the button should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonToggleButton.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon button.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGallery">
            <summary>
            Represents a ribbon gallery.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NTablePicker)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="icon"></param>
            <param name="tablePicker"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Overriden to clip the table picker child with the row height.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.EnsureVisible(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Scrolls the picker in the proper direction so that the given cell becomes visible.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.MeasureContent(System.Boolean)">
            <summary>
            Measures the size of this ribbon gallery.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of this ribbon gallery.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.CreatePopupWindow">
            <summary>
            Creates the popup window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.OnPopupOpening">
            <summary>
            Called when the popup window is about to be opened. Overriden to update
            the content of the window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node is inserted in this ribbon gallery.
            Overriden to subscribe to table picker events and create ribbon group
            states in the owner ribbon group.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node is removed from this ribbon gallery.
            Overriden to unsubscribe from table picker events.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent node of this ribbon gallery has changed.
            Overriden to create states in the owner ribbon group based on
            the states of this gallery.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallery.GetColumnCountForState(System.Int32)">
            <summary>
            Gets the number of columns the table picker should have for the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.NRibbonGallerySchema">
            <summary>
            Schema associated with NRibbonGallery.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.TablePickerChild">
            <summary>
            Reference to the TablePicker child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.SpinnerChild">
            <summary>
            Reference to the Spinner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.CollapsedDropDownChild">
            <summary>
            Reference to the CollapsedDropDown child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.MinimumColumnCountProperty">
            <summary>
            Reference to the MinimumColumnCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.MaximumColumnCountProperty">
            <summary>
            Reference to the MaximumColumnCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.ColumnCountStepProperty">
            <summary>
            Reference to the ColumnCountStep property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallery.MinimumPopupColumnCountProperty">
            <summary>
            Reference to the MinimumPopupColumnCount property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NRibbonGallery.SelectedIndexChanged">
            <summary>
            Occurs when the selected index of this gallery's table picker changes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon gallery.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon gallery. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.CollapseToMedium">
            <summary>
            Determines when the gallery should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.CollapseToSmall">
            <summary>
            Determines when the gallery should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.TablePicker">
            <summary>
            Gets or sets the table picker hosted in this ribbon gallery.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.SelectedIndex">
            <summary>
            Gets or sets the selected index of the table picker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.SelectedCell">
            <summary>
            Gets or sets the currently selected table picker cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.Spinner">
            <summary>
            Gets the Spinner child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.CollapsedDropDown">
            <summary>
            Gets the button that is shown when this ribbon gallery is collapsed (i.e. when it is in small state).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.Icon">
            <summary>
            Gets or sets the image of the collapses drop down of this ribbon gallery, which is shown
            when it is in small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.Text">
            <summary>
            Gets or sets the text of the collapsed drop down of this ribbon gallery, which is shown
            when it is in small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.MinimumColumnCount">
            <summary>
            Gets or sets the minimum number of columns this gallery should show. If the available area is
            not enough to fit this number of columns, the gallery goes into small (i.e. collapsed) state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.MaximumColumnCount">
            <summary>
            Gets or sets the maximum number of columns this gallery should show.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.ColumnCountStep">
            <summary>
            Gets or sets the number of additional columns this gallery should try to show if
            there is available space.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.MinimumPopupColumnCount">
            <summary>
            Gets or sets the minimum number of columns to show in the popup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallery.PopupMenu">
            <summary>
            Gets or sets the menu shown at the bottom of the popup.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonGallerySpinner">
            <summary>
            Represents a ribbon gallery spinner.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.MeasureContent(System.Boolean)">
            <summary>
            Measures the buttons of this ribbon gallery spinner.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the buttons of this ribbon gallery spinner.
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.OnPageUpButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the page up button was clicked. 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.OnPageDownButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the page down button was clicked. 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonGallerySpinner.OnDropDownButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the drop down button was clicked. 
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallerySpinner.NRibbonGallerySpinnerSchema">
            <summary>
            Schema associated with NRibbonGallerySpinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallerySpinner.PageUpButtonChild">
            <summary>
            Reference to the PageUpButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallerySpinner.PageDownButtonChild">
            <summary>
            Reference to the PageDownButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonGallerySpinner.DropDownButtonChild">
            <summary>
            Reference to the DropDownButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallerySpinner.PageUpButton">
            <summary>
            Gets the PageUpButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallerySpinner.PageDownButton">
            <summary>
            Gets the PageDownButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonGallerySpinner.DropDownButton">
            <summary>
            Gets the DropDownButton child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonContentDropDown">
            <summary>
            Represents a ribbon drop down that shows a widget in a popup window when clicked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NContentDropDown">
            <summary>
            A content popup host, which also has a symbol (typically a down arrow).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NContentDropDown.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentDropDown.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NContentDropDown.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NContentDropDown.OnClick">
            <summary>
            Called when the popup drop down has been clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentDropDown.NContentDropDownSchema">
            <summary>
            Schema associated with NContentDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentDropDown.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentDropDown.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NContentDropDown.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentDropDown.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentDropDown.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this popup host.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NContentDropDown.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonContentDropDown.NRibbonContentDropDownSchema">
            <summary>
            Schema associated with NRibbonContentDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonContentDropDown.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonContentDropDown.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonContentDropDown.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonContentDropDown.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon content drop down in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon content drop down in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonContentDropDown.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon content drop down in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon content drop down.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon content drop down. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.CollapseToMedium">
            <summary>
            Determines when the content drop down should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.CollapseToSmall">
            <summary>
            Determines when the content drop down should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonContentDropDown.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon content drop down.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonMenuDropDown">
            <summary>
            Represents a ribbon drop down menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonMenuDropDown.NRibbonMenuDropDownSchema">
            <summary>
            Schema associated with NRibbonMenuDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonMenuDropDown.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonMenuDropDown.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonMenuDropDown.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonMenuDropDown.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon menu drop down in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon menu drop down in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonMenuDropDown.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon menu drop down in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon menu drop down.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.InitialState">
            <summary>
            Gets or sets the initial state of the ribbon menu drop down. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.CollapseToMedium">
            <summary>
            Determines when the menu drop down should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.CollapseToSmall">
            <summary>
            Determines when the menu drop down should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonMenuDropDown.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon menu drop down.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonSeparator">
            <summary>
            A widget that represents a separator in a ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSeparator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSeparator.NRibbonSeparatorSchema">
            <summary>
            Schema associated with NRibbonSeparator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSeparator.IsLastWidgetOnLaneProperty">
            <summary>
            Reference to the IsLastWidgetOnLane property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSeparator.IsLastWidgetOnLane">
            <summary>
            Gets whether this separator is the last widget on a ribbon wrap flow layout lane.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRibbonSplitButton">
            <summary>
            Represents a ribbon split button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitButton">
            <summary>
            A drop down edit, which serves as base class for all split buttons.
            The item slot is filled with an action button, which generates a Click event on behalf of the split button.
            </summary>
            <remarks>
            Split buttons are used to consolidate a set of variations of a command, especially when one of the command variations is used most of the time.
            The content of the ActionButton is populated with visual information describing the current action that will be performed by the button, 
            while the drop down part is dynamically populated with the available options for the specific type of split button.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.OnOtherButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a button different from the drop down button that is contained inside the edit has been clicked.
            This implementation handles the click, if it originates from the ActionButton and stops it propagation.
            It then raises the click event of the split button itself.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.OnClick">
            <summary>
            Called when the action button has been clicked. Raises the Click event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButton.CreateActionButton">
            <summary>
            Called by the split button constructor to initalize the content of the action button
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitButton.NSplitButtonSchema">
            <summary>
            Schema associated with NSplitButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitButton.ActionButtonChild">
            <summary>
            Reference to the ActionButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitButton.ClickEvent">
            <summary>
            Reference to the Click event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSplitButton.Click">
            <summary>
            Occurs when the action button of the split button has been clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitButton.ActionButton">
            <summary>
            Gets or sets the action button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <param name="smallImage"></param>
            <param name="imageTextSpacing"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.GetSize(System.Int32)">
            <summary>
            Gets the size of the widget when in the given state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.GetStateForGroupState(System.Int32)">
            <summary>
            Gets the state this widget should be in when its owner group is in the specified state.
            </summary>
            <param name="groupState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.Nevron#Nov#UI#INRibbonWidget#OnCurrentStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CurrentState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.Nevron#Nov#UI#INRibbonWidget#OnInitialStateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the InitialState property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.CreatePopupContent">
            <summary>
            Overriden to return null, because this method is not used by the ribbon split button.
            The popup content of the ribbon split button should be set through the Popup.Content property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.IsPopupEmpty">
            <summary>
            Checks whether ths popup of this ribbon split button is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns>True if the opening should continue.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.OnPopupClosed">
            <summary>
            Called when the popup has been closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSplitButton.NRibbonSplitButtonSchema">
            <summary>
            Schema associated with NRibbonSplitButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSplitButton.CurrentStateProperty">
            <summary>
            Reference to the CurrentState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSplitButton.InitialStateProperty">
            <summary>
            Reference to the InitialState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSplitButton.CollapseToMediumProperty">
            <summary>
            Reference to the CollapseToMedium property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRibbonSplitButton.CollapseToSmallProperty">
            <summary>
            Reference to the CollapseToSmall property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.CreateSmall(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in small state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.CreateMedium(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in medium state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="smallImage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRibbonSplitButton.CreateLarge(System.String,Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates a ribbon button in large state with the given image and text.
            </summary>
            <param name="text"></param>
            <param name="largeImage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.CurrentState">
            <summary>
            Gets or sets the current state of the ribbon button.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.InitialState">
            <summary>
            Gets or sets the initial state of a ribbon button. This is also its largest allowed state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.CollapseToMedium">
            <summary>
            Determines when the button should collapse to Medium state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.CollapseToSmall">
            <summary>
            Determines when the button should collapse to Small state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.LargeImage">
            <summary>
            Gets or sets the image that is shown in Large states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.SmallImage">
            <summary>
            Gets or sets the image that is shown in Medium and Small states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.Text">
            <summary>
            Gets or sets the text that is shown in Large and Medium states.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRibbonSplitButton.ImageTextSpacing">
            <summary>
            Gets or sets spacing in DIPs between the image and the text of this ribbon button.
            By default set to 3.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStatusBarBuilder">
            <summary>
            Creates a status bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBarBuilder.#ctor(System.String)">
            <summary>
            Creates a status bar with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBarBuilder.Create">
            <summary>
            Creates a status bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBarBuilder.CreateStatusBarLabel(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a label, whose text is updated by the command action associated with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NStatusBarPane">
            <summary>
            A content holder widget that resides in the Items collection of a status bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBarPane.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBarPane.#ctor(System.Object)">
            <summary>
            Creates a status bar pane and sets it content to a widget created from the given object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NStatusBarPane.NStatusBarPaneSchema">
            <summary>
            Schema associated with NStatusBarPane.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderStylePicker">
            <summary>
            A picker for selecting a predefined border style.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTablePicker">
            <summary>
            A toggle button group, the items of which are arranged in a table flow fashion.
            The table picker items are primary NTablePickerCell elements, but can virtually be any other widgets, too.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.NavigateToPrevHorizontalCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.NavigateToNextHorizontalCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.NavigateToPrevVerticalCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.NavigateToNextVerticalCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.NavigateToCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Navigates to the specified cell
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the key down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.MeasureContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePicker.GetLayoutObjects">
            <summary>
            Gets a layout object list, that contains all child elements that are not collapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePicker.NTablePickerSchema">
            <summary>
            Schema associated with NCellPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePicker.ColumnCountProperty">
            <summary>
            Reference to the ColumnCount property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePicker.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePicker.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePicker.CyclicKeyboardNavigationProperty">
            <summary>
            Reference to the CyclicKeyboardNavigation property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePicker.ColumnCount">
            <summary>
            Gets or sets the max number of columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePicker.RowCount">
            <summary>
            Gets the current number of rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePicker.HorizontalSpacing">
            <summary>
            Gets or sets the minimal horizontal spacing between the arranged items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePicker.VerticalSpacing">
            <summary>
            Gets or sets the minimal vertical spacing between the arranged items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePicker.CyclicKeyboardNavigation">
            <summary>
            Determines whether the first cell should be highlighted when the user is at the last
            cell and presses the "Navigate to Next Cell" key or whether the last cell should be
            highlighted when the user is at the first cell and presses the "Navigate to Previous Cell"
            key. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderStylePicker.NBorderStylePickerSchema">
            <summary>
            Schema associated with NBorderStylePicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderStylePicker.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderStylePicker.RoundingProperty">
            <summary>
            Reference to the Rounding property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderStylePicker.Color">
            <summary>
            Gets or sets the value of the Color property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderStylePicker.Rounding">
            <summary>
            Gets or sets the the border's corner rounding in dips (i.e. the radius at the border corners).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderStylePicker.SelectedBorderStyle">
            <summary>
            Gets or sets the currently selected border style.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSelectPredefinedBorderCommand">
            <summary>
            A command, which displays a dialog box that lets the user select
            a predefined border and its thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelectPredefinedBorderCommand.Execute">
            <summary>
            Overiden to display a dialog box that lets the user select a predefined border
            and its thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelectPredefinedBorderCommand.CanExecute">
            <summary>
            Always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSelectPredefinedBorderCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NRedoCommandAction">
            <summary>
            A command action that redos a single or multiple history commands
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandAction">
            <summary>
            Serves as base class for all command actions that can be executed in a reaction to keyboard gestures and command source events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandAction.GetCommand">
            <summary>
            Must override to return the command associated with the action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action towards the specified target and with the specified parameter.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command action can be executed with the specified parameter and for the specified target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandAction.NCommandActionSchema">
            <summary>
            Schema associated with NCommandAction
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandAction.EmptyParameter">
            <summary>
            The empty parameter object, which is passed to command actions, when there is no available parameter
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandAction.OwnerCommander">
            <summary>
            Gets a reference to the commander to which the action belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandAction.OwnerInputElement">
            <summary>
            Gets a reference to the owner input element
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRedoCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRedoCommandAction.GetCommand">
            <summary>
            Overriden to return the predefined NCommand.RedoCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRedoCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRedoCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRedoCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NRedoCommandAction.NRedoCommandActionSchema">
            <summary>
            Schema associated with NRedoCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUndoCommandAction">
            <summary>
            A command action that undos a single or multiple history commands
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUndoCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUndoCommandAction.GetCommand">
            <summary>
            Overriden to return the predefined NCommand.UndoCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUndoCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUndoCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUndoCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NUndoCommandAction.NUndoCommandActionSchema">
            <summary>
            Schema associated with NUndoCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NActionListSplitButtonCommandSource">
            <summary>
            A command source that can be applied to NActionListSplitButton widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.OnActionButtonDoActions(Nevron.Nov.UI.NActionListSplitButtonDoActionsEventArgs)">
            <summary>
            Called when the action button needs to perform multiple actions.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonCommandSource.OnActionButtonQueryActions(Nevron.Nov.UI.NActionListSplitButtonQueryActionsEventArgs)">
            <summary>
            Called when the action button queries for drop down list action widgets
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButtonCommandSource.NActionListSplitButtonCommandSourceSchema">
            <summary>
            Schema associated with NActionListSplitButtonCommandSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NEndActionEventArgs">
            <summary>
            Event args that are commply used in abortable actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NEndActionEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="aborted"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NEndActionEventArgs.Aborted">
            <summary>
            Specifies the action was aborted by the user or not
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentBoxSurfaceDocument">
            <summary>
            Represents the document contained inside a document box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBoxSurfaceDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentBoxSurfaceDocument.NDocumentBoxSurfaceDocumentSchema">
            <summary>
            Schema associated with NDocumentBoxSurfaceDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NActionListSplitButton">
            <summary>
            A split button, that that is typically used to perform undo/redo commands.
            You will typically assign a NActionListSplitButtonCommandSource to this type of split button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this style split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.CreatePopupContent">
            <summary>
            Overriden to return a new NMenu instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.IsPopupContentStatic">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.OnQueryActions">
            <summary>
            Raises the QueryActions event and returns the list of action widgets populated by the event subscribers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.OnDoActions(System.Int32)">
            <summary>
            Called when the action button needs to perform multiple actions.
            Raises the DoActions event.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButton.OnImageChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Image property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButton.NActionListSplitButtonSchema">
            <summary>
            Schema associated with NActionListSplitButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButton.QueryActionsEvent">
            <summary>
            Reference to the QueryActions event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButton.DoActionsEvent">
            <summary>
            Reference to the DoActions event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButton.ImageProperty">
            <summary>
            Reference to the Image property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NActionListSplitButton.QueryActions">
            <summary>
            Occurs when the action button is about to display a drop down list box, and needs to populate it with action widgets.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NActionListSplitButton.DoActions">
            <summary>
            Occurs when the action button has closed its drop down menu and multiple actions need to be performed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButton.Image">
            <summary>
            Gets or sets the image shown in the action button of this split button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButton.Items">
            <summary>
            A shortcut property, that gets the Menu.Items collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButton.Menu">
            <summary>
            A shortcut property, that casts the popup content to a NMenu instance
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NActionListSplitButtonQueryActionsEventArgs">
            <summary>
            Raised as arguments of NActionListSplitButton.QueryActions event.
            The consumer must populate a list of widgets, that represent the sequencial actions that need to be performed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonQueryActionsEventArgs.#ctor(Nevron.Nov.UI.NActionListSplitButton)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButtonQueryActionsEventArgs.ActionWidgetList">
            <summary>
            Gets the list that consumers must populate with widgets representing the actions 
            than need to be displayed by the NActionListSplitButton drop down list box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NActionListSplitButtonDoActionsEventArgs">
            <summary>
            Raised as arguments of NActionListSplitButton.DoActions event.
            The consumer must execute the number of actions that were selected by the user.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonDoActionsEventArgs.#ctor(Nevron.Nov.UI.NActionListSplitButton,System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
            <param name="count"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButtonDoActionsEventArgs.ActionCount">
            <summary>
            Gets the count of actions that need to be performed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NActionListSplitButtonListBox">
            <summary>
            Represents the list box of an NActionListSplitButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NListBox">
            <summary>
            Represents a widget, which contains a list of selectable items.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NVScrollItemsBase`1">
            <summary>
            A widget, which allows for the scrolling of vertically arranged items.
            It measures to fit the content without scrollbars, 
            but if this is not possible, it will display scrollbars.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollContentBase">
            <summary>
            A widget, which allows for the scrolling of arbitrary content.
            It measures to fit the content without scrollbars, but if this is not possible, it will display scrollbars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the viewport in the specified direction, with the specified amount of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.MeasureContent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the content of the viewport.
            </summary>
            <param name="desiredMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the desired size for the specified adorner element
            </summary>
            <param name="compassDirection"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetBottomSideAdorner">
            <summary>
            Overriden return an instance of a NHScrollBar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetRightSideAdorner">
            <summary>
            Overriden return an instance of a NVScrollBar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetHScrollBar">
            <summary>
            Overriden to return the HScrollBar child
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetVScrollBar">
            <summary>
            Overriden to return the VScrollBar child
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetHScrollMode">
            <summary>
            Overriden to return the value of the HScrollMode property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetVScrollMode">
            <summary>
            Overriden to return the value of the VScrollMode property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetNoScrollHAlign">
            <summary>
            Overriden to return the value of the NoScrollHAlign property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetNoScrollVAlign">
            <summary>
            Overriden to return the value of the NoScrollVAlign property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetHScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the HScrollbar for the viewport parameters, in case the HScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollbar for the viewport parameters, in case the VScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetViewportOrigin">
            <summary>
            Overriden to return the value of the ViewportOrigin property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to set the value of the ViewportOrigin property
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetZoomMode">
            <summary>
            Overriden to return Normal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.GetZoomFactor">
            <summary>
            Overriden to return 1.0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.SetZoomFactor(System.Double)">
            <summary>
            Overriden to throw an exception. The zoom factor must never be set in normal zoom mode
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContentBase.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            Overriden to compute the area that remains after the H and V srollbars subtract space from the content area.
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrollBar"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.NScrollContentBaseSchema">
            <summary>
            Schema associated with NScrollContentBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.HScrollBarChild">
            <summary>
            Reference to the HScrollBar child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.VScrollBarChild">
            <summary>
            Reference to the VScrollBar child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.ViewportOriginXProperty">
            <summary>
            Reference to the ViewportOriginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.ViewportOriginYProperty">
            <summary>
            Reference to the ViewportOriginY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.ViewportOriginSnapToPixelProperty">
            <summary>
            Reference to the ViewportOriginSnapToPixelProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.HScrollModeProperty">
            <summary>
            Reference to the HScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.VScrollModeProperty">
            <summary>
            Reference to the VScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.NoScrollHAlignProperty">
            <summary>
            Reference to the NoScrollHAlign property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.NoScrollVAlignProperty">
            <summary>
            Reference to the NoScrollVAlign property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.SmallHScrollChangeProperty">
            <summary>
            Reference to the SmallHScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContentBase.SmallVScrollChangeProperty">
            <summary>
            Reference to the SmallVScrollChange property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.HScrollBar">
            <summary>
            Gets or sets the HScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.VScrollBar">
            <summary>
            Gets or sets the VScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.HScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.VScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.NoScrollHAlign">
            <summary>
            Gets or sets the horizontal content alignment, when a horizontal scrollbar is not, or must not be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.NoScrollVAlign">
            <summary>
            Gets or sets the vertical content alignment, when a vertical scrollbar is not, or must not be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.SmallHScrollChange">
            <summary>
            Gets or sets the small horizontal scroll change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.SmallVScrollChange">
            <summary>
            Gets or sets the small vertical scroll change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.ViewportOriginX">
            <summary>
            Gets or sets the viewport origin X value,
            which is the point from the content coordinate 
            system that is mapped to the window origin.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.ViewportOriginY">
            <summary>
            Gets or sets the viewport origin Y value,
            which is the point from the content coordinate 
            system that is mapped to the window origin.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.ViewportOrigin">
            <summary>
            Gets or sets the viewport origin,
            which is the point from the content coordinate 
            system that is mapped to the window origin.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContentBase.ViewportOriginSnapToPixel">
            <summary>
            Gets or sets whether the viewport origin is snapped to exact pixel values. By default true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToDownItem(`0)">
            <summary>
            Navigates to the item below the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToUpItem(`0)">
            <summary>
            Navigates to the item above the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToPageDownItem(`0)">
            <summary>
            Navigates to the item one page below the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToPageUpItem(`0)">
            <summary>
            Navigates to the item one page above the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToFirstItem">
            <summary>
            Navigates to the first item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToLastItem">
            <summary>
            Navigates to the last item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.NavigateToItem(`0)">
            <summary>
            Navigates to the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollbar for the viewport parameters, in case the VScrollBar is visible.
            Overriden to provide support for the integral vertical scrolling of the list box
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.OnVScrollBarScroll(Nevron.Nov.UI.NScrollEventArgs)">
            <summary>
            Called when the VScrollbar is scrolled. Updates the viewport origin from the scrollbar value.
            Overriden to provide support for the integral vertical scrolling of the list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down event.
            Overriden to provide support for keyboard navigation.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Default handler for the mouse wheel event.
            Overriden to provide support for mouse wheel scrolling.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetNavigationAnchorItem">
            <summary>
            Gets the anchor item for keyboard navigation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetScrollableItemsCount">
            <summary>
            Gets the count of items that can be scrolled through
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetVisibleItemsCount">
            <summary>
            Gets the count of items that are currently visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetScrollableItemIndex(`0)">
            <summary>
            Gets the scrolling index of the specified item in the scrollbale items list
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetScrollableItemAt(System.Int32)">
            <summary>
            Gets the scrollable item at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetFirstVisibleItemIndex(System.Double)">
            <summary>
            Given an Y coordinate in viewport coordinates, returns the index of the first visible item in the scrollbable items list.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.GetLastVisibleItemIndex(System.Double)">
            <summary>
            Given an Y coordinate in viewport coordinates, returns the index of the last visible item in the scrollbable items list.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NVScrollItemsBase`1.SetFirstVisibleItemIndex(System.Int32)">
            <summary>
            Sets the first visible item from the scrollable items by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NVScrollItemsBase`1.NVScrollItemsBaseSchema">
            <summary>
            Schema associated with NVScrollItemsBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NVScrollItemsBase`1.IntegralVScrollProperty">
            <summary>
            Reference to the IntegralVScroll property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NVScrollItemsBase`1.IntegralVScroll">
            <summary>
            Gets or sets whether the vertical scrolling behavior is integral.
            When set to true the vertical scrollbar will scroll on descrete items, 
            and its thumb will be sized to the count of currently visible items.
            When set to false the vertical scrollbar will work in smooth scrolling mode 
            and its thumb will be sized to the currently visible space from the items area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.FillFromEnum``1">
            <summary>
            Fills the list box with the options from the specified enum. Assigns the
            corresponding enum value to the Tag property of each list box item.
            </summary>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.FillFromArray``1(``0[])">
            <summary>
            Fills the list box with the values of the specified array. Assigns the
            corresponding array value to the Tag property of each list box item.
            </summary>
            <typeparam name="TValue">The type of the array values.</typeparam>
            <param name="values">The values to fill the list box with.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.IndexOfItemWithTag(System.Object)">
            <summary>
            Gets the index of the first list box item whose Tag property is equal to the given value.
            </summary>
            <param name="value">The value to search for. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.IndexOfItemWithText(System.String,System.StringComparison)">
            <summary>
            Gets the index of the first list box item with the given text or -1 if an item
            with such text is not found.
            </summary>
            <param name="text"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.EnsureVisible(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Ensures that the specified item is visible.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.NavigateToItem(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Navigates to the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.NavigateToNextItemStartingWith(System.Char)">
            <summary>
            Navigates to the next item whose text starts with the given char (case insensitive check is performed).
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.OnItemSelected(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Called by the selection, when an item has been selected.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.OnItemDeselected(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Called by the selection, when an item has been deselected.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetTotalViewport">
            <summary>
            Overriden to return the desired size of the items container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetScrollableItemsCount">
            <summary>
            Gets the count of items that can be scrolled through
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetVisibleItemsCount">
            <summary>
            Gets the count of items that are currently visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetScrollableItemIndex(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Gets the scrolling index of the specified item in the scrollbale items list
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetScrollableItemAt(System.Int32)">
            <summary>
            Gets the scrollable item at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetFirstVisibleItemIndex(System.Double)">
            <summary>
            Given a top Y coordinate in viewport coordinates, returns the index of the first visible item in the scrollbable items list.
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetLastVisibleItemIndex(System.Double)">
            <summary>
            Given a bottom Y coordinate in viewport coordinates, returns the index of the last visible item in the scrollbable items list.
            </summary>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.SetFirstVisibleItemIndex(System.Int32)">
            <summary>
            Sets the first visible item from the scrollable items by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetNavigationAnchorItem">
            <summary>
            Gets the anchor element for keyboard navigation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Overriden to provide support for navigation based on the first character of list box items' text.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.GetFocusedItem">
            <summary>
            Gets the list box item, which currently has the focus
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.UpdateSelection(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Updates the selection with the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NListBox.NListBoxSchema">
            <summary>
            Schema associated with NListBox
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NListBox.ItemsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NListBox.SelectionProperty">
            <summary>
            Reference to the Selection property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBox.Items">
            <summary>
            Gets or sets the items collection of the list box
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBox.Selection">
            <summary>
            Gets or sets the list box selection
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBox.RangeSelectionAnchorIndex">
            <summary>
            Gets or sets the range selection anchor index
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NListBox.NListBoxDesigner">
            <summary>
            The designer for list boxes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBox.NListBoxDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonListBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonListBox.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when a mouse button is released over the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonListBox.OnMouseEnter(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Called when the mouse enters the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonListBox.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NActionListSplitButtonListBox.UpdateSelection(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NActionListSplitButtonListBox.NActionListSplitButtonListBoxSchema">
            <summary>
            Schema associated with NActionListSplitButtonListBox
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NActionListSplitButtonListBox.OwnerActionListSplitButton">
            <summary>
            Gets the action list split button that owns this list box
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderSplitButton">
            <summary>
            A style split button, which is used to edit a border and its thickness.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStyleSplitButton`1">
            <summary>
            A split button, that serves as base class for split buttons editing different appearance style attributes such as fill, stroke, shadow etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.Nevron#Nov#INStateCopyable#CopyState(Nevron.Nov.Dom.NNode)">
            <summary>
            Assigns the selected value of the given source style split button to this style split button.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this style split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.CreatePopupContent">
            <summary>
            Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.CreateActionButton">
            <summary>
            Overriden to perform the default initialization of the ActionButton content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.CreateMainDropDownWidget">
            <summary>
            Must override to create the main drop down widget
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnSelectedValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the selected value has changed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnImageChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Image property has changed. Updates the image in the image holder part of the action button.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.UpdateButtonPreview">
            <summary>
            Updates the preview in the button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.UpdatePopupPreview">
            <summary>
            Updates the preview in the popup window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnAutomaticButtonChecked">
            <summary>
            Called when the "Automatic" radio button has been checked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnNoneButtonChecked">
            <summary>
            Called when the "None" radio button has been checked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnCustomButtonChecked">
            <summary>
            Called when the "Custom" radio button has been checked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the more options button has been clicked
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.CreateActionButtonImageBox(Nevron.Nov.Graphics.NImage)">
            <summary>
            Creates the image box of the action button. This method is called also when the
            Image property of the style split button changes.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.m_MainDropDownWidget">
            <summary>
            The main drop down widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.m_EditedValue">
            <summary>
            The currently edited value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.NStyleSplitButtonSchema">
            <summary>
            Schema associated with NStyleSplitButton
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.SelectedValueProperty">
            <summary>
            Reference to the SelectedValue property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.HasAutomaticButtonProperty">
            <summary>
            Reference to the HasAutomaticButton property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.HasMoreOptionsButtonProperty">
            <summary>
            Reference to the HasMoreOptionsButton property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.HasNoneButtonProperty">
            <summary>
            Reference to the HasNoneButton property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.ImageProperty">
            <summary>
            Reference to the Image property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.MoreOptionsImageProperty">
            <summary>
            Reference to the MoreOptionsImage property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NStyleSplitButton`1.SelectedValueChanged">
            <summary>
            Occurs when the SelectedValue property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.SelectedValue">
            <summary>
            Gets or sets the selected value. The selected value is updated from the result of the drop down editing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.HasAutomaticButton">
            <summary>
            Gets or sets whether the drop down shows an Automatic toggle button.
            When the button is checked, the selected value Automatic flag is raised to true.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.HasNoneButton">
            <summary>
            Gets or sets whether the drop down shows a None toggle button.
            When the button is checked, the selected value is updated to the value provided by the GetNoneValue protected method.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.HasMoreOptionsButton">
            <summary>
            Gets or sets whether the drop down shows a More Options button.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.Image">
            <summary>
            Gets or sets the image shown in the action button of this split button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.MoreOptionsImage">
            <summary>
            Gets or sets the image shown in the "More Options..." button of the split button popup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NStyleSplitButton`1.PreviewFactory">
            <summary>
            Gets the preview factory associated with the style this split button is used to edit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStyleSplitButton`1.NSelectedValue">
            <summary>
            The selected value of a style split button
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStyleSplitButton`1.NSelectedValue.#ctor(System.Boolean,`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="automatic"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.NSelectedValue.Automatic">
            <summary>
            Whether the user picked the automatic option
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStyleSplitButton`1.NSelectedValue.Value">
            <summary>
            The actual value associated with the user selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSplitButton.CreateMainDropDownWidget">
            <summary>
            Overriden to create the main drop down fill picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSplitButton.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSplitButton.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the "More Options" button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderSplitButton.NBorderSplitButtonSchema">
            <summary>
            Schema associated with NBorderSplitButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NViewportAutoScroller">
            <summary>
            The NViewportAutoScroller element is used to provide a NViewportBase instance with autoscroll capabilities.
            </summary>
            <remarks>
            A reference to this class can be obtained from the AutoScroller property of the NViewportBase class. 
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.OnDraggingPoint">
            <summary>
            Called when a point is dragged in the viewport
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.OnDraggingArea(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Called when an area is dragged in the viewport
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.OnDraggingEnded">
            <summary>
            Called by the view when a drag operation has ended
            </summary>
            <remarks>
            This implementation stops the auto scrolling.
            </remarks> 
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.Start(Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Starts autoscrolling in the specified direction
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NViewportAutoScroller.Stop">
            <summary>
            Stops the autoscrolling
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportAutoScroller.NViewportAutoScrollerSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportAutoScroller.ModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportAutoScroller.MarginsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportAutoScroller.DelayProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NViewportAutoScroller.IntervalProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.Mode">
            <summary>
            Gets or sets the mode in which the auto scroller operates. By default set to MouseInScrollMargins.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.Margins">
            <summary>
            Controls the margins of the auto scroll area
            </summary>
            <remarks>
            The specified value must contain only positive margins and is measured in pixels. 
            By default all margins are set to 16
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.Delay">
            <summary>
            Gets or sets the auto scroll delay (in milliseconds). 
            Represents the delay before autoscrolling starts. By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.Interval">
            <summary>
            Gets or sets the auto scroll interval (in milliseconds).
            Represents the speed of the autoscrolling. By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.IsScrolling">
            <summary>
            Determines whether the autoscrolling is currently being performed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NViewportAutoScroller.OwnerViewport">
            <summary>
            Gets the parent viewport.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPathSymbolShape">
            <summary>
            Represents a rectangle symbol shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFillableSymbolShape">
            <summary>
            Represents a shape of a symbol. Serves as base class for rectangle, ellipse and path symbol shapes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolShape">
            <summary>
            Represents a shape of a symbol. Serves as base class for rectangle, ellipse and path symbol shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolShape.#ctor(Nevron.Nov.UI.NSymbolShape)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolShape.Paint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Must override to paint the shape inside the specified bounds.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Must override to get the normal bounds of this shape.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolShape.NSymbolShapeSchema">
            <summary>
            Schema associated with NSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolShape.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolShape.Stroke">
            <summary>
            Gets or sets the stroke of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillableSymbolShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillableSymbolShape.#ctor(Nevron.Nov.UI.NFillableSymbolShape)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillableSymbolShape.Paint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Must override to paint the shape.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NFillableSymbolShape.NFillableSymbolShapeSchema">
            <summary>
            Schema associated with NFillableSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFillableSymbolShape.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFillableSymbolShape.Fill">
            <summary>
            Gets or sets the filling of the shape
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPathSymbolShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPathSymbolShape.#ctor(Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Initializer constructor
            </summary>
            <param name="path"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPathSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPathSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NPathSymbolShape.NPathSymbolShapeSchema">
            <summary>
            Schema associated with NPathSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPathSymbolShape.PointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPathSymbolShape.FillRuleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPathSymbolShape.Points">
            <summary>
            Gets or sets the path points
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPathSymbolShape.FillRule">
            <summary>
            Gets or sets the path fill rule
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPolylineSymbolShape">
            <summary>
            Represents a polyline symbol shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPolylineSymbolShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPolylineSymbolShape.#ctor(Nevron.Nov.Dom.NDomArray{Nevron.Nov.Graphics.NPoint})">
            <summary>
            Initializer constructor.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPolylineSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this shape and returns true on success.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPolylineSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NPolylineSymbolShape.NPolylineSymbolShapeSchema">
            <summary>
            Schema associated with NPolylineSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPolylineSymbolShape.PointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPolylineSymbolShape.Points">
            <summary>
            Gets or sets the polyline points
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPolygonSymbolShape">
            <summary>
            Represents a rectangle symbol shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPolygonSymbolShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPolygonSymbolShape.#ctor(Nevron.Nov.Graphics.NPoint[],Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="points"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPolygonSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this shape and returns true on success.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPolygonSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NPolygonSymbolShape.NPolygonSymbolShapeSchema">
            <summary>
            Schema associated with NPolygonSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPolygonSymbolShape.PointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPolygonSymbolShape.FillRuleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPolygonSymbolShape.Points">
            <summary>
            Gets or sets the polygon points
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPolygonSymbolShape.FillRule">
            <summary>
            Gets or sets the polygon fill rule
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLineSymbolShape">
            <summary>
            Represents a line symbol shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLineSymbolShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLineSymbolShape.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NLineSymbolShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NLineSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLineSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NLineSymbolShape.NLineSymbolShapeSchema">
            <summary>
            Schema associated with NLineSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLineSymbolShape.StartPointProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLineSymbolShape.EndPointProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLineSymbolShape.StartPoint">
            <summary>
            Gets or sets the start point of the line
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLineSymbolShape.EndPoint">
            <summary>
            Gets or sets the end point of the line
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NEllipseSymbolShape">
            <summary>
            Represents a rectangle symbol shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NEllipseSymbolShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NEllipseSymbolShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NEllipseSymbolShape.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NEllipseSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this shape and returns true on success.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NEllipseSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NEllipseSymbolShape.NEllipseSymbolShapeSchema">
            <summary>
            Schema associated with NEllipseSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NEllipseSymbolShape.RectangleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NEllipseSymbolShape.Rectangle">
            <summary>
            Gets or sets the rectangle that bounds the ellipse
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRectangleSymbolShape">
            <summary>
            Represents a rectangle symbol shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRectangleSymbolShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRectangleSymbolShape.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRectangleSymbolShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRectangleSymbolShape.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this shape and returns true on success.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NRectangleSymbolShape.PaintGeometry(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints this shape using the given paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NRectangleSymbolShape.NRectangleSymbolShapeSchema">
            <summary>
            Schema associated with NRectangleSymbolShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRectangleSymbolShape.RectangleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRectangleSymbolShape.Rectangle">
            <summary>
            Gets or sets the rectangle
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbol">
            <summary>
            Represents a symbol (glyph) that certain UI elements can render as part of their background rendering.
            It is a collection of symbol shapes, meaning that a symbol can be composed by several shapes with different style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.#ctor(Nevron.Nov.UI.NSymbol)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.Paint(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Paints the symbol in the specified bounds.
            </summary>
            <param name="visitor"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.GetBounds">
            <summary>
            Gets the bounds of this symbol, that are the accumulated bounds of all shapes contained in it 
            and finally padded with the value of the Padding property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called whenever the children of a node have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbol.NSymbolSchema">
            <summary>
            Schema associated with NSymbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbol.PaddingProperty">
            <summary>
            Reference to the Padding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbol.TextureMappingProperty">
            <summary>
            Reference to the TextureMapping property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbol.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbol.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.Create(Nevron.Nov.UI.ENSymbolShape,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a symbol with the given predefined shape, size and color.
            </summary>
            <param name="shape"></param>
            <param name="size"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbol.Create(Nevron.Nov.UI.ENSymbolShape,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NFill,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Creates a symbol with the given predefined shape, size, fill and stroke.
            </summary>
            <param name="shape"></param>
            <param name="size"></param>
            <param name="fill"></param>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbol.DesiredSize">
            <summary>
            Gets the desired size of the symbol
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbol.Padding">
            <summary>
            Gets or sets the padding applied to the symbol bounds.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbol.TextureMapping">
            <summary>
            Gets or sets the way in which the shapes are mapped to the area filled by the symbol.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbol.Stroke">
            <summary>
            Gets or sets the stroke of the symbol
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbol.Fill">
            <summary>
            Gets or sets the filling of the symbol
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSixColorsBorderCorner">
            <summary>
            Represents a border corner that is filled with six colors.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderCorner">
            <summary>
            Represents a border corner that displays a border corner brick.
            Each border corner can be drawn with different inner and outer strokes and filling.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderPart">
            <summary>
            Represents a border part and serves as base class for border sides and corners.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderPart.#ctor(Nevron.Nov.UI.NBorderPart)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderPart.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPart.NBorderPartSchema">
            <summary>
            Schema associated with NBorderPart
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPart.OuterStrokeProperty">
            <summary>
            Reference to the OuterStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPart.MiddleStrokeProperty">
            <summary>
            Reference to the MiddleStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPart.InnerStrokeProperty">
            <summary>
            Reference to the InnerStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPart.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderPart.IsEmpty">
            <summary>
            Checks whether this border part's fill and stroke are both null. If yes, then this border
            won't be painted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderPart.OuterStroke">
            <summary>
            Gets or sets the outer stroke of the border part.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderPart.MiddleStroke">
            <summary>
            Gets or sets the middle stroke of the bortder part.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderPart.InnerStroke">
            <summary>
            Gets or sets the inner stroke of the border part.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderPart.Fill">
            <summary>
            Gets or sets the filling of the border part
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.#ctor(Nevron.Nov.UI.NBorderCorner)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.SetInnerRadiuses(System.Double)">
            <summary>
            Sets the InnerXRadius and InnerYRadius properties to the specified value
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.SetOuterRadiuses(System.Double)">
            <summary>
            Sets the OuterXRadius and OuterYRadius properties to the specified value
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.SetRadiuses(System.Double)">
            <summary>
            Sets the all radiues (Inner and Outer X and Y radiuses) to the specified value
            </summary>
            <param name="radius"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderCorner.NBorderCornerSchema">
            <summary>
            Schema associated with NBorderCorner
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderCorner.InnerXRadiusProperty">
            <summary>
            Reference to the InnerXRadius property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderCorner.InnerYRadiusProperty">
            <summary>
            Reference to the InnerYRadius property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderCorner.OuterXRadiusProperty">
            <summary>
            Reference to the OuterXRadius property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderCorner.OuterYRadiusProperty">
            <summary>
            Reference to the OuterYRadius property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderCorner.InnerXRadius">
            <summary>
            Gets or sets the InnerX radius
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderCorner.InnerYRadius">
            <summary>
            Gets or sets the InnerY radius
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderCorner.OuterXRadius">
            <summary>
            Gets or sets the OuterX radius
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorderCorner.OuterYRadius">
            <summary>
            Gets or sets the OuterY radius
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderCorner.NBorderCornerDesigner">
            <summary>
            Designer for border corners.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.NBorderCornerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderCorner.NBorderCornerDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSixColorsBorderCorner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSixColorsBorderCorner.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="outerColor1"></param>
            <param name="middleColor1"></param>
            <param name="innerColor1"></param>
            <param name="outerColor2"></param>
            <param name="middleColor2"></param>
            <param name="innerColor2"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSixColorsBorderCorner.#ctor(Nevron.Nov.UI.NSixColorsBorderCorner)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.NSixColorsBorderCornerSchema">
            <summary>
            Schema associated with NSixColorsBorderCorner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.OuterColor1Property">
            <summary>
            Reference to the OuterColor1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.MiddleColor1Property">
            <summary>
            Reference to the MiddleColor1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.InnerColor1Property">
            <summary>
            Reference to the InnerColor1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.OuterColor2Property">
            <summary>
            Reference to the OuterColor2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.MiddleColor2Property">
            <summary>
            Reference to the MiddleColor2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSixColorsBorderCorner.InnerColor2Property">
            <summary>
            Reference to the InnerColor2 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.OuterColor1">
            <summary>
            Gets or sets the first outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.MiddleColor1">
            <summary>
            Gets or sets the first middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.InnerColor1">
            <summary>
            Gets or sets the first inner color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.OuterColor2">
            <summary>
            Gets or sets the second outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.MiddleColor2">
            <summary>
            Gets or sets the second middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSixColorsBorderCorner.InnerColor2">
            <summary>
            Gets or sets the second inner color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSixColorsBorderCorner.NSixColorsBorderCornerDesigner">
            <summary>
            Designer for six colors border corners.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSixColorsBorderCorner.NSixColorsBorderCornerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSixColorsBorderCorner.NSixColorsBorderCornerDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NThreeColorsBorderSide">
            <summary>
            Represents a border side that is filled with three colors. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderSide">
            <summary>
            Represents a border side (e.g. left, top, right or bottom) that displays a border side brick.
            Each border side can be drawn with different inner and outer strokes and filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.#ctor(Nevron.Nov.UI.NBorderSide)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderSide.NBorderSideSchema">
            <summary>
            Schema associated with NBorderSide
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.CreatePredefined(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Creates a predefined border side.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderSide.NBorderSideDesigner">
            <summary>
            Designer for border sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderSide.NBorderSideDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NThreeColorsBorderSide.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThreeColorsBorderSide.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="innerColor"></param>
            <param name="middleColor"></param>
            <param name="outerColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NThreeColorsBorderSide.#ctor(Nevron.Nov.UI.NThreeColorsBorderSide)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThreeColorsBorderSide.NThreeColorsBorderSideSchema">
            <summary>
            Schema associated with NThreeColorsBorderSide.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThreeColorsBorderSide.OuterColorProperty">
            <summary>
            Reference to the OuterColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThreeColorsBorderSide.MiddleColorProperty">
            <summary>
            Reference to the MiddleColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NThreeColorsBorderSide.InnerColorProperty">
            <summary>
            Reference to the InnerColor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThreeColorsBorderSide.IsEmpty">
            <summary>
            Checks whether this border part's fill, stroke and colors are all null or empty. If yes, then this border
            won't be painted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThreeColorsBorderSide.OuterColor">
            <summary>
            Gets or sets the outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThreeColorsBorderSide.MiddleColor">
            <summary>
            Gets or sets the middle property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NThreeColorsBorderSide.InnerColor">
            <summary>
            Gets or sets the inner color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NThreeColorsBorderSide.NThreeColorsBorderSideDesigner">
            <summary>
            Designer for three colors border sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThreeColorsBorderSide.NThreeColorsBorderSideDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolButton">
            <summary>
            Represents a button that can also contains a symbol.
            Serves as base class for all buttons that need to possibly have a symbol inside them (such as the drop down edit buttons).
            </summary>
            <remarks>
            A symbol button is by default clicked when pressed and cannot be focused.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolButton.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolButton.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolButton.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolButton.NSymbolButtonSchema">
            <summary>
            Schema associated with NSymbolButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolButton.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolButton.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolButton.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolButton.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolButton.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolButton.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NButtonStrip">
            <summary>
            Represents a content that can be initialized to contain a predefined configuration of buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitOKButtonStrip">
            <summary>
            Initializes an OK button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitOKCancelButtonStrip">
            <summary>
            Initializes an OK and Cancel button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitAbortRetryIgnoreButtonStrip">
            <summary>
            Initializes an Abort/Retry/Ignore button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitYesNoCancelButtonStrip">
            <summary>
            Initializes an Yes/No/Cancel button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitYesNoButtonStrip">
            <summary>
            Initializes an Yes/No button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitRetryCancelButtonStrip">
            <summary>
            Initializes an Retry/Cancel button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.InitCloseButtonStrip">
            <summary>
            Initializes a Close button strip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.GetPredefinedButtonsStack">
            <summary>
            Gets the stack in which the predefined buttons of the button strip reside.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.GetCustomButtonsStack">
            <summary>
            Gets the stack in which the custom buttons of the button strip reside.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.OnButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a button from the button strip has been clicked. Closes
            the window in which this button strip is placed in if the windows's
            result is not "None".
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonStrip.CreateButtonLabel(System.String)">
            <summary>
            Creates a horizontally and vertically centered label with the given text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonStrip.NButtonStripSchema">
            <summary>
            Schema associated with NButtonStrip
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDesignCommandsBrowser">
            <summary>
            The NDesignCommandsBrowser class is an abstract resize content container, 
            which is used to maintain a tool strip populated with the specified design commands
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToolBar">
            <summary>
            A command bar, which represents a toolbar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBar">
            <summary>
            Represents a command bar, that consists of a gripper, collection of items and a pendant.
            </summary>
            <remarks>
            A command bar can be vertically or horizontally oriented that is determined by its Orientation property.
            When set to Horizontal, the command bar content will flow horizontally, from left to right.
            When set to Vertical, the command bar content will flow vertically, from top to bottom.
            The Orientation is automatically updated by Nevron, when the command bar is added to dock lanes.
            <para>
            A command bar can be in one of the following states:
            <list type="bullet">
            	<item>
            		<term>
            		Docked - a command bar is docked when it resides in an NCommandBarDock.
            		When you drag a command bar inside the dock, the command bar changes lanes and/or lane position.
            		When you drag a command bar outside the dock, the command bar will attempt to float. 
            		You can prevent it from floating by setting the AllowFloat property to false.
            		</term>
            	</item>
            	<item>
            		<term>
            		Floating - a command bar is floating when it resides in an NCommandBarFloater window.
            		When you drag the floater not over a dock, the command bar floater will follow the mouse position.
            		When you drag the floater over a dock, the command bar will attempt to dock.
            		You can prevent it from docking by setting the AllowDock property to false.
            		</term>
            	</item>
            	<item>
            		<term>
            		Closed - a command bar is closed when it resides in the ClosedCommandBars collection of an NCommandBarsManager.
            		A command bar can be closed from the command bar manager context menu, or from the floater close button.
            		You can prevent a command bar from closing by setting the AllowClose property to false.
            		A command bar can be reopened from the command bar manager context menu, in the case of which it is either redocked,
            		or refloated depending on whether the bar was floating or was docked at the time of close.
            		</term>
            	</item>
            </list>
            </para>
            <para>
            The items of a command bar can be any widgets. For the purpose of presenting a command bar item in customization interfaces,
            the command bar provides two extended properties - TextPropertyEx and ImagePropertyEx, which can be applied to the items contained in the bar.
            </para>
            <para>
            The command bar has support for mouse and keyboard selection. 
            The command bar automatically sets the SelectedPropertyEx to true, to the command bar item that is currently selected via the mouse or the keyboard and automatically deselects all other items.
            If the keyboard focus was contained in the command bar before the selection change, the command bar will try transfer the focus to the newly selected item.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetDefaultPopupDirection">
            <summary>
            Gets the default direction of the popups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetMinimalExtend">
            <summary>
            Get the minimal width/height of the command bar depending on its orientation, when it resides in a lane, 
            below which the lane is not allowed to shrink the bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.IsFloating">
            <summary>
            Determines whether the command bar is floating
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.IsDocked">
            <summary>
            Determines whether the command bar is docked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.IsOpened">
            <summary>
            Determines whether the command bar is opened (e.g. is either floating or is docked)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.IsClosed">
            <summary>
            Determines whether the command bar is closed (e.g. resides in the closed bars collection of the OwnerMananager)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CanFloat">
            <summary>
            Determines whether the command bar can float
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Float(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Floats the command bar to the specified screen location.
            </summary>
            <param name="screenPos">position to which to float</param>
            <returns>true if successfully floated, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CanRefloat">
            <summary>
            Determines whether the command bar can be refloated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Refloat">
            <summary>
            Refloats the command bar to its last known floating state.
            </summary>
            <returns>true if successfully refloated, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CanDock(Nevron.Nov.UI.NCommandBarDock)">
            <summary>
            Determines whether the command bar can be docked to the specified dock
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Dock(Nevron.Nov.UI.NCommandBarDock,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Docks the command bar to the specifed dock and screen position.
            </summary>
            <param name="dock">dock to which to dock</param>
            <param name="screenPos">screen position</param>
            <returns>true if the bar is successfully docked, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CanRedock">
            <summary>
            Determines whether the command bar can be redocked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Redock">
            <summary>
            Redocks the command bar to its last known docked state.
            </summary>
            <returns>true if successfully redocked, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CanClose">
            <summary>
            Determines whether this command bar can be closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Close">
            <summary>
            Closes the command bar.
            </summary>
            <returns>true if the command bar is closed, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.Reopen">
            <summary>
            Opens the command bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.PopulatePendantMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Populates the pendant menu with items.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.NavigateToFirstItem">
            <summary>
            Navigates to the first item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.NavigateToLastItem">
            <summary>
            Navigates to the last item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.NavigateToNextItem(Nevron.Nov.UI.NWidget)">
            <summary>
            Navigates to the down item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.NavigateToPrevItem(Nevron.Nov.UI.NWidget)">
            <summary>
            Navigates to the down item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.NavigateToItem(Nevron.Nov.UI.NWidget)">
            <summary>
            Navigates to the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for a key down event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Called when the NMouse.OverPropertyEx property gets a false value
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreateHiddenItemsGroup">
            <summary>
            Creates the widget that contains a representation for the currently hidden items of the command bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreateAddRemoveMenuItem">
            <summary>
            Creates the root "Add/Remove" menu item, the subitems of which 
            are the menu items for each command bar that resides in this command bar owner lane.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreateAddRemoveMenuItem(Nevron.Nov.UI.NCommandBar)">
            <summary>
            Creates a menu item that should be placed in the "Add/Remove" root menu item, 
            and that represents the specified command bar.
            </summary>
            <param name="bar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreateCommandBarItemMenuItem(Nevron.Nov.UI.NWidget)">
            <summary>
            Creates a menu item that represents the specified command bar item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnAddRemoveMenuItemClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an add/remove menu item was clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreatePropertiesMenuItem">
            <summary>
            Creates the properties menu item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreatePropertyMenuItem(System.String,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a menu item for a command bar property
            </summary>
            <param name="title"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnPropertyMenuItemClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a menu item that represents a command bar menu item is clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.CreateFloater">
            <summary>
            Creates a floating window for this command bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetNavigateToNextItemKey">
            <summary>
            Gets the keyboard key that navigates to the next item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetNavigateToPrevItemKey">
            <summary>
            Gets the keyboard key that navigates to the prev item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnOrientationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when Orientation has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.OnWrappableChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when Wrappable has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.NCommandBarSchema">
            <summary>
            Schema associated with NCommandBar
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.GripperChild">
            <summary>
            Reference to the Gripper child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.PendantChild">
            <summary>
            Reference to the Pendant child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.ItemsChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.TextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.OrientationProperty">
            <summary>
            Reference to the Orientation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.LanePositionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.FillLaneProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.StackFillModeProperty">
            <summary>
            Reference to the StackFillMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.StackFitModeProperty">
            <summary>
            Reference to the StackFitMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.WrappableProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.HasHiddenItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.AllowFloatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.AllowDockProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.AllowCloseProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.FloatingAnchorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.FloatingWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.RefloatLocationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.RedockLaneRefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.RedockLanePositionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.ReopenModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.HasOpenedPopupProperty">
            <summary>
            Reference to the HasOpenedPopup property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.OpenPopupsOnMouseInProperty">
            <summary>
            Reference to the OpenOnClick property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.ClosePopupsOnMouseOutProperty">
            <summary>
            Reference to the CloseOnMouseOut property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.TextComparer">
            <summary>
            Compares command bars by their name
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.TextPropertyEx">
            <summary>
            Reference to the Text extended property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.ImagePropertyEx">
            <summary>
            Reference to the Image extended property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBar.SelectedPropertyEx">
            <summary>
            Reference to the Selected extended property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetText(Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the value for the TextPropertyEx for the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.SetText(Nevron.Nov.UI.NWidget,System.String)">
            <summary>
            Sets the value for the TextPropertyEx for the specified item
            </summary>
            <param name="item"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetImage(Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the value for the ImagePropertyEx for the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.SetImage(Nevron.Nov.UI.NWidget,Nevron.Nov.Graphics.NImage)">
            <summary>
            Sets the value for the ImagePropertyEx for the specified item
            </summary>
            <param name="item"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBar.GetSelected(Nevron.Nov.UI.NWidget)">
            <summary>
            Gets the value for the SelectedPropertyEx for the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Gripper">
            <summary>
            Gets or sets the command bar gripper, which is arranged at the heading of the bar.
            Dragging the gripper inside the dock, repositions the command bar by changing its lane and lane position.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Items">
            <summary>
            Gets or sets the command bar items collections.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Pendant">
            <summary>
            Gets or sets the command bar pendant, which is arranged at the ending of the bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Text">
            <summary>
            Gets or sets the name of the command bar. The name appears in the pendant menu and as title in the command bar floater.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Orientation">
            <summary>
            Gets whether this is command bar is vertically arranged. By default set to false.
            Automatically updated by Nevron when this bar is added to a command bars lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.LanePosition">
            <summary>
            Gets or sets the preferred position of the bar inside the lane.
            It is specified relatively to the content area of the lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.FillLane">
            <summary>
            Gets or sets whether the command bar fills the lane, when it is the only command bar inside it.
            When set to true the command bar cannot be dragged to a lane that contains other command bars 
            and also other command bars cannot be dragged to the lane in which it resides.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.StackFillMode">
            <summary>
            Gets or sets the fill mode to apply on this command bar items. Valid only if this command bar
            is not wrappable (<see cref="P:Nevron.Nov.UI.NCommandBar.Wrappable"/> set to false).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.StackFitMode">
            <summary>
            Gets or sets the fit mode to apply on this command bar items. Valid only if this command bar
            is not wrappable (<see cref="P:Nevron.Nov.UI.NCommandBar.Wrappable"/> set to false).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.Wrappable">
            <summary>
            Gets or sets whether the command bar wraps its items or not when docked.
            When set to false the command bar will arrange the items in a single lane in command bar flow direction.
            When set to false the command bar will arrange the items in multiple lanes in command bar flow direction.
            When the bar is floating it is always wrappable.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.HasHiddenItems">
            <summary>
            Gets whether the command bar has hidden items or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.AllowDock">
            <summary>
            Gets or sets whether this command bar can be docked or redocked, if it is floating.
            A command bar can always be redocked, if it is closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.AllowFloat">
            <summary>
            Gets or sets whether this command bar can float, if it is docked.
            A command bar can always be refloated, if it is closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.AllowClose">
            <summary>
            Gets or sets whether this command bar can be closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.FloatingAnchor">
            <summary>
            Gets or sets the floating anchor, which is a point in local coordinates of the floating window header
            and is used to align the dragged floating window to the current mouse position. 
            Automatically updated by Nevron when the user starts dragging the floater 
            and reset when the user starts dragging the command bar in the dock.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.FloatingWidth">
            <summary>
            Gets or sets the width of the floating window created for the command bar, when it is made to float.
            By default set to NaN, meaning that the window is automatically sized to fit the command bar content.
            The value of this property is updated when the user resizes the floating window by grabbing its sides.
            The height of the floating window is always automatically calculated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.RedockLaneRef">
            <summary>
            Gets or sets a reference to the lane, at which the command bar needs to be placed, when redocked.
            Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.RedockLanePosition">
            <summary>
            Gets or sets the offset part of the LanePosition, at which the command bar needs to be placed, when redocked.
            Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.RefloatLocation">
            <summary>
            Gets or sets the position of the floater window, at which to refloat the command bar.
            Automatically updated by Nevron, when the floater start to be dragged or was floating when closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.ReopenMode">
            <summary>
            Gets or sets the mode in which to reopen a closed command bar.
            Automatically updated by Nevron when the command bar is closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.HasOpenedPopup">
            <summary>
            Gets or sets whether at least one of the menu bar items has its menu opened.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.OpenPopupsOnMouseIn">
            <summary>
            Gets or sets whether the popup windows of the command bar items are opened when the mouse enters them.
            By default set to false, meaning that you normally have to click a popup host to open its popup window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.ClosePopupsOnMouseOut">
            <summary>
            Gets or sets whether the popup windows of the command bar items should be automatically closed when the mouse is no longer inside them.
            By default set to false, meaning that the popup window will stay open, until another popup is shown, or the popup loses activation (e.g. user clicks away).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.SelectedItem">
            <summary>
            Gets the selected command bar item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.OwnerManager">
            <summary>
            Gets the manager in which this bar resides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.OwnerDock">
            <summary>
            Gets the dock in which this bar resides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.OwnerLane">
            <summary>
            Gets the lane in which this bar resides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBar.OwnerFloater">
            <summary>
            Gets the floating window in which this bar resides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToolBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NToolBar.NToolBarSchema">
            <summary>
            Schema associated with NToolBar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommandsBrowser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommandsBrowser.OnCommandsChanged">
            <summary>
            Called when the commands collection has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignCommandsBrowser.OnButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a bubbling button click event is dispatched to this node.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignCommandsBrowser.NDesignCommandsBrowserSchema">
            <summary>
            Schema associated with NDesignCommandsBrowser.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDesignCommandsBrowser.Commands">
            <summary>
            Gets or sets the design commands
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSelectChildTypeDialog">
            <summary>
            A dialog window, which provides the user with the ability to select a dom type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectChildTypeDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectChildTypeDialog.Initialize(Nevron.Nov.Editors.NDesigner,Nevron.Nov.Dom.NNode)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="editedNodeDesigner"></param>
            <param name="editedNode"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NSelectChildTypeDialog.OnTypesChanged">
            <summary>
            Called when the shema types have changed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSelectChildTypeDialog.NSelectChildTypeDialogSchema">
            <summary>
            Schema associated with NSelectChildTypeDialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSelectChildTypeDialog.SelectedChildType">
            <summary>
            Gets the selected child type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSelectChildTypeDialog.SelectedChildSlot">
            <summary>
            Gets the selected child slot
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NComboEditorsGroup">
            <summary>
            The NComboEditorsGroup class is an editors group, which embeds a dockable container. 
            The top panel contains a combo box which selects the selected editor, 
            while the fill panel hosts the single visible editors container.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorsGroup">
            <summary>
            An abstract content container, which groups one or more editors. 
            Only one of editors in the group can be visible (selected) at a time. 
            The selection of the visible editor is performed by a subclass specific selector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorsGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorsGroup.#ctor(Nevron.Nov.Editors.NEditorsGroup)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorsGroup.OnEditorsChanged">
            <summary>
            Called when the list of displayed editors has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorsGroup.OnSelectedIndexChanged">
            <summary>
            Called when the selected editor has changed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorsGroup.NEditorsGroupSchema">
            <summary>
            Schema associated with NEditorsGroup
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorsGroup.SelectedIndexChangedEvent">
            <summary>
            Reference to the SelectedIndexChanged event
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NEditorsGroup.SelectedIndexChanged">
            <summary>
            Occurs when the selected index has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.SelectedIndex">
            <summary>
            Gets or sets the selected editor index
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.SelectedEditor">
            <summary>
            Gets the selected editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.Editors">
            <summary>
            Gets or sets the group editors
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.EditorsContainer">
            <summary>
            Gets the single visible container, which hosts the editors
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.PromptLabel">
            <summary>
            Gets the prompt label
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorsGroup.LockUpdates">
            <summary>
            Locks/unlocks updates 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NComboEditorsGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NComboEditorsGroup.#ctor(Nevron.Nov.Editors.NComboEditorsGroup)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NComboEditorsGroup.OnEditorsComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected index of the editors list box has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NComboEditorsGroup.OnEditorsChanged">
            <summary>
            Called when the list of displayed editors has changed. Rebuilds the editors combo boxes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NComboEditorsGroup.OnSelectedIndexChanged">
            <summary>
            Called when the selected index has changed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NComboEditorsGroup.NComboEditorsGroupSchema">
            <summary>
            Schema associated with NComboEditorsGroup
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NComboEditorsGroup.EditorsComboBox">
            <summary>
            Gets the combo box, which is used to select the currently displayed editor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NListEditorsGroup">
            <summary>
            An editors group, which embeds a splitable container. 
            The master panel hosts a list box and the slave panel hosts the editors container.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListEditorsGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListEditorsGroup.#ctor(Nevron.Nov.Editors.NListEditorsGroup)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListEditorsGroup.OnPropertyListBoxItemSelected(Nevron.Nov.UI.NSelectEventArgs{Nevron.Nov.UI.NListBoxItem})">
            <summary>
            Called when the selected item of the editors list box has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NListEditorsGroup.OnEditorsChanged">
            <summary>
            Called when the list of displayed editors has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListEditorsGroup.OnSelectedIndexChanged">
            <summary>
            Called when the selected index has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.NListEditorsGroupSchema">
            <summary>
            Schema associated with NListEditorsGroup
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.SplitModeProperty">
            <summary>
            Reference to the ENSplitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.MasterExtendProperty">
            <summary>
            Reference to the MasterExtend property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.SplitterWidthProperty">
            <summary>
            Reference to the SplitterWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.MasterChild">
            <summary>
            Reference to the Master child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListEditorsGroup.SlaveChild">
            <summary>
            Reference to the Slave child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NListEditorsGroup.EditorsListBox">
            <summary>
            Gets the list box, which is used to select the currently displayed editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFontNameComboBox">
            <summary>
            A combo box, which is populated with the available regular font names.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontNameComboBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFontNameComboBox.NFontNameComboBoxSchema">
            <summary>
            Schema associated with NFontNameComboBox.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NFontNameComboBox.FontName">
            <summary>
            Gets or sets the selected font name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NHelpBrowser">
            <summary>
            NHelpBrowser
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHelpBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHelpBrowser.UpdateDescription(Nevron.Nov.Editors.NDesigner,Nevron.Nov.Dom.NProperty)">
            <summary>
            
            </summary>
            <param name="designer"></param>
            <param name="property"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NHelpBrowser.m_sText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NHelpBrowser.NHelpBrowserSchema">
            <summary>
            Schema associated with NHelpBrowser
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NHelpUnit">
            <summary>
            The NHelpUnit class is used to encapsulate the help data, 
            which can be assigned to schema components
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHelpUnit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHelpUnit.Description">
            <summary>
            Gets or sets the unit description
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSubtreeHierarchyBrowser">
            <summary>
            The NSubtreeHierarchyBrowser is a DOM hierarchy browser, which browses the DOM subtree of
            the currently browsed node. It embeds a tree view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.FindItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Finds the tree item, which represents the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.OnBrowsedNodeChanged">
            <summary>
            Attaches the browser to the currently browsed node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.AttachToNode(Nevron.Nov.Dom.NNode)">
            <summary>
            Attaches the browser to the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.DetachFromNode(Nevron.Nov.Dom.NNode)">
            <summary>
            Detaches the browser from the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.OnNodeChildInserted(Nevron.Nov.Dom.NInsertChildEventArgs)">
            <summary>
            Called when a child node was inserted in the selected node's list of children.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.GetInsertionIndex(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the insertion index of the given node.
            </summary>
            <param name="targetNode"></param>
            <param name="insertedNode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.OnNodeChildRemoved(Nevron.Nov.Dom.NRemoveChildEventArgs)">
            <summary>
            Called when a child node was removed from the selected node's list of children.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.RebuildTreeViewItems">
            <summary>
            Rebuilds the tree view items to reflect the subtree of the browsed node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.ShouldCreateSubTree(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the browser should create the subtree for the
            given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.CreateItem(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Creates the tree item, which represents the specified node
            </summary>
            <param name="node"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.NSubtreeHierarchyBrowserSchema">
            <summary>
            Schema associated with NSubtreeHierarchyBrowser
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.TreeView">
            <summary>
            Gets the embedded tree view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSubtreeHierarchyBrowser.SelectedNode">
            <summary>
            Gets or sets the currently selected node from the browsed node subtree
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NVisualCollection`1">
            <summary>
            A collection visual, that serves as base class for collections that contain other visuals.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.#ctor(Nevron.Nov.Dom.NVisualCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NVisualCollection`1.NVisualCollectionSchema">
            <summary>
            Schema associated with NVisualCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisualCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NVisualCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NEmptyChangeData">
            <summary>
            Represents change data that is empty (has no information about a change).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NChangeData">
            <summary>
            Serves as base class for all types of data, which contain information about a node mutation (change)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEmptyChangeData.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NParentChangeData">
            <summary>
            The data associated with a node parent change.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NParentChangeData.#ctor(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNodeAggregationInfo)">
            <summary>
            Initializer constructor
            </summary>
            <param name="oldParent"></param>
            <param name="oldAggregationInfo"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NParentChangeData.OldParent">
            <summary>
            The node which initiated the update.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NParentChangeData.OldAggregationInfo">
            <summary>
            The old aggregation info
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NChildChangeData">
            <summary>
            Represents the data associated with a child insertion or removal
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChildChangeData.ChildNode">
            <summary>
            Child node which is inserted/removed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChildChangeData.ChildNodeIndex">
            <summary>
            Index at which the child node is inserted in/removed from its parent - valid for collection and container nodes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChildChangeData.ChildNodeSlot">
            <summary> 
            Child slot at which the node is inserted in/removed from its parent - valid only for container nodes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDisplayVisitor">
            <summary>
            Used for the display related visiting of a displayable node subtree. 
            It serves as base class for all display visitors and provides core 
            implementation for transform and clip management.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.#ctor(System.Boolean,Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NRegion)">
            <summary>
            Initializer constructor
            </summary>
            <param name="reversed">whether the children are visited in reverse or forward order</param>
            <param name="transform">the initial transformation from local to scene coordinates</param>
            <param name="clip">the initial clip (in scene coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PreVisit(Nevron.Nov.Dom.NVisual)">
            <summary>
            Called before the visitor visits the node children
            </summary>
            <param name="displayable"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PostVisit(Nevron.Nov.Dom.NVisual)">
            <summary>
            Called after the visitor has visited the node children
            </summary>
            <param name="displayable"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.SkipBranchTraversal(Nevron.Nov.Dom.NVisual)">
            <summary>
            Determines whether the visitor needs to visit of the specified displayable branch.
            </summary>
            <param name="displayable"></param>
            <returns>true to skip branch traversal, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.VisitDisplayChildren(Nevron.Nov.Dom.NVisual)">
            <summary>
            Performs the children display traversal of the specified display node
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PushTransform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Pushes the current transformation to the transform stack 
            and makes the current transform equal to the multiplication of the specified transform and the previous one.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PopTransform">
            <summary>
            Pops the peak transform from the transform stack 
            and makes it the current one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetTransform">
            <summary>
            Gets the current transformation from local to scene coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetInvertTransform">
            <summary>
            Gets the current transformation from scene to local coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PushClip(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Pushes the current clip to the clip stack and makes the current clip equal to the intersection of the old clipping path and the specified path.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PushClip(Nevron.Nov.Graphics.NRegion)">
            <summary>
            Pushes the current clip to the clip stack and makes the current clip equal to the intersection of the old clipping path and the specified path.
            </summary>
            <param name="clip"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.PopClip">
            <summary>
            Pops the peak clipping path from the clip stack and makes it the current one. Returns the previous clip right path.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetLocalClip">
            <summary>
            Gets the current clipping region in current local coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetDisplayLocalClip">
            <summary>
            Gets the current display clipping region in current local coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetDisplayLocalClipBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetSceneClip">
            <summary>
            Gets the current clipping region in scene coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.GetDisplaySceneClip">
            <summary>
            Gets the current display clipping region in scene coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.IsDisplayClipEmpty">
            <summary>
            Determines whether the display scene clip is empty or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.FetchPath">
            <summary>
            Fetches a new or recycled graphics path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.FetchPath(System.Int32)">
            <summary>
            Fetches a new or recycled graphics path with the specified capacity
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.FetchInteriorPath(Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.NGraphicsPath,System.Boolean)">
            <summary>
            Given two outlines - inner and outer - fetches a path that bounds the enclosed interior.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="closed"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.Recycle(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Recycles the specified path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.OnTransformChanged">
            <summary>
            Called when the scene transform has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDisplayVisitor.OnClipChanged">
            <summary>
            Called when the scene clip has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDisplayVisitor.CurrentVisual">
            <summary>
            Gets the currently visited visual
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NPaintVisitor">
            <summary>
            A display visitor, which is used for the paint visiting of a node subtree.
            It is passed as parameter to the NVisual-DoPrePaint(NPaintVisitor visitor) and NVisual-DoPostPaint(NPaintVisitor visitor) methods.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.#ctor(Nevron.Nov.Graphics.NGraphics2D,System.Double,Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NRegion)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="graphics"></param>
            <param name="resolution"></param>
            <param name="transform"></param>
            <param name="clip"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFill(Nevron.Nov.Graphics.NFill)">
            <summary>
            Sets the current fill to the specified NFill instance. A value of null clears the fill.
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFill(Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets the current fill to a solid color fill.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFill(Nevron.Nov.Graphics.ENGradientStyle,Nevron.Nov.Graphics.ENGradientVariant,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets the current fill to a stock gradient fill with the specified settings.
            </summary>
            <param name="gradStyle"></param>
            <param name="gradVar"></param>
            <param name="beginColor"></param>
            <param name="endColor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFill(Nevron.Nov.Graphics.ENHatchStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets the current fill to a hatch fill with the specified settings.
            </summary>
            <param name="hatchStyle"></param>
            <param name="foreColor"></param>
            <param name="backColor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFill(Nevron.Nov.Graphics.NImageSource,Nevron.Nov.Graphics.NTextureMapping)">
            <summary>
            Sets the current fill to an image fill with the specified settings.
            </summary>
            <param name="imageSource"></param>
            <param name="textureMapping"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.ClearFill">
            <summary>
            Clears the current fill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetStroke(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Sets the current stroke to the specified NStroke instance. A value of null clears the stroke.
            </summary>
            <param name="stroke"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetStroke(Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Sets the current stroke to be a solid stroke with the specified color and width.
            </summary>
            <param name="color"></param>
            <param name="width"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.ClearStroke">
            <summary>
            Clears the current stroke settings
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetShadow(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Sets the current shadow to the specified NShadow instance. A value of null clears the shadow.
            </summary>
            <param name="shadow"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.ClearShadow">
            <summary>
            Clears the shadow style. Subseqent geometry/text commands will not drop a shadow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFont(Nevron.Nov.Graphics.NFont)">
            <summary>
            Sets the current font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.ClearFont">
            <summary>
            Clears the current font.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SetFont(Nevron.Nov.Graphics.NFontFaceStyleDescriptor)">
            <summary>
            Sets the current font trough descriptor
            </summary>
            <param name="descriptor"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.ClearStyles">
            <summary>
            Clears all styles (fill, stroke, shadow and font).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints a rect with the current fill and stroke
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintRectangle(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Paints a rect with the current fill and stroke
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintQuadrangle(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Paints a quadrangle. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintQuadrangle(Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Paints a quadrangle. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="quad"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintTriangle(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Paints a triangle. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintTriangle(Nevron.Nov.Graphics.NTriangle)">
            <summary>
            Paints a triangle. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="triangle"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an ellipse with the current fill and stroke
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintEllipse(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Paints an ellipse with the current fill and stroke
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolygon(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Paints a polygon with the specified fill rule. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
            <param name="pt5"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolygon(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Paints a polygon with the specified fill rule. The current fill, stroke and shadow styles are used.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
            <param name="pt5"></param>
            <param name="pt6"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolygon(Nevron.Nov.Graphics.NPolygon,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Paints a polygon with the specified fill rule. The fill, stroke and shadow styles are used.
            </summary>
            <param name="polygon"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolygon(Nevron.Nov.Graphics.NPolygon,Nevron.Nov.Graphics.ENFillRule,System.Boolean)">
            <summary>
            Paints a polygon with the specified fill rule. The fill, stroke and shadow styles are used.
            </summary>
            <param name="polygon"></param>
            <param name="fillRule"></param>
            <param name="temp"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Paints a path with the current fill and stroke and with Even-Odd filling rule.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPath(Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Paints a path with the current fill and stroke and by using the specified fill rule.
            </summary>
            <param name="path"></param>
            <param name="fillRule"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPath(Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule,System.Boolean)">
            <summary>
            Paints a path the specified fill rule. The fill, stroke and shadow styles are used.
            </summary>
            <param name="path"></param>
            <param name="fillRule"></param>
            <param name="temp"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintLine(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolyline(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Paints a polyline. The current stroke and shadow styles are used.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolyline(Nevron.Nov.Graphics.NPolyline)">
            <summary>
            Paints a polyline. The current stroke and shadow styles are used.
            </summary>
            <param name="polyline"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintPolyline(Nevron.Nov.Graphics.NPolyline,System.Boolean)">
            <summary>
            Paints a polyline. The current stroke and shadow styles are used.
            </summary>
            <param name="polyline"></param>
            <param name="temp"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintImage(Nevron.Nov.Graphics.NImageSource,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Paints the specified image at its default size (unscaled), at the specified location.
            </summary>
            <param name="imageSource">The image source that provides the image.</param>
            <param name="location">The point at which the top left corner of the image must be positioned.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintImage(Nevron.Nov.Graphics.NImageSource,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Paints the specified image inside the specified bounding rectangle. The 
            image might be stretched or shrinked in order to fill the bounding rectangle.
            </summary>
            <param name="imageSource">The image source that provides the image.</param>
            <param name="bounds">The rectangle that should be filled by the image.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintGlyphRun(Nevron.Nov.Graphics.NPoint,Nevron.Nov.TrueType.NGlyphRun,System.Int32,System.Int32)">
            <summary>
            Paints a range of a horizontally flowing glyph run.
            The glyph run starts from the specified origin.
            </summary>
            <param name="origin"></param>
            <param name="glyphRun"></param>
            <param name="beginCharIndex"></param>
            <param name="endCharIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintGlyphRun(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NGlyphRunRange)">
            <summary>
            Paints a glyph run range
            </summary>
            <param name="glyphRunRange"></param>
            <param name="origin"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintString(Nevron.Nov.Graphics.NPoint,System.String,Nevron.Nov.Graphics.NPaintTextPointSettings@)">
            <summary>
            Paints a string at the specified location
            </summary>
            <param name="location"></param>
            <param name="text"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintString(Nevron.Nov.Graphics.NPoint,System.Char[],Nevron.Nov.Graphics.NPaintTextPointSettings@)">
            <summary>
            Paints a string at the specified location.
            </summary>
            <param name="location"></param>
            <param name="chars"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintString(Nevron.Nov.Graphics.NRectangle,System.String,Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Paints a string at the specified rect
            </summary>
            <param name="rect"></param>
            <param name="text"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PaintString(Nevron.Nov.Graphics.NRectangle,System.Char[],Nevron.Nov.Graphics.NPaintTextRectSettings@)">
            <summary>
            Paints a string at the specified rect
            </summary>
            <param name="rect"></param>
            <param name="chars"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.EnableCustomBrushCalibration(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Enables custom brush calibration for the specified rectangle
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.DisableCustomBrushCalibration">
            <summary>
            Disables the custom brush calibration, thus turning on the automatic brush calibration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.EnableCustomPenCalibration(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Enables custom pen calibration for the specified rectangle
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.DisableCustomPenCalibration">
            <summary>
            Disables the custom brush calibration, thus turning on the automatic brush calibration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PushSnapToPixels(System.Boolean)">
            <summary>
            Pushes a new value for the SnapToPixels property. 
            If true, all paint commands will internally snap to pixels.
            If false, all paint commands will not snap to pixels.
            </summary>
            <param name="snapToPixels"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PopSnapToPixels">
            <summary>
            Restore the value of the SnapToPixels property,
            as it was before the pairing PushSnapToPixels call.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapXHP(System.Double)">
            <summary>
            Snaps a X coordinate to the half pixel grid.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapXZP(System.Double)">
            <summary>
            Snaps a X coordinate to the zero pixel grid.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapYHP(System.Double)">
            <summary>
            Snaps a Y coordinate to the half pixel grid.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapYZP(System.Double)">
            <summary>
            Snaps a Y coordinate to the zero pixel grid.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPointHP(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps a point to the half pixel grid
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPointZP(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps a point to the zero pixel grid
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapRectangleHP(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Snaps a rectangle to the half pixel grid.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapRectangleZP(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Snaps a rectangle to the zero pixel grid.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapRangeHP(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Snaps a range to the half pixel grid.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapRangeZP(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Snaps a range to the zero pixel grid.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPointsHP(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Snaps an array of points to the half pixel grid.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPointsZP(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Snaps an array of points to the zero pixel grid.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPathHP(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Snaps the path points to the half pixel grid.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SnapPathZP(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Snaps the path points to the zero pixel grid.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.RoundLengthX(System.Double)">
            <summary>
            Rounds X length to pixel grid
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.RoundLengthY(System.Double)">
            <summary>
            Rounds Y length to pixel grid
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.RoundNonZeroLengthX(System.Double)">
            <summary>
            Rounds X length to pixel grid
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            The rounded length is at least one pixel in case the original value is different than zero.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.RoundNonZeroLengthY(System.Double)">
            <summary>
            Rounds Y length to pixel grid
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            The rounded length is at least one pixel in case the original value is different than zero.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.Hint(System.Object)">
            <summary>
            Sets the current hint
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.SkipBranchTraversal(Nevron.Nov.Dom.NVisual)">
            <summary>
            Overriden to skip the branch if the current paint scene clip is empty
            </summary>
            <param name="displayable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PreVisit(Nevron.Nov.Dom.NVisual)">
            <summary>
            Called before the visitor visits the node children.
            Overriden to call the PrePaint2D method of the node, if it implements the INPrePaintNode interface, after it calls the base implementation.
            </summary>
            <param name="displayable"></param>
            <returns>true to continue traversal, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.PostVisit(Nevron.Nov.Dom.NVisual)">
            <summary>
            Called after the visitor has visited the node children
            Overriden to call the PostPaint2D method of the node, if it implements the INPostPaintNode interface, before it calls the base implementation.
            </summary>
            <param name="displayable"></param>
            <returns>true to continue traversal, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.OnTransformChanged">
            <summary>
            Called when the scene transform has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.OnClipChanged">
            <summary>
            Called when the scene clip has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPaintVisitor.OnGraphicsChanged">
            <summary>
            Called when the graphcis has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.IsCustomBrushCalibrationEnabled">
            <summary>
            Gets whether the custom brush calibration is enabled or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.IsCustomPenCalibrationEnabled">
            <summary>
            Gets whether the custom brush calibration is enabled or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.Graphics">
            <summary>
            Gets the low level graphics associated with this visitor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.PaintAppearance">
            <summary>
            Gets whether appearance must be painted
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.PaintShadow">
            <summary>
            Gets whether shadows must be painted
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.SnapToPixels">
            <summary>
            Gets whether the paint visitor automatically snaps all coordinates to pixels or not.
            You can modify this value with the PushSnapToPixels methods.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPaintVisitor.Resolution">
            <summary>
            Gets the resolution associated with the paint visitor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NCreateItemNodeEventArgs`2">
            <summary>
            Event args that are used when creating node for a given item.
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NCreateItemNodeEventArgs`2.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,`1)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="item"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NCreateItemNodeEventArgs`2.Node">
            <summary>
            The node that correspond to the item. Set this property value in the event handler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NCreateItemNodeEventArgs`2.Item">
            <summary>
            The item for which a node should be created.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeHistoryUnit">
            <summary>
            Serves as base class for atomic history units (e.g. that undo/redo a single DOM operation upon a node).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NHistoryUnit">
            <summary>
            Represents a unit, which is recorded by the history service and encapsulates the information necessary to undo or redo an atomic action, 
            performed upon a DOM node. It serves as base class for history units designed to undo and redo specific actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryUnit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryUnit.DumpToTreeItem(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Must override to create a new tree item brach under the parent tree item
            </summary>
            <param name="parent">parent tree node</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryUnit.Undo">
            <summary>
            Must override to undo the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryUnit.Redo">
            <summary>
            Must override to redo the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryUnit.IsEmpty">
            <summary>
            Must override to determine whether the unit is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryUnit.Transaction">
            <summary>
            Gets the unit parent transaction, if any
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="targetNode"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.DumpToTreeItem(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Overriden to create a new tree node brach under the parent tree node
            </summary>
            <param name="parent">parent tree node</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.Undo">
            <summary>
            Undoes the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.Redo">
            <summary>
            Redoes the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.IsEmpty">
            <summary>
            Determines whether the unit is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.UndoAction">
            <summary>
            Undoes the specific node action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeHistoryUnit.RedoAction">
            <summary>
            Redoes the specific node action
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeHistoryUnit.TargetNode">
            <summary>
            Gets or sets the history operation target node
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeSelector">
            <summary>
            Represents a selector builder for the selector that is a part of each NRule instance created by a NThemeRule.
            An instance of this class is internally associated with each NThemeRule instance, when you obtain the rule from the one of the NTheme GetRule methods.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSelector.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSelector.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelector.BaseSchema">
            <summary>
            Gets the base schema of the element instances targeted by this selector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelector.ExculudedBaseSchemas">
            <summary>
            Gets the base schemas that are explicitly specified as not targeted from this selector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeSelector.BasicParts">
            <summary>
            Gets the context of the element instances targeted by this selector (may be null).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENThemeSelectorPartType">
            <summary>
            Enumerates the theme selector part types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.BasicState">
            <summary>
            Represents a basic state theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.BasicContext">
            <summary>
            Represents a basic context theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.CompositeState">
            <summary>
            Represents a composite state theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.CompositeContext">
            <summary>
            Represents a composite context theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.StateMask">
            <summary>
            Represents a state theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.ContextMask">
            <summary>
            Represents a context theme selector part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeSelectorPartType.CompositeMask">
            <summary>
            Represents a composite theme selector part.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeRule">
            <summary>
            Represents a rule of a theme. Its purpose is to create an actual NRule instance.
            A theme rule, derives from NThemeDeclaration to allow you to map properties to values, that are directly outputed in the NRule declartion.
            Each theme rule is associated with a specific selector, which is internally created for the rule, when you obtain it from the one of the NTheme GetRule methods.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NThemeRule.ThemeSelector">
            <summary>
            Gets the selector associated with this rule.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Wmf.ENMetafileFormat">
            <summary>
            Enumerates supported metafile formats.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Wmf.ENMetafileFormat.WMF">
            <summary>
            Windows Metafile Format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Wmf.ENMetafileFormat.EMF">
            <summary>
            Enhanced Metafile Format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Wmf.NMetaImage">
            <summary>
            Represents a scalable meta image (WMF or EMF), that can be painted in a NPaintVisitor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.#ctor(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Creates a meta image from the given embedded resource.
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.DeepClone">
            <summary>
            Creates a deep clone of this meta image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.Paint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the meta image on the specified paint visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromFile(System.String)">
            <summary>
            Loads a metafile image from the given file. Note that full file paths are
            not available on some platforms (e.g. Silverlight).
            </summary>
            <param name="fileName">Full file path to a metafile image.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromFile(System.String,Nevron.Nov.Wmf.ENMetafileFormat)">
            <summary>
            Loads a metafile image from the given file. Note that full file paths are
            not available on some platforms (e.g. Silverlight).
            </summary>
            <param name="fileName">Full file path to a metafile image.</param>
            <param name="format">The format of the metafile.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromFile(Nevron.Nov.IO.NFile)">
            <summary>
            Loads a metafile image from the given file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromFile(Nevron.Nov.IO.NFile,Nevron.Nov.Wmf.ENMetafileFormat)">
            <summary>
            Loads a metafile image from the given file. The metafile format is specified explicitly.
            </summary>
            <param name="file"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromStream(System.IO.Stream)">
            <summary>
            Loads a metafile image from the given stream.
            </summary>
            <param name="stream">A seekable stream that contains (starts with) a metafile.</param>
            <returns>A new meta image object.</returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromStream(System.IO.Stream,Nevron.Nov.Wmf.ENMetafileFormat)">
            <summary>
            Loads a metafile image from the given stream. The metafile format is specified explicitly.
            </summary>
            <param name="stream">A seekable stream that contains (starts with) a metafile.</param>
            <param name="format">An enum value that specifies the metafile format.</param>
            <returns>A new meta image object.</returns>		
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromResource(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Creates a meta image from the given embedded resource.
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Wmf.NMetaImage.FromResource(Nevron.Nov.NEmbeddedResource,Nevron.Nov.Wmf.ENMetafileFormat)">
            <summary>
            Creates a meta image from the given embedded resource using the specified metafile format for
            decoding the image data.
            </summary>
            <param name="resource"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Wmf.NMetaImage.Bounds">
            <summary>
            Gets the bounding rectangle of the image (specified in DIPs).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENMimeContentType">
            <summary>
            Enumerates the possible MIME Content Types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Unknown">
            <summary>
            Unkown MIME type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Application">
            <summary>
            Used for multipurpose files.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Audio">
            <summary>
            Used for audio.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Example">
            <summary>
            Used for examples.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Image">
            <summary>
            Used for images.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Message">
            <summary>
            Used for messages.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Model">
            <summary>
            For 3D models.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Multipart">
            <summary>
            For archives and other objects made of more than one part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Text">
            <summary>
            For human-readable text and source code.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENMimeContentType.Video">
            <summary>
            For video.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENAsyncRequestStatus">
            <summary>
            Enumerates the possible states of an asynchronous request.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncRequestStatus.NotSubmitted">
            <summary>
            The request hasn't been submitted yet.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncRequestStatus.InProgress">
            <summary>
            The request is sent and is waiting for a response.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncRequestStatus.Completed">
            <summary>
            The request has been completed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENAsyncResponseStatus">
            <summary>
            Enumerates the possible states for the response of an asynchronous request.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncResponseStatus.Succeeded">
            <summary>
            The request succeeded.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncResponseStatus.Failed">
            <summary>
            The request failed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENAsyncResponseStatus.Aborted">
            <summary>
            The request was aborted.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENUriKind">
            <summary>
            Enumerates the URI kinds.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENUriKind.RelativeOrAbsolute">
            <summary>
            The kind of the Uri is indeterminate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENUriKind.Absolute">
            <summary>
            The Uri is an absolute Uri.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENUriKind.Relative">
            <summary>
            The Uri is a relative Uri.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENUriLocalPathNotation">
            <summary>
            Enumerates the supported URI local path notations.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENUriLocalPathNotation.Windows">
            <summary>
            Windows local path notation, for example "C:\Documents\MyFile.txt".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENUriLocalPathNotation.Unix">
            <summary>
            Unix local path notation, for example "/Documents/MyFile.txt".
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.ENHttpRequestMethod">
            <summary>
            Enumerates the supported Http request methods.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENHttpRequestMethod.GET">
            <summary>
            Requests a representation of the specified resource. 
            By far the most common method used on the Web today. 
            Should not be used for operations that cause side-effects (using it for actions in web applications is a common misuse).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.ENHttpRequestMethod.POST">
            <summary>
            Submits data to be processed (e.g. from an HTML form) to the identified resource. 
            The data is included in the body of the request. 
            This may result in the creation of a new resource or the updates of existing resources or both.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpRequest">
            <summary>
            Represents an Http web request.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NWebRequest">
            <summary>
            Represents an asynchronous web request.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NWebRequest.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates a new web request that downloads data from the specified URI.
            </summary>
            <param name="uri">Specifies the URI that identifies the requested resource. Cannot be null.</param>
        </member>
        <member name="M:Nevron.Nov.Networking.NWebRequest.Submit">
            <summary>
            Sends a web request.
            When a response arrives or if the request gets aborted, this request will raise the Completed event.
            Use the Status property of the response to determine whether the request has been executed successfully.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NWebRequest.Abort">
            <summary>
            Aborts this web request.
            This method has no effect if the request has been completed. If the request is not submitted 
            or is in-progress, the Completed event is raised immediately, with an Aborted respose type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NWebRequest.SentAt">
            <summary>
            Gets the date-time at which this request has been sent.
            Valid only after Send() was called.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.#ctor(System.String)">
            <summary>
            Creates a new Http GET request for the specified URI string.
            The URI's scheme must be "http" or "https".
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates a new Http GET request for the specified URI.
            The URI's scheme must be "http" or "https".
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.#ctor(System.String,Nevron.Nov.Networking.ENHttpRequestMethod)">
            <summary>
            Creates a new Http request for the specified URI and with the specified request method.
            The URI's scheme must be "http" or "https".
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.#ctor(Nevron.Nov.Networking.NUri,Nevron.Nov.Networking.ENHttpRequestMethod)">
            <summary>
            Creates a new Http request for the specified URI and with the specified request method.
            The URI's scheme must be "http" or "https".
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.CanServeFromCache">
            <summary>
            Determines whether this request can be served from the in-memory cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.CanCache">
            <summary>
            Determines whether this request response can be cached in the in-memory cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpRequest.CanShareDownload">
            <summary>
            Determines whether this request can share a download with other similar requests that are in-progress.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.Method">
            <summary>
            Gets the Http request method. By default set to GET.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.Headers">
            <summary>
            Gets the Http headers associated with this request.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.Body">
            <summary>
            Gets or sets the Http request body.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.AllowServeFromCache">
            <summary>
            Gets or sets whether the response for this request can be served from the NOV in-memory cache.
            In-Memory cache is only supported for GET requests, so this property has no effect, if the Method is not equal to GET.
            The properties of the in-memory cache are controllable by the NHttpSettings static object.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.AllowCache">
            <summary>
            Gets or sets whether the response for this request can be cached in the NOV in-memory cache.
            In-Memory cache is only supported for GET requests, so this property has no effect, if the Method is not equal to GET.
            The properties of the in-memory cache are controllable by the NHttpSettings static object.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpRequest.AllowSharedDownload">
            <summary>
            Gets or sets whether the response download for this request can be shared with other similar requests that are currently in-progress.
            Shared downloads is only supported for GET requests, so this property has no effect, if the Method is not equal to GET.
            By default set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpResponse">
            <summary>
            Represents an Http web response.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NWebResponse">
            <summary>
            Represents the result of a web request.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NWebResponse.ReceivedAt">
            <summary>
            Gets the date time at which this response was received.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpResponse.GetDecompressedData">
            <summary>
            Gets the byte data of this http response by optionally decompressing it if needed (i.e. if the response has a content encoding header).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpResponse.Body">
            <summary>
            Gets the response body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpResponse.HeaderFields">
            <summary>
            Gets the response header fields.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpSettings">
            <summary>
            Static class that defines global settings that relate to HTTP request and responses etc.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpSettings.MaxCacheTotalCost">
            <summary>
            Gets or sets the maximum cost of the items in the NOV in-memory responses cache.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpSettings.MinCacheItemCost">
            <summary>
            Gets or sets the minimal cost of the items in the NOV in-memory responses cache.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpSettings.MaxCacheItemCost">
            <summary>
            Gets or sets the minimal cost of the items in the NOV in-memory responses cache.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpHeaderField">
            <summary>
            Represents an HTTP header field, that is pair of a name and a value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderField.ToString">
            <summary>
            Gets the string representation of this http header field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderField.Name">
            <summary>
            Gets the name of the header field.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderField.Value">
            <summary>
            Gets the value of the field
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpHeaderFieldName">
            <summary>
            Represents the name of a web header field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFieldName.#ctor(System.String)">
            <summary>
            Creates a new web header field name. Throws an exception if the name is not valid.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFieldName.Equals(System.Object)">
            <summary>
            Overriden to compare HttpHeaderFieldNames by their normalized (to-lower) variant.
            This is because header field names are case insensitive.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFieldName.GetHashCode">
            <summary>
            Overriden because Equals was overriden.
            Returns the hash-code of the normalized (to-lower) variant.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.CacheControl">
            <summary>
            Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain	
            Cache-Control: no-cache
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Connection">
            <summary>
            Request: What type of connection the user-agent would prefer	
            Connection: keep-alive
            
            Respose: Options that are desired for the connection[19].
            Connection: close
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentLength">
            <summary>
            The length of the request/response body in octets (8-bit bytes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentMD5">
            <summary>
            A Base64-encoded binary MD5 sum of the content of the request/response body	
            Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentType">
            <summary>
            The MIME type of the body of the request/response (used with POST and PUT requests)	
            Content-Type: application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Date">
            <summary>
            The date and time that the request/response was sent	
            Date: Tue, 15 Nov 1994 08:12:31 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Pragma">
            <summary>
            Implementation-specific headers that may have various effects anywhere along the request-response chain.
            Pragma: no-cache
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Via">
            <summary>
            Request: Informs the server of proxies through which the request was sent.
            Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)
            Response: Informs the client of proxies through which the response was sent.
            Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Warning">
            <summary>
            A general warning about possible problems with the entity body.
            Warning: 199 Miscellaneous warning
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Accept">
            <summary>
            Content-Types that are acceptable -	
            Accept: text/plain
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.AcceptCharset">
            <summary>
            Character sets that are acceptable	
            Accept-Charset: utf-8
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.AcceptEncoding">
            <summary>
            Acceptable encodings. See HTTP compression.	
            Accept-Encoding: gzip, deflate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.AcceptLanguage">
            <summary>
            Acceptable languages for response  
            Accept-Language: en-US
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.AcceptDatetime">
            <summary>
            Acceptable version in time	
            Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Authorization">
            <summary>
            Authentication credentials for HTTP authentication	
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Cookie">
            <summary>
            An HTTP cookie previously sent by the server with Set-Cookie (below)	
            Cookie: $Version=1; Skin=new;
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Expect">
            <summary>
            Indicates that particular server behaviors are required by the client	
            Expect: 100-continue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.From">
            <summary>
            The email address of the user making the request	
            From: user@example.com
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Host">
            <summary>
            The domain name of the server (for virtual hosting), mandatory since HTTP/1.1. Although domain name are specified as case-insensitive[7][8], 
            it is not specified whether the contents of the Host field should be interpreted in a case-insensitive manner[9] and in practice some implementations of virtual hosting 
            interpret the contents of the Host field in a case-sensitive manner.[citation needed]	
            Host: en.wikipedia.org
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.IfMatch">
            <summary>
            Only perform the action if the client supplied entity matches the same entity on the server. 
            This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it.
            If-Match: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.IfModifiedSince">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged.
            If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.IfNoneMatch">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged, see HTTP ETag
            If-None-Match: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.IfRange">
            <summary>
            If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity.
            If-Range: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.IfUnmodifiedSince">
            <summary>
            Only send the response if the entity has not been modified since a specific time.
            If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.MaxForwards">
            <summary>
            Limit the number of times the message can be forwarded through proxies or gateways.
            Max-Forwards: 10
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ProxyAuthorization">
            <summary>
            Authorization credentials for connecting to a proxy.
            Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Range">
            <summary>
            Request only part of an entity. Bytes are numbered from 0.
            Range: bytes=500-999
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Referer">
            <summary>
            This is the address of the previous web page from which a link to the currently requested page was followed. 
            (The word “referrer” is misspelled in the RFC as well as in most implementations.)
            Referer: http://en.wikipedia.org/wiki/Main_Page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.TE">
            <summary>
            The transfer encodings the user agent is willing to accept: the same values as for the response header Transfer-Encoding can be used, 
            plus the "trailers" value (related to the "chunked" transfer method) to notify the server it expects to receive additional headers (the trailers) 
            after the last, zero-sized, chunk.
            TE: trailers, deflate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Upgrade">
            <summary>
            Ask the server to upgrade to another protocol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.UserAgent">
            <summary>
            The user agent string of the user agent. 
            User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/12.0
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.AcceptRanges">
            <summary>
            What partial content range types this server supports
            Accept-Ranges: bytes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Age">
            <summary>
            The age the object has been in a proxy cache in seconds.
            Age: 12
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Allow">
            <summary>
            Valid actions for a specified resource. To be used for a 405 Method not allowed.
            Allow: GET, HEAD
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentEncoding">
            <summary>
            The type of encoding used on the data. See HTTP compression.
            Content-Encoding: gzip
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentLanguage">
            <summary>
            The language the content is in
            Content-Language: da
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentLocation">
            <summary>
            An alternate location for the returned data.
            Content-Location: /index.htm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentDisposition">
            <summary>
            An opportunity to raise a "File Download" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. 
            Quotes are necessary with special characters.
            Content-Disposition: attachment; filename="fname.ext"
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ContentRange">
            <summary>
            Where in a full body message this partial message belongs.
            Content-Range: bytes 21010-47021/47022
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ETag">
            <summary>
            An identifier for a specific version of a resource, often a message digest.
            ETag: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Expires">
            <summary>
            Gives the date/time after which the response is considered stale.
            Expires: Thu, 01 Dec 1994 16:00:00 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.LastModified">
            <summary>
            The last modified date for the requested object, in RFC 2822 format.
            Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Link">
            <summary>
            Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988
            Link: &lt;/feed>; rel="alternate"[23]
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Location">
            <summary>
            Used in redirection, or when a new resource has been created.
            Location: http://www.w3.org/pub/WWW/People.html
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.P3P">
            <summary>
            This header is supposed to set P3P policy, in the form of P3P:CP="your_compact_policy". 
            However, P3P did not take off,[24] most browsers have never fully implemented it, a lot of websites set this header with fake policy text, 
            that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies.
            P3P: CP="This is not a P3P policy! 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.ProxyAuthenticate">
            <summary>
            Request authentication to access the proxy.
            Proxy-Authenticate: Basic
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Refresh">
            <summary>
            Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds. 
            This is a proprietary, non-standard header extension introduced by Netscape and supported by most web browsers.
            Refresh: 5; url=http://www.w3.org/pub/WWW/People.html
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.RetryAfter">
            <summary>
            If an entity is temporarily unavailable, this instructs the client to try again after a specified period of time (seconds).
            Retry-After: 120
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Server">
            <summary>
            A name for the server.
            Server: Apache/2.4.1 (Unix)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.SetCookie">
            <summary>
            An HTTP cookie
            Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.StrictTransportSecurity">
            <summary>
            A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.
            Strict-Transport-Security: max-age=16070400; includeSubDomains
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Trailer">
            <summary>
            The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding.
            Trailer: Max-Forwards
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.TransferEncoding">
            <summary>
            The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.
            Transfer-Encoding: chunked
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.Vary">
            <summary>
            Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.
            Vary: *
            </summary>
        </member>
        <member name="F:Nevron.Nov.Networking.NHttpHeaderFieldName.WWWAuthenticate">
            <summary>
            Indicates the authentication scheme that should be used to access the requested entity.
            WWW-Authenticate: Basic
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFieldName.Name">
            <summary>
            Gets the original name of the field
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFieldName.NormalizedName">
            <summary>
            Gets the normalized name of the field (lower case).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Networking.NHttpHeaderFields">
            <summary>
            Represents the Http Request/Response Header Fields, which is a mapping of a header field name to a header field value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.GetIterator">
            <summary>
            Gets an iterator that iterates through the header fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.Contains(System.String)">
            <summary>
            Checks whether the headers contains an entry for the specified field name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.Contains(Nevron.Nov.Networking.NHttpHeaderFieldName)">
            <summary>
            Checks whether the headers contains an entry for the specified field name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.Remove(System.String)">
            <summary>
            Removes the field (if any) with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.Remove(Nevron.Nov.Networking.NHttpHeaderFieldName)">
            <summary>
            Removes the field (if any) with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of the specified header field name
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Networking.NHttpHeaderFields.TryGetValue(Nevron.Nov.Networking.NHttpHeaderFieldName,System.String@)">
            <summary>
            Tries to get the value of the specified header field name
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFields.IsSealed">
            <summary>
            Determines whether this headers map is sealed. 
            When sealed you are not allowed to modify the headers and all modification methods will throw an exception.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFields.Item(System.String)">
            <summary>
            Gets or sets the field value associated with the specified field name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFields.Item(Nevron.Nov.Networking.NHttpHeaderFieldName)">
            <summary>
            Gets or sets the field value associated with the specified field name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Networking.NHttpHeaderFields.Count">
            <summary>
            Gets the count of header fields in this headers map
            </summary>
        </member>
        <member name="T:Nevron.Nov.Function">
            <summary>
            Delegate for a void function that has no arguments
            </summary>
        </member>
        <member name="T:Nevron.Nov.Function`1">
            <summary>
            Delegate for a void function that has one argument of type TArg.
            </summary>
            <typeparam name="TArg"></typeparam>
            <param name="arg"></param>
        </member>
        <member name="T:Nevron.Nov.Function`2">
            <summary>
            Delegate for a void function that has two arguments of type TArg1 and TArg2 respectively.
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Nevron.Nov.Function`3">
            <summary>
            Delegate for a void function that has three arguments of type TArg1, TArg2 and TArg3 respectively.
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Nevron.Nov.FunctionResult`1">
            <summary>
            Delegate for a function that returns a result of the TRes and has no arguments
            </summary>
            <typeparam name="TRes"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.FunctionResult`2">
            <summary>
            Delegate for a function that returns a result of the TRes and has one argument of type TArg.
            </summary>
            <typeparam name="TRes"></typeparam>
            <typeparam name="TArg"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.FunctionResult`3">
            <summary>
            Delegate for a function that returns a result of the TRes and has two arguments of type TArg1 and TArg2 respectively.
            </summary>
            <typeparam name="TRes"></typeparam>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.FunctionResult`4">
            <summary>
            Delegate for a function that returns a result of the TRes and has three arguments of type TArg1, TArg2 and TArg3 respectively.
            </summary>
            <typeparam name="TRes"></typeparam>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TArg3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NStringHelpers">
            <summary>
            Static class for commonly used string functions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.NumberToAlphaLower(System.Int32)">
            <summary>
            Converts a number to lowe alpha representation
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.NumberToCardinal(System.Int32)">
            <summary>
            Converts a number to cardinal number - one, two, three etc.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.InsertSpacesBeforeUppersAndDigits(System.String)">
            <summary>
            Inserts spaces before all upper chars and digits in the specified input string, and returns the newly created string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.InsertBeforeUppersAndDigits(System.String,System.String)">
            <summary>
            Inserts an arbitrary text before all upper chars and digits in the specified input string
            and returns the newly created string.
            </summary>
            <param name="input"></param>
            <param name="strToInsert"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.SafeTrim(System.String)">
            <summary>
            Removes all leading and trailing white-space characters from the given
            string if it is not null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStringHelpers.Pack(System.String[],System.Char)">
            <summary>
            Packs the specified string array to a single string using the passed delimiter
            </summary>
            <param name="strings"></param>
            <param name="delimeter"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NShadowPreview">
            <summary>
            A widget that shows previews of NShadow objects.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStylePreview">
            <summary>
            A base class for custom painted preview widgets, typically previews of styles, such as fill, stroke, shadow, etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to render the preview.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.OnPreviewedObjectChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Paints the preview in the specified level of detail.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NStylePreview.IsLargeEnoughForHighDetail(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether the content area is large enough for high detail rendering.
            </summary>
            <param name="contentArea"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NStylePreview.NStylePreviewSchema">
            <summary>
            Schema associated with NStylePreview.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NShadowPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NShadowPreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NShadowPreview.NShadowPreviewSchema">
            <summary>
            Schema associated with NShadowPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NDashPattern">
            <summary>
            Represents a stroking dash pattern. Dash patterns consist of dashes and gaps with different length.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.#ctor(System.Single[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="dashValues"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.#ctor(Nevron.Nov.Graphics.NDashPattern)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current dash pattern object.
            </summary>
            <param name="obj">The System.Object to compare with the current object.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.GetHashCode">
            <summary>
            Computes a hash code for this object.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NDashPattern.SafeEquals(Nevron.Nov.Graphics.NDashPattern,Nevron.Nov.Graphics.NDashPattern)">
            <summary>
            Checks if the specified two instances describe the same dash pattern.
            </summary>
            <param name="a">The first dash pattern. Can be null.</param>
            <param name="b">The second dash pattern. Can be null.</param>
            <returns>Returns true if the specified dash patterns are identical.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NDashPattern.Dot">
            <summary>
            Dot pattern (dot, gap).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NDashPattern.Dash">
            <summary>
            Dash pattern (dash, gap).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NDashPattern.DashDot">
            <summary>
            Dash Dot pattern (dash, gap, dot, gap).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NDashPattern.DashDotDot">
            <summary>
            Dash Dot Dot pattern (dash, gap, dot, gap, dot, gap).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NDashPattern.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NDashPattern.Count">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NDashPattern.PatternLength">
            <summary>
            Gets the total length of the pattern (the sum of all item lengths).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPointPropertyEditor">
            <summary>
            A property editor for properties of type NPoint.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPointPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPointPropertyEditor.CreateValueControl">
            <summary>
            Creates the UI control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NPointPropertyEditor.NPointPropertyEditorSchema">
            <summary>
            Schema associated with NPointPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NRectanglePropertyEditor">
            <summary>
            A property editor for properties of type NRectangle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NRectanglePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NRectanglePropertyEditor.CreateValueControl">
            <summary>
            Creates the UI control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NRectanglePropertyEditor.NRectanglePropertyEditorSchema">
            <summary>
            Schema associated with NRectanglePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSizePropertyEditor">
            <summary>
            A property editor for properties of type NSize.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSizePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSizePropertyEditor.CreateValueControl">
            <summary>
            Creates the UI control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.NSizePropertyEditorSchema">
            <summary>
            Schema associated with NSizePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.SizeMaxWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.SizeMinWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.SizeMaxHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.SizeMinHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NSizePropertyEditor.SizeStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSizePropertyEditor.SizeMaxWidth">
            <summary>
            Gets or sets the size max Width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSizePropertyEditor.SizeMinWidth">
            <summary>
            Gets or sets the size min Width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSizePropertyEditor.SizeMaxHeight">
            <summary>
            Gets or sets the size max Height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSizePropertyEditor.SizeMinHeight">
            <summary>
            Gets or sets the size min Height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NSizePropertyEditor.SizeStep">
            <summary>
            Gets or sets the size step
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBoxListBox">
            <summary>
            Represents the list box of an NComboBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxListBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBoxListBox.NComboBoxListBoxSchema">
            <summary>
            Schema associated with NComboBoxListBox
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLayer">
            <summary>
            A colleciton of visuals, that uses the coordinate system to which it belongs.
            A layer is often used for the drawing of previews and other visual aids.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLayer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLayer.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLayer.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NLayer.NLayerSchema">
            <summary>
            Schema associated with NRetainedCanvas
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLayer.ClipRectProperty">
            <summary>
            Reference to the ClipRect property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLayer.ClipRect">
            <summary>
            Gets or set the layer clipping rectangle
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NItemsStack`1">
            <summary>
            Represets an optimized stack of widgets, that serves as base for list box and tree view items collections. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange and pools the element for arrange validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.CanClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.GetPaintCacheMode">
            <summary>
            Gets the mode in which this displayable node can cache its painting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NItemsStack`1.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NItemsStack`1.NItemsStackSchema">
            <summary>
            Schema associated with NItemsStack
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderPreview">
            <summary>
            A widget that shows a preview of a NBorder object
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderPreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderPreview.NBorderPreviewSchema">
            <summary>
            Schema associated with NBorderPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFillPreview">
            <summary>
            A widget that shows previews of NFill objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFillPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFillPreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Overriden to paint a fill preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NFillPreview.NFillPreviewSchema">
            <summary>
            Schema associated with NFillPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFontPreview">
            <summary>
            A widget that shows previews of NFont objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontPreview.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFontPreview.NFontPreviewSchema">
            <summary>
            Schema associated with NFontPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStrokePreview">
            <summary>
            A widget that shows previews of NStroke objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStrokePreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStrokePreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Overriden to paint a stroke preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NStrokePreview.NStrokePreviewSchema">
            <summary>
            Schema associated with NStrokePreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphics2DHint">
            <summary>
            Serves as base class for all graphics 2D hints
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NBytesImageSource">
            <summary>
            The image source is a byte array containing encoded data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.#ctor(System.Byte[])">
            <summary>
             Creates a new image source from the specified byte array.
            </summary>
            <param name="data">
            A byte array containing image data that is encoded in one of the supported image formats.
            The passed byte array is assigned directly to the image source, it is not copied. Null is not accepted.
            </param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.#ctor(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Creates a new image source from the specified byte array.
            </summary>
            <param name="data">
            A byte array containing image data that is encoded in one of the supported image formats.
            The passed byte array is assigned directly to the image source, it is not copied. Null is not accepted.
            </param>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            Returns true if the specified object is equal to the current object; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>
            Returns a hash code for the current object.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.GetImmutableKey(System.Boolean)">
            <summary>
            Gets an immutable image source that can be used as a hash table key for this image source.
            If this image source is immutable it can return itself as a key. Image sources with one frame are considered immutable.
            </summary>
            <param name="startAnimation">If set to true the image source animation is ensured to be running.</param>
            <returns>An immutable image source.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in encoded form.
            </summary>
            <returns>A structure containing the image source's data in its native form.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NBytesImageSource.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NBytesImageSource.Bytes">
            <summary>
            Gets a reference to the byte array that contains the image data.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NEmbeddedResourceImageSource">
            <summary>
            The image source is an embedded resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.#ctor(Nevron.Nov.NEmbeddedResourceRef)">
            <summary>
            Creates a new Image source from the specified embedded resource reference.
            </summary>
            <param name="embeddedResource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.#ctor(Nevron.Nov.NEmbeddedResourceRef,System.Int32,System.Boolean)">
            <summary>
            Creates a new Image source from the specified embedded resource reference.
            </summary>
            <param name="embeddedResource">A reference to an embedded resource.</param>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.#ctor(Nevron.Nov.Graphics.NEmbeddedResourceImageSource)">
            <summary>
            Copy contructor
            </summary>
            <param name="embeddedResourceImageSource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            Returns true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>
            Returns a hash code for the current object.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.GetImmutableKey(System.Boolean)">
            <summary>
            Gets an immutable image source that can be used as a hash table key for this image source.
            If this image source is immutable it can return itself as a key. Image sources with one frame are considered immutable.
            </summary>
            <param name="startAnimation">If set to true the image source animation is ensured to be running.</param>
            <returns>An immutable image source.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in encoded form.
            </summary>
            <returns>A structure containing the image source's data in its native form.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.ClearCachedInfo">
            <summary>
            Clears the image source's cached data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.Resource">
            <summary>
            Obtains a reference to the embedded resource that contains the image data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NEmbeddedResourceImageSource.DomSurrogateSerializer">
            <summary>
            Gets a surrogate serializer for this object.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFileImageSource">
            <summary>
            The image source is a file.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NUriImageSource">
            <summary>
            Abstract base class for images stored in a file or as a web resource. The image location is specified with an URI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.#ctor(Nevron.Nov.Networking.NUri,System.Int32,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="uri">An URI identifying the image resource.</param>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.#ctor(Nevron.Nov.Graphics.NUriImageSource)">
            <summary>
            Copy constructor.
            </summary>
            <param name="imageSource">Source instance.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.FromUri(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates an image source based on the specified URI.
            </summary>
            <param name="uri">An URI that points to a raster image resource.</param>
            <returns>
            A newly created image source. The URI scheme determines the type of the created object (Http or File).
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.FromUri(Nevron.Nov.Networking.NUri,System.Boolean)">
            <summary>
            Creates an image source based on the specified URI.
            </summary>
            <param name="uri">An URI that points to a raster image resource.</param>
            <param name="animateFrames">In case of image with multiple frames - specifies whether the frames should be animated.</param>
            <returns>
            A newly created image source. The URI scheme determines the type of the created object (Http or File).
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NUriImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="P:Nevron.Nov.Graphics.NUriImageSource.Uri">
            <summary>
            Gets the image's URI (Uniform Resource Identifier).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates a new file image source with the specified URI.
            </summary>
            <param name="uri">An URI containing local or UNC file path.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.#ctor(Nevron.Nov.Networking.NUri,System.Int32,System.Boolean)">
            <summary>
            Creates a new file image source with the specified URI.
            </summary>
            <param name="uri">An URI containing local or UNC file path.</param>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.#ctor(Nevron.Nov.Graphics.NFileImageSource)">
            <summary>
            Copy constructor
            </summary>
            <param name="imageSource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            Returns true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>
            Returns a hash code for the current object.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.GetImmutableKey(System.Boolean)">
            <summary>
            Gets an immutable image source that can be used as a hash table key for this image source.
            If this image source is immutable it can return itself as a key. Image sources with one frame are considered immutable.
            </summary>
            <param name="startAnimation">If set to true the image source animation is ensured to be running.</param>
            <returns>An immutable image source.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in encoded form.
            </summary>
            <returns>A structure containing the image source's data in its native form.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFileImageSource.ClearCachedInfo">
            <summary>
            Clears the image source's cached data.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRasterImageSource">
            <summary>
            The image source is an NRaster object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.#ctor(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="raster"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.#ctor(Nevron.Nov.Graphics.NRasterImageSource)">
            <summary>
            Copy constructor
            </summary>
            <param name="imageSource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.InternalUpdateCachedInfo">
            <summary>
            Updates the image info of this image source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in decoded form.
            </summary>
            <returns>A structure containing the image source's data in its native form.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRasterImageSource.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRasterImageSource.Raster">
            <summary>
            Gets the NRaster object that contains the image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NHttpImageSource">
            <summary>
            The image source is a web resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates a new HTTP image source with the specified URI.
            </summary>
            <param name="uri">Web resource Uri.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.#ctor(Nevron.Nov.Networking.NUri,System.Int32,System.Boolean)">
            <summary>
            Creates a new HTTP image source with the specified URI.
            </summary>
            <param name="uri">Web resource Uri.</param>
            <param name="frameIndex">The index of the frame that this image source represents.</param>
            <param name="animateFrames">Specifies whether image frames should be animated.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.#ctor(Nevron.Nov.Graphics.NHttpImageSource)">
            <summary>
            Copy constructor
            </summary>
            <param name="imageSource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            Returns true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>
            Returns a hash code for the current object.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.GetImmutableKey(System.Boolean)">
            <summary>
            Gets an immutable image source that can be used as a hash table key for this image source.
            If this image source is immutable it can return itself as a key. Image sources with one frame are considered immutable.
            </summary>
            <param name="startAnimation">If set to true the image source animation is ensured to be running.</param>
            <returns>An immutable image source.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.GetNativeData">
            <summary>
            Gets the image source's image data in encoded form.
            </summary>
            <returns>A structure containing the image source's data in its native form.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NHttpImageSource.GetFrameData">
            <summary>
            Returns image data that should be used for rendering of the image source's current frame.
            Encoded data is returned for encoded images sources with a single frame. Decoded data is 
            returned for NRaster-based image sources and for encoded images sources with animated frames.
            </summary>
            <returns>A structure containing the data for the image source's frame.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHttpImageSource.RequestStatus">
            <summary>
            Gets the current request status of the image source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NHttpImageSource.ResponseStatus">
            <summary>
            Gets the current response status. Valid only if the request status is 
            set to Completed, otherwise ENAsyncResponseStatus.Failed is returned.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageData">
            <summary>
            Contains raw binary (encoded) image data and optionally a hint for the image format of the data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageData.#ctor(System.Byte[])">
            <summary>
            Creates an image data object with the specified encoded data.
            </summary>
            <param name="imageBytes">A byte array containing encoded image data.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageData.#ctor(System.Byte[],Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Creates an image data object with the specified encoded data and associated image format.
            Use this constructor only if the actual image format of the data is known.
            </summary>
            <param name="imageBytes">A byte array containing encoded image data.</param>
            <param name="imageFormat">
            Image format of the encoded data. The specified image format must match the actual format of the data.
            </param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageData.Decode">
            <summary>
            Decodes the image data.
            </summary>
            <remarks>
            The method throws an exception if it fails to decode the image data.
            </remarks>
            <returns>Returns a raster object that contains the decoded image data.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageData.Decode(Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Decodes the image data.
            </summary>
            <remarks>
            The method throws an exception if it fails to decode the image data.
            </remarks>
            <param name="decoderPreference">Specifies decoder preference.</param>
            <returns>Returns a raster object that contains the decoded image data.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageData.Data">
            <summary>
            Gets a byte array containing the encoded image data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageData.ImageFormat">
            <summary>
            Gets the image format of the data. Returns null, if the image format cannot be recognized.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageInfo">
            <summary>
            Contains basic information about an image, such as its size, resolution and pixel format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageInfo.#ctor(System.Int32,System.Int32,System.Double,Nevron.Nov.Graphics.NPixelFormat)">
            <summary>
            Creates an image info with the specified parameters.
            </summary>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="resolution">Image resolution in DPI.</param>
            <param name="pixelFormat">Image pixel format.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageInfo.#ctor(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Creates an image info for the specified raster.
            </summary>
            <param name="raster">The source raster.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageInfo.GetFrameInfo(System.Int32)">
            <summary>
            Gets inforamtion about a particular frame within an encoded image.
            </summary>
            <param name="frameIndex">The index of the frame.</param>
            <returns>An object containing information about the specified frame.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageInfo.Width">
            <summary>
            Gets the image width in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageInfo.Height">
            <summary>
            Gets the image height in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageInfo.Resolution">
            <summary>
            Gets the image resolution in DPI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageInfo.PixelFormat">
            <summary>
            Gets the NOV pixel format that best matches the original image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageInfo.FrameCount">
            <summary>
            Gets the number of individual frames in an encoded image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageService">
            <summary>
            Provides methods for encoding and decoding of raster images.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.DecodeImageData(System.Byte[],System.Int32,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Decodes the specified image data.
            </summary>
            <remarks>
            The method throws an exception if it fails to decode the image data.
            </remarks>
            <param name="imageBytes">Encoded image data.</param>
            <param name="frameIndex">Index of the frame to decode.</param>
            <param name="imageFormat">The format of the data in the byte array. Set to null if the format is not known.</param>
            <param name="decoderPreference">Preferences for the used decoder (NOV vs. native).</param>
            <returns>
            Returns a raster object that contains the decoded image data.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.EncodeRaster(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings,Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Encodes a raster image into the specified image format.
            </summary>
            <remarks>
            The method throws an exception if it fails to encode the raster.
            </remarks>
            <param name="raster">
            The raster to be encoded.
            </param>
            <param name="imageFormat">
            Target image format. Cannot be null.
            </param>
            <param name="settings">
            An object that specifies format-specific settings for the image encoder. The target format and the settings type must match.
            For example in order to encode the image into PNG format you have to pass NImageFormat.Png as imageFormat and an instance of
            the NPngEncoderSettings type as settings. If this parameter is set to null, the default encoder settings will be used.
            </param>
            <param name="encoderPreference">
            Specifies preference for the image encoder.
            </param>
            <returns>
            Returns an object containing the encoded image data.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.NativeDecodeImageData(System.Byte[],Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Decodes the specified image data, using the image decoding capabilities of the underlying platform.
            Must be implemented in the image service of a platform host.
            </summary>
            <param name="imageBytes">Encoded image data.</param>
            <param name="imageFormat">The format of the data in the byte array. Cannot be null.</param>
            <returns>
            Returns a raster that contains the decoded image data. Returns null if the decoding was not successful.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.NativeEncodeBitmap(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NBitmapEncoderSettings)">
            <summary>
            Encodes a raster into BMP image format, using the image encoding capabilities of the underlying platform.
            Must be implemented in the image service of a platform host.
            </summary>
            <param name="raster">The raster to be encoded.</param>
            <param name="settings">BMP encoder settings.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.NativeEncodePng(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NPngEncoderSettings)">
            <summary>
            Encodes a raster into PNG image format, using the image encoding capabilities of the underlying platform. 
            Must be implemented in the image service of a platform host.
            </summary>
            <param name="raster">The raster to be encoded.</param>
            <param name="settings">PNG encoder settings.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageService.NativeEncodeJpg(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NJpegEncoderSettings)">
            <summary>
            Encodes a raster into JPEG image format, using the image encoding capabilities of the underlying platform.
            Must be implemented in the image service of a platform host.
            </summary>
            <param name="raster">The raster to be encoded.</param>
            <param name="settings">JPEG encoder settings.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImage">
            <summary>
            An attribute that aggregates an image source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor(Nevron.Nov.Networking.NUri)">
            <summary>
            Creates an image that aggregates a File or Http image source, depending on the schema of the specified URI.
            </summary>
            <param name="uri">An URI that identifies an image resource.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Creates an image that aggregates a raster image source.
            </summary>
            <param name="raster">A raster object. The raster should not be modified subsequently.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Creates an image from the given embedded resource.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor(Nevron.Nov.NEmbeddedResourceRef)">
            <summary>
            Creates an image that aggregates an embedded resource image source.
            </summary>
            <param name="embeddedResourceRef">A reference to an embedded resource.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.#ctor(Nevron.Nov.Graphics.NImageSource)">
            <summary>
            Creates an image that aggregates the specified image source.
            </summary>
            <param name="imageSource">The image source to aggregate. Cannot be null.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.String,Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Saves the image to the given file in the specified format. If the file already exists,
            it is overwritten.
            </summary>
            <param name="fileName"></param>
            <param name="imageFormat"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.String,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Saves the image to the given file in the specified format using the specified
            encoder settings. If the file already exists, it is overwritten.
            </summary>
            <param name="fileName"></param>
            <param name="imageFormat"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.String,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings,Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Saves the image to the given file in the specified format using the specified
            encoder settings and preference. If the file already exists, it is overwritten.
            </summary>
            <param name="fileName"></param>
            <param name="imageFormat"></param>
            <param name="settings"></param>
            <param name="encoderPreference"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.IO.Stream,Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Saves the image to the given stream in the specified format.
            </summary>
            <param name="stream"></param>
            <param name="imageFormat"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.IO.Stream,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Saves the image to the given stream in the specified format using the specified
            encoder settings and preference.
            </summary>
            <param name="stream"></param>
            <param name="imageFormat"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.Save(System.IO.Stream,Nevron.Nov.Graphics.NImageFormat,Nevron.Nov.Graphics.NImageEncoderSettings,Nevron.Nov.Graphics.ENCodecPreference)">
            <summary>
            Saves the image to the given stream in the specified format using the specified
            encoder settings and preference.
            </summary>
            <param name="stream"></param>
            <param name="imageFormat"></param>
            <param name="settings"></param>
            <param name="encoderPreference"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.OnDeepCopied(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called after the node is deeply copied from the specified source node.
            </summary>
            <param name="source">The source node.</param>
            <param name="context">Context for deep cloning.</param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImage.NImageSchema">
            <summary>
            Schema associated with NImage
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromFile(System.String)">
            <summary>
            Creates an image from the file with the given full file path. Note that
            full file paths are not available on some platforms (e.g. Silverlight).
            </summary>
            <param name="fileName">The full file path to the image file.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromFile(Nevron.Nov.IO.NFile)">
            <summary>
            Creates an image from the given file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromStream(System.IO.Stream)">
            <summary>
            Creates an image from the given stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromRaster(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Creates an image, which aggregates a raster.
            </summary>
            <param name="raster"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromResource(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Creates an image from the given embedded resource.
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImage.FromBytes(System.Byte[])">
            <summary>
            Creates an image from the given byte array.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImage.ImageSource">
            <summary>
            Gets the image source. Cannot be null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImage.Width">
            <summary>
            Gets the width of the image measured in Pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImage.Height">
            <summary>
            Gets the height of the image measured in Pixels.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImage.Resolution">
            <summary>
            Gets the image resolution measured in Dots Per Inch.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NJpegEncoderSettings">
            <summary>
            Contains settings that are used for encoding a Jpeg image.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NJpegEncoderSettings.DefaultQuality">
            <summary>
            Default JPEG quality.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NJpegEncoderSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NJpegEncoderSettings.Quality">
            <summary>
            Jpeg quality setting. Values are clamped to the range [0 - 100].
            By default set to 80.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPngEncoderSettings">
            <summary>
            Contains settings that are used for encoding a PNG image.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPngEncoderSettings.DefaultColorType">
            <summary>
            Default PNG color type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPngEncoderSettings.DefaultCompressionLevel">
            <summary>
            Default PNG compression.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPngEncoderSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPngEncoderSettings.ColorType">
            <summary>
            PNG color type. By default set to true color, i.e. the resulting PNG image
            will contain information for the red, blue and green color component of each pixel.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPngEncoderSettings.CompressionLevel">
            <summary>
            Defines the compression level to encode the PNG image at. By default set to
            medium compression.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageFormat">
            <summary>
            Represents an image format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.CreateFormat(Nevron.Nov.Graphics.INImageFormatProvider)">
            <summary>
            Creates a new NImageFormat and registers it in the global image format registry.
            </summary>
            <param name="provider">An object that implements the image format functionality.</param>
            <returns>The newly created image format object.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.GetFormat(System.Int32)">
            <summary>
            Gets a reference to the image format with the specified identifier.
            </summary>
            <param name="format">An integer value that identifies the requested image format.</param>
            <returns>A reference to the requested image format.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.GetFileTypes">
            <summary>
            Gets an array that describes the allowed file formats for open/save file dialogs. All registered image formats are included.
            </summary>
            <returns>An aray of items that describe the allowed file formats.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.GetFromFileName(System.String)">
            <summary>
            Returns the image format of the given file or null if the image format is not currently
            supported by NOV.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.GetFromExtensionAndHeader(System.String,System.Byte[])">
            <summary>
            Returns the image format that matches the given extension and header or null if the
            image format is not currently supported by NOV. The header is evaluated first, if it's
            null or no match is found, the extension is evaluated.
            </summary>
            <param name="extension">A file name extenstion without the dot (.e.g. "png", "jpg", etc.).
            You can use NSystem.GetExtensionFromFileName(fileName) to get an extension from file name.</param>
            <param name="header">The header of the image.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.TryGetImageInfo(System.Byte[])">
            <summary>
            Obtains image information (size, resolution, pixel format) from the specified encoded image data.
            </summary>
            <param name="imageBytes">A byte array containing the encoded image data.</param>
            <returns>Returns an object containing information about the image. Returns null if the image info cannot be obtained.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageFormat.GetImageInfo(System.Byte[])">
            <summary>
            Obtains image information (size, resolution, pixel format) from the specified encoded image data.
            </summary>
            <remarks>
            The method throws an exception if the image info cannot be obtained.
            </remarks>
            <param name="imageBytes">A byte array containing the encoded image data.</param>
            <returns>Returns an object containing information about the image.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFormat.Jpeg">
            <summary>
            Represents the Jpeg image format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFormat.Png">
            <summary>
            Represents the PNG image format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFormat.Bmp">
            <summary>
            Represents the Bitmap image format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFormat.Gif">
            <summary>
            Represents the GIF image format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NImageFormat.Nri">
            <summary>
            Represents the NRI (Nevron Raster Image) image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFormat.FormatId">
            <summary>
            Gets an integer value that identifies the image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFormat.EncoderPreference">
            <summary>
            Sets or gets the encoder preference for this image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFormat.DecoderPreference">
            <summary>
            Sets or gets the decoder preference for this image format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NImageFormat.FormatCount">
            <summary>
            Gets the number of registered image formats.
            </summary>
        </member>
        <member name="T:Nevron.Nov.IO.NStreamHelpers">
            <summary>
            Static class for commonly used functions, related to streams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NStreamHelpers.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the given source stream to the specified destination stream and advances the
            Position in the destination stream to its end. If you want to read from the destination
            stream do not forget to set its Position property to the proper value.
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NStreamHelpers.ReadStreamToEnd(System.IO.Stream)">
            <summary>
            Reads all bytes from the specified stream from the current position to the end of the stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NStreamHelpers.DetectEncodingFromBOM(System.Byte[],System.Int32@)">
            <summary>
            Detects the encoding of the given data by looking at the Byte Order Mask (if any)
            the given data starts with.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NWordProcessor">
            <summary>
            The NWordProcessor class provides properties and methods for working with the words in a given string.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.GetWordRange(System.Int32)">
            <summary>
            Gets the start and end char indices of the word at the specified index.
            </summary>
            <param name="wordIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.GetWord(System.Int32)">
            <summary>
            Gets the word at the specified index.
            </summary>
            <param name="wordIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.GetWordIndex(System.Int32)">
            <summary>
            Gets the word index of the word the given position in the string is part of.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.IsWordBreak(System.Char)">
            <summary>
            Checks whether the given character is a word break character for
            the word processor or not.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NWordProcessor.OnTextChanged(System.String)">
            <summary>
            Called when the text this word processor operates on has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NWordProcessor.Text">
            <summary>
            Get/Sets the text, this word processor operates on.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NWordProcessor.WordCount">
            <summary>
            Gets the total number of words in the given text.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolRepeatButton">
            <summary>
            Represents a repeat button that also contains a symbol.
            Serves as base class for all repeat buttons that need to have a symbol inside them (such as scrollbar arrow buttons).
            </summary>
            <remarks>
            A symbol repeat button is by default clicked when pressed and cannot be focused.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolRepeatButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolRepeatButton.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolRepeatButton.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolRepeatButton.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolRepeatButton.NSymbolRepeatButtonSchema">
            <summary>
            Schema associated with NSymbolRepeatButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolRepeatButton.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolRepeatButton.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolRepeatButton.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolRepeatButton.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolRepeatButton.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolRepeatButton.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSpinnerButton">
            <summary>
            Represents the increase or decrease button of a spinner
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinnerButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinnerButton.NSpinnerButtonSchema">
            <summary>
            Schema associated with NSpinnerButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NProgressBarCompletedPart">
            <summary>
            Represents the completed (full) part of a progress bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBarCompletedPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBarCompletedPart.NProgressBarCompletedPartSchema">
            <summary>
            Schema associated with NProgressBarCompletedPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NProgressBarRemainingPart">
            <summary>
            Represents the remaining (empty) part of a progress bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBarRemainingPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBarRemainingPart.NProgressBarRemainingPartSchema">
            <summary>
            Schema associated with NProgressBarRemainingPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUpDownBase">
            <summary>
            Serves as base for up downs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>		
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the window background.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.MeasureItem(System.Boolean)">
            <summary>
            Must override to measure the item slot 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Must override to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUpDownBase.OnSpinnerSpin(Nevron.Nov.UI.NSpinnerSpinEventArgs)">
            <summary>
            Handler for updown spiner spin events
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.NUpDownBaseSchema">
            <summary>
            Schema associated with NDropDown
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.SpinnerChild">
            <summary>
            Reference to the Spinner child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.WindowXProperty">
            <summary>
            Reference to the WindowX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.WindowYProperty">
            <summary>
            Reference to the WindowY property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUpDownBase.WindowBackgroundFillProperty">
            <summary>
            Reference to the WindowBackground property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.Spinner">
            <summary>
            Gets or sets the button, which when clicked shows the drop down popup 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowX">
            <summary>
            Gets or sets the window X coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowY">
            <summary>
            Gets or sets the window Y coordinate.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowWidth">
            <summary>
            Gets or sets the window Width.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowHeight">
            <summary>
            Gets or sets the window Height.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowArea">
            <summary>
            Gets or sets the window area.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpDownBase.WindowBackgroundFill">
            <summary>
            Gets or sets the background of the window area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderStylePickerCell">
            <summary>
            A cell of the NBorderStylePicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTablePickerCell">
            <summary>
            A toggle button that can be selected and navigated to from a table picker.
            A table picker cell usually resides inside a NTablePicker.
            For a single NTablePicker element, only one child cell can be checked at a time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePickerCell.#ctor(System.Object)">
            <summary>
            Creates a table picker cell using the specified object to
            create its content.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePickerCell.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTablePickerCell.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent node has changed. 
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTablePickerCell.NTablePickerCellSchema">
            <summary>
            Schema registered with NCell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePickerCell.IsHighlighted">
            <summary>
            Gets whether this cell is highlighted or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTablePickerCell.OwnerPicker">
            <summary>
            Gets the picker ownding this item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePickerCell.#ctor(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a border style picker cell for the given predefined border style, color and thcikness.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePickerCell.Initialize(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a preview of a border for the given predefined border style,
            color and thickness and hosts it in this cell.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePickerCell.SetColor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets the color of the previewed border.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderStylePickerCell.SetRounding(System.Double)">
            <summary>
            Sets the corner roudning of the previewed border.
            </summary>
            <param name="rounding"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorderStylePickerCell.NBorderStylePickerCellSchema">
            <summary>
            Schema associated with NBorderStylePickerCell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFilledPickerCell">
            <summary>
            Serves as base class for table picker cells that fill the content area with some filling.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFilledPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFilledPickerCell.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFilledPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Must override to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NFilledPickerCell.NFilledPickerCellSchema">
            <summary>
            Schema associated with NFilledPickerCell
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFilledPickerCell.PreviewBorderProperty">
            <summary>
            Reference to the PreviewBorder property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFilledPickerCell.PreviewBorderThicknessProperty">
            <summary>
            Reference to the PreviewBorderThickness property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFilledPickerCell.PreviewBorder">
            <summary>
            Gets or sets the border used as outline of the filled picker cell content
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFilledPickerCell.PreviewBorderThickness">
            <summary>
            Gets or sets the thickness of the border used as outline of the filled picker cell content
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTabSpinner">
            <summary>
            Represents the spinner (scroller) of a tab.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSpinner">
            <summary>
            Represents a two button spinner, with increase and decrease buttons,
            that are horizontally or vertically arranged.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinner.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinner.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinner.OnDecreaseButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the decrease button was clicked. 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinner.OnIncreaseButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the increase button was clicked. 
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinner.NSpinnerSchema">
            <summary>
            Schema associated with NSpinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinner.SpinEvent">
            <summary>
            Reference to the Spin event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinner.IncreaseButtonChild">
            <summary>
            Reference to the IncreaseButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinner.DecreaseButtonChild">
            <summary>
            Reference to the DecreaseButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSpinner.OrientationProperty">
            <summary>
            Reference to the Orientation property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSpinner.Spin">
            <summary>
            Event, which occurs when the spinner is spinned
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSpinner.IncreaseButton">
            <summary>
            Gets or sets the first button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSpinner.DecreaseButton">
            <summary>
            Gets or sets the second button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSpinner.Orientation">
            <summary>
            Gets or sets whether the increase/decrease buttons 
            are horizontally or verticall arranged.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabSpinner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabSpinner.NTabSpinnerSchema">
            <summary>
            Schema associated with NTabSpinner.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAutoCompleteFactory`1">
            <summary>
            A class that is used for customizing the drop down list of auto compelete text boxes.
            </summary>
            <typeparam name="TDataSourceItem"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteFactory`1.GetString(`0)">
            <summary>
            Gets the string representation of the given data source item. The default implementation
            calls the ToString method of the given data source item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteFactory`1.CreateWidget(`0)">
            <summary>
            Creates a widget for the given data source item. The default implementation creates a label
            and sets its text to the result of the GetString method for the given data source item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NCaret">
            <summary>
            Represent a text box or rich text caret.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCaret.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCaret.CanClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCaret.GetClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCaret.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCaret.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCaret.NCaretSchema">
            <summary>
            Schema associated with NCaret.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCaret.BlinkIntervalProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCaret.BlinkInterval">
            <summary>
            Gets / sets the blink interval (in milliseconds)
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTResourceInstalledFont">
            <summary>
            Represents an installed from a resource byte stream.
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTResourceInstalledFont.#ctor(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTResourceInstalledFont.GetFontStream">
            <summary>
            Gets the stream correponding to this installed font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTResourceInstalledFont.URL">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NOpenFileDialogResult">
            <summary>
            Represents the result for an "Open File" dialog box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NOpenFileDialogResult.Files">
            <summary>
            Gets an array of NFile objects which refer to the selected files.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSaveFileDialogResult">
            <summary>
            Represents the dialog result for the Save file dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSaveFileDialogResult.SafeFileName">
            <summary>
            Gets the user-selected file's safe file name (which is only the file name and extenstion without a path).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSaveFileDialogResult.File">
            <summary>
            Gets an NFile object that refers to the selected file.
            </summary>
            <returns>
            Returns an NFile object that refers to the selected file.
            </returns>
        </member>
        <member name="T:Nevron.Nov.UI.NCommonDialog">
            <summary>
            Used as a base class for all classes that represent platform-provided common dialog boxes, such as NOpenFileDialog, NSaveFileDialog and NPrintDialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommonDialog.RequestShow">
            <summary>
            Requests for the dialog to be displayed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFileDialog">
            <summary>
            Used as a base class for classes that represent platform-provided file dialogs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFileDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialog.FileTypes">
            <summary>
            Gets or sets the allowed file types for the file dialog. Can be set to null to indicate that all file types are allowed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialog.SelectedFilter">
            <summary>
            Gets or sets the zero-based index of the selected file filter.
            </summary>
            <remarks>
            The default value is 0. The selected filter is updated with the user selected value after the file dialog is closed.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialog.Tag">
            <summary>
            Gets or sets an object associated with this file dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialog.FileTypesCount">
            <summary>
            Safely gets the number of file types specified with the FileTypes property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialog.Title">
            <summary>
            Gets or sets the title of the file dialog.
            </summary>
            <remarks>
            On certain platforms (e.g. Silverlight) the dialog title is not supported.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.UI.NFileDialogFileType">
            <summary>
            Represents a pair between a file extension description and the associated file extensions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFileDialogFileType.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFileDialogFileType.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="extensions"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialogFileType.Description">
            <summary>
            Gets the human readable description associated with the file type (like "Nevron Text Files" for example).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFileDialogFileType.Extensions">
            <summary>
            Gets the extensions associated with the file type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NOpenFileDialog">
            <summary>
            Represents a platform-provided "Open File" dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NOpenFileDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NOpenFileDialog.RequestShow">
            <summary>
            Requests for the dialog to be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NOpenFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NOpenFileDialog.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the dialog box allows multiple files to be selected.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NOpenFileDialog.Closed">
            <summary>
            Occurs when the Open File dialog is closed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommonDialogResult">
            <summary>
            Enumerates the possible dialog result codes returned from platform-provided dialog boxes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommonDialogResult.Unknown">
            <summary>
            The platform's dialog box does not provide a result code.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommonDialogResult.OK">
            <summary>
            The user has approved the operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommonDialogResult.Cancel">
            <summary>
            The user has cancelled the dialog box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommonDialogResult.Error">
            <summary>
            An error has occured while displaying the platform's dialog box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBeginPrintEventArgs">
            <summary>
            Provides data for the BeginPrint event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBeginPrintEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the printing process should be canceled.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPrintDialog">
            <summary>
            Represents a platform-provided "Print" dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDialog.RequestShow">
            <summary>
            Requests for the dialog to be displayed.
            </summary>
            <returns>
            Returns true if the request was successfully submitted and the dialog will attempt to show.
            </returns>
        </member>
        <member name="E:Nevron.Nov.UI.NPrintDialog.Closed">
            <summary>
            Occurs when the print dialog is closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.PrintDocument">
            <summary>
            Gets or sets the print document object that will handle the print events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.PrinterName">
            <summary>
            Gets or sets the printer name. This determines which printer is initially selected in the print dialog.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.EnableCurrentPage">
            <summary>
            Gets or sets a value indicating whether the print dialog's "Current Page" option is enabled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.EnableCustomPageRange">
            <summary>
            Gets or sets a value indicating whether the print dialog's "Custom Range" option is enabled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.EnableSelection">
            <summary>
            Gets or sets a value indicating whether the print dialog's "Selection" option is enabled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.CustomPageRange">
            <summary>
            Gets or sets the selected custom page range of the print dialog.
            This property is taken into account when the PrintRangeMode is set to CustomRange.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.MaxPageRange">
            <summary>
            Gets or sets the boundaries for the custom page range.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.PrintRangeMode">
            <summary>
            Gets or sets the print range mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.NumberOfCopies">
            <summary>
            Gets or sets the number of copies.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDialog.Collate">
            <summary>
            Gets or sets a flag that specifies whether page collation is enabled.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSaveFileDialog">
            <summary>
            Represents a platform-provided "Save File" dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSaveFileDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSaveFileDialog.RequestShow">
            <summary>
            Requests for the dialog to be displayed.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="E:Nevron.Nov.UI.NSaveFileDialog.Closed">
            <summary>
            Occurs when the Save File dialog is closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSaveFileDialog.DefaultExtension">
            <summary>
            Gets or sets the default file name extension that is used for the saved files.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSaveFileDialog.DefaultFileName">
            <summary>
            Gets or sets the default file name that appears in the Save File dialog when it is displayed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPrintDocument">
            <summary>
            Defines an object that is used to receive printing-related events and send output to a printer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDocument.OnBeginPrint(Nevron.Nov.UI.NBeginPrintEventArgs)">
            <summary>
            Called at the beginning of the printing process.
            </summary>
            <remarks>
            The default implementation raises the BeginPrint event.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDocument.OnQueryPageSettings(Nevron.Nov.UI.NQueryPageSettingsEventArgs)">
            <summary>
            Called once before a page is printed in order to modify the page setting (if necessary).
            </summary>
            <remarks>
            The default implementation raises the QueryPageSettings event.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDocument.OnPrintPage(Nevron.Nov.UI.NPrintPageEventArgs)">
            <summary>
            Called for each page that is printed in order to provide the page's graphic contents.
            </summary>
            <remarks>
            The default implementation raises the PrintPage event.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintDocument.OnEndPrint(Nevron.Nov.UI.NEndPrintEventArgs)">
            <summary>
            Called after the last page of the document has printed.
            </summary>
            <remarks>
            The default implementation raises the EndPrint event.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintDocument.DocumentName">
            <summary>
            Gets or sets the name of the print document.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NPrintDocument.BeginPrint">
            <summary>
            Occurs at the beginning of the printing process.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NPrintDocument.QueryPageSettings">
            <summary>
            Occurs before each PrintPage event.
            </summary>
            <remarks>
            This event can be used to modify page settings (like paper size and orientation) before printing the next page.
            The new page settings will be applied to all subsequent pages of the current print job.
            </remarks>
        </member>
        <member name="E:Nevron.Nov.UI.NPrintDocument.PrintPage">
            <summary>
            Occurs when the print output for the current page is needed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NPrintDocument.EndPrint">
            <summary>
            Occurs after the last page of the document has printed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPrintPageEventArgs">
            <summary>
            Provides data for the PrintPage event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintPageEventArgs.Graphics">
            <summary>
            Gets the graphics object used to paint the page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintPageEventArgs.PageSize">
            <summary>
            Gets the size of the page in DIP.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintPageEventArgs.PrintableRect">
            <summary>
            Gets the printable recatangle. The graphics must be translated to the Top-Left corner of the printable rectangle before painting.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintPageEventArgs.HasMorePages">
            <summary>
            Gets or sets a value indicating whether there are more pages to be printed after the current one.
            </summary>
            <remarks>
            Must be set to true if an additional page should be printed; otherwise, false. The default is false.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintPageEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the printing process should be canceled.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCompositeTool">
            <summary>
            A tool, which is composited of other tools.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Handler for the NMouse.WheelEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseEnter(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.EnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.LeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnGotMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.GotCaptureEvent events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseCaptureIn(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureInEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnMouseCaptureOut(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureOutEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.LostCaptureEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyDownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyUpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Handler for the NKeyboard.InputCharEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.LostFocus event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOverEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragDropEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragEnter(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragEnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnDragLeave(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragLeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCompositeTool.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed. Raises the ParentChangedEvet
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCompositeTool.NCompositeToolSchema">
            <summary>
            Schema associated with NToolGroup
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCompositeTool.ActiveTool">
            <summary>
            Gets the active child tool within this composite tool
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragDropSourceEventArgs">
            <summary>
            Represents the event arguments dispatched by NDragDropSource events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSourceEventArgs.DragDropSource">
            <summary>
            Gets the drag-drop source associated with the operation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragEventArgs">
            <summary>
            Serves as base class for NDragOverChangeEventArgs and NDragOverEventArgs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInputTargetChainEvent">
            <summary>
            Serves as base event arguments for UI events dispatched allong input target chains.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputTargetChainEvent.CreateRoute">
            <summary>
            Overriden to create a custom event route for the input target chain for which this event is raised.
            This chain may not include the current root of the input target, nor follow the current DOM placement of the node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventArgs.DataObject">
            <summary>
            Specifies the DataObject that contains the data associated with this event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventArgs.AllowedEffect">
            <summary>
            Specifies which drag-and-drop operations are allowed by the initiator (or source) of the drag event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventArgs.ScreenPosition">
            <summary>
            Gets the position of the mouse in the screen coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventArgs.TargetPosition">
            <summary>
            Gets the position of the mouse in the target coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventArgs.CurrentTargetPosition">
            <summary>
            Gets the position of the mouse in the current target coordinate system
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragOverChangeEventArgs">
            <summary>
            The event arguments associated with NDragDrop.DragEnterEvent, NDragDrop.DragInEvent, NDragDrop.DragOutEvent and NDragDrop.DragLeaveEvent events.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragOverChangeEventArgs.NewTarget">
            <summary>
            Gets the new drag over target
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragOverChangeEventArgs.OldTarget">
            <summary>
            Gets the old drag over target
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseOverChangeEventArgs">
            <summary>
            The event arguments associated with NMouse.EnterEvent, NMouse.InEvent, NMouse.OutEvent and NMouse.LeaveEvent events.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseTargetChangeEventArgs">
            <summary>
            The data associated with a mouse capture change
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseEventArgs">
            <summary>
            Event arguments associated with mouse events
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventArgs.ScreenPosition">
            <summary>
            Gets the position of the mouse in the screen coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventArgs.TargetPosition">
            <summary>
            Gets the position of the mouse in the target coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventArgs.CurrentTargetPosition">
            <summary>
            Gets the position of the mouse in the current target coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseTargetChangeEventArgs.OldTarget">
            <summary>
            Gets the old target
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseTargetChangeEventArgs.NewTarget">
            <summary>
            Gets the new target
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseWheelEventArgs">
            <summary>
            The event arguments associated with the NMouse.WheelEvent (i.e. when the mouse wheel is rotated).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseWheelEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated. 
            A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseButtonEventArgs">
            <summary>
            The event arguments associated with NMouse.DownEvent and NMouse.UpEvent events (i.e. when a mouse button is pressed or released).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseButtonEventArgs.Button">
            <summary>
            Gets which mouse button was pressed or released
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseButtonEventArgs.State">
            <summary>
            Gets the state of the pressed or released mouse button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseButtonEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseButtonEventArgs.ButtonEvent">
            <summary>
            Gets a known mouse button event for this mouse event data
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.INAutoCompleteListBox">
            <summary>
            Provides common properties and methods implemented by list boxes used by auto complete widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INAutoCompleteListBox.Bind">
            <summary>
            Binds the list box to data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.INAutoCompleteListBox.GetSelectedItem">
            <summary>
            Gets the currently selected item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INAutoCompleteListBox.GetSelectedItemString">
            <summary>
            Gets the string representation of the currently selected utem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.INAutoCompleteListBox.CanHandleKey(Nevron.Nov.UI.ENKeyCode)">
            <summary>
            Checks whether the given keyboard key can be processed.
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.INAutoCompleteListBox.SearchString">
            <summary>
            Gets/Sets the search string.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INAutoCompleteListBox.CaseSensitive">
            <summary>
            Get/Sets whether the search is case sensitive.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.INAutoCompleteListBox.StringMatchMode">
            <summary>
            Gets/Sets the string matching mode.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.INAutoCompleteListBox.ItemSelected">
            <summary>
            Occurs when an item has been selected.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAdvancedGradientBox">
            <summary>
            Represents a control for interactive editing of advanced gradient point positions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of this gradient box.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientBox.NAdvancedGradientBoxSchema">
            <summary>
            Schema associated with NAdvancedGradientBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientBox.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientBox.GripperExtentPercentProperty">
            <summary>
            Reference to the GripperExtentPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientBox.GripperMaxSizeProperty">
            <summary>
            Reference to the GripperMaxSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientBox.UpdateWhileDraggingProperty">
            <summary>
            Reference to the UpdateWhileDragging property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NAdvancedGradientBox.SelectedIndexChanged">
            <summary>
            Occurs when the selected index changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.GripperExtentPercent">
            <summary>
            Gets or sets the extent of the gradient point grippers, measured in percent of the gradient square's width or height.
            </summary>
            <remarks>
            By default set to 5%.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.GripperMaxSize">
            <summary>
            Gets or sets the maximum allowed size for a gradient point gripper (in DIP).
            </summary>
            <remarks>
            The default value is 20 DIP.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.UpdateWhileDragging">
            <summary>
            Gets or sets whether the selected value should be updated while the user drags the Value selector.
            If set to false the selected value is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.SelectedPoint">
            <summary>
            Gets the selected point
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.GradientPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientBox.GradientBackColor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NGradientBar">
            <summary>
            Represents a control for interactive editing of gradient stop positions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of this gradient bar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientBar.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.NGradientBarSchema">
            <summary>
            Schema associated with NGradientBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.GripperExtentPercentProperty">
            <summary>
            Reference to the GripperExtentPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.GripperExtentLimitProperty">
            <summary>
            Reference to the GripperExtentLimit property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.UpdateWhileDraggingProperty">
            <summary>
            Reference to the UpdateWhileDragging property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientBar.OrientationProperty">
            <summary>
            Reference to the Orientation property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NGradientBar.SelectedIndexChanged">
            <summary>
            Occurs when the selected index changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.SelectedIndex">
            <summary>
            Gets or sets the index of the selected point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.GripperExtentPercent">
            <summary>
            Gets or sets the extent of the gradient stop gripper, measured in percent of the gradient bar 
            width/height for vertical/horizontal bar respectively.
            </summary>
            <remarks>
            By default set to 36%.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.GripperExtentLimit">
            <summary>
            Gets or sets the maximum size of the gripper extent, measured in percent of the gradient bar width/height for horizontal/vertical bar respectively.
            </summary>
            <remarks>
            If the size calculated from GripperExtentPercent exceeds the size calculated from GripperExtentLimit, the second one is used.
            By default set to 5%.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.UpdateWhileDragging">
            <summary>
            Gets or sets whether the selected gradient stop should be updated while the user drags the gradient stop gripper.
            If set to false the selected value is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.Orientation">
            <summary>
            Gets or sets the orientation of this gradient bar. By default set to Horizontal.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.SelectedGradientStop">
            <summary>
            Gets the selected gradient stop.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientBar.GradientStops">
            <summary>
            Gets or sets the edited gradient stops collection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NLuminanceColorBar">
            <summary>
            Represents a bar for setting the luminance of a color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NColorBar">
            <summary>
            Base class for all color bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.CreateColorBarRaster">
            <summary>
            Creates the raster for this color bar's background.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.PointFromValue(Nevron.Nov.Graphics.NRectangle,System.Single)">
            <summary>
            Gets the point corresponding to the given value.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.ValueFromPoint(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the value corresponding to the given point.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of this color bar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.OnOrientationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Orientation property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBar.InvalidateColorBarImage">
            <summary>
            Invalidates the color bar image.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBar.NColorBarSchema">
            <summary>
            Schema associated with NColorBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBar.SelectedValueProperty">
            <summary>
            Reference to the SelectedValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBar.ValueSelectorExtendPercentProperty">
            <summary>
            Reference to the ValueSelectorExtendPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBar.UpdateWhileDraggingProperty">
            <summary>
            Reference to the UpdateWhileDragging property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBar.OrientationProperty">
            <summary>
            Reference to the Orientation property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NColorBar.SelectedValueChanged">
            <summary>
            UI event, which occurs when the user selects a new value from this color bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBar.SelectedValue">
            <summary>
            Gets or sets the currently selected color component value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBar.Orientation">
            <summary>
            Gets or sets the orientation of this color bar. By default set to Vertical.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBar.ValueSelectorExtendPercent">
            <summary>
            Gets or sets the extension of the value selector pointers, measured as a percent
            of the color bar width/height for vertical/horizontal color bars respectively.
            By default set to 30%.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBar.UpdateWhileDragging">
            <summary>
            Determines whether the selected value should be updated while the user drags the Value selector.
            If set to false the selected value is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLuminanceColorBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NLuminanceColorBar.CreateColorBarRaster">
            <summary>
            Creates the raster that is used for a background of this luminance color bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLuminanceColorBar.PointFromValue(Nevron.Nov.Graphics.NRectangle,System.Single)">
            <summary>
            Gets the point corresponding to the given value.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NLuminanceColorBar.ValueFromPoint(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the value corresponding to the given point.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NLuminanceColorBar.NLuminanceColorBarSchema">
            <summary>
            Schema associated with NLuminanceColorBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NLuminanceColorBar.BaseColorProperty">
            <summary>
            Reference to the BaseColor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NLuminanceColorBar.BaseColor">
            <summary>
            Gets or sets the color whose luminance to modify.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHsbColorPicker">
            <summary>
            A color picker, which consists of a Saturation-Brightness color box and a hue bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbColorPicker.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbColorPicker.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbColorPicker.OnSelectedColorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the SelectedColor property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbColorPicker.OnHuePositionChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the HuePosition property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.NHsbColorPickerSchema">
            <summary>
            Schema associated with NHsbColorPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.SBColorPickerChild">
            <summary>
            Reference to the SBColorPicker child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.HueBarChild">
            <summary>
            Reference to the HueBar child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.SelectedColorProperty">
            <summary>
            Reference to the SelectedColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbColorPicker.HuePositionProperty">
            <summary>
            Reference to the Orientation property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NHsbColorPicker.SelectedColorChanged">
            <summary>
            UI event, which occurs when the user selects a new color from the color picker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbColorPicker.HuePosition">
            <summary>
            Gets or sets the relative position of the Hue bar in this HSB box color picker.
            The supported values are Left, Top, Right (the default value) and Bottom.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbColorPicker.Spacing">
            <summary>
            Gets or sets the spacing between the Saturation-Brightness color box and the Hue bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbColorPicker.SelectedColor">
            <summary>
            Gets or sets the value of the SelectedColor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbColorPicker.UpdateWhileDragging">
            <summary>
            Gets or sets whether the selected color should be updated while the user drags the Hue or Saturation-Brightness selectors.
            If set to false the selected color is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHueColorBar">
            <summary>
            Represents a color bar for selecting hue value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHueColorBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHueColorBar.CreateColorBarRaster">
            <summary>
            Creates the raster for this color bar's background.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHueColorBar.PointFromValue(Nevron.Nov.Graphics.NRectangle,System.Single)">
            <summary>
            Gets the point corresponding to the given value.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHueColorBar.ValueFromPoint(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the value corresponding to the given point.
            </summary>
            <param name="colorBarRectangle"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NHueColorBar.NHueColorBarSchema">
            <summary>
            Schema associated with NHueColorBar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSBColorPicker">
            <summary>
            A Saturation-Brightness color picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this color box.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSBColorPicker.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSBColorPicker.NSBColorPickerSchema">
            <summary>
            Schema associated with NSBColorPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSBColorPicker.SelectedColorProperty">
            <summary>
            Reference to the SelectedColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSBColorPicker.SBSelectorRadiusPercentProperty">
            <summary>
            Reference to the SBSelectorRadiusPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSBColorPicker.UpdateWhileDraggingProperty">
            <summary>
            Reference to the UpdateWhileDragging property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSBColorPicker.SelectedColorChanged">
            <summary>
            UI event, which occurs when the user selects a new color from this Saturation-Brightness color box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSBColorPicker.SelectedColor">
            <summary>
            Gets or sets the currently selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSBColorPicker.Hue">
            <summary>
            Defines the hue of the currently selected color and should be in the range [0, 360).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSBColorPicker.SBSelectorRadiusPercent">
            <summary>
            Gets or sets the radius percent for the SB selector circle, 
            measured as a percent of lesser of the SB rectangle width and height.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSBColorPicker.UpdateWhileDragging">
            <summary>
            Gets or sets whether the selected color should be updated while the user drags the Saturation-Brightness selector.
            If set to false the selected color is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentBoxSurface">
            <summary>
            Represents a content holder widget that is placed inside the document, hosted by a document box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBoxSurface.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBoxSurface.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentBoxSurface.NDocumentBoxSurfaceSchema">
            <summary>
            Schema associated with NDocumentBoxSurface.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUniSizeBox">
            <summary>
            A content holder, that measures to the uniform size of all unisize boxes that belong to the same group.
            In order for a unisize box to be functional it needs to reside in the subtree of a NUniSizeBoxGroup element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.#ctor(System.String,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="subGroup"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this alignable element.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.OnGroupChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Group property value changes.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBox.OnUniSizeModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the UniSizeMode property value changes.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NUniSizeBox.NUniSizeBoxSchema">
            <summary>
            Schema associated with NUniSizeBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUniSizeBox.UniSizeModeProperty">
            <summary>
            Reference to the UniSizeMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUniSizeBox.GroupProperty">
            <summary>
            Reference to the Group property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUniSizeBox.UniSizeMode">
            <summary>
            Gets or sets whether the only the DesiredWidth, only the DesiredHeight or both the DesiredWidth and DesiredHeight of this item should be 
            equal to the max measure of the items of the same sub-group in the OwnerGroup. By default set to Width.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUniSizeBox.Group">
            <summary>
            Gets or sets the sub-group this item is associated with.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUniSizeBox.OwnerGroup">
            <summary>
            Gets the group in which this item resides. 
            Valid only when the item is inside a document.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUniSizeBoxGroup">
            <summary>
            A content holder, that syncronizes the measure sizes of the NUniSizeBoxes that reside in its subtree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBoxGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUniSizeBoxGroup.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NUniSizeBoxGroup.NUniSizeBoxGroupSchema">
            <summary>
            Schema associated with NUniSizeBoxGroup.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSliderAxis">
            <summary>
            Represents the axis of s slider.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSliderAxis.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSliderAxis.NSliderAxisSchema">
            <summary>
            Schema associated with NSliderAxis.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMeasureUpDown">
            <summary>
            Represents a text box with a spinner to select a numeric value and
            a combo box to select the value's measurement unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNumericUpDown">
            <summary>
            Represents a text box with a spinner that can be used for
            selecting numbers in a specified range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.MeasureItem(System.Boolean)">
            <summary>
            Measures the numeric up down text box.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the numeric up down text box.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.ReceiveHandledMouseDown(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Overriden to return true.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Default handler for the mouse wheel events.
            Overriden to increase/decrease the value with the SmallChange.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to update the owner numeric/up down value from the text box on Enter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Overriden to update the text box's text based on the new value.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnDecimalPlacesChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the DecimalPlaces property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDown.OnSpinnerSpin(Nevron.Nov.UI.NSpinnerSpinEventArgs)">
            <summary>
            Handler for numeric updown spiner spin events
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDown.NNumericUpDownSchema">
            <summary>
            Schema associated with NNumericUpDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDown.TextBoxChild">
            <summary>
            Reference to the TextBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDown.DecimalPlacesProperty">
            <summary>
            Reference to the DecimalPlacesProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDown.DefaultSizeMeasureValueProperty">
            <summary>
            Reference to the DefaultSizeMeasureValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDown.StepProperty">
            <summary>
            Reference to the Step property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDown.TextBox">
            <summary>
            Gets or sets the text box
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of digits shown after the decimal point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDown.Step">
            <summary>
            Gets or sets the value of the Step property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDown.DefaultSizeMeasureValue">
            <summary>
            Gets or sets a value that is used to measure the default size of the numeric up down.
            </summary>
            <remarks>
            It is recommended to set a value to this property that is close or bigger that the abs(minimum) and maximum values of the up down.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.#ctor(Nevron.Nov.NUnit[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.NUnit})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.MeasureItem(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.FillUnitComboBox(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.NUnit})">
            <summary>
            Fills the unit combo box with the given measurement units.
            </summary>
            <param name="iter"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.GetUnitName(Nevron.Nov.NUnit)">
            <summary>
            Gets the name by which the given unit will be listed in the unit combo box.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMeasureUpDown.OnUnitComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a new measurement unit is selected from the unit combo box.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMeasureUpDown.NMeasureUpDownSchema">
            <summary>
            Schema associated with NMeasureUpDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMeasureUpDown.UnitComboBoxChild">
            <summary>
            Reference to the UnitComboBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMeasureUpDown.SelectedUnitProperty">
            <summary>
            Reference to the SelectedUnit property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NMeasureUpDown.SelectedUnitChanged">
            <summary>
            Occurs when the Selected property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMeasureUpDown.UnitComboBox">
            <summary>
            Gets or sets the UnitComboBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMeasureUpDown.SelectedUnit">
            <summary>
            Gets or sets the currently selected unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToolBarBuilder">
            <summary>
            Creates a toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToolBarBuilder.#ctor(System.String)">
            <summary>
            Creates a toolbar builder with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToolBarBuilder.Create">
            <summary>
            Creates a toolbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NToolBarBuilder.StartsOnNewLane">
            <summary>
            Determines whether the toolbar created by this builder should be on a new command bar lane or not.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDesktopDocument">
            <summary>
            Represents the document that contains the Desktop element
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDesktopDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktopDocument.NDesktopDocumentSchema">
            <summary>
            Schema associated with NDesktopDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarCloseButton">
            <summary>
            The close button in a title bar's control box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarButton">
            <summary>
            A symbol button that serves as base class for the typical buttons in a title bar - close, minimize, maximize/restore and help.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarButton.NTitleBarButtonSchema">
            <summary>
            Schema associated with NTitleBarButton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarCloseButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarCloseButton.NTitleBarCloseButtonSchema">
            <summary>
            Schema associated with NTitleBarCloseButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarHelpButton">
            <summary>
            The help button in a title bar's control box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarHelpButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarHelpButton.NTitleBarHelpButtonSchema">
            <summary>
            Schema associated with NTitleBarHelpButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarMaximizeButton">
            <summary>
            The maximize button in a title bar's control box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarMaximizeButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarMaximizeButton.NTitleBarMaximizeButtonSchema">
            <summary>
            Schema associated with NTitleBarMaximizeButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarMinimizeButton">
            <summary>
            The minimize button in a title bar's control box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarMinimizeButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarMinimizeButton.NTitleBarMinimizeButtonSchema">
            <summary>
            Schema associated with NTitleBarMinimizeButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarControlBox">
            <summary>
            A widget that consists of 3 title bar buttons - Minimize, Maximize and Close.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarControlBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarControlBox.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarControlBox.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarControlBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.NTitleBarControlBoxSchema">
            <summary>
            Schema associated with NTitleBarControlBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.HelpButtonChild">
            <summary>
            Reference to the HelpButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.MinimizeButtonChild">
            <summary>
            Reference to the MinimizeButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.MaximizeButtonChild">
            <summary>
            Reference to the MaximizeButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.CloseButtonChild">
            <summary>
            Reference to the CloseButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.CloseButtonFirstProperty">
            <summary>
            Reference to the CloseButtonFirst property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarControlBox.CloseButtonSpacingProperty">
            <summary>
            Reference to the CloseButtonSpacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.HelpButton">
            <summary>
            Gets or sets the HelpButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.MinimizeButton">
            <summary>
            Gets or sets the MinimizeButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.MaximizeButton">
            <summary>
            Gets or sets the MaximizeButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.CloseButton">
            <summary>
            Gets or sets the CloseButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.CloseButtonFirst">
            <summary>
            If set to true the Close button will be placed before the other buttons.
            By default set to false (i.e. the Close button is last).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBarControlBox.CloseButtonSpacing">
            <summary>
            Gets or sets the spacing between the Close button and the one adjacent to it.
            By default set to 0.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarHeader">
            <summary>
            Represents the header of a title bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarHeader.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarHeader.NTitleBarHeaderSchema">
            <summary>
            Schema associated with NTitleBarHeader.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarMenuDropDown">
            <summary>
            The drop down menu of a title bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarMenuDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarMenuDropDown.NTitleBarMenuDropDownSchema">
            <summary>
            Schema associated with NTitleBarMenuDropDown.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBar">
            <summary>
            Represents the title bar of a window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.NTitleBarSchema">
            <summary>
            Schema associated with NTitleBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.MenuDropDownChild">
            <summary>
            Reference to the MenuDropDown child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.NearItemsChild">
            <summary>
            Reference to the NearItems child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.HeaderChild">
            <summary>
            Reference to the Header child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.FarItemsChild">
            <summary>
            Reference to the FarItems child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.ControlBoxChild">
            <summary>
            Reference to the ControlBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBar.InvertedProperty">
            <summary>
            Reference to the Inverted property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.MenuDropDown">
            <summary>
            Gets or sets the MenuDropDown child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.NearItems">
            <summary>
            Gets or sets the NearItems child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.Header">
            <summary>
            Gets or sets the Header child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.FarItems">
            <summary>
            Gets or sets the FarItems child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.ControlBox">
            <summary>
            Gets or sets the ControlBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTitleBar.Inverted">
            <summary>
            Gets or sets the value of the Inverted property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTitleBarItemCollection">
            <summary>
            A collection of widgets that reside in a title bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarItemCollection.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTitleBarItemCollection.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NTitleBarItemCollection.NTitleBarItemCollectionSchema">
            <summary>
            Schema associated with NTitleBarItemCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NZoomSlider">
            <summary>
            A widget that consists of a slider and zoom in/zoom out buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSlider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSlider.#ctor(Nevron.Nov.UI.NZoomSlider)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NZoomSlider.NZoomSliderSchema">
            <summary>
            Schema associated with NZoomSlider.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NZoomSlider.ScalePercentChanged">
            <summary>
            Occurs when the ScalePercent property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NZoomSlider.ScalePercent">
            <summary>
            Gets or sets the current scaling percent (must be in the interval from 10 to 500).
            If you set a smaller or larger value, it will be automatically clamped.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NZoomSliderCommandSource">
            <summary>
            A command source that can be applied to NMenuItem instances.
            It subsrcibes for the NMenuItem.Click event to execute the command with empty parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element Checked property
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NZoomSliderCommandSource.OnZoomSliderScalePercentChanged(System.Int32)">
            <summary>
            Called when the zoom percent of the slider has changed
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NZoomSliderCommandSource.NZoomSliderCommandSourceSchema">
            <summary>
            Schema associated with NZoomSliderCommandSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStylePropertyEx">
            <summary>
            A static class, that contains extended properties used for additional styling purposes.
            Defines the ExtendedLook, IsSelected and IsHighlighted extended properties and the respective helper methods for working with them.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.SetExtendedLook(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.ENExtendedLook)">
            <summary>
            Sets the ExtendedLookPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.GetExtendedLook(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the ExtendedLookPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.ClearExtendedLook(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the ExtendedLookPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.SetIsSelected(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Sets the IsSelectedPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.GetIsSelected(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the IsSelectedPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.ClearIsSelected(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the IsSelectedPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.SetIsHighlighted(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Sets the IsHighlightedPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.GetIsHighlighted(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the IsHighlightedPropertyEx value for the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStylePropertyEx.ClearIsHighlighted(Nevron.Nov.Dom.NNode)">
            <summary>
            Clears the IsHighlightedPropertyEx from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NStylePropertyEx.ExtendedLookPropertyEx">
            <summary>
            Reference to the ExtendedLook extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStylePropertyEx.IsSelectedPropertyEx">
            <summary>
            Reference to the IsSelected extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStylePropertyEx.IsHighlightedPropertyEx">
            <summary>
            Reference to the IsHighlighed extended property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPrintMediaDocument`1">
            <summary>
            Represents a paged media document, which facilitates the printing of elements that implement the INPagedElement interface.
            In practice you will not use this class directly, but instread use the build-in printing methods in each NOV product.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.Print(`0,System.Object)">
            <summary>
            Prints this document by first showing the print dialog.
            The operation is associated with the specified custom data that is available during printing in the NPagedContext.
            </summary>
            <param name="printVisual"></param>
            <param name="customData"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.OnBeginPrint(Nevron.Nov.UI.NPrintDocument,Nevron.Nov.UI.NBeginPrintEventArgs)">
            <summary>
            Called when printing begins.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.OnQueryPageSettings(Nevron.Nov.UI.NPrintDocument,Nevron.Nov.UI.NQueryPageSettingsEventArgs)">
            <summary>
            Called before printing a page to modify the page settings
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.OnPrintPage(Nevron.Nov.UI.NPrintDocument,Nevron.Nov.UI.NPrintPageEventArgs)">
            <summary>
            Called when a print page needs to be displayed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPrintMediaDocument`1.OnEndPrint(Nevron.Nov.UI.NPrintDocument,Nevron.Nov.UI.NEndPrintEventArgs)">
            <summary>
            Called when printing ends
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NPrintMediaDocument`1.NPrintMediaDocumentSchema">
            <summary>
            Reference to the NPrintMediaDocument Schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintMediaDocument`1.PrintDocument">
            <summary>
            Gets the print document that this job uses
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPrintMediaDocument`1.PrintDialog">
            <summary>
            Gets the print dialog that this job uses
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPagedContextState">
            <summary>
            Enumerates the print context states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPagedContextState.Begin">
            <summary>
            The begin of the paging.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPagedContextState.QueryPageSettings">
            <summary>
            The query for obtaining page settings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPagedContextState.PrintPage">
            <summary>
            The query before each print page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPagedContextState.End">
            <summary>
            The end of the paging.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUIThemeScheme">
            <summary>
            Enumerates the predefined Windows Classic Theme schemes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Brick">
            <summary>
            Brick
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Desert">
            <summary>
            Desert
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Eggplant">
            <summary>
            Eggplant
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.HighContrast1">
            <summary>
            High Contrast 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.HighContrast2">
            <summary>
            High Contrast 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.HighContrastBlack">
            <summary>
            High Contrast Black
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.HighContrastWhite">
            <summary>
            High Contrast White
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Lilac">
            <summary>
            Lilac
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Maple">
            <summary>
            Maple
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Marine">
            <summary>
            Marine
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Plum">
            <summary>
            Plum
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Pumpkin">
            <summary>
            Pumpkin
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.RainyDay">
            <summary>
            Rainy Day
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.RedWhiteAndBlue">
            <summary>
            Red White and Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Rose">
            <summary>
            Rose
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Slate">
            <summary>
            Slate
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Spruce">
            <summary>
            Spruce
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Storm">
            <summary>
            Storm
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.WindowsStandard">
            <summary>
            Windows Standard
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.WindowsClassic">
            <summary>
            Windows Classic
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.XPBlue">
            <summary>
            XP Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.XPOlive">
            <summary>
            XP Olive
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.XPSilver">
            <summary>
            XP Silver
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Windows7Aero">
            <summary>
            Windows 7 Aero
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.Windows8">
            <summary>
            Windows 8
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeScheme.MacLion">
            <summary>
            Mac OS X Lion
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUIThemeColor">
            <summary>
            Enumerates the UI theme colors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ActiveBorder">
            <summary>
            Active border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ActiveCaption">
            <summary>
            Active caption color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ActiveCaptionText">
            <summary>
            Active caption text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.AppWorkspace">
            <summary>
            Application workspace color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonFace">
            <summary>
            Button face color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonHighlight">
            <summary>
            Button highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonShadow">
            <summary>
            Button shadow color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Control">
            <summary>
            Control color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ControlDark">
            <summary>
            Control dark color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ControlDarkDark">
            <summary>
            Control dark dark color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ControlLight">
            <summary>
            Control light color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ControlLightLight">
            <summary>
            Control light light color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ControlText">
            <summary>
            Control text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Desktop">
            <summary>
            Desktop color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.GradientActiveCaption">
            <summary>
            Gradient active caption color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.GradientInactiveCaption">
            <summary>
            Gradient inactive caption color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.GrayText">
            <summary>
            Gray text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Highlight">
            <summary>
            Highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.HighlightText">
            <summary>
            Highlight text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.HotTrack">
            <summary>
            Hot track color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.InactiveBorder">
            <summary>
            Inactive border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.InactiveCaption">
            <summary>
            Inactive caption color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.InactiveCaptionText">
            <summary>
            Inactive caption text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.InfoText">
            <summary>
            Info text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Menu">
            <summary>
            Menu color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuBar">
            <summary>
            Menu bar color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuHighlight">
            <summary>
            Menu highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuText">
            <summary>
            Menu text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ScrollBar">
            <summary>
            Scroll bar color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.Window">
            <summary>
            Window color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.WindowFrame">
            <summary>
            Window frame color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.WindowText">
            <summary>
            Window text color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonCheckedGradientBegin">
            <summary>
            Button checked - gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonCheckedGradientEnd">
            <summary>
            Button checked - gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonCheckedGradientMiddle">
            <summary>
            Button checked - gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonCheckedHighlight">
            <summary>
            Button checked highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonCheckedHighlightBorder">
            <summary>
            Button checked highlight border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedBorder">
            <summary>
            Button pressed - border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedGradientBegin">
            <summary>
            Button pressed - gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedGradientEnd">
            <summary>
            Button pressed - gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedGradientMiddle">
            <summary>
            Button pressed - gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedHighlight">
            <summary>
            Button pressed highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonPressedHighlightBorder">
            <summary>
            Button pressed highlight border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedBorder">
            <summary>
            Button selected - border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedGradientBegin">
            <summary>
            Button selected - gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedGradientEnd">
            <summary>
            Button selected - gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedGradientMiddle">
            <summary>
            Button selected - gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedHighlight">
            <summary>
            Button selected highlight color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ButtonSelectedHighlightBorder">
            <summary>
            Button selected highlight border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.CheckBackground">
            <summary>
            Check background color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.CheckPressedBackground">
            <summary>
            Check pressed background color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.CheckSelectedBackground">
            <summary>
            Check selected background color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.GripDark">
            <summary>
            Grip dark color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.GripLight">
            <summary>
            Grip light color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginGradientBegin">
            <summary>
            Image margin gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginGradientEnd">
            <summary>
            Image margin gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginGradientMiddle">
            <summary>
            Image margin gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginRevealedGradientBegin">
            <summary>
            Image margin revealed gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginRevealedGradientEnd">
            <summary>
            Image margin revealed gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ImageMarginRevealedGradientMiddle">
            <summary>
            Image margin revealed gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuBorder">
            <summary>
            Menu border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemBorder">
            <summary>
            Menu item border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemPressedGradientBegin">
            <summary>
            Menu item pressed gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemPressedGradientEnd">
            <summary>
            Menu item pressed gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemPressedGradientMiddle">
            <summary>
            Menu item pressed gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemSelected">
            <summary>
            Menu item selected color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemSelectedGradientBegin">
            <summary>
            Menu item selected gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuItemSelectedGradientEnd">
            <summary>
            Menu item selected gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuStripGradientBegin">
            <summary>
            Menu strip gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.MenuStripGradientEnd">
            <summary>
            Menu strip gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.OverflowButtonGradientBegin">
            <summary>
            Overflow button gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.OverflowButtonGradientEnd">
            <summary>
            Overflow button gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.OverflowButtonGradientMiddle">
            <summary>
            Overflow button gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.RaftingContainerGradientBegin">
            <summary>
            Rafting container gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.RaftingContainerGradientEnd">
            <summary>
            Rafting container gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.SeparatorDark">
            <summary>
            Separator dark color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.SeparatorLight">
            <summary>
            Separator light color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.StatusStripGradientBegin">
            <summary>
            Status strip gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.StatusStripGradientEnd">
            <summary>
            Status strip gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripBorder">
            <summary>
            Tool strip border color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripContentPanelGradientBegin">
            <summary>
            Tool strip content panel gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripContentPanelGradientEnd">
            <summary>
            Tool strip content panel gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripDropDownBackground">
            <summary>
            Tool strip drop down background color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripGradientBegin">
            <summary>
            Tool strip gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripGradientEnd">
            <summary>
            Tool strip gradient end color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripGradientMiddle">
            <summary>
            Tool strip gradient middle color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripPanelGradientBegin">
            <summary>
            Tool strip panel gradient begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeColor.ToolStripPanelGradientEnd">
            <summary>
            Tool strip panel gradient end color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUIThemeFont">
            <summary>
            Enumerates the UI theme fonts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.Caption">
            <summary>
            Caption font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.SmallCaption">
            <summary>
            Small caption font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.Menu">
            <summary>
            Menu font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.Status">
            <summary>
            Status font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.MessageBox">
            <summary>
            Message box font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.IconTitle">
            <summary>
            Icon title font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.Default">
            <summary>
            Default font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeFont.Dialog">
            <summary>
            Dialog font.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUIThemePart">
            <summary>
            Enumerates the UI theme image skins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.Button">
            <summary>
            Denotes an image skin for a button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.CheckBox">
            <summary>
            Denotes an image skin for a check box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.RadioButton">
            <summary>
            Denotes an image skin for a radio button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TextBox">
            <summary>
            Denotes an image skin for a text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.DropDownEdit">
            <summary>
            Denotes an image skin for a drop down edit.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.DropDownButton">
            <summary>
            Denotes an image skin for a drop down button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.DropDownSymbol">
            <summary>
            Denotes an image skin for a drop down symbol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.DateTimeBoxDropDownButton">
            <summary>
            Denotes an image skin for the drop down button of a date time box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SplitButtonDropDownButton">
            <summary>
            Denotes an image skin for the drop down button of a split button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.LargeArrowLeft">
            <summary>
            Denotes an image skin for a large left oriented arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.LargeArrowRight">
            <summary>
            Denotes an image skin for a large right oriented arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderAxis">
            <summary>
            Denotes an image skin for a slider axis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbUp">
            <summary>
            Denotes an image skin for a slider thumb with up orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbDown">
            <summary>
            Denotes an image skin for a slider thumb with down orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbUpDown">
            <summary>
            Denotes an image skin for a slider thumb with both up and down orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbLeft">
            <summary>
            Denotes an image skin for a slider thumb with left orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbRight">
            <summary>
            Denotes an image skin for a slider thumb with right orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SliderThumbLeftRight">
            <summary>
            Denotes an image skin for a slide thumb with both left and right orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarHorizontal">
            <summary>
            Denotes a skin for a horizontal progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarHorizontalCompletedPart">
            <summary>
            Denotes a skin for the completed part of a horizontal progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarVertical">
            <summary>
            Denotes a skin for a vertical progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarVerticalCompletedPart">
            <summary>
            Denotes a skin for the completed part of a vertical progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarCircular">
            <summary>
            Denotes a skin for a circular progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.ProgressBarCircularCompletedPart">
            <summary>
            Denotes a skin for the completed part of a circular progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerVerticalIncreaseButton">
            <summary>
            Denotes an image skin for the increase button of a vertical spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerVerticalDecreaseButton">
            <summary>
            Denotes an image skin for for the decrease button of a vertical spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerHorizontalIncreaseButton">
            <summary>
            Denotes an image skin for the increase button of a horizontal spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerHorizontalDecreaseButton">
            <summary>
            Denotes an image skin for the decrease button of a horizontal spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerUpGlyph">
            <summary>
            Denotes an image skin for the upward oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerDownGlyph">
            <summary>
            Denotes an image skin for the downward oriented gyph of a spinner button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerLeftGlyph">
            <summary>
            Denotes an image skin for the left oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.SpinnerRightGlyph">
            <summary>
            Denotes an image skin for the right oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.UpDown">
            <summary>
            Denotes an image skin for an up down widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.NumericUpDownIncreaseButton">
            <summary>
            Denotes an image skin for the increase button of a numeric up down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.NumericUpDownDecreaseButton">
            <summary>
            Denotes an image skin for the decrease button of a numeric up down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.NumericUpDownUpGlyph">
            <summary>
            Denotes an image skin for the upward oriented glyph of a numeric up down's button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.NumericUpDownDownGlyph">
            <summary>
            Denotes an image skin for the downward oriented glyph of a numeric up down's button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarIncreaseShaft">
            <summary>
            Denotes an image skin for the increase shaft of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarDecreaseShaft">
            <summary>
            Denotes an image skin for the decrease shaft of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarThumb">
            <summary>
            Denotes an image skin for the thumb of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarIncreaseButton">
            <summary>
            Denotes an image skin for the increase button of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarDecreaseButton">
            <summary>
            Denotes an image skin for the decrease button of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarLeftArrow">
            <summary>
            Denotes an image skin for the left arrow of horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarRightArrow">
            <summary>
            Denotes an image skin for the right arrow of horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.HScrollBarGripper">
            <summary>
            Denotes an image skin for the gripper of a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarIncreaseShaft">
            <summary>
            Denotes an image skin for the increase shaft of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarDecreaseShaft">
            <summary>
            Denotes an image skin for the decrease shaft of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarThumb">
            <summary>
            Denotes an image skin for the thumb of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarIncreaseButton">
            <summary>
            Denotes an image skin for the increase button of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarDecreaseButton">
            <summary>
            Denotes an image skin for the decrease button of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarUpArrow">
            <summary>
            Denotes an image skin for the up arrow of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarDownArrow">
            <summary>
            Denotes an image skin for the down arrow of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.VScrollBarGripper">
            <summary>
            Denotes an image skin for the gripper of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.GroupBox">
            <summary>
            Denotes an image skin for a group box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TreeViewItemSymbolCollapsed">
            <summary>
            Denotes an image skin for the collapsed symbol of a tree view item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TreeViewItemSymbolExpanded">
            <summary>
            Denotes an image skin for the expanded symbol of a tree view item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TabPane">
            <summary>
            Denotes an image skin for a tab pane.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBar">
            <summary>
            Denotes an image skin for a title bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarButton">
            <summary>
            Denotes an image skin for a title bar button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarCloseButton">
            <summary>
            Denotes an image skin for the title bar close button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarMinimizeGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar minimize button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarMaximizeGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar maximize button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarCloseGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar close button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarRestoreGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar restore button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarHelpGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar help button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.TitleBarMenuDropDownGlyph">
            <summary>
            Denotes an image skin for the glyph of the title bar menu drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemePart.Window">
            <summary>
            Denotes an image skin for a window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUIThemeTabPageHeaderSkin">
            <summary>
            Enumerates the tab page header skins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeTabPageHeaderSkin.Left">
            <summary>
            Denotes tab page headers left skin.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeTabPageHeaderSkin.Top">
            <summary>
            Denotes tab page headers top skin.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeTabPageHeaderSkin.Right">
            <summary>
            Denotes tab page headers right skin.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUIThemeTabPageHeaderSkin.Bottom">
            <summary>
            Denotes tab page headers bottom skin.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENWindows8WindowColor">
            <summary>
            Enumerates the Windows 8 window colors. They are used to skin the title bar
            and the window frame of a Windows 8 theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color1">
            <summary>
            Gray like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color2">
            <summary>
            Light blue like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color3">
            <summary>
            Light pink like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color4">
            <summary>
            Yellow like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color5">
            <summary>
            Light green like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color6">
            <summary>
            Green-blue like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color7">
            <summary>
            Orange like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color8">
            <summary>
            Red like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color9">
            <summary>
            Pink like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color10">
            <summary>
            Green like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color11">
            <summary>
            Purple like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color12">
            <summary>
            Blue like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color13">
            <summary>
            Violet like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color14">
            <summary>
            Brown-gray like color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindows8WindowColor.Color15">
            <summary>
            Almost white color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWindows8Theme">
            <summary>
            An UI theme that mimics the Windows 8 theme.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIPartSkinsTheme">
            <summary>
            Serves as base class for all Nevron User Interface themes, which use image skins to rule widgets.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUITheme">
            <summary>
            This is the base class of all Nevron User Interface themes. It also defines
            the most commonly used theme states and contexts.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NTheme">
            <summary>
            Represents a theme. In Nevron Open Vision a theme is a factory for a single stylesheet, 
            that contains the theme rules. A theme can be applied to a document, which essentially 
            replaces the stylesheet (if any) that was created for a theme of the same type.
            </summary>
            <remarks>
            There is a certain theme type that is assigned to each theme. 
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetThemeType">
            <summary>
            Must override to return the theme type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateStyleSheet">
            <summary>
            Creates the stylesheet of the theme.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSkinner(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            
            </summary>
            <param name="baseSchema"></param>
            <param name="skinType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSkinner(Nevron.Nov.Dom.NSchema,System.Object,Nevron.Nov.Dom.NThemingState)">
            <summary>
            
            </summary>
            <param name="baseSchema"></param>
            <param name="skinType"></param>
            <param name="preState"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSkinner(Nevron.Nov.Dom.NSchema,System.Object,Nevron.Nov.Dom.NThemingState,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            
            </summary>
            <param name="baseSchema"></param>
            <param name="skinType"></param>
            <param name="preState"></param>
            <param name="defaultContext"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSkin(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the general skin for the specified schema.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSkin(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            
            </summary>
            <param name="schema"></param>
            <param name="skinType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetRule(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the rule associated with the given target.
            </summary>
            <param name="baseSchema"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetRule(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets the rule associated with the given baseSchema in the specified context.
            </summary>
            <param name="baseSchema"></param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetRule(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NSchema[],Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets the rule associated with the given baseSchema and selector parts parameters
            </summary>
            <param name="baseSchema"></param>
            <param name="excludedBaseSchemas"></param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateState(Nevron.Nov.Function{Nevron.Nov.Dom.NSelectorBuilder})">
            <summary>
            Defines a new basic state with the specified build selector delegate.
            </summary>
            <param name="buildSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateState(Nevron.Nov.Dom.NThemingState[])">
            <summary>
            Creates a composite state from the given states. Null states are skipped.
            </summary>
            <param name="statesParams"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateContext(Nevron.Nov.Function{Nevron.Nov.Dom.NSelectorBuilder})">
            <summary>
            Defines a new basic context with the specified build selector delegate.
            </summary>
            <param name="buildSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateContext(Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Creates a composite context from the given selector parts.
            </summary>
            <param name="partsParams"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreatetStateBefore(Nevron.Nov.Dom.NThemeSelectorPart,Nevron.Nov.Function{Nevron.Nov.Dom.NSelectorBuilder})">
            <summary>
            Defines a new basic state with the specified build selector delegate, and inserts it before the specified part in the basic parts registry.
            </summary>
            <param name="selectorPart"></param>
            <param name="buildSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateChildOfTypeContext(Nevron.Nov.Dom.NSchema)">
            <summary>
            Creates a new basic context that matches elements that are children of an element with the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateNamedChildState(Nevron.Nov.Dom.NChild)">
            <summary>
            Creates a new basic context that matches elements that are children of an element that is a named child of another element.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateContextBefore(Nevron.Nov.Dom.NThemeSelectorPart,Nevron.Nov.Function{Nevron.Nov.Dom.NSelectorBuilder})">
            <summary>
            Defines a new basic context with the specified build selector delegate, and inserts it before the specified part in the basic parts registry.
            </summary>
            <param name="selectorPart"></param>
            <param name="buildSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateCompositePart(Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Creates a composite context from the given selector parts. The context cannot be null.
            </summary>
            <param name="partsParams"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.CreateTheme">
            <summary>
            Creates the theme skins, from which to build the theme rules.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NTheme.NormalState">
            <summary>
            An empty state that does not emit any condition.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NTheme.InParentContext">
            <summary>
            A theming context that emits a Child combinator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NTheme.DefaultSkinType">
            <summary>
            The default skin type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTheme.GetSheetAuthor(System.String)">
            <summary>
            Facility method, that returns the value to be set to a stylesheet Author property,
            for a stylesheet created by a theme of the specified type.
            </summary>
            <param name="themeType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NTheme.Title">
            <summary>
            Gets or sets the title of the theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ThemeType">
            <summary>
            The UI theme type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetThemeType">
            <summary>
            Overriden to return the "UI" string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateHorizontalCommandBarFill">
            <summary>
            Creates the fill for horizontal command bars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateVerticalCommandBarFill">
            <summary>
            Creates the fill for vertical command bars.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateCommandBarsDockFill">
            <summary>
            Creates the fill for command bar docks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateHeadersColumnFill">
            <summary>
            Creates the fill for command bar headers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateMenuFill">
            <summary>
            Creates the fill for menus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.FilledPickerCellDefaults(Nevron.Nov.Dom.NSchema,System.Double,System.Double,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the specified settings to the specified filled picker schema
            </summary>
            <param name="schema"></param>
            <param name="preferredWidth"></param>
            <param name="preferredHeight"></param>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.FlatButtonPressedFace(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the border and background of a flat pressed button
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.FlatButtonCheckedFace(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the border and background of a flat checked button
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.FlatButtonHighlightedFace(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the border and background of a flat highlighted button
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.FlatButtonSelectedFace(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the border and background of a selected button
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.SkinCommonStates(Nevron.Nov.UI.NUIPartSkinner)">
            <summary>
            Skins the common states: 
            Normal = 0,
            MouseOver = 1,
            Pressed = 2,
            Disabled = 3
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.SkinCommonStates(Nevron.Nov.UI.NUIPartSkinner,System.Int32)">
            <summary>
            Skins the common states, starting from the specified index
            Normal = startIndex + 0,
            MouseOver = startIndex + 1,
            Pressed = startIndex + 2,
            Disabled = startIndex + 3
            </summary>
            <param name="skinner"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetBoxUIPartSkinner(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets an image skinner, that skins box elements that are instances of the specified target schema.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetBoxUIPartSkinner(Nevron.Nov.Dom.NSchema,Nevron.Nov.UI.NUIPartSkin)">
            <summary>
            Gets an image skinner, that skins box elements that are instances of the specified target schema.
            </summary>
            <param name="schema"></param>
            <param name="skin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetBoxUIPartSkinner(Nevron.Nov.Dom.NSchema,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets an image skinner, that skins box elements that are instances of the specified target schema.
            </summary>
            <param name="schema"></param>
            <param name="skin"></param>
            <param name="defaultContext"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetBoxUIPartSkinner(Nevron.Nov.Dom.NSchema,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NThemingState,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets an image skinner, that skins box elements that are instances of the specified target schema.
            </summary>
            <param name="schema"></param>
            <param name="skin"></param>
            <param name="preState"></param>
            <param name="defaultContext"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetSymbolUIPartSkinner(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NProperty,Nevron.Nov.UI.NUIPartSkin)">
            <summary>
            Gets an image skinner, that skins a symbol property of the specified target schema.
            </summary>
            <param name="schema"></param>
            <param name="symbolProperty"></param>
            <param name="skin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetSymbolUIPartSkinner(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NProperty,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets an image skinner, that skins a symbol property of the specified target schema.
            </summary>
            <param name="schema"></param>
            <param name="symbolProperty"></param>
            <param name="skin"></param>
            <param name="defaultContext"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinBorderThickness(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets thin border thickness.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinBorderThickness(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets thin border thickness.
            </summary>
            <param name="style"></param>
            <param name="borderThicknessProperty"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickBorderThickness(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets thick border thickness.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickBorderThickness(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets thick border thickness.
            </summary>
            <param name="style"></param>
            <param name="borderThicknessProperty"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.BorderThickness(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets border thickness.
            </summary>
            <param name="style"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Border(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.UI.NBorder)">
            <summary>
            Sets border.
            </summary>
            <param name="style"></param>
            <param name="border"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Border(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets border.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinBorder(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets thin border with the specified color.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinControlDarkBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinControlDarkDarkBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinControlTextBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinButtonPressedBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinControlBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinWindowFrameBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinWindowBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThinWindowFrameRoundFrameBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickBorder(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets normal border with the specified color
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickControlDarkBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickSunken3DBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ThickRaised3DBorder(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Background(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NFill)">
            <summary>
            Sets background fill.
            </summary>
            <param name="style"></param>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Background(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            Sets background fill
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ControlBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets Control background 
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.WindowBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets Window background 
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HighlightBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets Highlight background
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GhostBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.InfoBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.WindowBackground(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.WindowWindowBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets Window color to WindowBackgroundFill
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ControlWindowBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets Control color to WindowBackgroundFill
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HighlightWindowBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HighlightTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets text fill to Settings.HighlightText
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GrayTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets text fill to Settings.GrayText
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ControlTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets text fill to Settings.ControlText
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HotTrackTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets text fill to Settings.HotTrack
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ActiveCaptionTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.InactiveCaptionTextFill(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.TextFill(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ControlTextStroke(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets a stroke with ControlText theme color as a style for the given property.
            </summary>
            <param name="style"></param>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GrayTextStroke(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets a stroke with GrayText theme color as a style for the given property.
            </summary>
            <param name="style"></param>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.StrokedXSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a stroked X symbol with the given color.
            </summary>
            <param name="style">The theme style to add the definition to.</param>
            <param name="symbolProperty">The symbol property to style.</param>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.UnderscoreSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates an underscore symbol in lower left corner of an 8x8 rectangle.
            </summary>
            <param name="style">The theme style to add the definition to.</param>
            <param name="symbolProperty">The symbol property to style.</param>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.WindowSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a window minuature symbol.
            </summary>
            <param name="style">The theme style to add the definition to.</param>
            <param name="symbolProperty">The symbol property to style.</param>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.DoubleWindowSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a double window symbol.
            </summary>
            <param name="style">The theme style to add the definition to.</param>
            <param name="symbolProperty">The symbol property to style.</param>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.QuestionSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a Question symbol shape.
            </summary>
            <param name="style">The theme style to add the definition to.</param>
            <param name="symbolProperty">The symbol property to style.</param>
            <param name="color">The color of the symbol.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.TriangleLeftSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.TriangleRightSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.BeakDownSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
            <param name="strokeColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.BeakUpSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
            <param name="strokeColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.RectangleSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
            <param name="strokeColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.TriangleUpSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.TriangleDownSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.SmallTriangleUpSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.SmallTriangleDownSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Margins(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the specified margins
            </summary>
            <param name="style"></param>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearMargins(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the margins to Zero.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Padding(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the specified padding
            </summary>
            <param name="style"></param>
            <param name="padding"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.DefaultPadding(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets default padding.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.PressedPadding(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets pressed padding
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearPadding(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the padding to Zero.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.DefaultFont(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Applies a default font.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.DefaultFont(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Applies a default font with the given font style.
            </summary>
            <param name="style"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.DefaultFont(Nevron.Nov.Dom.NThemeStyle,System.Double,Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Applies a default font with the given size and font style.
            </summary>
            <param name="style"></param>
            <param name="fontSize">Font size in points.</param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.VerticalPlacementCenter(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets VerticalPlacement to ENVerticalAlignment.Center
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HorizontalPlacementLeft(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets HorizontalPlacement to ENHorizontalPlacement.Left
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.HorizontalPlacementCenter(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets HorizontalPlacement to ENHorizontalPlacement.Center
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.PreferredSize(Nevron.Nov.Dom.NThemeStyle,System.Double,System.Double)">
            <summary>
            Sets the preferred size of the given theming style to the specified width and height.
            </summary>
            <param name="style"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.PreferredWidth(Nevron.Nov.Dom.NThemeStyle,System.Double)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="width"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.PreferredHeight(Nevron.Nov.Dom.NThemeStyle,System.Double)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Clears the background of the given theming style.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBackground(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NThemingState[])">
            <summary>
            Clears the background of the theming style associated with the specified
            target and each of the given states.
            </summary>
            <param name="target"></param>
            <param name="states"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBorderAndBorderThickness(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Clears the border and sets the border thikness to 0.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBorderAndBorderThickness(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NThemingState[])">
            <summary>
            Clears the border and border thickness of the theming style associated with the specified
            target and each of the given states.
            </summary>
            <param name="target"></param>
            <param name="states"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBorderAndBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Clears the border and the background of the given theming style.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.ClearBorderAndBackground(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NThemingState[])">
            <summary>
            Clears the border and the background of the theming style associated with the specified
            target and each of the given states.
            </summary>
            <param name="target"></param>
            <param name="states"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.Cursor(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.UI.ENPredefinedCursor)">
            <summary>
            Sets a predefined cursor
            </summary>
            <param name="style"></param>
            <param name="cursorType"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateTheme">
            <summary>
            Overriden to call the protected virtual methods that create the styles for the different UI elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateViewportStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateCheckBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateRadioButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDropDownEditStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDateTimeBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSplitButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateMenuDropDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateColorPickerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateCalendarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSliderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateProgressBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSpinnerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateScrollBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateUpDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateTabStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateGroupBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateListBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateTreeViewStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateWindowStyles">
            <summary>
            Creates the window styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDialogStyles">
            <summary>
            Creates the dialog styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateLabelStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateTextBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateThumbStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSymbolStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSymbolToggleButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateComboBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSplitterStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateNavigationBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateTablePickerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateGridStyles">
            <summary>
            Creates the grid styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateCommandBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateStatusBarStyles">
            <summary>
            Creates the style sheet rules for status bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateMenuStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateRibbonStyles">
            <summary>
            Creates the ribbon styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFlatWindowStyles">
            <summary>
            Creates the flat window styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFlatButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFlatDropDownEditStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFlatSplitButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFlatMenuDropDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateColorBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreatePreviewHostStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDocumentBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateEditorStyles">
            <summary>
            Creates the rules for designers, editors and edit widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDocumentViewMessageStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSunken3DBorder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateSunken3DBorder(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="innerCornerRadius"></param>
            <param name="outerCornerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateRaised3DBorder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateFilledBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDoubleColorBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="outerColor"></param>
            <param name="innerColor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetOutlineBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetOutlineBorder(Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="outerCornderRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.GetOutlineBorder(Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="outlineBorderThickness"></param>
            <param name="outerCornderRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDottedStroke(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a dotted stroke style with the specified color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDefaultFont">
            <summary>
            Creates the default font.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDefaultFont(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Creates a default font with the given font style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUITheme.CreateDefaultFont(System.Double,Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Creates a default font with the given font style and size.
            </summary>
            <param name="fontSize">Font size in points.</param>
            <param name="fontStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.Colors">
            <summary>
            The theme colors map.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.Fonts">
            <summary>
            The theme fonts map.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.TextFillSkinType">
            <summary>
            Represents the Text Fill skin type, that is associated with the following properties:
            TextFill
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.FontSkinType">
            <summary>
            Represents the Font skin type, that is associated with the following properties:
            Font
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.FlatSkinType">
            <summary>
            The flat skin type
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.RibbonSkinType">
            <summary>
            The ribbon skin type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFocusWithinState">
            <summary>
            Matches elements with a NKeyboard.IsFocusWithin extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFocusedState">
            <summary>
            Matches elements with a NKeyboard.IsFocused extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsMouseOverState">
            <summary>
            Matches elements with a NMouse.IsOver extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsMouseDirectlyOverState">
            <summary>
            Matches elements with a NMouse.IsDirectlyOver extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsMouseOverSymbolState">
            <summary>
            Matches elements with a IsMouseOverSymbol:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsDragOverState">
            <summary>
            Matches elements with a NDragDrop.IsOver extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsDragDirectlyOverState">
            <summary>
            Matches elements with a NDragDrop.IsDirectlyOver extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsPopupOpenedState">
            <summary>
            Matches elements with a IsPopupOpened:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsPressedState">
            <summary>
            Matches elements with a IsPressed:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsSelectedState">
            <summary>
            Matches elements with an NStylePropertyEx.IsSelectedPropertyEx extended property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.EnabledState">
            <summary>
            Matches elements with a IsDisabled:bool property equal to false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.DisabledState">
            <summary>
            Matches elements with a IsDisabled:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CheckedState">
            <summary>
            Matches elements with a Checked:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.UncheckedState">
            <summary>
            Matches elements with a Checked:bool property equal to false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsHighlightedState">
            <summary>
            Matches elements with a NStylePropertyEx.IsHighlightedPropertyEx property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.NormalLookState">
            <summary>
            Matches elements with a NStylePropertyEx.ExtendedLookPropertyEx property equal to Normal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.FlatLookState">
            <summary>
            Matches elements with a NStylePropertyEx.ExtendedLookPropertyEx property equal to Flat.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ShowTitleBarState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ShowTitleBarNotState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFirstChildState">
            <summary>
            Matches a node that is the first child of its parent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsLastChildState">
            <summary>
            Matches a node that is the last child of its parent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsOnlyChildState">
            <summary>
            Matches a node that is the only child of its parent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CheckedAndIsMouseOverState">
            <summary>
            Combines the Checked And IsMouseOver states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CheckedAndIsPressedState">
            <summary>
            Combines the Checked And IsPressed states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CheckedAndIsDisabledState">
            <summary>
            Combines the Checked And IsDisabled states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsSelectedAndIsDisabledState">
            <summary>
            Combines the IsSelected And IsDisabled states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsSelectedAndIsEnabledState">
            <summary>
            Combines the IsSelected And IsEnabled states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.BottomDropDownButtonPositionState">
            <summary>
            A drop down edit whose drop down button is positioned at the bottom.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CollapsedState">
            <summary>
            The tree view item is collapsed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ExpandedState">
            <summary>
            The tree view item is expanded.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.SelectedMonthState">
            <summary>
            A calendar picker cell that represents the currently selected month.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.SelectedYearState">
            <summary>
            A calendar picker cell that represents the currently selected year.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.HorizontalState">
            <summary>
            A widget with horizontal orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.VerticalState">
            <summary>
            A widget with vertical orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ProgressBarHorizontalState">
            <summary>
            A horizontal progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ProgressBarVerticalState">
            <summary>
            A vertical progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.ProgressBarCircularState">
            <summary>
            A circular progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.LeftHeadersPositionState">
            <summary>
            A tab with headers positioned on the left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.RightHeadersPositionState">
            <summary>
            A tab with headers positioned on the right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.TopHeadersPositionState">
            <summary>
            A tab with headers positioned at the top.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.BottomHeadersPositionState">
            <summary>
            A tab with headers positioned at th bottom.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.LeftTicksPlacementState">
            <summary>
            The slider has ticks on the left (valid only for vertical sliders).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.RightTicksPlacementState">
            <summary>
            The slider has ticks on the right (valid only for vertical sliders).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.TopTicksPlacementState">
            <summary>
            The slider has ticks on the top (valid only for horizontal sliders).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.BottomTicksPlacementState">
            <summary>
            The slider has ticks on the bottom (valid only for horizontal sliders).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFromPrevMonthState">
            <summary>
            Day picker cell that represents a day from the previous month of the
            currently shown month.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFromNextMonthState">
            <summary>
            Day picker cell that represents a day from the next month of the
            currently shown month.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.HasHiddenItemsState">
            <summary>
            The state of a command bar when it has hidden items.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.CommandBarItemSelectedState">
            <summary>
            Selected state of items placed in a command bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsMaximizedState">
            <summary>
            Matches top level windows with an IsMaximized:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsMaximizedNotState">
            <summary>
            Matches top level windows with an IsMaximized:bool property equal to false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFrameActiveState">
            <summary>
            Matches top level windows with an IsFrameActive:bool property equal to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFrameActiveNotState">
            <summary>
            Matches top level windows with an IsFrameActive:bool property equal to false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.SmallState">
            <summary>
            A ribbon widget in small state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.RibbonTabExpandedState">
            <summary>
            A ribbon tab inexpanded state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.RibbonTabCollapsedState">
            <summary>
            A ribbon tab in collapsed state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsLastWidgetOnLaneState">
            <summary>
            A ribbon separator that is the last widget on a lane of a ribbon wrap flow panel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsPrevPageButtonChildState">
            <summary>
            A button that is the PrevPage button in a calendar header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsNextPageButtonChildState">
            <summary>
            A button that is the NextPage button in a calendar header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InButtonBaseContext">
            <summary>
            Matches a widget, direct child of a button base.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InToggleButtonContext">
            <summary>
            Matches a widget, direct child of a toggle button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSymbolButtonContext">
            <summary>
            Matches a widget, direct child of a symbol button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSymbolToggleButtonContext">
            <summary>
            Matches a widget, direct child of a symbol toggle button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSymbolRepeatButtonContext">
            <summary>
            Matches a widgetm direct child of a symbol repeat button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCheckBoxContext">
            <summary>
            Matches a widget, direct child of a check box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRadioButtonContext">
            <summary>
            Matches a widget, direct child of a radio button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCommandBarFloaterOptionsButtonContext">
            <summary>
            Matches a widget in a command bar floater options button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsIncreaseButtonState">
            <summary>
            Matches a widget that is an increase button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsDecreaseButtonState">
            <summary>
            Matches a widget that is a decrease button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsIncreaseShaftButtonState">
            <summary>
            Matches a widget that is an increase shaft button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsDecreaseShaftButtonState">
            <summary>
            Matches a widget that is a decrease shaft button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InComboBoxContext">
            <summary>
            Matches a widget, direct child of a combo box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InComboBoxItemContext">
            <summary>
            Matches a widget, direct child of a combo box item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InDateTimeBoxContext">
            <summary>
            Matches a widget, direct child of a date time box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSplitButtonContext">
            <summary>
            Matches a widget, direct child of a a split button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InDropDownButtonContext">
            <summary>
            Matches a widget, direct child of a drop down button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InDropDownEditContext">
            <summary>
            Matches a widget, direct child of a drop down edit.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InContentDropDownContext">
            <summary>
            Matches a widget, direct child of a content drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InAutoCompleteBoxContext">
            <summary>
            Matches a widget direct child of an auto complete box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRangeSliderContext">
            <summary>
            Matches a widget, direct child of a range slider.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSliderContext">
            <summary>
            Matches a widget, direct child of a slider.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSpinnerContext">
            <summary>
            Matches a widget, direct child of a spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSpinnerButtonContext">
            <summary>
            Matches a widget, direct child of a spinner button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InScrollBarContext">
            <summary>
            Matches a widget, direct child of a scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InHorizontalScrollBarContext">
            <summary>
            Matches a widget, direct child of a a horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InVerticalScrollBarContext">
            <summary>
            Matches a widget, direct child of a vertical scrollbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InScrollBarThumbContext">
            <summary>
            Matches a widget, direct child of a scrollbar thumb.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InScrollBarArrowButtonContext">
            <summary>
            Matches a widget, direct child of a scrollbar arrow button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsBeginThumbState">
            <summary>
            Matches a begin thumb.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsEndThumbState">
            <summary>
            Matches an end thumb.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCalendarTitleButtonContext">
            <summary>
            Matches a widget, direct child of a calendar title button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCalendarArrowButtonContext">
            <summary>
            Matches a widget, direct child of a calendar arrow button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCalendarPickerCellContext">
            <summary>
            Matches a widget, direct child of a calendar picker cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InDayPickerCellContext">
            <summary>
            Matches a widget, direct child of a day picker cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InNumericUpDownContext">
            <summary>
            Matches a widget, direct child of a numeric up down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InSplitterContext">
            <summary>
            Matches a widget, direct child of a splitter.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InNavigationBarPendantContext">
            <summary>
            Mathces a widget, direct child of an outlook bar pendant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InListBoxItemContext">
            <summary>
            Matches a widget, direct child of a list box item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTabContext">
            <summary>
            Matches a widget, direct child of a tab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTabPageContext">
            <summary>
            Matches a widget, direct child of a tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCommandBarLaneContext">
            <summary>
            Matches a widget, direct child of a command bar lane.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCommandBarItemCollectionContext">
            <summary>
            Matches a widget, direct child of a command bar item collection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCommandBarPendantContext">
            <summary>
            Matches a widget, direct child of a command bar pendant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCommandBarContext">
            <summary>
            Matches a widget, direct child of a command bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InMenuBarContext">
            <summary>
            Matches a widget direct child of a menu bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonTabContext">
            <summary>
            Matches a widget, direct child of a ribbon tab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonTabPageContext">
            <summary>
            Matches a widget, direct child of a ribbon tab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InCollapsedStateDropDownContext">
            <summary>
            Matches a widget, direct child of a ribbon group collapsed state menu drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonGroupHeaderContext">
            <summary>
            Matches a widget, direct child of a ribbon group header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonContentDropDownContext">
            <summary>
            Matches a widget, direct child of a ribbon content drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonMenuDropDownContext">
            <summary>
            Matches a widget, direct child of a ribbon menu drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonStackPanelContext">
            <summary>
            Matches a widget, direct child of a ribbon stack panel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonWrapFlowPanelContext">
            <summary>
            Matches a widget, direct child of a ribbon wrap flow panel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonCollapsiblePanelContext">
            <summary>
            Matches a widget, direct child of a ribbon collapsible panel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonSplitButtonContext">
            <summary>
            Matches a widget, direct child of a ribbon split button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonGalleryContext">
            <summary>
            Matches a widget, direct child of a ribbon gallery.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InRibbonGallerySpinnerContext">
            <summary>
            Matches a widget, direct child of a ribbon gallery spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InApplicationMenuPopupContext">
            <summary>
            Matches a widget, direct child of an application menu popup window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.DescendantOfRibbonGroupContext">
            <summary>
            Matches a widget, descendant of a ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTopLevelWindowContext">
            <summary>
            Matches a widget, direct child of a top level window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InPopupWindowContext">
            <summary>
            Matches a widget, direct child of a popup window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarContext">
            <summary>
            Matches a widget, direct child of a window title bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarControlBoxContext">
            <summary>
            Matches a widget, direct child of a title bar control box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarMenuDropDownContext">
            <summary>
            Matches a widget, direct child of a title bar menu drop down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarHelpButtonContext">
            <summary>
            Matches a widget, direct child of a title bar help button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarMinimizeButtonContext">
            <summary>
            Matches a widget, direct child of a title bar minimize button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarMaximizeButtonContext">
            <summary>
            Matches a widget, direct child of a title bar maximize button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTitleBarCloseButtonContext">
            <summary>
            Matches a widget, direct child of a title bar close button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.InTaskDialogContext">
            <summary>
            Matches a widget, direct child of a task dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsTodayCellInHighlightTodayCalendarContext">
            <summary>
            Matches a day picker cell that represents today in a calendar widget with HighlightTodday property set to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsChildMenuItemsSymbolContext">
            <summary>
            Matches the ChildMenuItemsSymbol child of a menu item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsCheckedSymbolContext">
            <summary>
            Matches the checked symbol of a checkable menu item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsContentOfSelectedMenuItemContext">
            <summary>
            Matches a widget, content child of a select menu item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsVerificationCheckBoxContext">
            <summary>
            Matches a widget, which is the IsVerificationCheckBox child of a task dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsFooterContext">
            <summary>
            Matches a widget, which is the Footer child of a task dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsScrollLeftButtonChildContext">
            <summary>
            The scroll left button of a ribbon tab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsScrollRightButtonChildContext">
            <summary>
            The scroll right button of a ribbon tab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsPageUpButtonChildContext">
            <summary>
            A button that is the page up button child of a ribbon gallery spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsPageDownButtonChildContext">
            <summary>
            A button that is the page down button child of a ribbon gallery spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsDropDownButtonChildContext">
            <summary>
            A button that is the drop down button child of a ribbon gallery spinner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUITheme.IsCollapsedDropDownChildContext">
            <summary>
            A button that is the collapsed down child of a ribbon gallery.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUITheme.InnerCornerRadius">
            <summary>
            The default rounding of inner corners
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUITheme.OuterCornerRadius">
            <summary>
            The default rounding of outer corners
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUITheme.OutlineBorderThickness">
            <summary>
            Thickness of the outline borders
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateWindowStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateDialogStyles">
            <summary>
            Creates the dialog styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateViewportStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateTextBoxStyles">
            <summary>
            Creates the styles for text boxes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateCheckBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateRadioButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateDropDownEditStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateDateTimeBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateSplitButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateMenuDropDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateColorPickerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateCalendarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateSliderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateProgressBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateScrollBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateSpinnerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateUpDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateTabStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateGroupBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateListBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.CreateTreeViewStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.AddTabPageHeaderStyles(Nevron.Nov.Dom.NThemingState,Nevron.Nov.UI.NTabSkin)">
            <summary>
            Adds the styling for all tab headers of a tab in the given tab state.
            </summary>
            <param name="tabState"></param>
            <param name="tabImageSkin"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinsTheme.GetWindowCornerRounding(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the window corner roundings.
            </summary>
            <param name="topLeftRounding"></param>
            <param name="topRightRounding"></param>
            <param name="bottomLeftRounding"></param>
            <param name="bottomRightRounding"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NUIPartSkinsTheme.Skins">
            <summary>
            The theme image skins map
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NUIPartSkinsTheme.TabSkins">
            <summary>
            The theme tab skins map
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.#ctor">
            <summary>
            Creates a new Windows 8 theme with the default window color (light blue).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.#ctor(Nevron.Nov.UI.ENWindows8WindowColor)">
            <summary>
            Creates a new Windows 8 theme and initializes it with the given window color.
            </summary>
            <param name="windowColor">The color of the window borders and taskbar.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new Windows 8 theme and initializes it with the given window color.
            </summary>
            <param name="windowColor">The color of the window borders and taskbar.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateButtonStyles">
            <summary>
            Creates the button styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateSymbolToggleButtonStyles">
            <summary>
            Creates the symbol toggle button styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateCheckBoxStyles">
            <summary>
            Creates the check box styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateRadioButtonStyles">
            <summary>
            Creates the radio button styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateSplitButtonStyles">
            <summary>
            Creates the split button styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateTablePickerStyles">
            <summary>
            Creates the styles for table pickers and table picker cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.CreateWindowStyles">
            <summary>
            Creates the window styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindows8Theme.GetWindowCornerRounding(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the window corner roundings.
            </summary>
            <param name="topLeftRounding"></param>
            <param name="topRightRounding"></param>
            <param name="bottomLeftRounding"></param>
            <param name="bottomRightRounding"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NWindowsAeroTheme">
            <summary>
            An UI theme that mimics the Windows 7 Aero theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsAeroTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsAeroTheme.CreateWindowStyles">
            <summary>
            Creates the styles for windows.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMacLionTheme">
            <summary>
            An UI theme which emulates the Mac OS X 10.7 Lion theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMacLionTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMacLionTheme.CreateWindowStyles">
            <summary>
            Creates the styles for windows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMacLionTheme.CreateTabStyles">
            <summary>
            Creates the styles for tabs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTabSkin">
            <summary>
            Holds the tab page header skins for all possible locations of a tab page header.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabSkin.#ctor">
            <summary>
            Creates a new tab image skin.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabSkin.FlipY">
            <summary>
            Returns a vertically flipped version of this tab theming info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTabSkin.RotateClockwise">
            <summary>
            Returns a rotated clockwise version of this tab theming info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTabSkin.RotateCounterClockwise">
            <summary>
            Returns a rotated counter clockwise version of this tab theming info.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTabSkin.InnerTabPageHeaderSkin">
            <summary>
            The skin for inner tab page headers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabSkin.NearTabPageHeaderSkin">
            <summary>
            The skin for near (i.e. at the start of the tab) tab page headers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabSkin.FarTabPageHeaderSkin">
            <summary>
            The skin for far (i.e. at the end of the tab) tab page headers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabSkin.NearAndFarTabPageHeaderSkin">
            <summary>
            The skin for tab page headers that reach both ends of the tab.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NColorSkin">
            <summary>
            Contains the colors needed for the skinning of an UI part.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIPartSkin">
            <summary>
            Base class for UI part skins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.#ctor(System.Int32,Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="stateCount"></param>
            <param name="borderThickness"></param>
            <param name="margins"></param>
            <param name="padding"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.GetState(System.Int32)">
            <summary>
            Gets the state at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.SetState(System.Int32,Nevron.Nov.UI.NUIPartSkinState)">
            <summary>
            Sets the state at the given index.
            </summary>
            <param name="index"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.SkinBoxState(Nevron.Nov.Dom.NThemeStyle,System.Int32)">
            <summary>
            Sets a border and a background to the given style. 
            </summary>
            <param name="style"></param>
            <param name="stateIndex"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.SkinSymbolState(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty,System.Int32)">
            <summary>
            Sets a symbol to the specified symbol property.
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
            <param name="stateIndex"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.FlipX">
            <summary>
            Returns a new image skin, whose rasters, margins and padding
            are flipped horizontally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.FlipY">
            <summary>
            Returns a new image skin, whose rasters, margins and padding
            are flipped vertically.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.RotateClockwise">
            <summary>
            Returns a new image skin, whose rasters, margins and padding
            are rotated in clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.RotateCounterClockwise">
            <summary>
            Returns a new image skin, whose rasters, margins and padding
            are rotated in counter clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.CreateInstance">
            <summary>
            Creates a new UI part skin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkin.DeepCopyCore(Nevron.Nov.UI.NUIPartSkin)">
            <summary>
            Copies the data from the given UI part skin.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.StateCount">
            <summary>
            Gets the states count with which this image skin was initialized.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.BorderThickness">
            <summary>
            Gets or sets the border thickness to apply to skinned elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.Padding">
            <summary>
            Gets or sets the preferred padding to apply to skinned elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.Margins">
            <summary>
            Gets or sets the preferred margins to apply to skinned elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.SkinLeftSide">
            <summary>
            Gets or sets whether to skin the left border side of the element.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.SkinRightSide">
            <summary>
            Gets or sets whether to skin the right border side of the element.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.SkinTopSide">
            <summary>
            Gets or sets whether to skin the top border side of the element.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.SkinBottomSide">
            <summary>
            Gets or sets whether to skin the bottom border side of the element.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkin.CenterFillProperty">
            <summary>
            Gets or sets the property on which to apply the center fill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkin.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="stateCount"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkin.#ctor(System.Int32,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="stateCount"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkin.SetState(System.Int32,Nevron.Nov.UI.NSymbol)">
            <summary>
            Sets the given symbol to the state at the specified index.
            </summary>
            <param name="index"></param>
            <param name="symbol"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkin.CreateInstance">
            <summary>
            Creates a new color skin instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NColorSkinState">
            <summary>
            A class that contains styling information for a state of a color skin.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIPartSkinState">
            <summary>
            Base class for all states from UI part skins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.#ctor">
            <summary>
            Defaul constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.SkinSymbolState(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets a symbol to the specified symbol property.
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.CreatePartFill(Nevron.Nov.ENContentAlignment)">
            <summary>
            Creates the filling for the specified part of this state.
            </summary>
            <param name="partLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.CreateStateFill">
            <summary>
            Creates the fill for this skin state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.SkinBoxState(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets a border and a background to the given style. 
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.CreateInstance">
            <summary>
            Creates a new UI part skin state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.DeepCopyCore(Nevron.Nov.UI.NUIPartSkinState)">
            <summary>
            Copies the data from the given UI part skin state.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.CreateBorder(Nevron.Nov.Graphics.NMargins@)">
            <summary>
            Creates a border from the styling information of this state.
            </summary>
            <param name="borderThickness"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.DetermineBorderThickness">
            <summary>
            Determines the thickness of the border defined by this state stylling.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.FlipX">
            <summary>
            Flips the rasters, margins and padding of this image skin horizontally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.FlipY">
            <summary>
            Flips the rasters, margins and padding of this image skin vertically.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.RotateClockwise">
            <summary>
            Rotates the rasters, margins and padding of this image skin by 90 degrees in clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinState.RotateCounterClockwise">
            <summary>
            Rotates the rasters, margins and padding of this image skin by 90 degrees in clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkinState.Margins">
            <summary>
            Gets or sets the state margins.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkinState.Padding">
            <summary>
            Gets or sets the state padding.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkinState.BorderThickness">
            <summary>
            Gets or sets the border thickness.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIPartSkinState.OwnerSkin">
            <summary>
            Gets the skin that owns this state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates an UI theme color skin state and initializes it with the given background color.
            </summary>
            <param name="backgroundColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates an UI theme color skin state and initializes it with the given colors.
            </summary>
            <param name="borderColor"></param>
            <param name="backgroundColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates an UI theme color skin state and initializes it with the given colors.
            </summary>
            <param name="borderColor"></param>
            <param name="backgroundBeginColor"></param>
            <param name="backgroundEndColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.#ctor(Nevron.Nov.UI.NSymbol)">
            <summary>
            Creates a new transparent color skin state that hosts the given symbol.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.SkinSymbolState(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets a symbol to the specified symbol property.
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.CreatePartFill(Nevron.Nov.ENContentAlignment)">
            <summary>
            Creates the filling for the specified part of this state.
            </summary>
            <param name="partLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.CreateStateFill">
            <summary>
            Creates the fill for this skin state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.CreateInstance">
            <summary>
            Creates a new color skin instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.DeepCopyCore(Nevron.Nov.UI.NUIPartSkinState)">
            <summary>
            Copies the data from the given UI part skin state.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorSkinState.CreateBorder(Nevron.Nov.Graphics.NMargins@)">
            <summary>
            Creates a border from the styling information of this state.
            </summary>
            <param name="borderThickness"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BorderLeftColor">
            <summary>
            Gets or sets the color of the left border side.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BorderTopColor">
            <summary>
            Gets or sets the color of the top border side.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BorderRightColor">
            <summary>
            Gets or sets the color of the right border side.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BorderBottomColor">
            <summary>
            Gets or sets the color of the bottom border side.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BackgroundBeginColor">
            <summary>
            Gets or sets the background gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.BackgroundEndColor">
            <summary>
            Gets or sets the background gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.InnerCornerRadius">
            <summary>
            Gets or sets the inner corner radius of the border.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.OuterCornerRadius">
            <summary>
            Gets or sets the outer corner raidus of the border.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorSkinState.Symbol">
            <summary>
            Gets or sets the symbol to apply when using this state for symbol skinning.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBoxUIPartSkinner">
            <summary>
            A class that makes a border and a background rule declarations for a specific UI part skin.
            An instance of this class can be obtained by the GetBoxUIPartSkinner methods of an <see cref="T:Nevron.Nov.UI.NUITheme"/>.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIPartSkinner">
            <summary>
            Base class for UI part skinners.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NThemeSkinner">
            <summary>
            A helper class that faciliates the authoring of theme skins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSkinner.GetStyle(Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Gets the style that applies the specified state
            </summary>
            <param name="stateSelectorParts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSkinner.Skin">
            <summary>
            Creates themeing rules for all states defined by this skinner and adds them to the theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NThemeSkinner.Skin(System.Boolean)">
            <summary>
            Creates themeing rules for all states defined by this skinner and adds them to the theme.
            </summary>
            <param name="addStatesToContext">
            if true, the states defined by previous calls to GetStyle, will be applied to the DefaultContext.
            if false, the states defined by previous calls to GetStyle are merged with the PreState
            </param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinner.#ctor(Nevron.Nov.Dom.NTheme,Nevron.Nov.Dom.NSchema,System.Object,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NThemingState,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="theme"></param>
            <param name="baseSchema"></param>
            <param name="skinType"></param>
            <param name="skin"></param>
            <param name="preState"></param>
            <param name="defaultContext"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinner.SkinState(System.Int32,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Skins a state.
            </summary>
            <param name="stateImageIndex">The skin state index to use for skinning of the state.</param>
            <param name="stateSelectorParts">The selector parts to apply to the selector.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIPartSkinner.SkinStateCore(System.Int32,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Skins a state.
            </summary>
            <param name="index"></param>
            <param name="stateSelectorParts"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxUIPartSkinner.#ctor(Nevron.Nov.Dom.NTheme,Nevron.Nov.Dom.NSchema,System.Object,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NThemingState,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="theme"></param>
            <param name="baseSchema"></param>
            <param name="skinType"></param>
            <param name="skin"></param>
            <param name="preState"></param>
            <param name="defaultContext"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBoxUIPartSkinner.SkinStateCore(System.Int32,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Overriden to skin a box style.
            </summary>
            <param name="index"></param>
            <param name="stateSelectorParts"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolUIPartSkinner">
            <summary>
            A class that makes a border and a background rule declarations for a specific UI symbol part skin.
            An instance of this class can be obtained by the GetSymbolUIPartSkinner methods of an <see cref="T:Nevron.Nov.UI.NUITheme"/>.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolUIPartSkinner.#ctor(Nevron.Nov.Dom.NTheme,Nevron.Nov.UI.NUIPartSkin,Nevron.Nov.Dom.NProperty,Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NThemingState,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="theme"></param>
            <param name="skin"></param>
            <param name="symbolProperty"></param>
            <param name="baseSchema"></param>
            <param name="preState"></param>
            <param name="defaultContext"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolUIPartSkinner.SkinStateCore(System.Int32,Nevron.Nov.Dom.NThemeSelectorPart[])">
            <summary>
            Overriden to skin a symbol style.
            </summary>
            <param name="index"></param>
            <param name="stateSelectorParts"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemeColorMap">
            <summary>
            A map of UI theme colors.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemeMap`2">
            <summary>
            Represents a map of UI theme key/value pairs.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.Setup(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Setups the map to mimic the given UI theme scheme.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupBrick">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Brick theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupDesert">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Desert theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupEggplant">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Eggplant theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupHighContrast1">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic High Contrast 1 theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupHighContrast2">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic High Contrast 2 theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupHighContrastBlack">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic High Contrast Black theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupHighContrastWhite">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic High Contrast White theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupLilac">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Lilac theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupMaple">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Maple theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupMarine">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Marine theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupPlum">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Plum theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupPumpkin">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Pumpkin theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupRainyDay">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Rainy Day theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupRedWhiteAndBlue">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Red, White and Blue theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupRose">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Rose theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupSlate">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Slate theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupSpruce">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Spurce theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupStorm">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Storm theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupTeal">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Teal theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupWheat">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Wheat theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupWindowsStandard">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic Standard theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupWindowsClassic">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows Classic theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupXPSilver">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows XP Silver theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupXPOlive">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows XP Olive theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupXPBlue">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows XP Blue (Luna) theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupWindows7Aero">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows 7 Aero theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupWindows8">
            <summary>
            When overriden in a derived class, setups a map that mimics the Windows 8 default theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetupMacLion">
            <summary>
            When overriden in a derived class, setups a map that mimics the Mac OS X 10.7 Lion theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.GetEnumValue(`0)">
            <summary>
            Gets the value associated with the given enum key. Returns a default
            value if the given key does not exist in the map.
            </summary>
            <param name="key"></param>
            <returns>The value associated with the given enum key or a default value
            if no such key exists in the map.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeMap`2.SetEnumValue(`0,`1)">
            <summary>
            Set the value for the specified enum key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NUIThemeMap`2.m_Map">
            <summary>
            The internal map that holds the currently defined key/value pairs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Creates a new UI color map based on the given scheme.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupBrick">
            <summary>
            Setups a color map that mimics the Windows Classic Brick theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupDesert">
            <summary>
            Setups a color map that mimics the Windows Classic Desert theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupEggplant">
            <summary>
            Setups a color map that mimics the Windows Classic Eggplant theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupHighContrast1">
            <summary>
            Setups a color map that mimics the Windows Classic High Contrast 1 theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupHighContrast2">
            <summary>
            Setups a color map that mimics the Windows Classic High Contrast 2 theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupHighContrastBlack">
            <summary>
            Setups a color map that mimics the Windows Classic High Contrast Black theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupHighContrastWhite">
            <summary>
            Setups a color map that mimics the Windows Classic High Contrast White theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupLilac">
            <summary>
            Setups a color map that mimics the Windows Classic Lilac theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupMaple">
            <summary>
            Setups a color map that mimics the Windows Classic Maple theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupMarine">
            <summary>
            Setups a color map that mimics the Windows Classic Marine theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupPlum">
            <summary>
            Setups a color map that mimics the Windows Classic Plum theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupPumpkin">
            <summary>
            Setups a color map that mimics the Windows Classic Pumpkin theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupRainyDay">
            <summary>
            Setups a color map that mimics the Windows Classic Rainy Day theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupRedWhiteAndBlue">
            <summary>
            Setups a color map that mimics the Windows Classic Red, White and Blue theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupRose">
            <summary>
            Setups a color map that mimics the Windows Classic Rose theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupSlate">
            <summary>
            Setups a color map that mimics the Windows Classic Slate theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupSpruce">
            <summary>
            Setups a color map that mimics the Windows Classic Spurce theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupStorm">
            <summary>
            Setups a color map that mimics the Windows Classic Storm theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupTeal">
            <summary>
            Setups a color map that mimics the Windows Classic Teal theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupWheat">
            <summary>
            Setups a color map that mimics the Windows Classic Wheat theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupWindowsStandard">
            <summary>
            Setups a color map that mimics the Windows Classic Standard theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupWindowsClassic">
            <summary>
            Setups a color map that mimics the Windows Classic theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupXPSilver">
            <summary>
            Setups a color map that mimics the Windows XP Silver theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupXPOlive">
            <summary>
            Setups a color map that mimics the Windows XP Olive theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupXPBlue">
            <summary>
            Setups a color map that mimics the Windows XP Blue (Luna) theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupWindows7Aero">
            <summary>
            Setups a color map that mimics the Windows 7 Aero theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupWindows8">
            <summary>
            Setups a color map that mimics the Windows 8 default theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeColorMap.SetupMacLion">
            <summary>
            Setups a color map that mimics the Mac OS X 10.7 Lion theme colors.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ActiveBorder">
            <summary>
            Active border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ActiveCaption">
            <summary>
            Active caption color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ActiveCaptionText">
            <summary>
            Active caption text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.AppWorkspace">
            <summary>
            Application workspace color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonFace">
            <summary>
            Button face color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonHighlight">
            <summary>
            Button highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonShadow">
            <summary>
            Button shadow color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Control">
            <summary>
            Control color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ControlDark">
            <summary>
            Control dark color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ControlDarkDark">
            <summary>
            Control dark dark color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ControlLight">
            <summary>
            Control light color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ControlLightLight">
            <summary>
            Control light light color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ControlText">
            <summary>
            Control text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Desktop">
            <summary>
            Desktop color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.GradientActiveCaption">
            <summary>
            Gradient active caption color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.GradientInactiveCaption">
            <summary>
            Gradient inactive caption color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.GrayText">
            <summary>
            Gray text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Highlight">
            <summary>
            Highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.HighlightText">
            <summary>
            Highlight text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.HotTrack">
            <summary>
            Hot track color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.InactiveBorder">
            <summary>
            Inactive border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.InactiveCaption">
            <summary>
            Inactive caption color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.InactiveCaptionText">
            <summary>
            Inactive caption text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Info">
            <summary>
            Info color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.InfoText">
            <summary>
            Info text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Menu">
            <summary>
            Menu color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuBar">
            <summary>
            Menu bar color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuHighlight">
            <summary>
            Menu highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuText">
            <summary>
            Menu text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ScrollBar">
            <summary>
            Scroll bar color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.Window">
            <summary>
            Window color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.WindowFrame">
            <summary>
            Window frame color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.WindowText">
            <summary>
            Window text color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonCheckedGradientBegin">
            <summary>
            Button checked - gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonCheckedGradientEnd">
            <summary>
            Button checked - gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonCheckedGradientMiddle">
            <summary>
            Button checked - gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonCheckedHighlight">
            <summary>
            Button checked highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonCheckedHighlightBorder">
            <summary>
            Button checked highlight border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedBorder">
            <summary>
            Button pressed - border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedGradientBegin">
            <summary>
            Button pressed - gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedGradientEnd">
            <summary>
            Button pressed - gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedGradientMiddle">
            <summary>
            Button pressed - gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedHighlight">
            <summary>
            Button pressed highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonPressedHighlightBorder">
            <summary>
            Button pressed highlight border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedBorder">
            <summary>
            Button selected - border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedGradientBegin">
            <summary>
            Button selected - gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedGradientEnd">
            <summary>
            Button selected - gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedGradientMiddle">
            <summary>
            Button selected - gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedHighlight">
            <summary>
            Button selected highlight color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ButtonSelectedHighlightBorder">
            <summary>
            Button selected highlight border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.CheckBackground">
            <summary>
            Check background color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.CheckPressedBackground">
            <summary>
            Check pressed background color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.CheckSelectedBackground">
            <summary>
            Check selected background color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.GripDark">
            <summary>
            Grip dark color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.GripLight">
            <summary>
            Grip light color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginGradientBegin">
            <summary>
            Image margin gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginGradientEnd">
            <summary>
            Image margin gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginGradientMiddle">
            <summary>
            Image margin gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginRevealedGradientBegin">
            <summary>
            Image margin revealed gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginRevealedGradientEnd">
            <summary>
            Image margin revealed gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ImageMarginRevealedGradientMiddle">
            <summary>
            Image margin revealed gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuBorder">
            <summary>
            Menu border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemBorder">
            <summary>
            Menu item border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemPressedGradientBegin">
            <summary>
            Menu item pressed gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemPressedGradientEnd">
            <summary>
            Menu item pressed gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemPressedGradientMiddle">
            <summary>
            Menu item pressed gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemSelected">
            <summary>
            Menu item selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemSelectedGradientBegin">
            <summary>
            Menu item selected gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuItemSelectedGradientEnd">
            <summary>
            Menu item selected gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuStripGradientBegin">
            <summary>
            Menu strip gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.MenuStripGradientEnd">
            <summary>
            Menu strip gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.OverflowButtonGradientBegin">
            <summary>
            Overflow button gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.OverflowButtonGradientEnd">
            <summary>
            Overflow button gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.OverflowButtonGradientMiddle">
            <summary>
            Overflow button gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.RaftingContainerGradientBegin">
            <summary>
            Rafting container gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.RaftingContainerGradientEnd">
            <summary>
            Rafting container gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.SeparatorDark">
            <summary>
            Separator dark color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.SeparatorLight">
            <summary>
            Separator light color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.StatusStripGradientBegin">
            <summary>
            Status strip gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.StatusStripGradientEnd">
            <summary>
            Status strip gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripBorder">
            <summary>
            Tool strip border color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripContentPanelGradientBegin">
            <summary>
            Tool strip content panel gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripContentPanelGradientEnd">
            <summary>
            Tool strip content panel gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripDropDownBackground">
            <summary>
            Tool strip drop down background color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripGradientBegin">
            <summary>
            Tool strip gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripGradientEnd">
            <summary>
            Tool strip gradient end color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripGradientMiddle">
            <summary>
            Tool strip gradient middle color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripPanelGradientBegin">
            <summary>
            Tool strip panel gradient begin color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeColorMap.ToolStripPanelGradientEnd">
            <summary>
            Tool strip panel gradient end color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemeFontMap">
            <summary>
            A map of UI theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupBrick">
            <summary>
            Setups a font map that mimics the Windows Classic Brick theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupDesert">
            <summary>
            Setups a font map that mimics the Windows Classic Desert theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupEggplant">
            <summary>
            Setups a font map that mimics the Windows Classic Eggplant theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupHighContrast1">
            <summary>
            Setups a font map that mimics the Windows Classic High Contrast 1 theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupHighContrast2">
            <summary>
            Setups a font map that mimics the Windows Classic High Contrast 2 theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupHighContrastBlack">
            <summary>
            Setups a font map that mimics the Windows Classic High Contrast Black theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupHighContrastWhite">
            <summary>
            Setups a font map that mimics the Windows Classic High Contrast White theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupLilac">
            <summary>
            Setups a font map that mimics the Windows Classic Lilac theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupMaple">
            <summary>
            Setups a font map that mimics the Windows Classic Maple theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupMarine">
            <summary>
            Setups a font map that mimics the Windows Classic Marine theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupPlum">
            <summary>
            Setups a font map that mimics the Windows Classic Plum theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupPumpkin">
            <summary>
            Setups a font map that mimics the Windows Classic Pumpkin theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupRainyDay">
            <summary>
            Setups a font map that mimics the Windows Classic Rainy Day theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupRedWhiteAndBlue">
            <summary>
            Setups a font map that mimics the Windows Classic Red, White and Blue theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupRose">
            <summary>
            Setups a font map that mimics the Windows Classic Rose theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupSlate">
            <summary>
            Setups a font map that mimics the Windows Classic Slate theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupSpruce">
            <summary>
            Setups a font map that mimics the Windows Classic Spurce theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupStorm">
            <summary>
            Setups a font map that mimics the Windows Classic Storm theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupTeal">
            <summary>
            Setups a font map that mimics the Windows Classic Teal theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupWheat">
            <summary>
            Setups a font map that mimics the Windows Classic Wheat theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupWindowsStandard">
            <summary>
            Setups a font map that mimics the Windows Classic Standard theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupWindowsClassic">
            <summary>
            Setups a font map that mimics the Windows Classic theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupXPSilver">
            <summary>
            Setups a font map that mimics the Windows XP Silver theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupXPOlive">
            <summary>
            Setups a font map that mimics the Windows XP Olive theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupXPBlue">
            <summary>
            Setups a font map that mimics the Windows XP Blue (Luna) theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupWindows7Aero">
            <summary>
            Setups a font map that mimics the Windows 7 Aero theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupWindows8">
            <summary>
            Setups a font map that mimics the Windows 8 theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeFontMap.SetupMacLion">
            <summary>
            Setups a font map that mimics the Mac OS X 10.7 Lion theme fonts.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.Caption">
            <summary>
            Caption font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.SmallCaption">
            <summary>
            Small caption font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.Menu">
            <summary>
            Menu font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.Status">
            <summary>
            Status font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.MessageBox">
            <summary>
            Message box font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.IconTitle">
            <summary>
            Icon title font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.Default">
            <summary>
            Default font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeFontMap.Dialog">
            <summary>
            Dialog font.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NImageSkin">
            <summary>
            Represents an image list for an image based theme.
            </summary>
            <remarks>
            An image skin is created from a single image, that contains a predefined number of equally sized states images that are vertically arranged in the image.
            Each state image may be additionally divided into 9 part images, that form a nine-patch.
            A nine-patch consists of four corner, four side and a center image. 
            The corners are drawn unscaled. 
            The sides are scaled only in one dimension (X or Y).
            The center is scaled in both X and Y dimensions.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.#ctor(Nevron.Nov.Graphics.NImageSource,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="imageSource"></param>
            <param name="stateCount"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.#ctor(Nevron.Nov.Graphics.NImage,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="image"></param>
            <param name="stateCount"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.#ctor(Nevron.Nov.Graphics.NImage,System.Int32,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="image"></param>
            <param name="stateCount"></param>
            <param name="clipMargins"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.#ctor(Nevron.Nov.Graphics.NImageSource,System.Int32,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="imageSource"></param>
            <param name="stateCount"></param>
            <param name="clipMargins"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.GetStateRaster(System.Int32)">
            <summary>
            Gets the state raster at the given index.
            </summary>
            <param name="stateIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.GetPartRaster(System.Int32,Nevron.Nov.ENContentAlignment)">
            <summary>
            Gets the part raster at the given index in the collection of part rasters of
            the state raster with index specified.
            </summary>
            <param name="stateIndex"></param>
            <param name="partLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.CreateInstance">
            <summary>
            Creates a new image skin instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkin.DeepCopyCore(Nevron.Nov.UI.NUIPartSkin)">
            <summary>
            Copies the data from the given UI part skin.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NImageSkin.CenterTextureMapping">
            <summary>
            Gets or sets the center texture mapping.
            By default set to null which defaults to Stretch.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWindowsXPBlueTheme">
            <summary>
            An UI theme that mimics the Windows XP Blue (aka Windows XP Luna) theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsXPBlueTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsXPBlueTheme.CreateWindowStyles">
            <summary>
            Creates the styles for a window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsXPBlueTheme.GetWindowCornerRounding(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the window corner roundings.
            </summary>
            <param name="topLeftRounding"></param>
            <param name="topRightRounding"></param>
            <param name="bottomLeftRounding"></param>
            <param name="bottomRightRounding"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemePlugin">
            <summary>
            Base class for all UI theme plugins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemePlugin.CreateStyles(Nevron.Nov.UI.NUITheme)">
            <summary>
            Creates a set of styles and adds them to the given UI theme.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NImageSkinState">
            <summary>
            Represents a state from an image skin.
            </summary>
            <remarks>
            Contains a raster for a specific theming state/context and can also
            contain 9 part rasters which define the 9 parts which are produced
            by splitting the state image using a given border thickness.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.SkinBoxState(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets an image based border and background to the given style. The images that are applied to different
            border parts and the background are taken from the state parts. This implementation also decreases the
            padding with the border thickness or in other words the padding compensates the border thickness.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.SkinSymbolState(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Dom.NProperty)">
            <summary>
            Sets an image based symbol to the specified symbol property.
            </summary>
            <param name="style"></param>
            <param name="symbolProperty"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.CreatePartFill(Nevron.Nov.ENContentAlignment)">
            <summary>
            Creates the filling for the specified part of this state.
            </summary>
            <param name="partLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.CreateStateFill">
            <summary>
            Creates the fill for this skin state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.GetPartRaster(Nevron.Nov.ENContentAlignment)">
            <summary>
            Gets the part raster that corresponds to the specified nine-patch alignment.
            </summary>
            <param name="contentAlignment"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.CreateInstance">
            <summary>
            Creates a new image skin instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.DeepCopyCore(Nevron.Nov.UI.NUIPartSkinState)">
            <summary>
            Copies the data from the given UI part skin state.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.FlipX">
            <summary>
            Flips the rasters, margins and padding of this image skin horizontally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.FlipY">
            <summary>
            Flips the rasters, margins and padding of this image skin vertically.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.RotateClockwise">
            <summary>
            Rotates the rasters, margins and padding of this image skin by 90 degrees in clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageSkinState.RotateCounterClockwise">
            <summary>
            Rotates the rasters, margins and padding of this image skin by 90 degrees in clockwise direction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NImageSkinState.Raster">
            <summary>
            Gets the raster that represents this state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemeTabSkinMap">
            <summary>
            A map for tab page header image skins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeTabSkinMap.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeTabSkinMap.SetupXPBlue">
            <summary>
            Setups a tab theme map that mimics Windows XP Blue theme appearance. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeTabSkinMap.SetupWindows7Aero">
            <summary>
            Setups a tab theme map that mimics Windows 7 Aero theme appearance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeTabSkinMap.SetupWindows8">
            <summary>
            Setups a tab theme map that mimics Windows 8 default theme appearance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeTabSkinMap.SetupMacLion">
            <summary>
            Setups a tab theme map that mimics Mac OS X 10.7 Lion theme appearance.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeTabSkinMap.Left">
            <summary>
            Gets or sets the tab image skin for tab page headers located on the left.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeTabSkinMap.Top">
            <summary>
            Gets or sets the tab image skin for tab page headers located at the top.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeTabSkinMap.Right">
            <summary>
            Gets or sets the tab image skin for tab page headers located on the right.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeTabSkinMap.Bottom">
            <summary>
            Gets or sets the tab image skin for tab page headers located at the bottom.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUIThemeSkinMap">
            <summary>
            A map of UI part skins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeSkinMap.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeSkinMap.SetupXPBlue">
            <summary>
            Setups an image theme map that mimics Windows XP Blue theme appearance. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeSkinMap.SetupWindows7Aero">
            <summary>
            Setups an image theme map that mimics Windows 7 Aero theme appearance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeSkinMap.SetupWindows8">
            <summary>
            Setups a color map that mimics the Windows 8 default theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUIThemeSkinMap.SetupMacLion">
            <summary>
            Setups an image theme map that mimics Mac OS X 10.7 Lion theme appearance.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.Button">
            <summary>
            Reference to the image skin for a button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.CheckBox">
            <summary>
            Reference to the image skin for a check box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.RadioButton">
            <summary>
            Reference to the image skin for a radio button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TextBox">
            <summary>
            Reference to the image skin for a text box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.DropDownEdit">
            <summary>
            Reference to the image skin for a drop down edit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.DropDownButton">
            <summary>
            Reference to the image skin for a drop down button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.DropDownSymbol">
            <summary>
            Reference to the image skin for a drop down symbol.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.DateTimeBoxDropDownButton">
            <summary>
            Reference to the image skin for the drop down button of a date time box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SplitButtonDropDownButton">
            <summary>
            Reference to the image skin for the drop down button of a split button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.LargeArrowLeft">
            <summary>
            Reference to the image skin for a large left oriented arrow.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.LargeArrowRight">
            <summary>
            Reference to the image skin for a large right oriented arrow.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderAxis">
            <summary>
            Reference to the image skin for a slider axis.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbUp">
            <summary>
            Reference to the image skin for a slider thumb with up orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbDown">
            <summary>
            Reference to the image skin for a slider thumb with down orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbUpDown">
            <summary>
            Reference to the image skin for a slider thumb with both up and down orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbLeft">
            <summary>
            Reference to the image skin for a slider thumb with left orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbRight">
            <summary>
            Reference to the image skin for a slider thumb with right orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SliderThumbLeftRight">
            <summary>
            Reference to the image skin for a slide thumb with both left and right orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarHorizontal">
            <summary>
            Reference to the image skin for a horizontal progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarHorizontalCompletedPart">
            <summary>
            Reference to the image skin for the completed part of a horizontal progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarVertical">
            <summary>
            Reference to the image skin for a vertical progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarVerticalCompletedPart">
            <summary>
            Reference to the image skin for the completed part of a vertical progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarCircular">
            <summary>
            Reference to the image skin for a circular progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.ProgressBarCircularCompletedPart">
            <summary>
            Reference to the image skin for the completed part of a circular progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerVerticalIncreaseButton">
            <summary>
            Reference to the image skin for the increase button of a vertical spinner.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerVerticalDecreaseButton">
            <summary>
            Reference to the image skin for for the decrease button of a vertical spinner.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerHorizontalIncreaseButton">
            <summary>
            Reference to the image skin for the increase button of a horizontal spinner.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerHorizontalDecreaseButton">
            <summary>
            Reference to the image skin for the decrease button of a horizontal spinner.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerUpGlyph">
            <summary>
            Reference to the image skin for the upward oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerDownGlyph">
            <summary>
            Reference to the image skin for the downward oriented gyph of a spinner button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerLeftGlyph">
            <summary>
            Reference to the image skin for the left oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.SpinnerRightGlyph">
            <summary>
            Reference to the image skin for the right oriented glyph of a spinner button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.UpDown">
            <summary>
            Reference to the image skin for an up down widget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.NumericUpDownIncreaseButton">
            <summary>
            Reference to the image skin for the increase button of a numeric up down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.NumericUpDownDecreaseButton">
            <summary>
            Reference to the image skin for the decrease button of a numeric up down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.NumericUpDownUpGlyph">
            <summary>
            Reference to the image skin for the upward oriented glyph of a numeric up down's button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.NumericUpDownDownGlyph">
            <summary>
            Reference to the image skin for the downward oriented glyph of a numeric up down's button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarIncreaseShaft">
            <summary>
            Reference to the image skin for the increase shaft of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarDecreaseShaft">
            <summary>
            Reference to the image skin for the decrease shaft of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarThumb">
            <summary>
            Reference to the image skin for the thumb of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarIncreaseButton">
            <summary>
            Reference to the image skin for the increase button of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarDecreaseButton">
            <summary>
            Reference to the image skin for the decrease button of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarLeftArrow">
            <summary>
            Reference to the image skin for the left arrow of horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarRightArrow">
            <summary>
            Reference to the image skin for the right arrow of horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.HScrollBarGripper">
            <summary>
            Reference to the image skin for the gripper of a horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarIncreaseShaft">
            <summary>
            Reference to the image skin for the increase shaft of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarDecreaseShaft">
            <summary>
            Reference to the image skin for the decrease shaft of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarThumb">
            <summary>
            Reference to the image skin for the thumb of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarIncreaseButton">
            <summary>
            Reference to the image skin for the increase button of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarDecreaseButton">
            <summary>
            Reference to the image skin for the decrease button of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarUpArrow">
            <summary>
            Reference to the skin for the up arrow of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarDownArrow">
            <summary>
            Reference to the skin for the down arrow of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.VScrollBarGripper">
            <summary>
            Reference to the image skin for the gripper of a vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.GroupBox">
            <summary>
            Reference to the image skin for a group box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TreeViewItemSymbolCollapsed">
            <summary>
            Reference to the image skin for the collapsed symbol of a tree view item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TreeViewItemSymbolExpanded">
            <summary>
            Reference to the image skin for the expanded symbol of a tree view item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TabPane">
            <summary>
            Reference to the image skin for a tab pane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBar">
            <summary>
            Reference to the image skin for a title bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarButton">
            <summary>
            Reference to the image skin for a title bar button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarCloseButton">
            <summary>
            Reference to the image skin for the title bar close button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarMinimizeGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar minimize button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarMaximizeGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar maximize button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarCloseGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar close button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarRestoreGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar restore button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarHelpGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar help button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.TitleBarMenuDropDownGlyph">
            <summary>
            Reference to the image skin for the glyph of the title bar menu drop down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUIThemeSkinMap.Window">
            <summary>
            Reference to the image skin for a window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWindowsClassicTheme">
            <summary>
            An UI theme, which mimic the outlook of the "Windows Classic" theme.
            An instance of this theme can be created from an instance of the NWindowsClassicThemeSettings class,
            thus allowing for all standard color schemes of the Windows Classic theme for Windows XP to be reproduced.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.#ctor">
            <summary>
            Creates a Windows Classic Theme with Windows Standard scheme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.#ctor(Nevron.Nov.UI.ENUIThemeScheme)">
            <summary>
            Creates a Windows Classic Theme with the specified scheme.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateWindowStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateDialogStyles">
            <summary>
            Creates the dialog styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateViewportStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateTextBoxStyles">
            <summary>
            Creates the text box styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateCheckBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateRadioButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateDropDownEditStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateDateTimeBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateSplitButtonStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateMenuDropDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateColorPickerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateCalendarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateSliderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateProgressBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateScrollBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateSpinnerStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateUpDownStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateTabStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateGroupBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateListBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateTreeViewStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateItemsInCommandBarStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.DisabledButtonBackground(Nevron.Nov.Dom.NThemeStyle)">
            <summary>
            Sets the background for disabled buttons to the given theme style.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateCheckBoxCheckedSymbol(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates the symbol shown on a check box when checked.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowsClassicTheme.CreateGroupBox3DBorder">
            <summary>
            Create the 3D border of a group box.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NWindowsClassicTheme.WindowsClassicSkinType">
            <summary>
            The windows classic skin type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDataFormat">
            <summary>
            Represents a data format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this data format.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.GetHashCode">
            <summary>
            Gets the has code for this data format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.ToString">
            <summary>
            Gets the string representation of this data format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.TryDeserialize(System.Byte[],System.Object@)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.TrySerialize(System.Object,System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDataFormat.TextFormat">
            <summary>
            Represents the Nevron text format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDataFormat.RTFFormat">
            <summary>
            Represents the Nevron rich text format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDataFormat.RasterFormat">
            <summary>
            Represents the Nevron raster format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDataFormat.FilesFormat">
            <summary>
            Represents the files format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.Create(System.String,Nevron.Nov.FunctionResult{System.Byte[],Nevron.Nov.UI.NDataFormat,System.Object},Nevron.Nov.FunctionResult{System.Object,Nevron.Nov.UI.NDataFormat,System.Byte[]})">
            <summary>
            Creates a custom data format that has the specified serializer and deserializer.
            </summary>
            <param name="name"></param>
            <param name="serializer"></param>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataFormat.GetByName(System.String)">
            <summary>
            Gets a data format from the specified name. Returns null if the format is not yet created.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDataFormat.NevronFormatPrefix">
            <summary>
            Prefix applied to all data format declared by Nevron Open Vision products.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDataFormat.Name">
            <summary>
            Gets the format name
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDataObject">
            <summary>
            Represents a data object in the Nevron Open Vision data exchange mechanizms (i.e. drag and drop and clipboard).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.#ctor">
            <summary>
            Creates a new writable data object
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.IsReadOnly">
            <summary>
            Determines whether this a readonly data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.SetData(Nevron.Nov.UI.NDataFormat,System.Object)">
            <summary>
            Sets a data object in the specified data format. 
            Throws an exception if the specified object is not a valid instance for the passed format.
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.ContainsData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Queries whether data is present in the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.GetData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Tries to get data in the specified format. 
            Returns null, if data in the specified format does not exists or its retrieval failed.
            Returns a format specific object instance in case the data was successfully retrived.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.GetFormats">
            <summary>
            Gets an array of the formats in which data can be obtained.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.ContainsText">
            <summary>
            Checks whether this data object contains a text string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.SetText(System.String)">
            <summary>
            Stores the specified text string in the data object
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.GetText">
            <summary>
            Loads a text string from the data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.ContainsRaster">
            <summary>
            Checks whether this data object contains a raster image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.SetRaster(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Stores the specified raster image in the data object
            </summary>
            <param name="raster"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.GetRaster">
            <summary>
            Loads a raster image from the data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.ContainsRTF">
            <summary>
            Checks whether this data object contains an RTF text data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.SetRTF(System.Byte[])">
            <summary>
            Stores the specified RTF bytes in the data object.
            </summary>
            <param name="rtfBytes"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDataObject.GetRTF">
            <summary>
            Loads an RTF bytes from the data object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDataObject.Empty">
            <summary>
            The empty data object (readonly with no data)
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell">
            <summary>
            A cell of the NAdvancedGradientVariantPicker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell.NAdvancedGradientVariantPickerCellSchema">
            <summary>
            Schema associated with NAdvancedGradientVariantPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell.VariantProperty">
            <summary>
            Reference to the Variant property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientVariantPickerCell.Variant">
            <summary>
            Gets or sets the advanced gradient variant of this cell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboTextBox">
            <summary>
            Represents the text box part of a combo box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAutoCompleteBox">
            <summary>
            An UI element, which hosts a text box and provides auto complete functionality for it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.InitAutoComplete``1(Nevron.Nov.DataStructures.INIterable{``0})">
            <summary>
            Initializes the auto complete data source and creates labels for the content of the
            auto complete drop down items. You should also call this method when you make a
            change to the auto complete source.
            </summary>
            <typeparam name="TDataSourceItem"></typeparam>
            <param name="autoCompleteSource"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.InitAutoComplete``1(Nevron.Nov.DataStructures.INIterable{``0},Nevron.Nov.UI.NAutoCompleteFactory{``0})">
            <summary>
            Initializes the auto complete data source and widget creation method that is used to create the
            content of the auto complete drop down items. You should also call this method when you make a
            change to the auto complete source.
            </summary>
            <typeparam name="TDataSourceItem">The type of the items in the autocomplete data source.</typeparam>
            <param name="autoCompleteSource">The auto complete data source.</param>
            <param name="autoCompleteFactory">The method for creating auto complete list box items' content.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.CreatePopupWindow">
            <summary>
            Overriden to create a popup window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns>true if the opening should continue</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnPopupClosed">
            <summary>
            Called when the popup has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.MeasureContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the element's content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Overriden to focus the underlying text box widget.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnListBoxKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Called when a key is pressed inside the list box's node subtree.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnListBoxInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Called when an input char is entered inside the list box's node subtree.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnListBoxItemSelected(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user has selected a list box item either by clicking it
            or by navigating to it and pressing &lt;Enter&gt;.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the text of this text box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.ShouldShowPopup(Nevron.Nov.UI.NListBox)">
            <summary>
            Gets whether a popup should be shown for the given list box.
            </summary>
            <param name="listBox"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnPopupDefaultHeightChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the default height of the popup window has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnCaseSensitiveChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the CaseSensitive property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAutoCompleteBox.OnStringMatchModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the StringMatchMode property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NAutoCompleteBox.NAutoCompleteBoxSchema">
            <summary>
            Schema associated with NAutoCompleteBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAutoCompleteBox.PairBoxChild">
            <summary>
            Reference to the PairBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAutoCompleteBox.CaseSensitiveProperty">
            <summary>
            Reference to the CaseSensitive property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAutoCompleteBox.StringMatchModeProperty">
            <summary>
            Reference to the StringMatchMode property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NAutoCompleteBox.TextChanged">
            <summary>
            Occurs when the text of this auto complete box has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NAutoCompleteBox.ListBoxItemSelected">
            <summary>
            Occurs when user has selected and item in the popup list box either by clicking it
            or by pressing enter when it is highlighted. You can subscribe to this event only
            after the auto complete box has been initialized through the Init method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.Text">
            <summary>
            Gets or sets the text in this auto complete text box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.Image">
            <summary>
            Gets or sets the image of this auto complete box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.CaseSensitive">
            <summary>
            Determines whether the auto complete suggestions are case sensitive or not.
            By default set to false (i.e. not case sensitive).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.StringMatchMode">
            <summary>
            Gets or sets the string match mode that together with the search string entered in this text
            box determines the visible auto complete list box items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.ListBox">
            <summary>
            Gets the list box of this autocomplete box popup.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.TextBox">
            <summary>
            Gets the underlying text box of this auto complete box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAutoCompleteBox.ImageBox">
            <summary>
            Gets the underlying image box of this auto complete box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboTextBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboTextBox.InitFromComboBoxItems">
            <summary>
            Initializes the combo text box from the combo box items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboTextBox.OnTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the text of this text box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboTextBox.OnListBoxItemSelected(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the user has selected a list box item either by clicking it
            or by navigating to it and pressing &lt;Enter&gt;.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboTextBox.ShouldShowPopup(Nevron.Nov.UI.NListBox)">
            <summary>
            Gets whether a popup should be shown for the given list box.
            </summary>
            <param name="listBox"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NComboTextBox.NComboTextBoxSchema">
            <summary>
            Schema associated with NComboTextBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDateTimeTextBox">
            <summary>
            Represents the text box part of a date/time box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTextBox">
            <summary>
            A scrollable widget, which displays an editable text string. The text is controlled by the Text property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            This implementation directly calls the VisitDisplaySubtree method of the child node.
            </summary>
            <param name="child"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.GetCaretPos">
            <summary>
            Gets the current caret position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.SetCaretPos(Nevron.Nov.Text.NTextPosition)">
            <summary>
            Sets the caret position. 
            Resets the selection. 
            Updates the caret XGuideCaretPos position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.SetCaretPos(Nevron.Nov.Text.NTextPosition,System.Boolean)">
            <summary>
            Sets the caret position. 
            Optionally selects the text enclosed in the prev select caret position and the new one.
            Updates the caret XGuideCaretPos position.
            </summary>
            <param name="pos"></param>
            <param name="select"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.SetCaretPos(Nevron.Nov.Text.NTextPosition,System.Boolean,System.Boolean)">
            <summary>
            Sets the caret position. 
            Optionally selects the enclosed text.
            Optionally updates the XGuideCaretPos for PrevLine/NextLine navigaiton.
            </summary>
            <param name="pos"></param>
            <param name="select"></param>
            <param name="updateXGuide"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.EnsureCaretVisible">
            <summary>
            Ensures that the caret is visible
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.MoveCaret(Nevron.Nov.Text.ENCaretMoveDirection)">
            <summary>
            Moves the caret in the specified direction.
            Resets the selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.MoveCaret(Nevron.Nov.Text.ENCaretMoveDirection,System.Boolean)">
            <summary>
            Moves the caret position in the specified direction.
            Optionally selects the text enclosed in the prev select caret position and the new one.
            </summary>
            <param name="direction"></param>
            <param name="select"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.IsSelectedRangeEmpty">
            <summary>
            Returns true, if the text box currently does not have any text selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.SelectRange(System.Int32,System.Int32)">
            <summary>
            Selects the text from the char at index start to the char at index end (i.e. the text in the [start;end] range.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.SelectAll">
            <summary>
            Selects the entire text of the text box
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.DeselectAll">
            <summary>
            Deselects the selected text, if any
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.TryGetSelectedRange(Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Tries to get the selected text of the text. 
            The returned 1D range is valid only when this method returns true.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.TryGetSelectedText(System.String@)">
            <summary>
            Tries to get the selected text of the text box. 
            The returned text string is valid only when this method returns true.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.RemoveSelectedText">
            <summary>
            Removes the currently selected text and positions the caret to the removed range begin.
            If there is no selection, this method does nothing and returns false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.InsertReplaceText(System.String)">
            <summary>
            Inserts text at the current caret position and positions the caret to the end of the inserted text.
            If there is a selected text, it is first removed.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.InsertReplaceChar(System.Char)">
            <summary>
            Inserts a character at the current caret position and positions the caret on the next grapheme.
            If there is a selected text, it is first removed.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.CanCopy">
            <summary>
            Determines whether the copy operation will place anything on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.Copy">
            <summary>
            Copies the selected text to the clipboard.
            Returns true if any text has been set to the clipboard, otherwise returns false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.CanPaste">
            <summary>
            Determines whether the paste operation can be performed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.Paste">
            <summary>
            Pastes text from the clipboard and performs an insert-replace text operation.
            Returns true if any text has been pasted from the clipboard, otherwise returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.CanCut">
            <summary>
            Determines whether the cut operation will place anything on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.Cut">
            <summary>
            Cuts (removes) the selected text, and places it on the clipbard.
            Returns true if any text has been set to the clipboard, otherwise returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.ScrollToCaret">
            <summary>
            Ensures that the current caret position is visible
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to include the caret
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            Overriden to render the text
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.GetTotalViewport">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnTextChanging(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Text property is changing.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnTextChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Text property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.ShowContextPopup(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Shows the context widget. 
            </summary>
            <param name="screenPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnContextPopupClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the context popup is closed.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.CreatePopupWidget">
            <summary>
            Creates the context widget that is shown when the user Right Clicks on the text box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnCutMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the cut menu item is clicked.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnCopyMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the copy menu item is clicked.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTextBox.OnPasteMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the paste menu item is clicked.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.NTextBoxSchema">
            <summary>
            Schema associated with NTextBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.CaretChild">
            <summary>
            Reference to the Caret child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.TextProperty">
            <summary>
            Reference to the Text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.HintProperty">
            <summary>
            Reference to the Hint property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.HintFillProperty">
            <summary>
            Reference to the HintFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.TextAlignProperty">
            <summary>
            Reference to the TextAlign property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.AlwaysShowSelectionProperty">
            <summary>
            Reference to the AlwaysShowSelection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.AlwaysShowCaretProperty">
            <summary>
            Reference to the AlwaysShowCaret property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.SelectAllOnFocusProperty">
            <summary>
            Reference to the SelectAllOnFocus property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.MultilineProperty">
            <summary>
            Reference to the Multiline property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.WordWrapProperty">
            <summary>
            Reference to the WordWrap property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.AcceptsTabProperty">
            <summary>
            Reference to the AcceptsTab property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.AcceptsEnterProperty">
            <summary>
            Reference to the AcceptsEnter property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.ReadOnlyProperty">
            <summary>
            Reference to the ReadOnly property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.PasswordCharProperty">
            <summary>
            Reference to the PasswordChar property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.CharacterCasingProperty">
            <summary>
            Reference to the CharacterCasingProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.DirectionProperty">
            <summary>
            Reference to the direction property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTextBox.ShowCaretProperty">
            <summary>
            Reference to the ShowCaret property;
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTextBox.TextChanged">
            <summary>
            Occurs when the text property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.Hint">
            <summary>
            Gets or sets the text displayed when the text box is empty.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.HintFill">
            <summary>
            Gets or sets the fill style of the text box hint.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.TextAlign">
            <summary>
            Gets or sets the text alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.CaretPos">
            <summary>
            Gets the current caret position.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.AlwaysShowSelection">
            <summary>
            Gets or sets whether to show selection even when the text box does not have focus.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.AlwaysShowCaret">
            <summary>
            Gets or sets whether to show the caret even when the text box does not have focus.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.SelectAllOnFocus">
            <summary>
            Gets or sets whether the text box will perform a select all operation when it gains focus
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.Multiline">
            <summary>
            Gets or sets whether the text can span more than one line.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.WordWrap">
            <summary>
            Gets or sets whether lines are automatically word wrapped when multiline is enabled
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.AcceptsTab">
            <summary>
            Gets or set whether tab characters are accepted as input.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.AcceptsEnter">
            <summary>
            Gets or set whether return characters are accepted as input.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.ReadOnly">
            <summary>
            Gets or sets whether the text box allows the user to modify the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.PasswordChar">
            <summary>
            Gets or sets the password char
            </summary>
            <remarks>
            When the password char is set to any value different than 0 the control will enter in password mode and display that
            character repeatedly to match the length of the text input by the user. Clipboard copy is disabled when the control is in password mode
            </remarks>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.CharacterCasing">
            <summary>
            Gets or sets the current character casing
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.Direction">
            <summary>
            Gets / sets the text direction
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTextBox.ShowCaret">
            <summary>
            Gets / sets whether the text box must show the caret
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to handle the navigation keys (i.e. the arrows keys) and forbid
            all others.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Overriden to process the entered digits and to update the selected date
            accordingly.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to select the word the user has clicked in.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.OnTextChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Overriden to update the text and format processors when the text of
            the text box has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.NavigateLeft">
            <summary>
            Called when the selection should move to the left (e.g. when the
            user presses the left arrow key).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.NavigateRight">
            <summary>
            Called when the selection should move to the right (e.g. when the
            user presses the right arrow key).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.IncreaseValue">
            <summary>
            Called when the value of the selection should increase (e.g. when
            the user presses the up arrow key).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.DecreaseValue">
            <summary>
            Called when the value of the selection should decrease (e.g. when
            the user presses the down arrow key).
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.ModifyDateTime(System.DateTime,Nevron.Nov.ENDateTimeUnit,System.Boolean)">
            <summary>
            Increases or decreases the specified unit of the given date/time and returns the result.
            </summary>
            <param name="date"></param>
            <param name="unit"></param>
            <param name="increase"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeTextBox.SetDateTime(System.DateTime,Nevron.Nov.ENDateTimeUnit,System.Int32)">
            <summary>
            Sets the specified unit of the given date/time to the given amount and returns the result.
            Note that no validation is performed and this methods throws and exception if an invalid
            date is constructed.
            </summary>
            <param name="date"></param>
            <param name="unit"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeTextBox.NDateTimeTextBoxSchema">
            <summary>
            Schema associated with NDateTimeTextBox.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeTextBox.HasCustomFormat">
            <summary>
            Checks whether the owner date time box has a custom set date/time format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeTextBox.Format">
            <summary>
            Gets the full format string extracted from the owner date/time box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeTextBox.OwnerDateTimeBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPreviewHost">
            <summary>
            This widget defines a hatch background and a border and is used to host a preview widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewHost.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewHost.CanAnchorHatches">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewHost.CanAnchorShadows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewHost.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the hosted preview widget. As the perview widget's size is
            determined by this host the MeasureContent method always returns a dummy measure.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPreviewHost.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the hosted preview widget.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NPreviewHost.NPreviewHostSchema">
            <summary>
            Schema associated with NPreviewHost.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPreviewHost.PreviewMarginsPercentProperty">
            <summary>
            Reference to the PreviewMarginsPercent property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPreviewHost.PreviewMarginsPercent">
            <summary>
            Determines the margins of the hosted preview widget as a percentage of this widget content area size. 
            By default set to 5%.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NProgressBar">
            <summary>
            A widget, which fills to indicate the progress of an operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.MeasureContent(System.Boolean)">
            <summary>
            Measures the content of this progress bar.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the embedded controls.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.PaintLabel(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the progress label.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.GetLabelText">
            <summary>
            Gets the text of the progress label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NProgressBar.CalculateFilledFactor">
            <summary>
            Calculates the filled part factor, i.e. the ratio of the completed part to the whole progress bar.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.NProgressBarSchema">
            <summary>
            Schema associated with NProgressBar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.CompletedPartChild">
            <summary>
            Reference to the CompletedPart child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.RemainingPartChild">
            <summary>
            reference to the RemainingPart child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.LabelStyleProperty">
            <summary>
            Reference to the LabelStyle property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NProgressBar.RimWidthPercentProperty">
            <summary>
            Reference to the RimWidthPercent property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NProgressBar.CompletedPart">
            <summary>
            Gets or sets the filled part widget of the progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NProgressBar.RemainingPart">
            <summary>
            Gets or sets the empty part widget of the progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NProgressBar.Style">
            <summary>
            Gets or sets the style of the progress bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NProgressBar.LabelStyle">
            <summary>
            Gets or sets the progress label style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NProgressBar.RimWidthPercent">
            <summary>
            Gets or sets the width of the rim of a circular progress bar relative to the radius
            of the circular progress bar. By default set to 50%.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitterThumbGhost">
            <summary>
            Represents the ghost of a splitter thumb.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitterThumbGhost.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitterThumbGhost.NSplitterThumbGhostSchema">
            <summary>
            Schema associated with NWidget
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUISettings">
            <summary>
            Static class that defines global settings that relate to UI paint cache, UI diagnostics etc.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.EnablePaintCache">
            <summary>
            Enables or disables paint cache globally
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.MaxPaintCacheTotalCost">
            <summary>
            Gets or sets the maximum cost that the sum of the cache costs of all paint cache entries must not exceed.
            By default set to (10000 * 10000).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.MinPaintCacheItemCost">
            <summary>
            Gets or sets the minimal estimated cost that an entry must have in order to be cached.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.MaxPaintCacheItemCost">
            <summary>
            Gets or sets the maximal estimated cost that an entry can have in order to be cached.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.RecreatePaintCacheItemCacheAfterFrames">
            <summary>
            Gets or sets the number of global window frames after which a paint cache item's cache that was considered invalid can be recreated.
            By default set to 2.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.PaintCacheLoadPercent">
            <summary>
            Gets the percent at which the UI paint cache is currently used (loaded)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.EnableMultiThreadedPainting">
            <summary>
            Enables or disables multi-threaded painting. 
            Multi-threaded painting is by default enabled for most of the integration surfaces, 
            and most of the integration surfaces support this feature.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.ShowRepaintAreas">
            <summary>
            Indicates whether repaint areas should be displayed, for windows that support area repaint.
            By default set to false. Set this property to true to diagnose the actual areas that a window repaints.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUISettings.ShowPaintCacheAreas">
            <summary>
            Indicates whether areas painted from paint cache should be displayed, for windows that support and allow paint cache.
            By default set to false. Set this property to true to diagnose the actual areas that were painted via paint cache.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSchemaPart">
            <summary>
            Serves as base class for schema parts (properties, children etc).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Custom1">
            <summary>
            The Custom1 flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Custom2">
            <summary>
            The Custom2 flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Custom3">
            <summary>
            The Custom3 flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Custom4">
            <summary>
            The Custom4 flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Custom5">
            <summary>
            The Custom5 flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Serializable">
            <summary>
            The serializable flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Nullable">
            <summary>
            The nullable flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_DeeplyCloneable">
            <summary>
            The deeply clonable flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSchemaPart.Flag_Recordable">
            <summary>
            The recordable flag
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.#ctor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor
            </summary>
            <param name="ownerSchema"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetMetaUnit(Nevron.Nov.Dom.NMetaUnit)">
            <summary>
            Sets the specified metaunit, which applies to the owner schema
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetMetaUnit(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NMetaUnit)">
            <summary>
            Sets the specified metaunit, which applies to the specified schema
            </summary>
            <param name="schema"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetMetaUnit(Nevron.Nov.Dom.NSchema,System.Int32)">
            <summary>
            Gets the metaunit with the specified key, which applies for the specified schema
            </summary>
            <param name="schema"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetMetaUnit(Nevron.Nov.Dom.NSchema,System.Type)">
            <summary>
            Gets the metaunit with the specified type, which applies for the specified schema
            </summary>
            <param name="schema"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetCustom1(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the value for the Custom1 flag for the specified schema.
            By default Custom1 is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom1(System.Boolean)">
            <summary>
            Sets the value for the Custom1 flag for the owner schema.
            By default Custom1 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom1(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets the value for the Custom1 flag for the specified schema.
            By default Custom1 is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetCustom2(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the value for the Custom2 flag for the specified schema.
            By default Custom2 is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom2(System.Boolean)">
            <summary>
            Sets the value for the Custom2 flag for the owner schema.
            By default Custom2 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom2(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets the value for the Custom2 flag for the specified schema.
            By default Custom2 is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetCustom3(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the value for the Custom3 flag for the specified schema.
            By default Custom3 is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom3(System.Boolean)">
            <summary>
            Sets the value for the Custom3 flag for the owner schema.
            By default Custom3 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom3(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets the value for the Custom3 flag for the specified schema.
            By default Custom3 is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetCustom4(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the value for the Custom4 flag for the specified schema.
            By default Custom4 is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom4(System.Boolean)">
            <summary>
            Sets the value for the Custom4 flag for the owner schema.
            By default Custom4 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom4(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets the value for the Custom4 flag for the specified schema.
            By default Custom4 is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.GetCustom5(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the value for the Custom5 flag for the specified schema.
            By default Custom5 is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom5(System.Boolean)">
            <summary>
            Sets the value for the Custom5 flag for the owner schema.
            By default Custom5 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchemaPart.SetCustom5(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets the value for the Custom5 flag for the specified schema.
            By default Custom5 is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchemaPart.HasMetaUnits">
            <summary>
            Gets whether the part contains any meta units
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NLengthPropertyEditor">
            <summary>
            The NLengthPropertyEditor class is by default assigned to properties of NLength type.
            The editor shows a numeric up/down for selecting a numeric value and combo box for selecting
            its measurement unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NLengthPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NLengthPropertyEditor.OnMeasureUpDownValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the value of the numeric up/down has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NLengthPropertyEditor.OnMeasureUpDownSelectedUnitChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called to update the edited node's value when the unit of the measure up/down has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NLengthPropertyEditor.NLengthPropertyEditorSchema">
            <summary>
            Schema associated with NLengthPropertyEditor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NLengthPropertyEditor.EditedNodeValue">
            <summary>
            Overriden to return the edited length's value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NLengthPropertyEditor.EditedNodeUnit">
            <summary>
            Overriden to return the edited length's measurement unit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMarginsPropertyEditor">
            <summary>
            A property editor for properties of type NMargins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMarginsPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create the value control.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.NMarginsPropertyEditorSchema">
            <summary>
            Schema associated with NMarginsPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.MarginsTypeProperty">
            <summary>
            Reference to the MarginsType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.ShowUnitsProperty">
            <summary>
            Reference to the ShowUnits property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.EmbedInGroupBoxTemplate">
            <summary>
            A margins property editor embedded in a group box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.MarginsTemplate">
            <summary>
            A margins property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.PaddingTemplate">
            <summary>
            A padding property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.BorderThicknessTemplate">
            <summary>
            A border thickness property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.MarginsLengthTemplate">
            <summary>
            A margins property editor with units.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.PaddingLengthTemplate">
            <summary>
            A padding property editor with units.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NMarginsPropertyEditor.BorderThicknessLengthTemplate">
            <summary>
            A border thickness property editor with units.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsPropertyEditor.MarginsType">
            <summary>
            Gets or sets the value of the MarginsType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NMarginsPropertyEditor.ShowUnits">
            <summary>
            Gets or sets the value of the ShowUnits property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NGradientVariantEditor">
            <summary>
            A property editor for properties of type ENGradientVariant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientVariantEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientVariantEditor.CreateControl">
            <summary>
            Overriden to create the editor's control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NGradientVariantEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NGradientVariantEditor.NGradientVariantEditorSchema">
            <summary>
            Schema associated with NGradientVariantEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NHatchStyleEditor">
            <summary>
            A property editor for properties of type ENHatchStyle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHatchStyleEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHatchStyleEditor.CreateControl">
            <summary>
            Overriden to create a hacth style picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHatchStyleEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when any aspect of the edited node has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NHatchStyleEditor.NHatchStyleEditorSchema">
            <summary>
            Schema associated with NHatchStyleEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelectorPartCollection`1">
            <summary>
            A selector part, that is a collection for other selector parts.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.#ctor(Nevron.Nov.Dom.NSelectorPartCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorPartCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelectorPartCollection`1.NSelectorPartCollectionSchema">
            <summary>
            Schema associated with NSelectorPartCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelectorPartCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelectorPartCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NLength">
            <summary>
            Represents a length, defined as a value and length unit pair
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLength.#ctor(System.Double)">
            <summary>
            Creates a NLength object with the specified length in DIPs.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NLength.#ctor(System.Int32)">
            <summary>
            Creates a NLength object with the specified length in DIPs.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NLength.#ctor(System.Double,Nevron.Nov.NUnit)">
            <summary>
            Creates a NLength object with the specified length in the specified unit.
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NLength.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.CompareTo(Nevron.Nov.NLength)">
            <summary>
            Compares this instance to a specified other length and returns an indication of their relative values.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.NLength.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NLength.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.NLength.ConvertTo(Nevron.Nov.NUnit)">
            <summary>
            Converts to a value in the specified unit.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.ConvertTo(Nevron.Nov.NUnit,System.Double)">
            <summary>
            Converts to a value in the specified unit.
            </summary>
            <param name="to"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.ConvertToDIPs">
            <summary>
            Converts to a value in DIPs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.ConvertToPixels(System.Double)">
            <summary>
            Converts to a value in pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.ToString">
            <summary>
            Returns the string representation of this NLength object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.Equals(System.Object)">
            <summary>
            Determines whether the lengths are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_UnaryNegation(Nevron.Nov.NLength)">
            <summary>
            Arithmetic unary minus operator
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_UnaryPlus(Nevron.Nov.NLength)">
            <summary>
            Arithmetic unary plus operator
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Addition(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Arithmetic binary plus operator. 
            The resulting length uses the {a} parameter unit.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Subtraction(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Arithmetic binary minus operator. 
            The resulting length uses the {a} parameter unit.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Multiply(Nevron.Nov.NLength,System.Double)">
            <summary>
            Multiplication with scalar operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Multiply(System.Double,Nevron.Nov.NLength)">
            <summary>
            Multiplication with scalar operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Division(Nevron.Nov.NLength,System.Double)">
            <summary>
            Division by scalar operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Division(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Division operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Equality(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_Inequality(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Not Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_LessThan(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Less Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_GreaterThan(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Greater Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_LessThanOrEqual(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Less Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NLength.op_GreaterThanOrEqual(Nevron.Nov.NLength,Nevron.Nov.NLength)">
            <summary>
            Logical Greater Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NLength.Zero">
            <summary>
            The Zero (0) length.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLength.Negate">
            <summary>
            Returns the negative value of this NLength
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLength.Unit">
            <summary>
            The length unit
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLength.Value">
            <summary>
            The length value
            </summary>
        </member>
        <member name="T:Nevron.Nov.NEmbeddedResource">
            <summary>
            Represents an embedded resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResource.#ctor(Nevron.Nov.NEmbeddedResourceContainer,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an embedded resource with the specified name and data.
            </summary>
            <param name="container"></param>
            <param name="name"></param>
            <param name="startIndex"></param>
            <param name="byteCount"></param>
        </member>
        <member name="P:Nevron.Nov.NEmbeddedResource.Name">
            <summary>
            Gets the resource name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NEmbeddedResource.Data">
            <summary>
            Gets the resource data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NEmbeddedResource.Container">
            <summary>
            Gets the container in which this embedded resource is registered.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NEmbeddedResourceRef">
            <summary>
            A reference to an embedded resource.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NEmbeddedResourceRef.PathSeparator">
            <summary>
            The seperator for the embedded resource path
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.#ctor(Nevron.Nov.NEmbeddedResourceContainer,System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="resources"></param>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.#ctor(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Creates a resource reference from a resource
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.GetBytes">
            <summary>
            Gets the resource bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.ToString">
            <summary>
            Gets the string representation of this resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.DeepClone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="F:Nevron.Nov.NEmbeddedResourceRef.ResourceContainer">
            <summary>
            The embedded resources object in which the resource resides
            </summary>
        </member>
        <member name="F:Nevron.Nov.NEmbeddedResourceRef.ResourceName">
            <summary>
            The name of the resource
            </summary>
        </member>
        <member name="F:Nevron.Nov.NEmbeddedResourceRef.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceRef.Parse(System.String)">
            <summary>
            Gets an embedded resource from string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NEmbeddedResourceContainer">
            <summary>
            Represents a container for embedded resources. 
            Serves as base class for all automatically generated embedded resources.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.GetResource(System.String)">
            <summary>
            Returns the resource with the specified name or null if a resource with this
            name does not exist.
            </summary>
            <param name="name">The name of the embedded resource to search for.</param>
            <returns>The embedded resource with the given name or null if no such resource exist.</returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.GetResourceBytes(System.String)">
            <summary>
            Returns the bytes of the resource with the specified name or null if a resource with this
            name does not exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.GetResourceBytes(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Gets the bytes of the specified embedded resource.
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.GetResourceStream(System.String)">
            <summary>
            Gets a stream from the resource with the specified name. Returns null if a resource
            with this name does not exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.GetResourceNames">
            <summary>
            Gets the names of the resources contained in this container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.RegisterResource(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Registers a resource.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Nevron.Nov.NEmbeddedResourceContainer.AddByteArray(System.Byte[])">
            <summary>
            Adds the given byte array to this resource container's byte data.
            </summary>
            <param name="byteArray"></param>
        </member>
        <member name="F:Nevron.Nov.NEmbeddedResourceContainer.Empty">
            <summary>
            The Empty resources
            </summary>
        </member>
        <member name="T:Nevron.Nov.NStopwatch">
            <summary>
            This class is an analogue to System.Diagnostics.Stopwatch. Is is
            needed because there isn't a Stopwatch class in Silverlight.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.ToString">
            <summary>
            Returns a the string representation of the stopwatch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.Start">
            <summary>
            Starts the watch.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.Stop">
            <summary>
            Stops the watch.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.StartNew">
            <summary>
            Creates and immediately starts a new stopwatch.
            </summary>
            <returns>A newly created stopwatch in started state.</returns>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.StartNew(System.String)">
            <summary>
            Creates and immediately starts a new stopwatch.
            </summary>
            <param name="name">The name of the stopwatch.</param>
            <returns>A newly created stopwatch in started state.</returns>
        </member>
        <member name="M:Nevron.Nov.NStopwatch.GetComparisonString(Nevron.Nov.NStopwatch,Nevron.Nov.NStopwatch)">
            <summary>
            Gets a string that states which of the given stopwatches represents a faster operation
            and how much faster it is.
            </summary>
            <param name="s1">The first stopwatch to take part in the comparison.</param>
            <param name="s2">The second stopwatch to take part in the comparison.</param>
            <returns>A string that states which of the given stopwatches represents a faster operation
            and how much faster it is.</returns>
        </member>
        <member name="P:Nevron.Nov.NStopwatch.IsRunning">
            <summary>
            Returns true if the watch is currently measuring time.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total number of miliseconds elapsed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NStopwatch.Name">
            <summary>
            Gets or sets the name of the stopwatch.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleCommandAction">
            <summary>
            A command action that serves as base class for actions that toggle or check something.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Must override to determine whether the thing that the action toggles is considered checked or not.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleCommandAction.NToggleCommandActionSchema">
            <summary>
            Schema associated with NToggleCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCheckableMenuItemCommandSource">
            <summary>
            A command source that can be applied to NCheckableMenuItem instances.
            It subsrcibes for the NMenuItem.Click event to execute the action and also updates the Checked state of the owner checkable menu item.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuItemCommandSource">
            <summary>
            A command source that can be applied to NMenuItem instances.
            It subsrcibes for the NMenuItem.Click event to execute the command with empty parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source from the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCommandSource.OnMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a menu item has been clicked. Calls the ExecuteCommand method
            with an empty parameter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCommandSource.NMenuItemCommandSourceSchema">
            <summary>
            Schema associated with NMenuItemCommandSource
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItemCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItemCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItemCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItemCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element Checked property
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCheckableMenuItemCommandSource.NCheckableMenuItemCommandSourceSchema">
            <summary>
            Schema associated with NCheckableMenuItemCommandSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NToggleButtonCommandSource">
            <summary>
            A command source that can be applied to all types of buttons that derive from NToggleButton.
            It subsrcibes for the NButtonBase.Click event to execute the action and also updates the Checked state of the owner toggle button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NButtonBaseCommandSource">
            <summary>
            A command source that can be applied to all types of buttons that derive from NButtonBase.
            It subsrcibes for the NButtonBase.Click event to execute the command with empty parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBaseCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBaseCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBaseCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBaseCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NButtonBaseCommandSource.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the owner button has been clicked. Calls the ExecuteCommand method with
            the command parameter associated with this command action, which is by default
            NCommand.EmptyParamter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NButtonBaseCommandSource.NButtonBaseCommandSourceSchema">
            <summary>
            Schema associated with NButtonBaseCommandSource
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NToggleButtonCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element Checked property
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NToggleButtonCommandSource.NToggleButtonCommandSourceSchema">
            <summary>
            Schema associated with NToggleButtonCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommander">
            <summary>
            Represents a collection of command actions, that input elements can use to manage the command handling on their behalf.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.OnUpdateCommandSource(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Processes the update command source event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.OnExecuteCommand(Nevron.Nov.UI.NExecuteCommandEventArgs)">
            <summary>
            Processes the execute command event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.GetCommandAction(Nevron.Nov.UI.NCommand)">
            <summary>
            Gets the command action associated with the command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommander.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommander.NCommanderSchema">
            <summary>
            Schema associated with NCommander
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommander.OwnerInputElement">
            <summary>
            Gets the input element to which this interactor belongs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandSourceEventArgs">
            <summary>
            Serves as base class for all events associated with commands, that are raised by command sources.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandEventArgs">
            <summary>
            Serves as base class for all events associated with commands
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="command"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandEventArgs.Command">
            <summary>
            The command associated with the event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandSourceEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NCommand,Nevron.Nov.UI.NCommandSource)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="command"></param>
            <param name="commandSource"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandSourceEventArgs.CommandSource">
            <summary>
            The command source associated with the event
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NExecuteCommandEventArgs">
            <summary>
            Event arguments associdated with the NCommand.Execute event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NExecuteCommandEventArgs.#ctor(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NCommand,Nevron.Nov.UI.NCommandSource,System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
            <param name="command"></param>
            <param name="commandSource"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NExecuteCommandEventArgs.CommandParameter">
            <summary>
            Gets the command parameter (can be null). 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NQueryCommandTargetEventArgs">
            <summary>
            Event arguments associated with the NCommand.QueryTarget event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NQueryCommandTargetEventArgs.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NQueryCommandTargetEventArgs.CommandTarget">
            <summary>
            Gets or sets the command target, from which the CommandSource must launch the bubbling NCommand.Execute or NCommand.UpdateSource events.
            Once set to a non null value, the command target cannot be changed and the event propagation is immeditately stopped.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NUpdateCommandSourceEventArgs">
            <summary>
            Event arguments associated with the NCommand.UpdateSource event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.#ctor(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NCommand,Nevron.Nov.UI.NCommandSource,Nevron.Nov.UI.ENCommandSourceUpdateMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="command"></param>
            <param name="commandSource"></param>
            <param name="updateMask"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.UpdateEnabled">
            <summary>
            Gets whether the Enabled state of the source should be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.UpdateTooltipContent">
            <summary>
            Gets whether the content of the source tooltip should be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.UpdateChecked">
            <summary>
            Gets whether the Checked state of the source should be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.UpdateParameterList">
            <summary>
            Gets whether the ParameterList of the source should be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.UpdateActiveParameter">
            <summary>
            Gets whether the ActiveParameter of the source should be updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.Enabled">
            <summary>
            Gets or sets whether the source must be enabled or disabled.
            The value of this property needs to be updated, only if the UpdateEnabled is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.TooltipContent">
            <summary>
            Gets or sets the content of the tooltip that must be assigned to the source.
            The value of this property needs to be updated, only if the UpdateTooltipContent is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.Checked">
            <summary>
            Gets or sets whether the source must be checked or not.
            The value of this property needs to be updated, only if the UpdateChecked is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.ParameterList">
            <summary>
            Gets or sets the parameter list that should be displayed by the source.
            The value of this property needs to be updated, only if the UpdateParameterList is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NUpdateCommandSourceEventArgs.ActiveParameter">
            <summary>
            Gets or sets the active parameter that should be displayed by the source.
            The value of this property needs to be updated, only if the UpdateActiveParameter is true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragEndedEventArgs">
            <summary>
            The data associated with the end of drag and drop
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragEndedEventArgs.FinalEffect">
            <summary>
            Gets the final effect of the drag and drop operation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NQueryDragActionEventArgs">
            <summary>
            The data associated with query continue drag events
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NQueryDragActionEventArgs.Reason">
            <summary>
            Gets the reason for the query.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NQueryDragActionEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NMarginsI">
            <summary>
            Represents indents from the left, top, right and bottom sides, all expressed with Int32 values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Equals(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Checks whether this size is equal to the other size
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.ToString">
            <summary>
            Returns the string representation of this NMarginsF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.GetInnerRect(Nevron.Nov.Graphics.NRectangleI@)">
            <summary>
            Returns a the inner rectangle with applied margins from the left, top, right and bottom
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.GetOuterRect(Nevron.Nov.Graphics.NRectangleI@)">
            <summary>
            Returns a the outer rectangle with applied margins from the left, top, right and bottom
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Scale(System.Int32)">
            <summary>
            Scales the margins with the specified scale factor
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Inflate(System.Int32)">
            <summary>
            Inflates the margins with the specified inflate
            </summary>
            <param name="inflate"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.Clamp(Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Clamps the margins to the specified margins
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.FlipY">
            <summary>
            Returns vertically flipped margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.FlipX">
            <summary>
            Returns horizontally flipped margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.RotateClockwise">
            <summary>
            Returns clockwise rotated margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.RotateCounterClockwise">
            <summary>
            Returns counter-clockwise rotated margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.ToMarginsF">
            <summary>
            Converts this margins to floating point margins.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMarginsI.Left">
            <summary>
            X margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMarginsI.Top">
            <summary>
            Y margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMarginsI.Right">
            <summary>
            Right margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMarginsI.Bottom">
            <summary>
            Bottom margin
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.op_Addition(Nevron.Nov.Graphics.NMarginsI,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Arithmetic binary plus operator. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.op_Subtraction(Nevron.Nov.Graphics.NMarginsI,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Arithmetic binary minus operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.op_Equality(Nevron.Nov.Graphics.NMarginsI,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Checks whether the margins are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMarginsI.op_Inequality(Nevron.Nov.Graphics.NMarginsI,Nevron.Nov.Graphics.NMarginsI)">
            <summary>
            Checks whether the margins are different.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMarginsI.Zero">
            <summary>
            The empty (zero) margins.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMarginsI.IsZero">
            <summary>
            Checks if all components of this margin are zero.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFontDescriptor">
            <summary>
            Represents a font descriptor - a font file with from specified family and style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFontDescriptor.DefaultSansFamilyName">
            <summary>
            Gets the default sans family name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFontDescriptor.DefaultSerifFamilyName">
            <summary>
            Gets the default serif family name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFontDescriptor.DefaultMonoFamilyName">
            <summary>
            Gets the default mono spaced family name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NFontDescriptor.DefaultSymbolFamilyName">
            <summary>
            Gets the default symbol family name.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.#ctor(System.String,Nevron.Nov.Graphics.ENFontVariant)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="familyName">Font family name.</param>
            <param name="fontVariant">Font variant.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.#ctor(Nevron.Nov.Graphics.NFontDescriptor)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this font desriptor.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.GetHashCode">
            <summary>
            Gets the has code of this font descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontDescriptor.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontDescriptor.FamilyName">
            <summary>
            Gets the font family name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontDescriptor.FontVariant">
            <summary>
            Gets the font variant.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFontFaceDescriptor">
            <summary>
            Base for font face variant and font face style descriptors
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.#ctor(System.String,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="familyName"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.#ctor(System.String,System.Double,Nevron.Nov.Graphics.ENFontRasterizationMode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="familyName"></param>
            <param name="size"></param>
            <param name="rasterizationMode"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.#ctor(Nevron.Nov.Graphics.NFontFaceDescriptor)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.FontStyleToFontVariant(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Converts a font style to a font variant. Font variants do not support strikeout and underline as they are synthetic.
            </summary>
            <param name="fontStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceDescriptor.FontVariantToFontStyle(Nevron.Nov.Graphics.ENFontVariant)">
            <summary>
            Converts a font variant to a font style. Font variants do not support strikeout and underline as they are synthetic.
            </summary>
            <param name="fontVariant"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontFaceDescriptor.EmSize">
            <summary>
            Gets the emSize in points
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontFaceDescriptor.RasterizationMode">
            <summary>
            Gets the font rasterization mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontFaceDescriptor.FamilyName">
            <summary>
            Gets the family name
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NFontFaceStyleDescriptor">
            <summary>
            Represents a font style descriptor - a font with from specified family and style, loaded at specified size
            </summary>
            <remarks>
            Different from font face descriptor in that it supports synthetic strikeout / underline styles
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.#ctor(Nevron.Nov.Graphics.NFontFaceStyleDescriptor)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.#ctor(System.String,System.Double,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Graphics.ENFontRasterizationMode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="familyName"></param>
            <param name="size"></param>
            <param name="fontStyle"></param>
            <param name="rasterizationMode"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.GetFontDescriptor">
            <summary>
            Returns the font descriptor of this font face
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this font face style descriptor.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.GetHashCode">
            <summary>
            Gets the has code of this font face style descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NFontFaceStyleDescriptor.FontStyle">
            <summary>
            Gets the font style (regular, bold, italic, bold italic etc.)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeCollection`1">
            <summary>
            A collection node, that serves as base class for collections that contain other nodes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.#ctor(Nevron.Nov.Dom.NNodeCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNodeCollection`1.NNodeCollectionSchema">
            <summary>
            Schema associated with NNodeCollection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NInheritDeclaration">
            <summary>
            Represent a declaration, which forces the property value to be inherited.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDeclaration">
            <summary>
            Serves as base class for all declarations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor(Nevron.Nov.Dom.NDomProperty,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="property"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="propertyName"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.#ctor(Nevron.Nov.Dom.NDeclaration)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.GetValue">
            <summary>
            Must override to return the property value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.GetPropertyType">
            <summary>
            Must override to return the Dom Type of the property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclaration.NDeclarationSchema">
            <summary>
            Schema associated with NDeclaration
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclaration.PropertyNameProperty">
            <summary>
            Reference to the Property property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclaration.ImportantProperty">
            <summary>
            Reference to the Important property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclaration.CreateValueDeclaration(Nevron.Nov.Dom.NDomProperty,System.Object)">
            <summary>
            Creates a value declaration for the specified property and value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NDeclaration.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDeclaration.Important">
            <summary>
            Gets or sets whether the declaration is imporant. 
            Important declarations have a higher value weight.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDeclaration.Property">
            <summary>
            Gets the DOM property defined by this declaration property name and type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(Nevron.Nov.Dom.NProperty)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(System.String,System.Type)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(System.String,Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="schema"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(Nevron.Nov.Dom.NDomProperty,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="type"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(System.String,Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="schema"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.#ctor(Nevron.Nov.Dom.NInheritDeclaration)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.GetPropertyType">
            <summary>
            Returns the DOM type for the T generic parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NInheritDeclaration.GetValue">
            <summary>
            Returns a predefined value that instructs the styling to force inheritance 
            on the specified property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NInheritDeclaration.NInheritDeclarationSchema">
            <summary>
            Schema associated with NDeclaration T
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NInheritDeclaration.TypeNameProperty">
            <summary>
            Reference to the Property property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NInheritDeclaration.TypeName">
            <summary>
            Gets or sets the type assembly qualified name
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPanoseNumber">
            <summary>
            Represents a panose number.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.#ctor(System.Byte[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.ToHexString">
            <summary>
            Gets the hex representation of this number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.ToByteArrayString">
            <summary>
            Gets the byte array string for this panose number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPanoseNumber.TryParse(System.String,Nevron.Nov.Graphics.NPanoseNumber@)">
            <summary>
            Tries to parse the given HEX string as a panose number and returns true if
            parsing was successful. The given string should be exactly 20 characters
            long and contain 10 bytes of data each encoded with 2 HEX digits, for
            example the string "02020603050405020304", which is the panose number of
            the "Times New Roman" font.
            </summary>
            <param name="hexString"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.TrueType.NGlyphRun">
            <summary>
            Represents a generic glyph run
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTFileInstalledFont">
            <summary>
            Represents an installed font from a file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFileInstalledFont.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFileInstalledFont.GetFontStream">
            <summary>
            Gets the file stream of this installed font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTFileInstalledFont.URL">
            <summary>
            Gets the name of the file that contains this installed font.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCursor">
            <summary>
            Represents a cursor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(Nevron.Nov.UI.NCursor)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(Nevron.Nov.UI.ENPredefinedCursor)">
            <summary>
            Creates a predefined cursor that uses a native cursor if possible.
            </summary>
            <param name="predefinedCursor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(Nevron.Nov.UI.ENPredefinedCursor,System.Boolean)">
            <summary>
            Creates a predefined cursor that optionally uses a native cursor if possible.
            </summary>
            <param name="predefinedCursor"></param>
            <param name="useNativeIfPossible"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(System.IO.Stream)">
            <summary>
            Creates a custom cursor from a stream, containing a cursor in the .CUR format.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Nevron.Nov.Graphics.ENCursorPixel[])">
            <summary>
            Creates a custom cursor with the specified parameters.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hotSpotX"></param>
            <param name="hotSpotY"></param>
            <param name="raster"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.#ctor(Nevron.Nov.NEmbeddedResourceRef)">
            <summary>
            Creates a cursor from an embedded resource.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetANDMask">
            <summary>
            Gets the cursor AND mask
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetXORMask">
            <summary>
            Gets the cursor XOR mask
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCursor.NCursorSchema">
            <summary>
            Schema associated with NCursor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCursor.TypeProperty">
            <summary>
            Reference to the Type property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCursor.PredefinedCursorProperty">
            <summary>
            Reference to the PredefinedCursor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCursor.UseNativeIfPossibleProperty">
            <summary>
            Reference to the UseNativeIfPossible property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetResizeCursor(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Gets a resize cursor for the specified resize direction.
            </summary>
            <param name="visual">visual for which cursor is requested</param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetResizeCursor(Nevron.Nov.Dom.NVisual,Nevron.Nov.Layout.ENHVOrientation)">
            <summary>
            Gets a resize cursor for the specified resize orientation.
            </summary>
            <param name="visual">visual for which cursor is requested</param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetSplitCursor(Nevron.Nov.Dom.NVisual,Nevron.Nov.Layout.ENHVOrientation)">
            <summary>
            Gets a split cursor for the specified HV orientation.
            </summary>
            <param name="visual">visual for which cursor is requested</param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetPanCursor(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Gets the pan cursor
            </summary>
            <param name="visual">visual for which cursor is requested</param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.GetMoveCursor(Nevron.Nov.Dom.NVisual,System.Boolean,System.Boolean)">
            <summary>
            Gets a move cursor (SizeAll, SizeWE, SizeNS or No) based on the specified move permissions
            </summary>
            <param name="visual">visual for which cursor is requested</param>
            <param name="canMoveX">whether X move is allowed</param>
            <param name="canMoveY">whether Y move is allowed</param>
            <returns>move cursor</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.Serialize(Nevron.Nov.Serialization.NSerializationContext,Nevron.Nov.UI.NCursor)">
            <summary>
            Saves the image to a serialization context
            </summary>
            <param name="context"></param>
            <param name="cursor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.Deserialize(Nevron.Nov.Serialization.NDeserializationContext,Nevron.Nov.UI.NCursor)">
            <summary>
            Loads the image from a serialization context
            </summary>
            <param name="context"></param>
            <param name="image"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.Type">
            <summary>
            Gets the cursor type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.PredefinedCursor">
            <summary>
            Gets the predefined cursor. Only applicable when type is set to Predefined.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.UseNativeIfPossible">
            <summary>
            Gets whether the native cursor for the integration platform must be used, whenever possible.
            Only applicable when Type set to Predefined. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.EmbeddedResourceRef">
            <summary>
            Gets the resource from which this cursor is extracted.
            Only applicable when Type is set to Resource.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.HotSpotX">
            <summary>
            Gets the X hot spot of the cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.HotSpotY">
            <summary>
            Gets the Y hot spot of the cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.Width">
            <summary>
            Gets the width of the cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.Height">
            <summary>
            Gets the height of the cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NCursor.Pixels">
            <summary>
            Gets the cursor pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NCursor.NCursorDesigner">
            <summary>
            Designer for cursors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.NCursorDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCursor.NCursorDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for cursors.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueDeclaration`1">
            <summary>
            Represent a generic property - value pair, where the value is of the generic type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(Nevron.Nov.Dom.NProperty,`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(Nevron.Nov.Dom.NDomProperty,`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(System.String,`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(Nevron.Nov.Dom.NProperty,`0,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(Nevron.Nov.Dom.NDomProperty,`0,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.GetPropertyType">
            <summary>
            Returns the DOM type for the T generic parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueDeclaration`1.GetValue">
            <summary>
            Returns the Value property
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueDeclaration`1.NValueDeclarationSchema">
            <summary>
            Schema associated with NDeclaration T
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueDeclaration`1.ValueProperty">
            <summary>
            Reference to the Property property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueDeclaration`1.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NStylingNodeCollection`1">
            <summary>
            Represents an abstract, generic implementation of a styling node collection, 
            implementing the generic ICollection and IList interfaces
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.#ctor(Nevron.Nov.Dom.NStylingNodeCollection{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStylingNodeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NStylingNodeCollection`1.NStylingNodeCollectionSchema">
            <summary>
            Schema associated with NStylingNodeCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStylingNodeCollection`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStylingNodeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NChildCombinator">
            <summary>
            A combinator, which matches the element in the context of its parent
            (e.g. match the element if it is a child of a specific parent).
            Equivalent to CSS '>' Child Combinator.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NCombinator">
            <summary>
            Serves as base class for all types of combinators.
            A combinator helps you select an element in the context of its place in the elements hierarchy.
            Given an input element, combinators try to return an element that matches the combinator conditions, 
            and satisfies a certain hierachical relationship with the input element (e.g. is a parent, ancestor, prev or next sibling etc.)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinator.#ctor(Nevron.Nov.Dom.NCombinator)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCombinator.NCombinatorSchema">
            <summary>
            Schema associated with NCombinator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCombinator.ConditionsProperty">
            <summary>
            Reference to the Selector property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NCombinator.Conditions">
            <summary>
            Gets or sets the condition selector
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NCombinator.NCombinatorDesigner">
            <summary>
            The designer of combinators.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinator.NCombinatorDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NChildCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NChildCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChildCombinator.#ctor(Nevron.Nov.Dom.NChildCombinator)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NChildCombinator.NChildCombinatorSchema">
            <summary>
            Schema associated with NDescendantCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NCombinatorCollection">
            <summary>
            A collection of combinators
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinatorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NCombinatorCollection.#ctor(Nevron.Nov.Dom.NCombinatorCollection)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NCombinatorCollection.NCombinatorCollectionSchema">
            <summary>
            Schema associated with NCombinatorCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDescendantCombinator">
            <summary>
            A combinator, which matches the element in the context of its ancestors
            (e.g. match the element if it is a descendant of a specific ancestor).
            Equivalent to CSS ' ' Descendant Combinator.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDescendantCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDescendantCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDescendantCombinator.#ctor(Nevron.Nov.Dom.NDescendantCombinator)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NDescendantCombinator.NDescendantCombinatorSchema">
            <summary>
            Schema associated with NDescendantCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNextAdjacentSiblingCombinator">
            <summary>
            A combinator, which matches the element in the context of its adjacent previous sibling.
            (e.g. match the element if it is a next sibling of a specific previous sibling).
            Equivalent to CSS '+' Adjacent Sibling Combinator.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNextAdjacentSiblingCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNextAdjacentSiblingCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNextAdjacentSiblingCombinator.NNextAdjacentSiblingCombinatorSchema">
            <summary>
            Schema associated with NNextAdjacentSiblingCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNextGeneralSiblingCombinator">
            <summary>
            A combinator, which matches the element in the context of its previous siblings.
            (e.g. match the element if it is a next sibling of a specific previous sibling).
            Equivalent to CSS '~' General Sibling Combinator.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNextGeneralSiblingCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNextGeneralSiblingCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNextGeneralSiblingCombinator.NNextGeneralSiblingCombinatorSchema">
            <summary>
            Schema associated with NNextGeneralSiblingCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NPrevAdjacentSiblingCombinator">
            <summary>
            A combinator, which matches the element in the context of its next siblings.
            (e.g. match the element if it is a previous sibling of a specific next sibling).
            Has no CSS equivalent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPrevAdjacentSiblingCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPrevAdjacentSiblingCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NPrevAdjacentSiblingCombinator.NPrevAdjacentSiblingCombinatorSchema">
            <summary>
            Schema associated with NPrevAdjacentSiblingCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NPrevGeneralSiblingCombinator">
            <summary>
            A combinator, which matches the element in the context of its next siblings.
            (e.g. match the element if it is a prev sibling of a specific next sibling).
            Has no CSS equivalent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPrevGeneralSiblingCombinator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPrevGeneralSiblingCombinator.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NPrevGeneralSiblingCombinator.NPrevGeneralSiblingCombinatorSchema">
            <summary>
            Schema associated with NPrevGeneralSiblingCombinator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNamedChildCondition">
            <summary>
            A condition, which matches, if the element is a named child of its parent.
            Has no CSS equivalent.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNamedChildCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNamedChildCondition.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="childName"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNamedChildCondition.NNamedChildConditionSchema">
            <summary>
            Schema associated with NNamedChildCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NNamedChildCondition.ChildNameProperty">
            <summary>
            Reference to the ChildName property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNamedChildCondition.ChildName">
            <summary>
            Gets or sets the Child Name, by which the matched element must be exposed by its parent
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NLastChildCondition">
            <summary>
            A condition, which matches, if the element is the last child of its parent.
            Equivalent to the CSS ":last-child" pseudo-class condition.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NLastChildCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NLastChildCondition.NLastChildConditionSchema">
            <summary>
            Schema associated with NLastChildCondition
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NFirstChildCondition">
            <summary>
            A condition, which matches, if the element is the first child of its parent.
            Equivalent to the CSS ":first-child" pseudo-class condition.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFirstChildCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NFirstChildCondition.NFirstChildConditionSchema">
            <summary>
            Schema associated with NFirstChildCondition
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NConditionCollection">
            <summary>
            A collection of conditions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NConditionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NConditionCollection.#ctor(Nevron.Nov.Dom.NConditionCollection)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NConditionCollection.NConditionCollectionSchema">
            <summary>
            Schema associated with NConditionCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NContainsValueCondition`1">
            <summary>
            A condition, which matches, if the element contains a local value for a property with the specified name.
            Equivalent to the CSS [att] condition.
            Normal specificity rank.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueCondition`1">
            <summary>
            A condition, which serves as base class for conditions that depend on currently selected element local property values.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueCondition`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueCondition`1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueCondition`1.#ctor(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueCondition`1.OnPropertyNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the PropertyName property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueCondition`1.NValueConditionSchema">
            <summary>
            Schema associated with NPropertyCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueCondition`1.PropertyNameProperty">
            <summary>
            Reference to the PropertyName property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueCondition`1.PropertyName">
            <summary>
            Gets or sets the property name
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueCondition`1.DomProperty">
            <summary>
            Gets the DOM property defined by this condition type and property name
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NContainsValueCondition`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NContainsValueCondition`1.#ctor(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Initializer constructor
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NContainsValueCondition`1.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NContainsValueCondition`1.NContainsValueConditionSchema">
            <summary>
            Schema associated with NContainsValueCondition
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NTypeCondition">
            <summary>
            A condition, which matches, if the element is an instance of a certain schema (type).
            Equivalent to the CSS type condition.
            Low specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTypeCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTypeCondition.#ctor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTypeCondition.#ctor(System.Type)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTypeCondition.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fullTypeName"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTypeCondition.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NTypeCondition.NTypeConditionSchema">
            <summary>
            Schema associated with NTypeCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NTypeCondition.TargetSchemaNameProperty">
            <summary>
            Reference to the TargetSchemaName property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NTypeCondition.TargetSchema">
            <summary>
            Gets the target schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NTypeCondition.TargetSchemaName">
            <summary>
            Gets or sets the full name of the schema type
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NUserClassCondition">
            <summary>
            A condition, which matches, if the element UserClass property contains the specified UserClass.
            Equivalent to the CSS Class condition.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NUserClassCondition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NUserClassCondition.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="userClass"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NUserClassCondition.NUserClassConditionSchema">
            <summary>
            Schema associated with NUserClassCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NUserClassCondition.UserClassProperty">
            <summary>
            Reference to the UserClass property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NUserClassCondition.UserClass">
            <summary>
            Gets or sets the User Class, which target elements must match
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NUserIdCondition">
            <summary>
            A condition, which matches, if the element UserId property is equal to the specified UserId.
            Equivalent to the CSS Id condition.
            High specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NUserIdCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NUserIdCondition.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="userId"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NUserIdCondition.NUserIdConditionSchema">
            <summary>
            Schema associated with NUserIdCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NUserIdCondition.UserIdProperty">
            <summary>
            Reference to the UserId property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NUserIdCondition.UserId">
            <summary>
            Gets or sets the User Id, which target elements must match
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueEqualsCondition`1">
            <summary>
            A condition, which matches, if the element value for the property with the specified name and generic type is equal to the specified value.
            Similar to the CSS [att=val] condition, with the difference that it also matches the element, 
            if it does not have a local value, but the default property value is equal to the value.
            Normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueEqualsCondition`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueEqualsCondition`1.#ctor(Nevron.Nov.Dom.NDomProperty,`0)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NValueEqualsCondition`1.#ctor(System.String,`0)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueEqualsCondition`1.NValueEqualsConditionSchema">
            <summary>
            Schema associated with NValueEqualsCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NValueEqualsCondition`1.ValueProperty">
            <summary>
            Reference to the Value property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueEqualsCondition`1.Value">
            <summary>
            Gets or sets the property value, which must be matched
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelectorBuilder">
            <summary>
            Facilitates the authouring of selectors. An instance of this class can be obtained 
            from the GetSelectorBuilder() method of each NRule.
            </summary>
            <remarks>
            The building of a selector starts by calling the Start() method. 
            When finished call the End() to get a reference to the constructed selector.
            <para>
            Selectors are created in right to left order. For example:
            <code>
            // get a builder from the rule
            NSelectorBuilder sb = rule.GetSelectorBuilder();
            
            // CSS selector: A B
            sb.Start();
            sb.Type(NB.NBSchema);
            sb.DescendantOf();
            sb.Type(NA.NASchema);
            sb.End();
            
            // CSS selector: A > B
            sb.Start();
            sb.Type(NB.NBSchema);
            sb.ChildOf();
            sb.Type(NA.NASchema);
            sb.End();
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.Start">
            <summary>
            Starts a new selector and makes the current condtions the selector conditions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.End">
            <summary>
            Ends a previously started selector, adds it to the rule and returns a reference to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.StartInvertedConditions">
            <summary>
            Starts an inverted conditions section. 
            All conditions added in this section will have their Inverted property raised.
            An inverted section is automatically ended when you call the End();
            An inverted section can be manually ended when you call the EndInvertedConditions() method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.EndInvertedConditions">
            <summary>
            Ends a section of intverted conditions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.UserId(System.String)">
            <summary>
            Adds a new User Id condition to the current conditions - high specificity rank.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.UserClass(System.String)">
            <summary>
            Adds a new User Class condition to the current conditions - normal specificity rank.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.Type(Nevron.Nov.Dom.NSchema)">
            <summary>
            Adds a new Type condition to the current conditions - low specificity rank.
            </summary>
            <param name="schema">the schemas to match</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.Type(System.Type)">
            <summary>
            Adds a new Type condition to the current conditions - low specificity rank.
            </summary>
            <param name="type">the types to match</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.Type(System.String)">
            <summary>
            Adds a new Type condition to the current conditions - low specificity rank.
            </summary>
            <param name="fullTypeName">full type name including namespace</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.ContainsValue(Nevron.Nov.Dom.NProperty)">
            <summary>
            Adds a new Contains Value condition to the current conditions - normal specificity rank.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.ContainsValue(Nevron.Nov.Dom.NDomProperty)">
            <summary>
            Adds a new Contains Value condition to the current conditions - normal specificity rank.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.ValueEquals(Nevron.Nov.Dom.NProperty,System.Object)">
            <summary>
            Adds a new Value Equals condition to the current conditions - normal specificity rank.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.ValueEquals(Nevron.Nov.Dom.NDomProperty,System.Object)">
            <summary>
            Adds a new Value Equals condition to the current conditions - normal specificity rank.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.FirstChild">
            <summary>
            Adds a new First Child condition to the current conditions - normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.LastChild">
            <summary>
            Adds a new Last Child condition to the current conditions - normal specificity rank.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.NthChild(System.Int32,System.Int32)">
            <summary>
            Adds a new Nth child condition that matches if the element has Step * N + Offset
            siblings before it - normal specificity rank.
            </summary>
            <param name="step"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.NamedChild(Nevron.Nov.Dom.NChild)">
            <summary>
            Adds a new Named Child condition to the current conditions - normal specificity rank.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.NamedChild(System.String)">
            <summary>
            Adds a new Named Child condition to the current conditions - normal specificity rank.
            </summary>
            <param name="childName"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.AddCondition(Nevron.Nov.Dom.NCondition)">
            <summary>
            Adds the given condition to the current conditions.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.DescendantOf">
            <summary>
            Adds a new Descendant combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.ChildOf">
            <summary>
            Adds a new Child combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.PrevAdjacentSiblingOf">
            <summary>
            Adds a new Prev Adjacent Sibling combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.PrevGeneralSiblingOf">
            <summary>
            Adds a new Prev General Sibling combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.NextAdjacentSiblingOf">
            <summary>
            Adds a new Next Adjacent Sibling combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.NextGeneralSiblingOf">
            <summary>
            Adds a new Next General Sibling combinator and makes its conditions the current ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorBuilder.AddCombinator(Nevron.Nov.Dom.NCombinator)">
            <summary>
            Adds a combinator and makes its conditions the current ones.
            </summary>
            <param name="combinator"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NSpinnerSpinEventArgs">
            <summary>
            The NSpinnerSpinEventArgs class represents the event arguments associated with scrollbar scroll events
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSpinnerSpinEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="increase"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NSpinnerSpinEventArgs.Increase">
            <summary>
            True if the increase button was clicked.
            False if the decrease button was clicked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorderWall">
            <summary>
            Represents a border wall, defined as a list of bricks.
            A border wall is similar to a path figure (e.g. can be opened or closed) and defines two outlines - inner and outer.
            The wall is constructed from side and corner bricks that a NBorder attribute can paint.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.#ctor(System.Boolean)">
            <summary>
            Creates a new border wall.
            </summary>
            <param name="closed">whether the wall represents a closed area or an open one</param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddLeftSide(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a left side
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddRightSide(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a right side
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddBottomSide(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a bottom side
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddTopSide(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a top side
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddLeftTopCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a left-top corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddTopLeftCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a top-left corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddLeftBottomCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a left-bottom corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddBottomLeftCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a bottom-left corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddRightTopCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a right-top corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddTopRightCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a top-right corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddRightBottomCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a right-bottom corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.AddBottomRightCorner(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a bottom-right corner
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.HitTest(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NMargins,Nevron.Nov.UI.ENBorderBrickType@)">
            <summary>
            Hit tests the border wall
            </summary>
            <param name="pt"></param>
            <param name="inflate"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateBoxWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a closed border wall that fills the area enclosed by outer and inner rectangles
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateTopHeaderWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Creates an opened border wall that fills the area enclosed by outer and inner rectangles.
            The top side is clipped by the specified clip start and end.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="headerStart"></param>
            <param name="headerEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateTopHeaderWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an opened border wall that fills the area enclosed by outer and inner rectangles.
            The top side is clipped by the specified outer start and end. 
            TopLeft and TopRight corners are created for the inner areas.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerHeaderStart"></param>
            <param name="innerHeaderStart"></param>
            <param name="innerHeaderEnd"></param>
            <param name="outerHeaderEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateBottomHeaderWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an opened border wall that fills the area enclosed by outer and inner rectangles.
            The bottom side is clipped by the specified outer start and end. 
            BottomLeft and BottomRight corners are created for the inner areas.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerHeaderStart"></param>
            <param name="innerHeaderStart"></param>
            <param name="innerHeaderEnd"></param>
            <param name="outerHeaderEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateLeftHeaderWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an opened border wall that fills the area enclosed by outer and inner rectangles.
            The top side is clipped by the specified outer start and end. 
            TopLeft and TopRight corners are created for the inner areas.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerHeaderStart"></param>
            <param name="innerHeaderStart"></param>
            <param name="innerHeaderEnd"></param>
            <param name="outerHeaderEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorderWall.CreateRightHeaderWall(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an opened border wall that fills the area enclosed by outer and inner rectangles.
            The top side is clipped by the specified outer start and end. 
            TopLeft and TopRight corners are created for the inner areas.
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerHeaderStart"></param>
            <param name="innerHeaderStart"></param>
            <param name="innerHeaderEnd"></param>
            <param name="outerHeaderEnd"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NFourColorsBorderCorner">
            <summary>
            Represents a border corner that is filled with four colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFourColorsBorderCorner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFourColorsBorderCorner.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="outerColor1"></param>
            <param name="innerColor1"></param>
            <param name="outerColor2"></param>
            <param name="innerColor2"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFourColorsBorderCorner.#ctor(Nevron.Nov.UI.NFourColorsBorderCorner)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFourColorsBorderCorner.NFourColorsBorderCornerSchema">
            <summary>
            Schema associated with NFourColorsBorderCorner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFourColorsBorderCorner.OuterColor1Property">
            <summary>
            Reference to the OuterColor2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFourColorsBorderCorner.InnerColor1Property">
            <summary>
            Reference to the InnerColor1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFourColorsBorderCorner.OuterColor2Property">
            <summary>
            Reference to the OuterColor2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFourColorsBorderCorner.InnerColor2Property">
            <summary>
            Reference to the InnerColor2 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFourColorsBorderCorner.OuterColor1">
            <summary>
            Gets or sets the first outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFourColorsBorderCorner.InnerColor1">
            <summary>
            Gets or sets the first inner color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFourColorsBorderCorner.OuterColor2">
            <summary>
            Gets or sets the second outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFourColorsBorderCorner.InnerColor2">
            <summary>
            Gets or sets the second inner color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFourColorsBorderCorner.NFourColorsBorderCornerDesigner">
            <summary>
            Designer for four colors border corners.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFourColorsBorderCorner.NFourColorsBorderCornerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFourColorsBorderCorner.NFourColorsBorderCornerDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NTwoColorsBorderCorner">
            <summary>
            Represents a border corner that is filled with two colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="outerColor"></param>
            <param name="innerColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="outerColor"></param>
            <param name="innerColor"></param>
            <param name="diagonalSplit">Determines whether the border corner color split is by the diagonal of the corner brick
            or by its middle.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.#ctor(Nevron.Nov.UI.NTwoColorsBorderCorner)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderCorner.NTwoColorsBorderCornerSchema">
            <summary>
            Schema associated with NTwoColorsBorderCorner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderCorner.OuterColorProperty">
            <summary>
            Reference to the OuterColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderCorner.InnerColorProperty">
            <summary>
            Reference to the InnerColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderCorner.DiagonalSplitProperty">
            <summary>
            Reference to the DiagonalSplit property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderCorner.OuterColor">
            <summary>
            Gets or sets the outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderCorner.InnerColor">
            <summary>
            Gets or sets the inner color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderCorner.DiagonalSplit">
            <summary>
            Determines whether the border corner color split is by the diagonal of the corner brick
            or by its middle. By default set to false (i.e. middle split).
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTwoColorsBorderCorner.NTwoColorsBorderCornerDesigner">
            <summary>
            Designer for two colors border corners.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.NTwoColorsBorderCornerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderCorner.NTwoColorsBorderCornerDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NTwoColorsBorderSide">
            <summary>
            Represents a border side that is filled with two colors. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderSide.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderSide.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="innerColor"></param>
            <param name="outerColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderSide.#ctor(Nevron.Nov.UI.NTwoColorsBorderSide)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderSide.NTwoColorsBorderSideSchema">
            <summary>
            Schema associated with NTwoColorsBorderSide.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderSide.OuterColorProperty">
            <summary>
            Reference to the OuterColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTwoColorsBorderSide.InnerColorProperty">
            <summary>
            Reference to the InnerColor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderSide.IsEmpty">
            <summary>
            Checks whether this border part's fill, stroke and colors are all null or empty. If yes, then this border
            won't be painted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderSide.OuterColor">
            <summary>
            Gets or sets the outer color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTwoColorsBorderSide.InnerColor">
            <summary>
            Gets or sets the inner color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTwoColorsBorderSide.NTwoColorsBorderSideDesigner">
            <summary>
            Designer for two colors border sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTwoColorsBorderSide.NTwoColorsBorderSideDesigner.GetCompatibleTypes">
            <summary>
            Overriden to return the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NFocusFrameDecorator">
            <summary>
            A focus decorator that renders a stroked frame at the padding area of the ui element.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFocusDecorator">
            <summary>
            The focus decorator is used to display a decoration over the currently focused widget.
            It serves as base class for all focus decorators.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusDecorator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusDecorator.#ctor(Nevron.Nov.UI.NFocusDecorator)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusDecorator.Paint(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Performs the post paint decoration.
            </summary>
            <param name="visitor"></param>
            <param name="box"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NFocusDecorator.NFocusDecoratorSchema">
            <summary>
            Schema associated with NFocusDecorator.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFocusDecorator.NFocusDecoratorDesigner">
            <summary>
            Designer for focus decorators.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusDecorator.NFocusDecoratorDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusDecorator.NFocusDecoratorDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusFrameDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusFrameDecorator.#ctor(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusFrameDecorator.#ctor(Nevron.Nov.UI.NFocusFrameDecorator)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFocusFrameDecorator.Paint(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Performs the post paint decoration.
            </summary>
            <param name="visitor"></param>
            <param name="rect"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NFocusFrameDecorator.NFocusFrameDecoratorSchema">
            <summary>
            Schema associated with NFocusFrameDecorator
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NFocusFrameDecorator.StrokeProperty">
            <summary>
            Reference to the stroke property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFocusFrameDecorator.Stroke">
            <summary>
            Gets or sets the focus frame stroke
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollEventArgs">
            <summary>
            The NScrollEventArgs class represents the event arguments associated with scroll events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.UI.ENScrollType,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="scrollType"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollEventArgs.ScrollType">
            <summary>
            Gets the scroll type
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollEventArgs.OldValue">
            <summary>
            Gets the old (current value) of the scroll bar
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollEventArgs.NewValue">
            <summary>
            Gets the new (proposed value) of the scroll bar
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendarTitleButton">
            <summary>
            Represents the title button of a calendar header.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarTitleButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarTitleButton.SetText(System.String)">
            <summary>
            Sets the text of the title button
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarTitleButton.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarTitleButton.NCalendarTitleButtonSchema">
            <summary>
            Schema associated with NCalendarTitleButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendarArrowButton">
            <summary>
            Represents the prev view range or next view range button of a calendar header.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarArrowButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarArrowButton.#ctor(Nevron.Nov.UI.ENCalendarArrowDirection)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="arrowDirection"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarArrowButton.NCalendarArrowButtonSchema">
            <summary>
            Schema associated with NCalendarArrowButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarArrowButton.ArrowDirectionProperty">
            <summary>
            Reference to the ArrowDirection property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarArrowButton.ArrowDirection">
            <summary>
            Gets or sets the arrow direction of this button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDayOfWeekHeader">
            <summary>
            The header that the calendar control places on top of the day of week columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayOfWeekHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDayOfWeekHeader.NDayOfWeekHeaderSchema">
            <summary>
            Schema associated with NDayOfWeekHeader.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NYearPickerCell">
            <summary>
            A cell from a NYearPicker
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendarPickerCell">
            <summary>
            A cell from a NCalendarPicker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPickerCell.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPickerCell.GetContentHorizontalPlacement">
            <summary>
            Gets the horizontal placement of the calendar picker cell content.
            This implementation returns Center
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarPickerCell.NCalendarPickerCellSchema">
            <summary>
            Schema associated with NCalendarPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarPickerCell.DateProperty">
            <summary>
            Reference to the Date property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarPickerCell.Date">
            <summary>
            Gets or sets the date this calendar picker cell represents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NYearPickerCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NYearPickerCell.NYearPickerCellSchema">
            <summary>
            Schema associated with NYearPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NYearPickerCell.SelectedDateYearProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NYearPickerCell.SelectedDateYear">
            <summary>
            Gets whether the cell represents the selected date year of the calender.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDayPickerCell">
            <summary>
            A cell from a day picker, that represents a day from the currently viewed month of a specific year.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayPickerCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayPickerCell.GetContentHorizontalPlacement">
            <summary>
            Gets the horizontal placement of the calendar picker cell content.
            This implementation returns Center
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDayPickerCell.NDayPickerCellSchema">
            <summary>
            Schema associated with NDayPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDayPickerCell.IsFromPrevMonthProperty">
            <summary>
            Reference to the IsFromPrevMonth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDayPickerCell.IsFromNextMonthProperty">
            <summary>
            Reference to the IsFromNextMonth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDayPickerCell.IsTodayProperty">
            <summary>
            Reference to the IsToday property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDayPickerCell.IsFromPrevMonth">
            <summary>
            Gets whether the cell belongs to the month before the currently viewed one.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDayPickerCell.IsFromNextMonth">
            <summary>
            Gets whether the cell belongs to the month after the currently viewed one.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDayPickerCell.IsToday">
            <summary>
            Gets whether the cell represents the today day.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendar">
            <summary>
            Represents a calendar control that allows the user to visually select a date.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHeaderedContentElement`1">
            <summary>
            Represents an element that has a header and content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHeaderedContentElement`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHeaderedContentElement`1.#ctor(`0,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHeaderedContentElement`1.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHeaderedContentElement`1.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NHeaderedContentElement`1.NHeaderedContentElementSchema">
            <summary>
            Schema associated with NCalendar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHeaderedContentElement`1.HeaderContentRelationProperty">
            <summary>
            Reference to the HeaderContentRelation property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHeaderedContentElement`1.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHeaderedContentElement`1.HeaderContentRelation">
            <summary>
            Gets or sets the relation between the header and the content in the area of this widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.ShowLargerViewRange">
            <summary>
            Shows a larger view range than the current one, if possible.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.ShowSmallerViewRange">
            <summary>
            Shows a smaller view range than the current one, if possible.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.ShowNextViewRangePage">
            <summary>
            Shows the next page of dates that apply for the current view range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.ShowPrevViewRangePage">
            <summary>
            Shows the prev page of dates that apply for the current view range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnSelectedDateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the selected data has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnCurrentDateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current date has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnViewRangeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the view range has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnCultureNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current culture has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnHeaderFormatStringChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the header format string has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnMonthFormatModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the month picker format mode has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnDayOfWeekFormatModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the day of week format mode has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.OnHeaderSpinnerSpin(Nevron.Nov.UI.NSpinnerSpinEventArgs)">
            <summary>
            Called when the calendar header spinner is spinned
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendar.Update">
            <summary>
            Updates the calendar pickers and header
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.NCalendarSchema">
            <summary>
            Schema associated with NCalendar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.ViewRangeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.SelectedDateProperty">
            <summary>
            Reference to the SelectedDate property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.CurrentDateProperty">
            <summary>
            Reference to the CurrentDate property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.CultureNameProperty">
            <summary>
            Reference to the CultureName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.HeaderFormatStringProperty">
            <summary>
            Reference to the HeaderFormatString property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.MonthFormatModeProperty">
            <summary>
            Reference to the MonthFormatMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.DayOfWeekFormatModeProperty">
            <summary>
            Reference to the DayOfWeekFormatMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendar.HighlightTodayProperty">
            <summary>
            Reference to the HighlightToday property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NCalendar.SelectedDateChanged">
            <summary>
            UI event, which occurs when the user selects a new date from the calendar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.SelectedDate">
            <summary>
            Gets or sets the selected date. 
            When the selected date has changed the calendar automatically changes the ViewRange to DaysOfMonth, and navigates to the selected date.
            The current date also becomes the selected date.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.CurrentDate">
            <summary>
            Gets or sets the current date. 
            When the current date changes the calendar navigates the current view range to the current date, without changing the selected date.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.ViewRange">
            <summary>
            Gets or sets the current view range of the calendar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.CultureName">
            <summary>
            Gets or sets the name of the culture that should to be used when displaying this schedule.
            By default set to null, which means that the culture of the current thread will be used.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.HeaderFormatString">
            <summary>
            Gets or sets the header format string, that defines the text representation of the current date,
            when the calender picker view range is set to days of months.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.MonthFormatMode">
            <summary>
            Gets or sets the format mode in which the month picker displays the months.
            By default set to AbbreviatedMonthName.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.DayOfWeekFormatMode">
            <summary>
            Gets or sets the format mode in which the day picker displays the days of the week.
            By default set to AbbreviatedDayName.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.DayPicker">
            <summary>
            A shortcut property that gets the day of month picker
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.MonthPicker">
            <summary>
            A shortcut property that gets the month of year picker
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.YearPicker">
            <summary>
            A shortcut property that gets the year of decade picker
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.CultureInfo">
            <summary>
            Gets the culture info defined by the culture name property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.HighlightToday">
            <summary>
            Determines whether to highlight today's date or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendar.PauseUpdate">
            <summary>
            Pauses/resumes the calendar updates
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendarHeader">
            <summary>
            Represents a calendar header that is a strip of three buttons - prev page, title and next page buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.OnNextPageButtonClicked">
            <summary>
            Called when the next page button is clicked. Attempts to navigate the calendar to the next view range page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.OnPrevPageButtonClicked">
            <summary>
            Called when the prev page button is clicked. Attempts to navigate the calendar to the prev view range page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarHeader.OnTitleButtonClicked">
            <summary>
            Called when the title button is clicked. Attempts to navigate the calendar to a wider view range.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarHeader.NCalendarHeaderSchema">
            <summary>
            Schema associated with NCalendarHeader.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarHeader.PrevPageButtonChild">
            <summary>
            Reference to the PrevPageButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarHeader.TitleButtonChild">
            <summary>
            Reference to the TitleButton child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarHeader.NextPageButtonChild">
            <summary>
            Reference to the NextPageButton child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarHeader.PrevPageButton">
            <summary>
            Gets or sets the prev iew range button, which when clicked, navigates the calendar to the previous page of the current view range.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarHeader.NextPageButton">
            <summary>
            Gets or sets the next view range button, which when clicked, navigates the calendar to the next page of the current view range.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarHeader.TitleButton">
            <summary>
            Gets or sets the next view range button, which when clicked, navigates the calendar to the next page of the current view range.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarHeader.OwnerCalendar">
            <summary>
            Gets the calendar that owns this header
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDayPicker">
            <summary>
            A calendar picker that selects from one of the days in a given month.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCalendarPicker">
            <summary>
            A table picker, that serves as base class for the pickers of a calendar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPicker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPicker.GetDate(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the specified number of years, months and days to the given date and returns the result
            if it is a valid date or null otherwise.
            </summary>
            <param name="date"></param>
            <param name="addYears"></param>
            <param name="addMonths"></param>
            <param name="addDays"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPicker.CreateEmptyCell">
            <summary>
            Creates an empty diabled table picker cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCalendarPicker.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCalendarPicker.NCalendarPickerSchema">
            <summary>
            Schema associated with NCalendarPickerSchema.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCalendarPicker.OwnerCalendar">
            <summary>
            Gets the calendard that owns this picker
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayPicker.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayPicker.Update">
            <summary>
            Navigates the picker to the days of the specified month/year pair.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDayPicker.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the picker selected index has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NDayPicker.NDayPickerSchema">
            <summary>
            Schema associated with NDayPicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMonthPicker">
            <summary>
            A calendar picker that selects from one of the months in the current year.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMonthPicker.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMonthPicker.Update">
            <summary>
            Shows the months of the specified year.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMonthPicker.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Overriden to drill down to the day of month range and to set the current date to the selected one.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMonthPicker.NMonthPickerSchema">
            <summary>
            Schema associated with NMonthPicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMonthPickerCell">
            <summary>
            A cell from a NMonthPicker
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMonthPickerCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMonthPickerCell.NMonthPickerCellSchema">
            <summary>
            Schema associated with NMonthPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMonthPickerCell.SelectedDateMonthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMonthPickerCell.SelectedDateMonth">
            <summary>
            Gets whether the cell represents the selected date month of the calender.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NYearPicker">
            <summary>
            A calendar picker that selects an year from a decade.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NYearPicker.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NYearPicker.Update">
            <summary>
            Shows the specified decade
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NYearPicker.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Overriden to drill down to the month of year range and to set the current date to the selected one.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NYearPicker.NYearPickerSchema">
            <summary>
            Schema associated with NYearPicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuSplitButton">
            <summary>
            A split button, which pop ups a menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.FillFromEnum``2(``1[])">
            <summary>
            Fills the menu split button from enum. Assigns the corresponding enum value to the Tag
            property of each menu item.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="THeader"></typeparam>
            <param name="headers"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.FillFromArray``2(``0[],``1[])">
            <summary>
            Fills the menu of the split button from the given array of values and uses the
            specified headers array for the headers of the created menu items. The number of values
            should be equal to the number of images. Assigns the corresponding value to the
            Tag property of each menu item.
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="THeader"></typeparam>
            <param name="values"></param>
            <param name="headers"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.CreatePopupContent">
            <summary>
            Overriden to return a new NMenu instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.IsPopupContentStatic">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.CreateMenuItem``2(``0,System.String,``1)">
            <summary>
            Creates a menu item for the given value. Uses the specified header for the header
            of the menu item.
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="THeader"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.CreateActionButtonContent(Nevron.Nov.UI.NMenuItem)">
            <summary>
            Creates the content of the action button for the given menu item.
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.OnMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a menu item has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSplitButton.OnSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the SelectedIndex property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuSplitButton.NMenuSplitButtonSchema">
            <summary>
            Schema associated with NMenuSplitButton
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuSplitButton.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NMenuSplitButton.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuSplitButton.SelectedIndex">
            <summary>
            Gets or sets the the index of the currently selected menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuSplitButton.SelectedValue">
            <summary>
            Gets the currently selected value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuSplitButton.Items">
            <summary>
            A shortcut property that gets the Menu.Items collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuSplitButton.Menu">
            <summary>
            A shortcut property that casts the popup content to an NMenu instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NShadowSplitButton">
            <summary>
            A style split button, that is used to select a shadow style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.CreateMainDropDownWidget">
            <summary>
            Overriden to create the main drop down shadow picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.CreatePaletteColorPicker">
            <summary>
            Creates a palette color picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the "More Options" button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.OnMoreOptionsWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog has been closed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShadowSplitButton.OnColorPickerSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a mouse button is released over the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NShadowSplitButton.NShadowSplitButtonSchema">
            <summary>
            Schema associated with NShadowSplitButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStrokeSplitButton">
            <summary>
            A style split button, which is used to select a stroke style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.CreateMainDropDownWidget">
            <summary>
            Overriden to create the main drop down widget
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.CreatePaletteColorPicker">
            <summary>
            Creates a palette color picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.CreatePropertyEditors">
            <summary>
            Creates a widget to edit various stroke properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the more colors button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnMoreOptionsWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnPropertyEditorUpdatePreview(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the value of a property editor has been changed by the user.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NStrokeSplitButton.OnColorPickerSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a color has been picked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NStrokeSplitButton.NStrokeSplitButtonSchema">
            <summary>
            Schema associated with NStrokeSplitButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFillSplitButton">
            <summary>
            A style split button, which is used to select a fill style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.CreateMainDropDownWidget">
            <summary>
            Overriden to create the main drop down fill picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the "More Options" button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.CreatePaletteColorPicker">
            <summary>
            Creates and initializes a new palette color picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.CreateFillPatternListBox">
            <summary>
            Creates and initializes a fill pattern list box. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.CreateLuminanceColorBar">
            <summary>
            Creates a color bar that allows the user to select a brighter or darker variant of a given base color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.UpdatePrimaryColor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Updates the primary color of this fill split button.
            </summary>
            <param name="primaryColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.UpdateSecondaryColor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Updates the secondary (pattern) color of this fill split button.
            </summary>
            <param name="secondaryColor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.CreateSecondaryColor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new secondary color based on the specified primary color.
            </summary>
            <param name="primaryColor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnColorPickerSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a color has been picked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnLuminanceColorBarSelectedValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the user has selected a new luminance value from the luminance color bar.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnFillPatternListBoxItemSelected(Nevron.Nov.UI.NSelectEventArgs{Nevron.Nov.UI.NListBoxItem})">
            <summary>
            
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NFillSplitButton.OnMoreOptionsWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NFillSplitButton.NFillSplitButtonSchema">
            <summary>
            Schema associated with NFillSplitButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDateTimeBox">
            <summary>
            A drop down edit, which lets you select a date and/or time from a drop down calendar or
            some other widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.GetFormatStringFromMode">
            <summary>
            Gets the date/time pattern string corresponding to the current date/time box mode 
            with respect to the CultureInfo property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreatePopupContent">
            <summary>
            Overriden to create the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreateCalendar">
            <summary>
            Creates the calendar (day selector) of the drop down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreateTimeSelector">
            <summary>
            Creates the time selector of the drop down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreateMonthAndYearSelector">
            <summary>
            Creates the month selector for a Month and Year date format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreateTodayButton">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.CreateOkCancelButtonStrip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnCalendarMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse button has been released over the drop down calendar.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnOkButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "OK" button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnTodayButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "Today" button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnSelectedDateChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current culture has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnCultureNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current culture has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the date/time box mode has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.OnFormatChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the date/time box format has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDateTimeBox.UpdateTextFromSelectedDate">
            <summary>
            Updates the text from the date
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.NDateTimeBoxSchema">
            <summary>
            Schema associated with NDateTimeBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.SelectedDateProperty">
            <summary>
            Reference to the SelectedDate property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.CultureNameProperty">
            <summary>
            Reference to the CultureName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.ModeProperty">
            <summary>
            Reference to the Format property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.FormatProperty">
            <summary>
            Reference to the Format property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.HasTodayButtonProperty">
            <summary>
            Reference to the HasTodayButton property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.TextBoxChild">
            <summary>
            Reference to the TextBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDateTimeBox.HighlightTodayProperty">
            <summary>
            Reference to the HighlightToday property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDateTimeBox.SelectedDateChanged">
            <summary>
            UI event, which occurs when the user selects a new date.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.SelectedDate">
            <summary>
            Gets or sets the currently selected date.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.CultureName">
            <summary>
            Gets or sets the name of the culture that needs to be used when displaying this calendar.
            If set to an empty string, the default culture is used.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.CultureInfo">
            <summary>
            Gets the culture info, defined by the culture name property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.Mode">
            <summary>
            Gets or sets the date time format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.Format">
            <summary>
            Gets or sets the date/time format string.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.HasTodayButton">
            <summary>
            Determines whether a "Show Today" button is shown or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.HighlightToday">
            <summary>
            Determines whether to highlight today's date or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.ShowText">
            <summary>
            Gets or sets whether to show the text part of the date time box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDateTimeBox.TextBox">
            <summary>
            Gets or sets the text box showing the currently selected date.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDropDownEditDropDownButton">
            <summary>
            Represents the drop down button of a drop down edit
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDropDownEditDropDownButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDropDownEditDropDownButton.NDropDownEditDropDownButtonSchema">
            <summary>
            Schema associated with NDropDownEditDropDownButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitButtonActionButton">
            <summary>
            Represents the action button of a split button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitButtonActionButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitButtonActionButton.NSplitButtonActionButtonSchema">
            <summary>
            Schema associated with NSplitButtonActionButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NGradientVariantPickerCell">
            <summary>
            Represents a single cell of the NGradientVariantPicker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientVariantPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientVariantPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPickerCell.NGradientVariantPickerCellSchema">
            <summary>
            Schema associated with NGradientVariantPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPickerCell.VariantProperty">
            <summary>
            Reference to the Variant property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientVariantPickerCell.Variant">
            <summary>
            Gets or sets the gradient variant style of this cell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHatchStylePickerCell">
            <summary>
            A cell from a NHatchStylePicker
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHatchStylePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHatchStylePickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NHatchStylePickerCell.NHatchStylePickerCellSchema">
            <summary>
            Schema associated with NHatchStylePickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHatchStylePickerCell.StyleProperty">
            <summary>
            Reference to the Style property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHatchStylePickerCell.Style">
            <summary>
            Gets or sets the hatch style of this cell
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarFloaterOptionsButton">
            <summary>
            Represents the options button of a command bar floater.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.OnPopupClosed">
            <summary>
            Called when the popup has closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.IsPopupEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.NCommandBarFloaterOptionsButtonSchema">
            <summary>
            Schema associated with NCommandBarOptionsMenuDropDown
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarFloaterOptionsButton.OwnerCommandBarFloater">
            <summary>
            Gets the command bar floater that owns this element
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarCollection">
            <summary>
            A collection of command bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarCollection.NCommandBarCollectionSchema">
            <summary>
            Schema associated with NCommandBarCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarSeparator">
            <summary>
            A widget, that represents a separator in a command bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarSeparator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarSeparator.NCommandBarSeparatorSchema">
            <summary>
            Schema associated with NCommandBarSeparator
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMessageBox">
            <summary>
            Represents a modal dialog window that shows a message to the user and
            lets him click a button in response to the message.
            </summary>
            <remarks>
            The following piece of code demonstrates how to show a message box with Yes and No buttons
            and handle the case when the user clicks the 'Yes' button:
            	<code>
            		NMessageBox.Show("Text", "Title", ENMessageBoxButtons.YesNo, ENMessageBoxIcon.Question,
            			delegate(NMessageBox msgBox, ENWindowResult result)
            			{
            				if (result == ENWindowResult.Yes)
            				{
            					// Your code here
            				}
            			}
            		);
            	</code>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.#ctor">
            <summary>
            Default constructor. Do not use this constructor to create message boxes.
            Use the static Create method instead or one of the static Show methods
            to directly create and show a message box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.OnOpened">
            <summary>
            Called when the message box dialog is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Occurs when a keyboard key is pushed down.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMessageBox.NMessageBoxSchema">
            <summary>
            Schema associated with NMessageBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(System.Object,System.String)">
            <summary>
            Shows a message box with the specified content, title and an OK button.
            </summary>
            <param name="content"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons)">
            <summary>
            Shows a message box with the specified content, title and buttons.
            </summary>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon)">
            <summary>
            Shows a message box with the specified content, title, buttons and icon.
            </summary>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon,Nevron.Nov.Function{Nevron.Nov.UI.NMessageBox,Nevron.Nov.UI.ENWindowResult})">
            <summary>
            Shows a message box with the specified content, title, buttons and icon and calls
            the provided event handler when the message box is closed.
            </summary>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="closedEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon,Nevron.Nov.UI.ENMessageBoxDefaultButton,Nevron.Nov.Function{Nevron.Nov.UI.NMessageBox,Nevron.Nov.UI.ENWindowResult})">
            <summary>
            Shows a message box with the specified content, title, buttons and icon and calls
            the provided event handler when the message box is closed.
            </summary>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="defaultButton"></param>
            <param name="closedEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(Nevron.Nov.UI.NWindow,System.Object,System.String)">
            <summary>
            Shows a message box with the specified content, title and an OK button.
            </summary>
            <param name="ownerWindow"></param>
            <param name="content"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(Nevron.Nov.UI.NWindow,System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons)">
            <summary>
            Shows a message box with the specified content, title and buttons.
            </summary>
            <param name="ownerWindow"></param>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(Nevron.Nov.UI.NWindow,System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon)">
            <summary>
            Shows a message box with the specified content, title, buttons and icon.
            </summary>
            <param name="ownerWindow"></param>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(Nevron.Nov.UI.NWindow,System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon,Nevron.Nov.Function{Nevron.Nov.UI.NMessageBox,Nevron.Nov.UI.ENWindowResult})">
            <summary>
            Shows a message box with the specified content, title, buttons and icon and calls
            the given delegate when the message box is closed.
            </summary>
            <param name="ownerWindow"></param>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="closedEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Show(Nevron.Nov.UI.NWindow,System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon,Nevron.Nov.UI.ENMessageBoxDefaultButton,Nevron.Nov.Function{Nevron.Nov.UI.NMessageBox,Nevron.Nov.UI.ENWindowResult})">
            <summary>
            Shows a message box with the specified content, title, buttons and icon and calls
            the given delegate when the message box is closed.
            </summary>
            <param name="ownerWindow"></param>
            <param name="content"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="defaultButton"></param>
            <param name="closedEventHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMessageBox.Create(Nevron.Nov.UI.NWindow,System.Object,System.String,Nevron.Nov.UI.ENMessageBoxButtons,Nevron.Nov.UI.ENMessageBoxIcon,Nevron.Nov.UI.ENMessageBoxDefaultButton,Nevron.Nov.Function{Nevron.Nov.UI.NMessageBox,Nevron.Nov.UI.ENWindowResult})">
            <summary>
            Creates a message box with the specified content, title and buttons and calls the given 
            event handler when the message box is closed. You need to call the Open method of the
            message box to show it.
            </summary>
            <param name="ownerWindow">The message box's owner window. If the value is null the owner window is selected automatically.</param>
            <param name="content">The message box's content.</param>
            <param name="title">The message box's title.</param>
            <param name="buttons">An enum value that specifies a predefined set of buttons for the message box.</param>
            <param name="icon">The icon to show on the left side of the message box.</param>
            <param name="defaultButton">The default button of the message box.</param>
            <param name="closedEventHandler">A method that will be called when the message box is closed. Can be set to null.</param>
            <returns>Returns a new NMessageBox instance.</returns>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarGripper">
            <summary>
            A symbol box, which serves as command bar gripper. 
            When the user drags the gripper inside the command bar dock the command bar is repositioned inside the dock.
            When the user drags the gripper away from the command bar dock the command bar is floated.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolBox">
            <summary>
            A widget, which renders and sizes to a symbol.
            The symbol is controlled by the Symbol property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolBox.#ctor(Nevron.Nov.UI.NSymbol)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to take the symbol desired size into account.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolBox.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolBox.NSymbolBoxSchema">
            <summary>
            Schema associated with NSymbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolBox.SymbolProperty">
            <summary>
            Reference to the Symbol property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolBox.Symbol">
            <summary>
            Gets or sets the symbol
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarGripper.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarGripper.NCommandBarGripperSchema">
            <summary>
            Schema associated with NCommandBarGripper.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarGripper.OwnerCommandBar">
            <summary>
            Gets the command bar to which this gripper belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarLane">
            <summary>
            A collection of command bars, which represents a horizontal or vertical command bar lane.
            </summary>
            <remarks>
            A command bar lane can be horizontally or vertically arranged.
            When oriented horizontally the command bars are flowing from left to right.
            When oriented vertically the command bars are flowing from top to bottom.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.CreatePosition(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a new lane position, that can be assigned to a command bar contained by this lane.
            </summary>
            <param name="localPoint">point in local coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.CreatePosition(System.Double)">
            <summary>
            Creates a new lane position, that can be assigned to a command bar contained by this lane.
            </summary>
            <param name="offset">offset of the lane</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.ContainsFillLaneCommandBar">
            <summary>
            Determines whether the lane contains a command bar whose FillLane property is set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.GetCommandBarsInPositionOrder">
            <summary>
            Gets a list of the contained command bars, in which they are sorted according to their position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLane.OnOrientationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when Orientation has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarLane.NCommandBarLaneSchema">
            <summary>
            Schema associated with NCommandBarLane
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarLane.OrientationProperty">
            <summary>
            Reference to the Vertical property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarLane.NextPositionStampProperty">
            <summary>
            Reference to the NextPositionStamp property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarLane.Orientation">
            <summary>
            Gets or sets whether this items collection is vertically arranged. By default set to false.
            Automatically updated by Nevron when the owner dock Orientation property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarLane.NextPositionStamp">
            <summary>
            Gets the value of the stamp, that is going to be assigned to the next 
            NCommandBarLanePosition created by this dock, 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarManager">
            <summary>
            A content holder widget, the content of which is surrounded by four command bar docks (left, right, top and bottom).
            The top and bottom docks are by default oriented horizontally, while the left and right docks are by default oriented vertically.
            A command bar manager allows for the command bars, owned by it to be floated and closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetCommandBars">
            <summary>
            Gets all command bars that are managed by this manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetDockedCommandBars">
            <summary>
            Gets a list of the docked command bars that are currently managed by this manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetFloatingCommandBars">
            <summary>
            Gets a list of the floating command bars that are currently managed by this manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetClosedCommandBars">
            <summary>
            Gets a list of the closed command bars that are currently managed by this manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.RemoveEmptyLanes">
            <summary>
            Removes the empty lanes, that are not preserved for redock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetType(Nevron.Nov.UI.NCommandBarDock)">
            <summary>
            Gets the dock type for a given child dock.
            Throws an exeption if the specified dock is not a child dock of this manager.
            </summary>
            <param name="dock"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.GetDock(Nevron.Nov.UI.ENCommandBarDockType)">
            <summary>
            
            </summary>
            <param name="dockType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.OpenContextMenu(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Shows a context menu from which the user can control the command bars visiblity.
            </summary>
            <param name="screenPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.CreateContextMenuItem(Nevron.Nov.UI.NCommandBar)">
            <summary>
            Creates a menu item that represents the specified command bar in the visibility context menu.
            </summary>
            <param name="cmdBar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarManager.OnContextMenuItemClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a menu item from the visibility context menu has been clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.NCommandBarManagerSchema">
            <summary>
            Schema associated with NContentHolder
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.LeftDockChild">
            <summary>
            Reference to the LeftDock child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.RightDockChild">
            <summary>
            Reference to the RightDock child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.TopDockChild">
            <summary>
            Reference to the TopDock child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.BottomDockChild">
            <summary>
            Reference to the BottomDock child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.FloatersChild">
            <summary>
            Reference to the Floaters child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarManager.ClosedCommandBarsChild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.TopDock">
            <summary>
            Gets or sets the Top dock
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.LeftDock">
            <summary>
            Gets or sets the Left dock
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.RightDock">
            <summary>
            Gets or sets the Right dock
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.BottomDock">
            <summary>
            Gets or sets the Bottom dock
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.Floaters">
            <summary>
            Gets or sets the Floaters collection, 
            that contains the floating windows that contain the floating command bars.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarManager.ClosedCommandBars">
            <summary>
            Gets or sets the ClosedCommandBars collection, 
            that contains the command bars that are closed.
            A command bar that is closed can be redocked or refloated, 
            depending on its state prior to the closing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCheckableMenuItem">
            <summary>
            A menu item that can be checked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuItem">
            <summary>
            A menu popup host, that represents an item from a menu.
            Each menu item represents a row of header, content and symbol elements,
            that are aligned by the menu item collection in which it resides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.#ctor(System.Object,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for mouse move events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnPopupClosed">
            <summary>
            Called when the popup has closed
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnPopupQueryStayOpen">
            <summary>
            Called when the popup queries whether to stay opened
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.GetAutomaticPopupYPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup Y position, in case the PopupYPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return to measure the content of the menu item.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.OnClick">
            <summary>
            Raises the click event. 
            Closes the owner menu, in accordance to the CloseOnClick property setting.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItem.GetNavigateToContentKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.NMenuItemSchema">
            <summary>
            Schema associated with NMenuItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.HeaderChild">
            <summary>
            Reference to the Header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.ShortcutChild">
            <summary>
            Reference to the Shurtcut child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.SymbolChild">
            <summary>
            Reference to the Symbol child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.HasChildMenuItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItem.CloseOnClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.OwnerMenu">
            <summary>
            Gets the menu in which this item resides
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.ParentMenuItem">
            <summary>
            Gets the parent menu item (if any)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.HasChildMenuItems">
            <summary>
            Gets whether the menu item has child menu items.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.IsSelected">
            <summary>
            Gets whether the item is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.Header">
            <summary>
            Gets or sets the widget that servers as menu item header
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.Shortcut">
            <summary>
            Gets or sets the widget that serves as menu item shortcut visualization.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.Symbol">
            <summary>
            Gets or sets the symbol that is used to indicate whether the menu item has subitems (children) or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItem.CloseOnClick">
            <summary>
            Gets or sets the mode in which the menu item is closed, whenever the menu item is clicked.
            By default set to Automatic, which closes the OwnerMenu with OK result, if the item has no sub-items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.#ctor(System.Object,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.OnClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckableMenuItem.ToggleChecked">
            <summary>
            Toggles the checked state of the button
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCheckableMenuItem.NCheckableMenuItemSchema">
            <summary>
            Schema associated with NCheckableMenuItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCheckableMenuItem.CheckedProperty">
            <summary>
            Reference to the Checked property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCheckableMenuItem.CheckedSymbolChild">
            <summary>
            Reference to the Checked symbol child
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NCheckableMenuItem.CheckedChanging">
            <summary>
            Occurs when the checked property is about to be changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NCheckableMenuItem.CheckedChanged">
            <summary>
            Occurs when the checked property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCheckableMenuItem.Checked">
            <summary>
            Gets or sets whether the item is checked or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCheckableMenuItem.CheckedSymbol">
            <summary>
            Gets or sets the checked symbol.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDocumentBox">
            <summary>
            A widget, which contains a document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBox.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBox.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NDocumentBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentBox.NDocumentBoxSchema">
            <summary>
            Schema associated with NDocumentBox
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDocumentBox.DocumentProperty">
            <summary>
            Reference to the Document property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentBox.Document">
            <summary>
            Gets or sets the document contained in this element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDocumentBox.Surface">
            <summary>
            A shortcut property to the document.Content, which attempts to get/set a document surface.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NStatusBar">
            <summary>
            A command bar, the items of which are typically status bar panes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NStatusBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NStatusBar.NStatusBarSchema">
            <summary>
            Schema associated with NStatusBar
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextPosition">
            <summary>
            Represents a position inside a text string.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="position"></param>
            <param name="leftSide"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.Normalize">
            <summary>
            Normalizes the text position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.op_Equality(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition)">
            <summary>
            Checks whether the given text positions are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextPosition.op_Inequality(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition)">
            <summary>
            Checks whether the given text positions are different.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NTextPosition.IsValid">
            <summary>
            Returns true if the position is valid
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextPosition.InsertIndex">
            <summary>
            Gets the effective insert index for this position
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NNumericUpDownTextBox">
            <summary>
            Reprensets the text box part of a numeric up down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to update the owner numeric/up down value from the text box on Enter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Overriden to accept only valid characters (i.e. numbers, decimal separator and minus sign).
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Overriden to update the owner numeric/up down value.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the content of this textbox.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.IsValid(System.Char)">
            <summary>
            Checks whether the specified character is valid for the numeric/up down
            and should be accepted.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NNumericUpDownTextBox.UpdateOwnerNumericUpDownValue">
            <summary>
            Updates the owner numeric up/down value from the text of this numeric up/down text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NNumericUpDownTextBox.NNumericUpDownTextBoxSchema">
            <summary>
            Schema associated with NNumericUpDownTextBox.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDownTextBox.OwnerNumericUpDown">
            <summary>
            Gets the NumericUpDown that owns this text box
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDownTextBox.DecimalSeparator">
            <summary>
            Gets the decimal separator to use in the numeric up/down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NNumericUpDownTextBox.MinusSign">
            <summary>
            Gets the minus sign to use in the numeric up/down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollBarShaftButton">
            <summary>
            Represents the shaft button of a scrollbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBarShaftButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBarShaftButton.NScrollBarShaftButtonSchema">
            <summary>
            Schema associated with NScrollBarShaftButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollBarArrowButton">
            <summary>
            Represents the arrow button of a scrollbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBarArrowButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBarArrowButton.NScrollBarArrowButtonSchema">
            <summary>
            Schema associated with NScrollBarArrowButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollBarThumb">
            <summary>
            Represents the thumb of a scrollbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollBarThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollBarThumb.NScrollBarThumbSchema">
            <summary>
            Schema associated with NScrollBarThumb.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSliderShaftButton">
            <summary>
            Represents the shaft button of a slider.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSliderShaftButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSliderShaftButton.NSliderShaftButtonSchema">
            <summary>
            Schema associated with NSliderShaftButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSliderThumb">
            <summary>
            Represents the thumb of a slider.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSliderThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSliderThumb.NSliderThumbSchema">
            <summary>
            Schema associated with NSliderThumb.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitterPane">
            <summary>
            Represents a pane of a splitter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitterPane.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitterPane.NSplitterPaneSchema">
            <summary>
            Schema associated with NSplitterPane.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitterThumb">
            <summary>
            Represents the thumb of a splitter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitterThumb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitterThumb.RequestCursor">
            <summary>
            Overriden to request a horizontal or vertical split cursor, depending on the owner splitter orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitterThumb.NSplitterThumbSchema">
            <summary>
            Schema associated with NThumb
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitterThumb.OwnerSplitter">
            <summary>
            Gets the splitter in which this splitter thumb resides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarPendant">
            <summary>
            Represents the pendant of a command bar, that shows a dynamically constructed menu,
            that displays the currently hidden items, as well as a menu that allows for selecting the 
            items that are shown in the command bar lane.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.OnPopupClosed">
            <summary>
            Called when the popup has closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.IsPopupEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.GetAutomaticPopupXPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup X position, in case the PopupXPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.GetAutomaticPopupYPosition(Nevron.Nov.Layout.ENHVDirection)">
            <summary>
            Gets the automatic popup Y position, in case the PopupYPosition property is set to Automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.MeasureContent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarPendant.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarPendant.NCommandBarPendantSchema">
            <summary>
            Schema associated with NCommandBarPendant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarPendant.OrientationProperty">
            <summary>
            Reference to the Orientation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarPendant.TopLeftSymbolProperty">
            <summary>
            Reference to the TopLeftSymbol property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarPendant.BottomRightSymbolProperty">
            <summary>
            Reference to the BottomRightSymbol property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarPendant.OwnerCommandBar">
            <summary>
            Gets the command bar to which this pendant belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarPendant.Orientation">
            <summary>
            Gets whether this is command bar is vertically arranged. By default set to false.
            Automatically updated by Nevron when the pendant is in a command bar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarPendant.TopLeftSymbol">
            <summary>
            Gets or sets the symbol that appears in top half of the pendant in horizontal orientation and on the left half of the pendant in vertical orientation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarPendant.BottomRightSymbol">
            <summary>
            Gets or sets the symbol that appears in bottom half of the pendant in horizontal orientation and on the right half of the pendant in vertical orientation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarItemCollection">
            <summary>
            A collection of command bar items that belongs to a command bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.GetMinimalExtend">
            <summary>
            Gets the minimal extend of the items in this collection, 
            in regard to the owner command bar orientation and wrap behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.CreateLayout">
            <summary>
            Overriden to create the layout that corresponds to the current value of the of LayoutType property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the arrage slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarItemCollection.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data">data for the change</param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarItemCollection.NCommandBarItemCollectionSchema">
            <summary>
            Schema associated with NCommandBarItemCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarItemCollection.OwnerCommandBar">
            <summary>
            Gets the command bar that owns this collection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarLanePosition">
            <summary>
            Represents the desired position of a command bar, inside a command bar lane.
            It pairs a length offset and a stamp, which is automatically provided by the command bar lane.
            A valid instance of this class can be obtained from the NCommandBarLane.CreatePosition method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLanePosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLanePosition.DeepClone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLanePosition.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarLanePosition.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarLanePosition.Offset">
            <summary>
            The desired offset of the command bar from the lane start
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarLanePosition.Stamp">
            <summary>
            The automatically assigned stamp for the position.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarDock">
            <summary>
            A collection of command bar lanes, that represents a command bar docking area.
            </summary>
            <remarks>
            A command bar dock can be horizontally or vertically arranged.
            When oriented horizontally the lanes are stacked from top to bottom.
            When oriented vertically the lanes are stacked from left to right.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.RemoveEmptyLanes">
            <summary>
            Removes the empty lanes, that are not preserved for redock from this command bar dock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.CreateLayout">
            <summary>
            Overriden to create a new instance of the NStackLayout
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the mouse move events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for the key down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarDock.OnOrientationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when Orientation has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarDock.NCommandBarDockSchema">
            <summary>
            Schema associated with NCommandBarDock
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarDock.OrientationProperty">
            <summary>
            Reference to the Vertical property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarDock.InsertLaneAreaProperty">
            <summary>
            Reference to the InsertLaneArea property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarDock.FloatAreaProperty">
            <summary>
            Reference to the FloatArea property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarDock.DockAreaProperty">
            <summary>
            Reference to the DockArea property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarDock.Orientation">
            <summary>
            Gets or sets whether this command bars dock is vertically or horizontally arranged.
            By default set to false (horizontal dock).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarDock.InsertLaneArea">
            <summary>
            Gets or sets the weight of the area around a lanes middle line, 
            in which when a command bar is dragged, it is inserted in a single new lane.
            Setting this property to zero disables insertion of new lanes for dragged command bars.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarDock.FloatArea">
            <summary>
            Gets or sets the size of the area applied around the content edge of the dock, 
            outside of which the dock tries to float dragged command bars.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarDock.DockArea">
            <summary>
            Gets or sets the size of the area applied around the content edge of the dock, 
            inside of which the command bar manager tries to dock floating command bars.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarDock.OwnerManager">
            <summary>
            Gets the manager in which this dock resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPaletteColorPickerCell">
            <summary>
            A cell from a NPaletteColorPicker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPaletteColorPickerCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPaletteColorPickerCell.NPaletteColorPickerCellSchema">
            <summary>
            Schema associated with NPaletteColorPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPaletteColorPickerCell.ColorIndexProperty">
            <summary>
            Reference to the ColorIndex property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPaletteColorPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NPaletteColorPickerCell.ColorIndex">
            <summary>
            Gets or sets the color index in the parent picker palette.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAdvancedColorPicker">
            <summary>
            A color picker that aggregates Web Safe, Named and Custom color pickers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedColorPicker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedColorPicker.OnSelectedColorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the selected property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedColorPicker.OnShowTransparencyPickerChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when ShowTransparencyPicker property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedColorPicker.NAdvancedColorPickerSchema">
            <summary>
            Schema associated with NAdvancedColorPicker
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedColorPicker.SelectedColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedColorPicker.ShowTransparencyPickerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NAdvancedColorPicker.SelectedColorChanged">
            <summary>
            Occurs when the selected color property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedColorPicker.ShowTransparencyPicker">
            <summary>
            Gets or sets whether to show transparency slider.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NColorBox">
            <summary>
            A drop down edit, which displays a drop down color palette for selecting a color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.MeasureItem(System.Boolean)">
            <summary>
            Overriden to measure the item slot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.ArrangeItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the item slot.
            </summary>
            <param name="itemSlot"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.CreatePopupContent">
            <summary>
            Must override to create the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnColorPickerSelectedColorChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a mouse button is released over the drop down list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnMoreColorsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the more colors button has been clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorBox.OnColorDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog has been closed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.NColorBoxSchema">
            <summary>
            Schema associated with NColorBox
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.SelectedColorProperty">
            <summary>
            Reference to the SelectedColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.HasMoreColorsButtonProperty">
            <summary>
            Reference to the HasMoreColorsButton property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.PaletteProperty">
            <summary>
            Reference to the Palette property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.PreviewSizeProperty">
            <summary>
            Reference to the PreviewSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.PreviewStrokeProperty">
            <summary>
            Reference to the PreviewStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorBox.PreviewMarginsProperty">
            <summary>
            Reference to the PreviewMargins property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NColorBox.SelectedColorChanged">
            <summary>
            Occurs when the selected color property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.HasMoreColorsButton">
            <summary>
            Gets or sets whether the more colors button must be displayed in the drop down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.Palette">
            <summary>
            Gets or sets the color palette used by the color box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.PreviewSize">
            <summary>
            Gets or sets the size of the color preview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.PreviewStroke">
            <summary>
            Gets or sets the stroking border of the color preview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorBox.PreviewMargins">
            <summary>
            Gets or sets the margins of the color preview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NRadioButton">
            <summary>
            A symbol toggle button, which represents a radio button. 
            A radio button is considered grouped, when it is a descendand of a NRadioButtonGroup.
            For a single NRadioButtonGroup element, only one descendant radio button can be checked at a time.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSymbolToggleButton">
            <summary>
            Represents a toggle button, that has a symbol, which indicates that it is checked and/or pressed.
            Serves as base class for check boxes and radio buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.#ctor(System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="content"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.GetFocusEdge">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSymbolToggleButton.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolToggleButton.NSymbolToggleButtonSchema">
            <summary>
            Schema associated with NSymbolToggleButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolToggleButton.SymbolBoxChild">
            <summary>
            Reference to the SymbolBox child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolToggleButton.SymbolContentRelationProperty">
            <summary>
            Reference to the SymbolContentRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSymbolToggleButton.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolToggleButton.SymbolBox">
            <summary>
            Gets or sets the SymbolBox child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolToggleButton.SymbolContentRelation">
            <summary>
            Gets or sets the symbol/content relation of this button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSymbolToggleButton.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButton.#ctor(System.Object)">
            <summary>
            Initializer ctor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NRadioButton.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NRadioButton.NRadioButtonSchema">
            <summary>
            Schema associated with NRadioButton.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NRadioButton.OwnerGroup">
            <summary>
            Gets the radio button group to which this button belongs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCheckBox">
            <summary>
            A symbol toggle button, which represents a check box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckBox.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCheckBox.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
            <param name="check"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCheckBox.NCheckBoxSchema">
            <summary>
            Schema associated with NCheckBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NAdvancedGradientVariantPicker">
            <summary>
            A picker for advanced gradient variant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientVariantPicker.#ctor">
            <summary>
            Inirtializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientVariantPicker.#ctor(Nevron.Nov.Graphics.ENAdvancedGradientColorScheme)">
            <summary>
            
            </summary>
            <param name="colorScheme"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NAdvancedGradientVariantPicker.InvalidateDisplay">
            <summary>
            Overriden to invalidate the display of the child cells.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientVariantPicker.NAdvancedGradientVariantPickerSchema">
            <summary>
            Schema associated with NAdvancedGradientVariantPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NAdvancedGradientVariantPicker.ColorSchemeProperty">
            <summary>
            Reference to the ColorScheme property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NAdvancedGradientVariantPicker.ColorScheme">
            <summary>
            Gets or sets the advanced gradient style of the picker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHatchStylePicker">
            <summary>
            A picker for an ENHatchStyle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHatchStylePicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHatchStylePicker.NHatchStylePickerSchema">
            <summary>
            Schema associated with NHatchStylePicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHatchStylePicker.ForegroundColorProperty">
            <summary>
            Schema associated with ForegroundColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHatchStylePicker.BackgroundColorProperty">
            <summary>
            Schema associated with BackgroundColor property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHatchStylePicker.ForegroundColor">
            <summary>
            Gets or sets the foreground color
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHatchStylePicker.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeViewItemHeader">
            <summary>
            Represents a holder for the tree view item header content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemHeader.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItemHeader.NTreeViewItemHeaderSchema">
            <summary>
            Schema associated with NTreeViewItemHeader.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeViewRootItemCollection">
            <summary>
            A collection of tree view items
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeViewItemCollection">
            <summary>
            A collection of tree view items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemCollection.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Updates any references or cache related to the context of the node children.
            This method is called whenever the children of a node have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItemCollection.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors.
            </summary>
            <remarks>
            Overriden to cache a reference to the owner list box
            </remarks>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItemCollection.NTreeViewItemCollectionSchema">
            <summary>
            Schema associated with NTreeViewItemCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItemCollection.GridlinesStrokeProperty">
            <summary>
            Reference to the GridlinesStroke Property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItemCollection.OwnerTreeView">
            <summary>
            Gets the tree view, to which this item belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItemCollection.GridlinesStroke">
            <summary>
            Gets or sets the stroking of the gridlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewRootItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewRootItemCollection.NTreeViewRootItemCollectionSchema">
            <summary>
            Schema associated with NTreeViewRootItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeView">
            <summary>
            A widget, which displays hierarchical data in a tree structure with items that can expand, collapse
            and be selected.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.ExpandAll(System.Boolean)">
            <summary>
            Expands/collapses all items depending on the value of the expand parameter.
            </summary>
            <param name="expand"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.EnsureVisible(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Ensures that the specified item is visible.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.ExpandPathToItem(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Expands the ancestors of the given item all the way up to the root.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.NavigateToItem(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Navigates to the specified item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetTotalViewport">
            <summary>
            Overriden to return the desired size of the items container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetNavigationAnchorItem">
            <summary>
            Gets the anchor element for keyboard navigation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetScrollableItemsCount">
            <summary>
            Gets the count of items that can be scrolled through
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetVisibleItemsCount">
            <summary>
            Gets the count of items that are currently visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetScrollableItemIndex(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Gets the scrolling index of the specified item in the scrollable items list
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetScrollableItemAt(System.Int32)">
            <summary>
            Gets the scrollable item at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetFirstVisibleItemIndex(System.Double)">
            <summary>
            Given a top Y coordinate in viewport coordinates, 
            returns the index of the first visible item in the scrollbable items list.
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.GetLastVisibleItemIndex(System.Double)">
            <summary>
            Given a bottom Y coordinate in viewport coordinates, 
            returns the index of the last visible item in the scrollbable items list.
            </summary>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.SetFirstVisibleItemIndex(System.Int32)">
            <summary>
            Sets the first visible item index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.OnSelectedPathChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the SelectedPath changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeView.NTreeViewSchema">
            <summary>
            Schema associated with NTreeView
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeView.ItemsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeView.SelectedPathProperty">
            <summary>
            Reference to the SelectedIndex property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTreeView.SelectedPathChanged">
            <summary>
            Occurs when the SelectedPath property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeView.Items">
            <summary>
            Gets or sets the items collection of the tree view
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeView.SelectedItem">
            <summary>
            Gets or sets the selected item
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeView.SelectedPath">
            <summary>
            Gets or sets the path to the selected item
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeView.NTreeViewDesigner">
            <summary>
            The designer of tree views.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeView.NTreeViewDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTreeViewItem">
            <summary>
            Represents a tree view item, that couples a header and sub items 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.GetPaintCacheMode">
            <summary>
            Gets the mode in which this displayable node can cache its painting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse down event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler of mouse up events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.ReceiveHandledMouseDown(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Overriden to return true, since we want to select the item on handled mouse downs too.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element header
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the header of the element inside the specified header area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnExpandedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when Expanded has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTreeViewItem.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data">data for the change</param>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.NTreeViewItemSchema">
            <summary>
            Schema associated with NTreeViewItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.IsMouseOverSymbolProperty">
            <summary>
            Reference to the IsMouseOverSymbol property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.ExpandedProperty">
            <summary>
            Reference to the Expanded property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.SymbolProperty">
            <summary>
            Reference to the Symbol property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.GridlinesStrokeProperty">
            <summary>
            Reference to the GridlinesStroke Property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.ItemsChild">
            <summary>
            Reference to the Items child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTreeViewItem.HeaderChild">
            <summary>
            Reference to the Header child
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTreeViewItem.ExpandedChanged">
            <summary>
            Occurs 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.IsSelected">
            <summary>
            Gets whether the item is selected or not. Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.IsMouseOverSymbol">
            <summary>
            Gets whether the mouse is currently over the symbol or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.Expanded">
            <summary>
            Gets or sets whether the tree view item is expanded (i.e. its subitems are visible) or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.Symbol">
            <summary>
            Gets or sets the tree view item symbol.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.GridlinesStroke">
            <summary>
            Gets or sets the stroking of the gridlines.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.Header">
            <summary>
            Gets or sets the header element of the tree view item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.Items">
            <summary>
            Gets or sets the items collection of the tree view item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.ParentItem">
            <summary>
            Gets the logical parent tree view item for this item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.OwnerTreeView">
            <summary>
            Gets the tree view, which this item belongs to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.IndexInParent">
            <summary>
            Returns the zero based index of this tree view item in the tree view item collection
            it is placed in or -1 if this tree view item is not placed in a tree view item collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTreeViewItem.YInRootItems">
            <summary>
            Gets the Y coordinate in the root items collection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NGroupBoxHeader">
            <summary>
            Represents a holder for the group box header content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBoxHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGroupBoxHeader.NGroupBoxHeaderSchema">
            <summary>
            Schema associated with NGroupBoxHeader.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSplitter">
            <summary>
            A widget that splits its content area into two resizable panes,
            which can be interactively resized with help of a thumb located in the middle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.#ctor(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget,Nevron.Nov.UI.ENSplitterSplitMode,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="pane1"></param>
            <param name="pane2"></param>
            <param name="splitMode"></param>
            <param name="splitOffset"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value.
            </summary>
            <param name="thumb"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the split container.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Called to layout the split container children.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.OnThumbDrag(Nevron.Nov.UI.NThumbDragEventArgs)">
            <summary>
            Called when the thumb is dragged.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSplitter.OnThumbEndDragging(Nevron.Nov.UI.NEndActionEventArgs)">
            <summary>
            Called when the thumb dragging ended.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.NSplitterSchema">
            <summary>
            Schema associated with NSplitter
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.OrientationProperty">
            <summary>
            Reference to the bool property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.SplitModeProperty">
            <summary>
            Reference to the SplitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.SplitOffsetProperty">
            <summary>
            Reference to the SplitOffset property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.SplitFactorProperty">
            <summary>
            Reference to the SplitFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.ResizeStepProperty">
            <summary>
            Reference to the ResizeStep property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.ResizeWhileDraggingProperty">
            <summary>
            Reference to the ResizeWhileDragging property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.Pane1Child">
            <summary>
            Reference to the Pane1 child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.Pane2Child">
            <summary>
            Reference to the Pane2 child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.ThumbChild">
            <summary>
            Reference to the Thumb child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSplitter.ThumbGhostChild">
            <summary>
            Reference to the ThumbGhost child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.Orientation">
            <summary>
            Specifies direction in which the Pane1, Thumb and Pane2 children are arranged.
            By default set to horizontal
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.SplitMode">
            <summary>
            Gets or sets the mode in which the splitter splits the currently available area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.SplitOffset">
            <summary>
            Gets or sets the fixed length offset at which to split.
            When SplitMode is set to OffsetFromNearSide, this defines the near side of the layout direction (e.g. when Vertical is false, this is the Left side).
            When SplitMode is set to OffsetFromFarSide, this defines the far side of the layout direction (e.g. when Vertical is false, this is the Right side).
            The value of this property is not used when SplitMode is set to Proportional.
            When set to NaN the splitter uses the panes desired width/height in the layout direction to find a suitable replacement.
            By default set to NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.SplitFactor">
            <summary>
            Gets or sets the proportion factor at which to split.
            Used only when SplitMode is set to Proportional.
            Valid values are in the range [0, 1] (e.g. a value of 0.5 means split at the center).
            When set to NaN the splitter uses the panes desired width/height in the layout direction to find a suitable a replacement.
            By default set to NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.ResizeStep">
            <summary>
            Gets or sets the step with which the current splitter position can be changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.ResizeWhileDragging">
            <summary>
            Gets or sets whether to resize the panes while the thumb is being dragged or not.
            When set to false the panes are resized when the thumb is released.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.Pane1">
            <summary>
            Gets or sets the Left/Top pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.Pane2">
            <summary>
            Gets or sets the Right/Bottom pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.Thumb">
            <summary>
            Gets or sets the splitter thumb
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSplitter.ThumbGhost">
            <summary>
            Gets or sets the splitter thumb ghost
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NGroupBox">
            <summary>
            Represents a group box, which consists of an arbitrary Header and Content widgets.
            </summary>
            <remarks>
            The group box overrides the border thickness calculation, to include the header in the Top border side.
            Additionally the border wall is also overriden to be clipped at where the Header is positioned.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.#ctor(System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>		
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.GetBorderThickness">
            <summary>
            Overriden to include the header height measure in the border thickness measure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NGroupBox.CreateBorderWall">
            <summary>
            Overriden to return a border wall for the group box.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NGroupBox.NGroupBoxSchema">
            <summary>
            Schema associated with NGroupBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarFloaterCollection">
            <summary>
            A collection of command bar floater windows. Exposed by the Floater property of each NCommandBarManager.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloaterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarFloaterCollection.NCommandBarFloaterCollectionSchema">
            <summary>
            Schema associated with NCommandBarFloaterCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommandBarFloater">
            <summary>
            An top-level window that is created to host floating command bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloater.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloater.#ctor(Nevron.Nov.UI.NWidget)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloater.Reposition(Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCommandBarFloater.OnTitleBarHeaderDoubleClick(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the header of the title bar is double clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCommandBarFloater.NCommandBarFloaterSchema">
            <summary>
            Schema associated with NPopup
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarFloater.CommandBar">
            <summary>
            Gets the command bar hosted by the this floater
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommandBarFloater.OwnerManager">
            <summary>
            Gets the manager in which this frame resides
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTab">
            <summary>
            Represents a tab widget, that contains tab pages, which are represented by NTabPage elements that you add through the TabPages property.
            The order of tab pages in this collection reflects the order the tabs appear in the widget.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.EnsureVisible(Nevron.Nov.UI.NTabPage)">
            <summary>
            Ensures that the specified page is visible
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.NavigateToNextPage(Nevron.Nov.UI.NTabPage)">
            <summary>
            Navigates to the page after the specified page
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.NavigateToPrevPage(Nevron.Nov.UI.NTabPage)">
            <summary>
            Navigates to the page before the specified page
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.NavigateToFirstPage">
            <summary>
            Navigates to the first page
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.NavigateToLastPage">
            <summary>
            Navigates to the last page
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.NavigateToPage(Nevron.Nov.UI.NTabPage)">
            <summary>
            Navigates to the specified page
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.GetBorderThickness">
            <summary>
            Overriden to include the headers measure in the border thickness measure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.GetPadding">
            <summary>
            Overriden to include the headers measure in the paddings measure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down event.
            Overriden to provide support for keyboard navigation via the Tab key.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.CreateBorderWall">
            <summary>
            Overriden to return a border wall for the group box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.OnHeadersPositionChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the headers position value has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTab.OnTabSpinnerSpin(Nevron.Nov.UI.NSpinnerSpinEventArgs)">
            <summary>
            Handler for tab scroller spin event
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.NTabSchema">
            <summary>
            Schema associated with NTab.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.TabPagesChild">
            <summary>
            Reference to the TabPages child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.TabSpinnerChild">
            <summary>
            Reference to the TabSpinner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.HeadersPositionProperty">
            <summary>
            Reference to the HeadersPosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.HeadersSpacingProperty">
            <summary>
            Reference to the HeadersSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.HeadersAlignmentProperty">
            <summary>
            Reference to the HeadersAlignment property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.HeadersModeProperty">
            <summary>
            Reference to the HeadersMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.SizeToSelectedPageProperty">
            <summary>
            Reference to the SizeToSelectedPage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTab.SizeToHeadersProperty">
            <summary>
            Reference to the SizeToHeaders property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NTab.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.TabPages">
            <summary>
            Gets or sets the collection of tab pages
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.TabSpinner">
            <summary>
            Gets or sets the tab spinner.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.SelectedIndex">
            <summary>
            Gets or sets the selected index
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.HeadersPosition">
            <summary>
            Gets or sets the headers position
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.HeadersSpacing">
            <summary>
            Gets or sets the spacing between the headers in the flow direction
            defined by the HeadersPosition property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.HeadersAlignment">
            <summary>
            Gets or sets the alignment of the tab headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.HeadersMode">
            <summary>
            Gets or sets the headers positioning mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.SelectedPage">
            <summary>
            Gets or sets the selected page
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.SizeToSelectedPage">
            <summary>
            Gets or sets whether the tab should measure only to the currently selected page or to all pages. 
            By default false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTab.SizeToHeaders">
            <summary>
            Gets or sets whether the tab should measure to the tab headers in the breath dimension or not.
            By default true
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTabPage">
            <summary>
            Represents a tab page that couples header and content widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPage.#ctor(System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPage.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="header"></param>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTabPage.NTabPageSchema">
            <summary>
            Schema associated with NTabPage
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabPage.HeaderChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabPage.ContentChild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTabPage.Header">
            <summary>
            Gets or sets the tab page header
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTabPage.Content">
            <summary>
            Gets or sets the tab page content
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTabPage.IsSelected">
            <summary>
            Gets whether the tab page is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTabPageHeader">
            <summary>
            Represents a content holder for the tab page header content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPageHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPageHeader.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to select the tab page to which this header belongs
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPageHeader.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down event.
            Overriden to handler the Arrows, Home and End navigation keys
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTabPageHeader.NTabPageHeaderSchema">
            <summary>
            Schema associated with NTabPageHeader.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTabPageHeader.OwnerTabPage">
            <summary>
            Gets the tab page that owns this header
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTabPageHeader.OwnerTab">
            <summary>
            Gets the tab that owns this header
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTabPageCollection">
            <summary>
            Represents a collection of tab pages.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTabPageCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTabPageCollection.NTabPageCollectionSchema">
            <summary>
            Schema associated with NTabPageCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NColorDialog">
            <summary>
            Represents a dialog that hosts an advanced color picker
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorDialog.OnColorPickerSelectedColorChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected property of the advanced color picker has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorDialog.OnSelectedColorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the selected color has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorDialog.OnCurrentColorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current color has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NColorDialog.NColorDialogSchema">
            <summary>
            Schema associated with NColorDialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorDialog.SelectedColorProperty">
            <summary>
            Reference to the SelectedColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NColorDialog.CurrentColorProperty">
            <summary>
            Reference to the CurrentColor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorDialog.SelectedColor">
            <summary>
            Gets or sets the selected color
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorDialog.CurrentColor">
            <summary>
            Gets or sets the current color
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuSeparator">
            <summary>
            A widget, that represents a separator in a menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuSeparator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuSeparator.NMenuSeparatorSchema">
            <summary>
            Schema associated with NMenuSeparator
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuItemCollection">
            <summary>
            A vertical stack of widgets, that aligns the columns of the menu items contained in it.
            Although a menu item collection is designed to primary hold menu items, it can virtually hold 
            any widget(s), thus enabling users to alter the default layout of the menu items 
            and to place arbitrary widgets in menus.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCollection.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCollection.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCollection.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuItemCollection.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.NMenuItemCollectionSchema">
            <summary>
            Schema associated with NMenuItemCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.HeadersColumnSeparatorPositionProperty">
            <summary>
            Reference to the HeadersColumnSeparatorPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.HeadersColumnFillProperty">
            <summary>
            Reference to the HeadersColumnFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MinHeadersColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MaxHeadersColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.PreferredHeadersColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.DesiredHeadersColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MaxShortcutsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MinShortcutsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.PreferredShortcutsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.DesiredShortcutsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MinSymbolsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MaxSymbolsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.PreferredSymbolsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.DesiredSymbolsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MinContentsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.MaxContentsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.PreferredContentsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuItemCollection.DesiredContentsColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.VerticalSpacing">
            <summary>
            Gets or sets the vertical spacing between the items
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.HorizontalSpacing">
            <summary>
            Gets or sets the spacing between the header and content columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MinHeadersColumnWidth">
            <summary>
            Gets or sets the minimal width of the headers column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MaxHeadersColumnWidth">
            <summary>
            Gets or sets the maximal width of the headers column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.PreferredHeadersColumnWidth">
            <summary>
            Gets or sets the suggested width of the headers column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.DesiredHeadersColumnWidth">
            <summary>
            Gets or sets the desired width of the headers column.
            Automatically updated by ValidateMeasure().
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.HeadersColumnSeparatorPosition">
            <summary>
            Gets the headers column separator position, that is the offset from the content edge left side which must be filled with the headers fill.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.HeadersColumnFill">
            <summary>
            Gets or sets the filling of the headers column
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MinSymbolsColumnWidth">
            <summary>
            Gets or sets the minimal width of the symbols column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MaxSymbolsColumnWidth">
            <summary>
            Gets or sets the maximal width of the symbols column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.PreferredSymbolsColumnWidth">
            <summary>
            Gets or sets the suggested width of the symbols column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.DesiredSymbolsColumnWidth">
            <summary>
            Gets or sets the desired width of the symbols column.
            Automatically updated by ValidateMeasure().
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MinContentsColumnWidth">
            <summary>
            Gets or sets the minimal width of the contents column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MaxContentsColumnWidth">
            <summary>
            Gets or sets the maximal width of the contents column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.PreferredContentsColumnWidth">
            <summary>
            Gets or sets the suggested width of the contents column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.DesiredContentsColumnWidth">
            <summary>
            Gets or sets the desired width of the contents column.
            Automatically updated by ValidateMeasure().
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MinShortcutsColumnWidth">
            <summary>
            Gets or sets the minimal width of the contents column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.MaxShortcutsColumnWidth">
            <summary>
            Gets or sets the maximal width of the contents column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.PreferredShortcutsColumnWidth">
            <summary>
            Gets or sets the suggested width of the contents column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenuItemCollection.DesiredShortcutsColumnWidth">
            <summary>
            Gets or sets the desired width of the contents column.
            Automatically updated by ValidateMeasure().
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenu">
            <summary>
            A widget that represents a vertically oriented menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToFirstItem">
            <summary>
            Navigates to the first item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToLastItem">
            <summary>
            Navigates to the last item
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToNextItem(Nevron.Nov.UI.NMenuItem)">
            <summary>
            Navigates to the down item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToPrevItem(Nevron.Nov.UI.NMenuItem)">
            <summary>
            Navigates to the down item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToItem(Nevron.Nov.UI.NMenuItem)">
            <summary>
            Navigates to the specified item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.NavigateToOwnerMenuItem">
            <summary>
            Navigates to the owner menu item, if the menu is owned by a menu item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the items occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the items
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMenu.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Default handler for key down events
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NMenu.NMenuSchema">
            <summary>
            Schema associated with NMenu
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenu.ItemsChild">
            <summary>
            Reference to the Items child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenu.HasMenuItems">
            <summary>
            Gets whether the menu has at least one menu item.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenu.SelectedItem">
            <summary>
            Gets the selected menu item.
            Automatically updated by Nevron
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenu.OwnerMenuItem">
            <summary>
            Gets the menu item to which this menu belongs 
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMenu.Items">
            <summary>
            Gets or sets the items of the menu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMenuBar">
            <summary>
            A command bar, the items of which are typically menu drop downs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMenuBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMenuBar.NMenuBarSchema">
            <summary>
            Schema associated with NMenuBar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NPaletteColorPicker">
            <summary>
            A table picker, which lets the user pick a color from a palette of colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPaletteColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPaletteColorPicker.#ctor(Nevron.Nov.UI.NColorPalette)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="palette"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPaletteColorPicker.OnPaletteChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the palette has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NPaletteColorPicker.NPaletteColorPickerSchema">
            <summary>
            Schema associated with NPaletteColorPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPaletteColorPicker.PaletteProperty">
            <summary>
            Reference to the Palette property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPaletteColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPaletteColorPicker.Palette">
            <summary>
            Gets or sets the color palette shown by the picker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NColorPalette">
            <summary>
            Represents a color palette.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.#ctor">
            <summary>
            Default constructor (Creates MicrosoftOffice2007 predefined palette)
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.#ctor(Nevron.Nov.UI.ENColorPaletteType)">
            <summary>
            Creates a predefined palette
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.#ctor(System.String,System.Int32,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Creates a custom palette
            </summary>
            <param name="name"></param>
            <param name="columnCount"></param>
            <param name="colors"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.DeepClone">
            <summary>
            Creates a deep copy of the color palette.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.GetIndexByRGB(Nevron.Nov.Graphics.NColor)">
            <summary>
            Tries to get the index of the color in the palette, whose packed RGB representation is equal to the specified color.
            Returns -1 if the color is not found.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.Equals(System.Object)">
            <summary>
            Checks whether the given object is equal to this color palette.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.GetHashCode">
            <summary>
            Gets the has code of this color palette.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NColorPalette.ToString">
            <summary>
            Returns the string representation of the color palette (i.e. its name).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NColorPalette.Name">
            <summary>
            Gets the palette name
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorPalette.ColumnCount">
            <summary>
            Gets the palette column count
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NColorPalette.Item(System.Int32)">
            <summary>
            Gets the color at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NColorPalette.Count">
            <summary>
            Gets the count of colors in the palette
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NGradientVariantPicker">
            <summary>
            A variant picker for two color gradients.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NGradientVariantPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPicker.NGradientVariantPickerSchema">
            <summary>
            Schema associated with NGradientVariantPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPicker.StyleProperty">
            <summary>
            Schema associated with Style property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPicker.BeginColorProperty">
            <summary>
            Schema associated with BeginColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NGradientVariantPicker.EndColorProperty">
            <summary>
            Schema associated with EndColor property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientVariantPicker.Style">
            <summary>
            Gets or sets the gradient style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientVariantPicker.BeginColor">
            <summary>
            Gets or sets the begin color
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NGradientVariantPicker.EndColor">
            <summary>
            Gets or sets the end color
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBoxItem">
            <summary>
            Represents a combo box item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxItem.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxItem.GetSearchMap">
            <summary>
            Gets the search map (if any) this item is placed in.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBoxItem.NComboBoxItemSchema">
            <summary>
            Schema associated with NComboBoxItem
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBoxItem.IsSelected">
            <summary>
            Get whether the item is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBoxItem.OwnerComboBox">
            <summary>
            Gets the combo box, to which this item belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NComboBoxItemCollection">
            <summary>
            A collection of combo box items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NComboBoxItemCollection.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent node has changed. 
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NComboBoxItemCollection.NComboBoxItemCollectionSchema">
            <summary>
            Schema associated with NComboBoxItemCollection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NComboBoxItemCollection.OwnerComboBox">
            <summary>
            Gets the combo box, to which this items collection belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NListBoxItem">
            <summary>
            Represents a list box item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.#ctor(System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.GetSearchMap">
            <summary>
            Gets the search map (if any) this item is placed in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse down event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the mouse up event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItem.ReceiveHandledMouseDown(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Overriden to return true, since we want to select the item on handled mouse downs too.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NListBoxItem.NListBoxItemSchema">
            <summary>
            Schema associated with NListBoxItem.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBoxItem.IsSelected">
            <summary>
            Gets whether the item is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBoxItem.OwnerListBox">
            <summary>
            Gets the list box, to which this item belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NListBoxItemCollection">
            <summary>
            A collection of list box items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxItemCollection.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the parent node has changed. 
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NListBoxItemCollection.NListBoxItemCollectionSchema">
            <summary>
            Schema associated with NListBoxItemCollection
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBoxItemCollection.OwnerListBox">
            <summary>
            Gets the list box, to which this item belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NListBoxSelection">
            <summary>
            Represents the selection of a list box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSelection`1">
            <summary>
            Serves as base class for selection objects than manage single or multiple selected items.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.ClickSelect(`0)">
            <summary>
            Performs a click node selection
            </summary>
            <remarks>
            This method takes into account the current Control and Shift key states and performs the following actions:
            <para>
            1. If the CTRL key is pressed it will toggle the node selection state
            </para>
            <para>
            2. If the SHIFT key is pressed it will milti select the node
            </para>
            <para>
            3. If no key modifier is pressed and the node is not already selected it will single select it
            </para>
            </remarks>
            <param name="item">item to select</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.SingleSelect(`0)">
            <summary>
            Makes the specified item the one and only selected item
            </summary>
            <param name="item">item to single select</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.SingleSelect(Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Makes the specified items the only selected items.
            </summary>
            <param name="items">item to select</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.MultiSelect(`0)">
            <summary>
            Appends the specified item to the selection list, without removing the currently selected items.
            </summary>
            <param name="item">item to select</param>
            <returns>true if the item was successfully selected, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.MultiSelect(Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Appends the specified items to the selection list, without removing the currently selected items.
            </summary>
            <param name="items">item to select</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.ToggleSelect(`0)">
            <summary>
            Toggles the item selection state
            </summary>
            <param name="item">item to toggle</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.ToggleSelect(Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Toggles the items selection state
            </summary>
            <param name="items">items to toggle</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.DeselectAll">
            <summary>
            Deselects all currently selected items
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.Deselect(`0)">
            <summary>
            Deselects the specified item if it selected
            </summary>
            <param name="item">item to deselect</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.Deselect(Nevron.Nov.DataStructures.NList{`0})">
            <summary>
            Deselects the specified item
            </summary>
            <param name="items">item to deselect</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.IsSelected(`0)">
            <summary>
            Determines whether the specified item is selected
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.OnStartUpdate">
            <summary>
            Called when the selection starts an update. Raises the UpdateStarted event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.OnEndUpdate">
            <summary>
            Called when the selection has ended an updated. Raises the UpdateEnded event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.OnSelected(`0)">
            <summary>
            Called when the specified item has been selected. Raises the Selected event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.OnDeselected(`0)">
            <summary>
            Called when the specified item has been deselected
            </summary>
            <param name="item">item which has been deselected</param>
        </member>
        <member name="M:Nevron.Nov.UI.NSelection`1.OnModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Mode property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.NSelectionSchema">
            <summary>
            Schema associated with NSelection
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.SelectedEvent">
            <summary>
            Item selected event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.DeselectedEvent">
            <summary>
            Item deselected event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.UpdateStartedEvent">
            <summary>
            Multi selection started event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.UpdateEndedEvent">
            <summary>
            Multi selection ended event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.SelectionChangedEvent">
            <summary>
            SelectionChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.ModeProperty">
            <summary>
            Reference to the Mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.EnableToggleClickSelectProperty">
            <summary>
            Reference to the EnableToggleClickSelect property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSelection`1.EnableAppendClickSelectProperty">
            <summary>
            Reference to the EnableAppendClickSelect property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSelection`1.SelectionChanged">
            <summary>	
            Event, which occurs whenever an item has been selected or deselected or a batch selection change has ended.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSelection`1.Selected">
            <summary>	
            Event, which occurs when an item has been selected.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSelection`1.Deselected">
            <summary>
            Event, which occurs when an item has been deselected.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSelection`1.UpdateStarted">
            <summary>
            Event, which occurs when the selection is going to be updated.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSelection`1.UpdateEnded">
            <summary>
            Event, which occurs when the selection has been updated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.Mode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.SelectedCount">
            <summary>
            Gets the number of selected items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.SelectedItems">
            <summary>
            Gets a list that contains the selected items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.FirstSelected">
            <summary>
            Gets the first selected item. Returns null if no items are selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.LastSelected">
            <summary>
            Gets the last selected item. Returns null if no items are selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.EnableToggleClickSelect">
            <summary>
            Specifies whether toggling of node selection is enabled when the user click selects an node.
            This operation is performed when the user clicks on a node and the Ctrl key is down.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSelection`1.EnableAppendClickSelect">
            <summary>
            Specifies whether appending the node to the selection is enabled when the user click selects a node.
            This operation is performed when the user clicks on a node and the Shift key is down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxSelection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxSelection.OnSelected(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Called when the specified item has been selected. Raises the Selected event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NListBoxSelection.OnDeselected(Nevron.Nov.UI.NListBoxItem)">
            <summary>
            Called when the specified item has been deselected. Raises the Deselected event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NListBoxSelection.NListBoxSelectionSchema">
            <summary>
            Schema associated with NListBoxSelection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NListBoxSelection.OwnerListBox">
            <summary>
            Gets the list box, to which this selection belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTooltip">
            <summary>
            A container for the information that can be displayed when the mouse moves over a certain element or area. 
            A tooltip window is internally created for each tooltip that is shown. 
            In general only one tooltip window can exist at a given time, because like the cursor, the tooltip is used to provide additional information 
            about the current mouse pointer location, and is a shared resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltip.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltip.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltip.#ctor(Nevron.Nov.UI.NTooltip)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltip.GetContent">
            <summary>
            Gets the widget that should be displayed inside the tooltip window when the tooltip shows.
            This implementation returns the NWidget.FromObject(Content) result, but derivate classes 
            can override the method to generate dynamic tooltip content.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.NTooltipSchema">
            <summary>
            Schema associated with NTooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.ContentProperty">
            <summary>
            Reference to the Content property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.CloseOnMouseDownProperty">
            <summary>
            Reference to the CloseOnMouseDown property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.ShowOnDisabledProperty">
            <summary>
            Reference to the ShowOnDisabled property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.ShowDurationProperty">
            <summary>
            Reference to the ShowDuration property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.FirstShowDelayProperty">
            <summary>
            Reference to the FirstShowDelay property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.NextShowDelayProperty">
            <summary>
            Reference to the NextShowDelay property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.FollowMouseProperty">
            <summary>
            Reference to the FollowMouse property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.PositionProperty">
            <summary>
            Reference to the Position property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltip.HotSpotPaddingProperty">
            <summary>
            Reference to the HotSpotPadding property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.Content">
            <summary>
            Gets or sets the tooltip content. 
            If GetContent() is not overriden, the value of this property is converted to an NWidget from the NWidget.FromObject method.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.CloseOnMouseDown">
            <summary>
            Gets or sets whether the tooltip must be automatically closed, when a mouse button is pressed.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.ShowOnDisabled">
            <summary>
            Gets or sets whether a tooltip appears for an object that is not enabled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.ShowDuration">
            <summary>
            Gets or sets the amount of time (in milliseconds) after which the tooltip automatically closes.
            If set to a value smaller than zero (-1), the tooltip will never expire. 
            If set to zero the tooltip will never show.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.FirstShowDelay">
            <summary>
            Gets or sets the amount of time (in milliseconds) after which the tooltip shows when requested.
            Taken into account when there is no other tooltip currently shown - e.g. this is the first shown tooltip.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.NextShowDelay">
            <summary>
            Gets or sets the amount of time (in milliseconds) after which the tooltip shows when requested.
            Taken into account when there is another tooltip currently shown - e.g. this is the next tooltip that must replace the existing one.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.FollowMouse">
            <summary>
            Gets or sets whether the tooltip must be repositioned, once it has been shown and the mouse is moved.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.Position">
            <summary>
            Gets or sets the position of the tooltip relative to the virtual cursor rectangle 
            defined by the current mouse position and the HotSpotPadding property.
            By default set to BottomAlignLeft.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NTooltip.HotSpotPadding">
            <summary>
            Gets or sets the padding applied to the current mouse position, 
            which is used to generate the virtual cursor rectangle around which the tooltip is positioned.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTooltip.NTooltipDesigner">
            <summary>
            A designer for tooltips.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltip.NTooltipDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDockPanel">
            <summary>
            A layout panel, which integrates the NDockLayout in the context of the Nevron User Interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDockPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDockPanel.Add(Nevron.Nov.UI.NWidget,Nevron.Nov.Layout.ENDockArea)">
            <summary>
            Adds the given widget at the specified dock area.
            </summary>
            <param name="widget"></param>
            <param name="dockArea"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDockPanel.CreateLayout">
            <summary>
            Overriden to create a new instance of the NStackLayout
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDockPanel.NDockPanelSchema">
            <summary>
            Schema associated with NDockPanel 
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSingleVisiblePanel">
            <summary>
            A panel in which only a single child element can be visible.
            The single visible panel can be instructed to size itself to the visible element,
            or to all contained elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSingleVisiblePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSingleVisiblePanel.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the measure of the visible element
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NSingleVisiblePanel.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to collapse all child elements that should not be visible 
            and to stretch the visible element to the size of this container.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NSingleVisiblePanel.NSingleVisiblePanelSchema">
            <summary>
            Schema associated with NSingleVisiblePanel
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSingleVisiblePanel.VisibleIndexProperty">
            <summary>
            Reference to the VisibleIndex property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NSingleVisiblePanel.SizeToVisibleProperty">
            <summary>
            Reference to the SizeToVisible property
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NSingleVisiblePanel.VisibleIndexChanged">
            <summary>
            Occurs when the VisibleIndex property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSingleVisiblePanel.VisibleIndex">
            <summary>
            Gets or sets the zero-based index of the child element that should be the one and only
            visible element in this panel.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSingleVisiblePanel.VisibleElement">
            <summary>
            Gets or sets the one and only visible element. 
            Returns null if the panel has no children.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NSingleVisiblePanel.SizeToVisible">
            <summary>
            Gets or sets whether the panel should be sized to the visible element or to all contained elements. 
            When set to true the invisible elements are collapsed.
            When set to false the invisible elements are hidden.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NChildWindow">
            <summary>
            A window, that can be hosted as a child of a native widget.
            The native widget that can host a child window is platform specific, but is by convention called "NXXXChildWindowHost", where XXX is a presentation layer abbreviation.
            Child Windows are used when you want to embed Nevron Open Vision content in the native widgets hierachy of a specific presentation layer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NChildWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NChildWindow.#ctor(Nevron.Nov.UI.NWidget)">
            <summary>
            Initializer constructor
            </summary>
            <param name="contentElement"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NChildWindow.SetHost(System.Object)">
            <summary>
            Embeds the child window in the specified native host object, 
            that is specific for each native UI environment.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NChildWindow.ActivateHostTopLevelWindow">
            <summary>
            Activates the native popup window that contains the child window host.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NChildWindow.NChildWindowSchema">
            <summary>
            Schema associated with NChildWindow
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTopLevelWindowCollection">
            <summary>
            A collection of top-level windows. Exposed by the TopLevelWindows property of each NWindow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTopLevelWindowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NTopLevelWindowCollection.NTopLevelWindowCollectionSchema">
            <summary>
            Schema associated with NTopLevelWindowCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NTooltipWindow">
            <summary>
            An top-level window, that is by default displayed without a title bar.
            A tooltip window is a temporary window that is created for a tooltip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltipWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NTooltipWindow.#ctor(Nevron.Nov.UI.NWidget)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NTooltipWindow.NTooltipWindowSchema">
            <summary>
            Schema associated with NPopup
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NWindowCollection">
            <summary>
            A collection of windows. Exposed by the Windows property of the NDesktop element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NWindowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NWindowCollection.NWindowCollectionSchema">
            <summary>
            Schema associated with NWindowCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCommand">
            <summary>
            Serves for the classification of command actions that can be executed in response to shortcut key combinations,
            and provides the alternative visual command sources, with the ability to link themselves to command actions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.ExecuteCommandEvent">
            <summary>
            A bubbling event that bubbles up the target ancestors chain and invokes the command action associated with the event command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.UpdateCommandSourceEvent">
            <summary>
            A bubbling event that bubbles up the NCommandSource ancestors chain and updates the command source associated with the event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.QueryCommandTargetEvent">
            <summary>
            A bubbling event that bubbles up the NCommandSource ancestors chain and results in command target element for Execute and UpdateSource events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCommand.Create(System.Type,System.String,System.String)">
            <summary>
            Creates a DOM command with the specified parameters.
            </summary>
            <param name="ownerType"></param>
            <param name="name"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommand.Create(System.Type,System.String,System.String,Nevron.Nov.UI.NShortcut)">
            <summary>
            Creates a DOM command with the specified parameters. 
            </summary>
            <param name="ownerType">type which owns the command</param>
            <param name="name">command name</param>
            <param name="text"></param> 
            <param name="shortcut"></param> 
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommand.GetByName(System.String)">
            <summary>
            Gets the command associated with the specified command name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NCommand.GetById(System.Int32)">
            <summary>
            Gets the command associated with the specified id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.EmptyParameter">
            <summary>
            The EmptyParameter object. Passed to execute command events when no parameter is expected.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.UndoCommand">
            <summary>
            Predefined Undo Command
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCommand.RedoCommand">
            <summary>
            Predefined Redo Command
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommand.Id">
            <summary>
            Gets the command Id
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommand.Name">
            <summary>
            Gets the full name of the command
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommand.Shortcut">
            <summary>
            Gets or sets the command shortcut
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NCommand.Text">
            <summary>
            Gets the textual representation of the command
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInputCharEventData">
            <summary>
            The NCharEventData class, provides information about an input char event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInputCharEventData.#ctor(System.Char)">
            <summary>
            Creates a new input chart event data, for an input string with one character.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInputCharEventData.#ctor(System.Int32,System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="charIndex"></param>
            <param name="inputString"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NInputCharEventData.Char">
            <summary>
            Gets the Unicode character associated with this event
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputCharEventData.CharIndex">
            <summary>
            Gets the index of the character in the input string.
            Typically the input string is just one charecter in length, so this often defaults to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputCharEventData.InputString">
            <summary>
            Gets the input string to which this character belongs.
            Typically the input string is just one charecter in length.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragEventData">
            <summary>
            The NDragEventData class provides information about drag-drop events
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragEventData.#ctor(Nevron.Nov.UI.NDataObject,Nevron.Nov.UI.ENDragDropEffects,Nevron.Nov.UI.ENDragDropEffects,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="data"></param>
            <param name="allowedEffect"></param>
            <param name="effect"></param>
            <param name="screenPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragEventData.#ctor(Nevron.Nov.UI.NDragEventData)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventData.DataObject">
            <summary>
            Specifies the DataObject that contains the data associated with this event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventData.AllowedEffect">
            <summary>
            Gets which drag-and-drop operations are allowed by the drag and drop source, that started the drag and drop operation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventData.Effect">
            <summary>
            Gets or sets the effect that a drag and drop operaiton will have, if dropped on the current source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragEventData.ScreenPosition">
            <summary>
            Gets the position of the mouse in the screen coordinate system
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NKeyEventData">
            <summary>
            The NKeyEventData class, provides information about KeyUp and KeyDown events
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyEventData.#ctor(Nevron.Nov.UI.NKey,Nevron.Nov.UI.ENKeyState)">
            <summary>
            Initializer constructor
            </summary>
            <param name="key"></param>
            <param name="state"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyEventData.Key">
            <summary>
            Gets the keyboard key, which was pressed or released
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyEventData.State">
            <summary>
            Gets the keyboard key state
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseEventData">
            <summary>
            The data associated with a window peer mouse event
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouseEventData.#ctor(Nevron.Nov.UI.ENMouseButtons,Nevron.Nov.UI.ENMouseButtonState,System.Int32,System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="button"></param>
            <param name="state"></param>
            <param name="clicks"></param>
            <param name="delta"></param>
            <param name="screenPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMouseEventData.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="screenPos"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMouseEventData.#ctor(Nevron.Nov.UI.NMouseEventData)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.Button">
            <summary>
            Gets which mouse button was pressed or released
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.State">
            <summary>
            Gets the state of the pressed or released mouse button
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated. 
            A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.ScreenPosition">
            <summary>
            Gets the position of the mouse in the screen coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouseEventData.ButtonEvent">
            <summary>
            Gets a known mouse button event for this mouse event data
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NInputCharEventArgs">
            <summary>
            The event arguments associated with NKeyboard.InputCharEvent event
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInputCharEventArgs.Char">
            <summary>
            Gets the character
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragActionEventArgs">
            <summary>
            The event arguments associated with NDragDrop.DragOverEvent and NDragDrop.DragDropEvent events (i.e. when a data object is moved over or dropped on a drag drop target).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragActionEventArgs.Effect">
            <summary>
            Specifies the target drop effect in a drag-and-drop operation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NFocusChangeEventArgs">
            <summary>
            Event arguments, dispatched as notifications for Keyboard Focus changes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFocusChangeEventArgs.NewTarget">
            <summary>
            Gets the new focus target
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NFocusChangeEventArgs.OldTarget">
            <summary>
            Gets the old focus target
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NKeyEventArgs">
            <summary>
            The event arguments associated with NKeyboard.KeyDownEvent and NKeyboard.KeyUpEvent events (i.e. when a keyboard key is pressed or released).
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyEventArgs.Key">
            <summary>
            Gets the keyboard key, which was pressed or released
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyEventArgs.State">
            <summary>
            Gets the keyboard key state
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouseCaptureChangeEventArgs">
            <summary>
            The event arguments associated with NMouse.GotCaptureEvent, NMouse.CaptureInEvent, NMouse.CaptureOutEvent and NMouse.LostCaptureEvent events.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NChildOfNodeFilter`1">
            <summary>
            Filters nodes, which are child nodes of the specified node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NChildOfNodeFilter`1.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChildOfNodeFilter`1.Filter(`0)">
            <summary>
            Overriden to return true if the specified object is a node, which is an instance of the specified node
            </summary>
            <param name="node">object to filter</param>
            <returns>true if the specified meets the filter criteria, otherwise false</returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NVisualTreeHelpers">
            <summary>
            Implements helpers methods for working with the visual tree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetOwnerVisual(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the visual to which the specified node belongs. 
            If node is a visual - returns the node casted as NVisual.
            Otherwise returns the first ancestor that is a NVisual.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetDisplayWindow(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the display window to which the node belongs.
            If node is a visual - returns its DisplayWindow.
            Otherwise returns the DisplayWindow of the first ancestor that is a NVisual.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.AccumulateDisplayChildren(Nevron.Nov.Dom.NNode,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Stock implementation of NVisual.AccumulateDisplayChildren method. 
            Adds the child nodes of a node, that implement the INVisual interface.
            </summary>
            <param name="node"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetHatchAnchor(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the node that serves as hatch anchor surface for the specified display node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetShadowAnchor(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the node that serves as shadow anchor surface for the specified display node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetTransform(Nevron.Nov.Dom.NVisual)">
            <summary>
            Gets the transformation of the visual.
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.GetInvertTransform(Nevron.Nov.Dom.NVisual)">
            <summary>
            Gets the inverted transformation of the visual.
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.TryLocalToScreen(Nevron.Nov.Dom.NNode,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to transform a point in local coordinates to screen coordinates
            </summary>
            <param name="node"></param>
            <param name="local"></param>
            <param name="screen"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.TryScreenToLocal(Nevron.Nov.Dom.NNode,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to transform a point in screen coordinates to local coordinates for the specified node
            </summary>
            <param name="node"></param>
            <param name="screen"></param>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual})">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual},Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <param name="clipInRoot">the initial clip region (in root coordinates). Can be null.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual})">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestTopMostByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual},Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <param name="clipInRoot">the initial clip region (in root coordinates). Can be null.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual})">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByPoint(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual},Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="pointInRoot">point in visualRoot coordinates</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <param name="clipInRoot">the initial clip region (in root coordinates). Can be null.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual})">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NVisualTreeHelpers.HitTestAllByRegion(Nevron.Nov.Dom.NVisual,Nevron.Nov.Graphics.NRegion,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual},Nevron.Nov.Graphics.NRegion)">
            <summary>
            Hit tests the top most visual that resides in the specified visual root.
            </summary>
            <param name="visualRoot">visual root to hit test</param>
            <param name="regionInRoot">path in visualRoot coordinates with which to hit test</param>
            <param name="filter">filter for the visuals that need to be hit tested.</param>
            <param name="clipInRoot">the initial clip region (in root coordinates). Can be null.</param>
            <returns>the top most hit</returns>
        </member>
        <member name="T:Nevron.Nov.UI.NInteractor">
            <summary>
            Represents a collection of tools that input targets can use to manage the user interaction on their behalf.
            </summary>
            <remarks>
            The interactor is responsible to properly delegate the event processing to the tools, which it contains.
            <para>
            Of all tools currently contained by the interactor only one can be active at a time. 
            The currently active tool can be obtained from the ActiveTool property. 
            The active tool is the first tool to receive a chance to process the events delegated to it by the interactor.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseWheel(Nevron.Nov.UI.NMouseWheelEventArgs)">
            <summary>
            Handler for the NMouse.WheelEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseEnter(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.EnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseLeave(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Handler for the NMouse.LeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnGotMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.GotCaptureEvent events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseCaptureIn(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureInEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnMouseCaptureOut(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.CaptureOutEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Handler for the NMouse.LostCaptureEvent event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyDownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnKeyUp(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Handler for the NKeyboard.KeyUpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Handler for the NKeyboard.InputCharEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Handler for the NKeyboard.LostFocus event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOverEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Handler for the NDragDrop.DragDropEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragEnter(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragEnterEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnDragLeave(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragLeaveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.EnableTool(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Enables only the tools with the specified schema. Disables all other.
            </summary>
            <remarks>
            This operation only enables or disables tools are children of the interactor.
            </remarks>
            <param name="toolSchema"></param>
            <param name="skipAmbient">whether tools whose Ambient property equals true are skipped from the operation</param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.EnableAllTools(System.Boolean,System.Boolean)">
            <summary>
            Enables or disables all tools, depending on the value of the enable parameter.
            </summary>
            <remarks>
            This operation only enables or disables tools are children of the interactor.
            </remarks>
            <param name="enable"></param>
            <param name="skipAmbient">whether tools whose Ambient property equals true are skipped from the operation</param>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.GetTool(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first child tool with the specified schema
            </summary>
            <param name="toolSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NInteractor.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed. Raises the ParentChangedEvet
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NInteractor.NInteractorSchema">
            <summary>
            Schema associated with NInteractor
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInteractor.ToolActivatedEvent">
            <summary>
            Tool activated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInteractor.ToolDeactivatedEvent">
            <summary>
            Tool deactivated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NInteractor.ToolAbortedEvent">
            <summary>
            Tool aborted
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInteractor.ActiveTool">
            <summary>
            Gets the active tool within the group
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NInteractor.OwnerInputTarget">
            <summary>
            Gets the input target to which this interactor belongs.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDesktop">
            <summary>
            Represents the Desktop of a specific operating system or integration environment.
            An instance of this class can be obtained from the NApplication.Desktop property.
            The Desktop is the root element of the windows-widgets hierarchy and contains the root level windows of the application.
            </summary>
            <remarks>
            <para>
            An instance of this element is automatically created when the NApplication is installed for a particular platform.
            For Desktop environments (such as Windows, MAC and Linux), the Desktop is associated with the Operating System Primary Screen.
            For RIA environments (such as Silverlight), the Desktop is associated with the Browser Plugin.
            </para>
            <para>
            To be functional, the windows that your applicaiton creates, need to descendants of the NApplication.Desktop element.
            The Desktop itself, holds a collection windows (child and top-level) that are considered to be the Root Windows for your applications.
            The NApplication static class provides helper functions for creating child and top-level root windows.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NDesktop.GetNearestWorkArea(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Given a screen rectangle, returns the working area of the screen that has the largest intersection with it (all measures in DIPs)
            </summary>
            <param name="screenRect"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.NDesktopSchema">
            <summary>
            Schema associated with NDesktop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.WindowsChild">
            <summary>
            Reference to the Windows child
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.ScreenResolutionProperty">
            <summary>
            Reference to the ScreenResolution property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.ScreenWidthProperty">
            <summary>
            Reference to the ScreenWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.ScreenHeightProperty">
            <summary>
            Reference to the ScreenHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.WorkAreaXProperty">
            <summary>
            Reference to the WorkAreaX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.WorkAreaYProperty">
            <summary>
            Reference to the WorkAreaY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.WorkAreaWidthProperty">
            <summary>
            Reference to the WorkAreaWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDesktop.WorkAreaHeightProperty">
            <summary>
            Reference to the WorkAreaHeight property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.Windows">
            <summary>
            Gets the collection of root level application windows.
            These can be both child and popup windows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.ScreenResolution">
            <summary>
            Gets the screen resolution (in Dot per Inch)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.ScreenWidth">
            <summary>
            Gets the primary screen width
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.ScreenHeight">
            <summary>
            Gets the primary screen height
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.WorkAreaX">
            <summary>
            Gets the primary working area X coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.WorkAreaY">
            <summary>
            Gets the primary working area Y coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.WorkAreaWidth">
            <summary>
            Gets the primary working area Width
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.WorkAreaHeight">
            <summary>
            Gets the primary working area Height
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.WorkArea">
            <summary>
            Gets the primary work area
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.DIP2PX">
            <summary>
            Gets the current DIP to Pixel conversion factor for this desktop
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDesktop.PX2DIP">
            <summary>
            Gets the current Pixel to DIP conversion factor for this desktop
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NArrayIterator`1">
            <summary>
            Represents a forward iterator, that can be initialized to iterate through an entire array or only a range of the it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayIterator`1.#ctor(`0[])">
            <summary>
            Creates an iterator that iterates through the entire array
            </summary>
            <param name="items">items to enumerate</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayIterator`1.#ctor(`0[],System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from 0.
            </summary>
            <param name="items">items to enumerate</param>
            <param name="count">count of items to enumerate, starting from zero</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayIterator`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Creates an iterator that iterates only through a fixed count of array items, starting from the specified index.
            </summary>
            <param name="items"></param>
            <param name="start">start enumeration index</param>
            <param name="count">count of items to enumerate, starting from start</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayIterator`1.MoveNext">
            <summary>
            Advances the iterator to the next child node in the container, which satifies the specified filter
            </summary>
            <returns>true if advance succeeded, false if the end of the container was reached</returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayIterator`1.Reset">
            <summary>
            Resets the iterator (positions it before the first child node in the container)
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NArrayIterator`1.Current">
            <summary>
            Gets the current item
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomArray`1">
            <summary>
            An implementation of the INArrayMultiSet interface, that also implements the INDeeplyCloneable interface, which makes it a DOM compliant data type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.#ctor(`0[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.#ctor(Nevron.Nov.Dom.NDomArray{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The instance to copy from.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates a deep clone of this object.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.Contains(`0)">
            <summary>
            Queries whether the specified item is contained in this object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.GetIterator">
            <summary>
            Gets an iterator that iterates throw the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.IndexOf(`0)">
            <summary>
            Gets the index at which an item appears for the first time.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index at which an item appears for the first time, starting from the specified index.
            Returns -1 if the item does not appear in the set.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.LastIndexOf(`0)">
            <summary>
            Gets the last index of the specified item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the last index of the specified item, starting from the specified index.
            </summary>
            <param name="item"></param>
            <param name="startFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes this DOM array.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes data to this DOM array.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.ToArray">
            <summary>
            Creates a new array that holds the items in this DOM array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.Add(Nevron.Nov.Dom.NDomArray{`0},`0)">
            <summary>
            Adds a new item to the specified array.
            </summary>
            <param name="array">array to which to add the item</param>
            <param name="item">item to add</param>
            <returns>the new array</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomArray`1.RemoveAt(Nevron.Nov.Dom.NDomArray{`0},System.Int32)">
            <summary>
            Removes an item from the specified array index.
            </summary>
            <param name="array">array from which to remove the item at index</param>
            <param name="index">index at which to remove the item</param>
            <returns>the new array</returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomArray`1.Count">
            <summary>
            Gets the count of items in the array
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomArray`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NChild">
            <summary>
            Represents a slot for a named child declared in the node schema of a container node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NChild.CreateOnDemandFlag">
            <summary>
            The create on demand flag
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.GetNullable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this child is nullable for the specified schema.
            By default Nullable is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetNullable(System.Boolean)">
            <summary>
            Sets whether this child is nullable for the owner schema.
            By default Nullable is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetNullable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this child is nullable for the specified schema.
            By default Nullable is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.GetSerializable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this child is serializable for the specified schema.
            By default Serializable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetSerializable(System.Boolean)">
            <summary>
            Sets whether this child is serializable for the owner schema.
            By default Serializable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetSerializable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this child is serializable for the specified schema.
            By default Serializable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.GetDeeplyCloneable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this child is deeply clonable for the specified schema.
            By default DeeplyClonable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetDeeplyCloneable(System.Boolean)">
            <summary>
            Sets whether this child is DeeplyCloneable for the owner schema.
            By default DeeplyCloneable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetDeeplyCloneable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this child is DeeplyCloneable for the specified schema.
            By default DeeplyCloneable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.GetRecordable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this child is recordable for the specified schema.
            By default Recordable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetRecordable(System.Boolean)">
            <summary>
            Sets whether this child is recordable for the owner schema.
            By default Recordable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetRecordable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this child is recordable for the specified schema.
            By default Recordable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.GetCreateOnDemand(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this child is created on demand for the specified schema.
            By default CreateOnDemand is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetCreateOnDemand(System.Boolean)">
            <summary>
            Sets whether this child is created on demand for the owner schema.
            By default CreateOnDemand is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NChild.SetCreateOnDemand(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this child is created on demand for the specified schema.
            By default CreateOnDemand is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NChild.OwnerSchema">
            <summary>
            Gets the schema, which declared this named child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChild.DomType">
            <summary>
            Gets the DOM type assicated with the child node instance
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChild.Name">
            <summary>
            Gets the name of the named child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChild.Id">
            <summary>
            Gets the id of the named child in its owner schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NChild.CreateChildDelegate">
            <summary>
            Gets or sets the delagate that is called when the child node needs to be created on demand.
            If the value of this property is null, by default the child will create a new instance of the child DomType property.
            By default set to null;
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NClipboard">
            <summary>
            Manages the clipboard operations inside Nevron Open Vision.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.SetDataObject(Nevron.Nov.UI.NDataObject)">
            <summary>
            Sets the specified data object to the clipbard.
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.GetDataObject">
            <summary>
            Gets the data object that is on the clipboard
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.SetData(Nevron.Nov.UI.NDataFormat,System.Object)">
            <summary>
            Sets a data object in the specified data format on the clipboard
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.GetData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Tries to get data in the specified format. 
            Returns null, if data in the specified format does not exists on the clipboard or its retrieval failed.
            Returns a format specific object instance in case the data was successfully retrived.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.ContainsData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Queries whether data is present in the specified format on the clipbard.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.SetText(System.String)">
            <summary>
            Sets the specified text string on the clipboard
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.GetText">
            <summary>
            Tries to get a string from the clipboard.
            Returns null, if data in Text format does not exists on the clipboard or its retrieval failed.
            Returns a text string in case the data was successfully retrived.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.ContainsText">
            <summary>
            Queries whether data is present in Text format on the clipbard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.SetRaster(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Sets the specified raster on the clipboard.
            </summary>
            <param name="raster"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.GetRaster">
            <summary>
            Tries to get a raster from the clipboard.
            Returns null, if data in raster format does not exists on the clipboard or its retrieval failed.
            Returns a raster in case the data was successfully retrived.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.ContainsRaster">
            <summary>
            Queries whether data is present in Raster format on the clipbard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.SetRTF(System.Byte[])">
            <summary>
            Sets the specified RTF on the clipboard
            </summary>
            <param name="rtf"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.GetRTF">
            <summary>
            Tries to get a RTF byte array from the clipboard.
            Returns null, if data in RTF format does not exists on the clipboard or its retrieval failed.
            Returns a RTF byte array in case the data was successfully retrived.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NClipboard.ContainsRTF">
            <summary>
            Queries whether data is present in RTF format on the clipbard.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NDragDrop">
            <summary>
            Manages the drag and drop operations inside Nevron Open Vision.
            Also serves as dispatcher of native window peers drag and drop events to the Nevron DOM.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.CanRequestDragDrop">
            <summary>
            Returns true if there is no other drag and drop initiation request current pending.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.RequestDragDrop(Nevron.Nov.UI.NDragDropSource,Nevron.Nov.UI.NDataObject)">
            <summary>
            Requests an asyncrhonous drag and drop operation, that starts at earliest application possibility.
            The DnD operation is associated with the associated with the specified drag drop source and data object.
            </summary>
            <param name="dragDropSource"></param>
            <param name="dataObject"></param>
            <return>true, if the drag and drop will attempt to start, false if another drag and drop request is waiting to be started.</return>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.IsDirectlyOver(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the IsDirectlyOverPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.IsOver(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the IsOverPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.IsDragDropActionEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a drag and drop action event (DragOverEvent, DragDropEvent).
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDrop.IsDragDropTargetEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a drag and drop target notification event (DragEnterEvent, DragLeaveEvent, DragInEvent, DragOutEvent)
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragEnterEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop object enters its bounds.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragInEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop object enters its bounds.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragOverEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop is moved over it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragDropEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop object was dropped inside it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragLeaveEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop object leaves its bounds.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDrop.DragOutEvent">
            <summary>
            The event which the drag over target raises, when a drag and drop object leaves its bounds.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NDragDropSource">
            <summary>
            Represents the source of data in a Drag-And-Drop operation, when the Drag-And-Drop is iniated by NOV.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDropSource.#ctor(Nevron.Nov.UI.ENDragDropEffects)">
            <summary>
            Initializes a new drag-drop source that allows the specified effects 
            </summary>
            <param name="allowedEffects"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDropSource.OnDragStarting">
            <summary>
            Raises the DragStarting event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDropSource.OnQueryDragAction(Nevron.Nov.UI.ENQueryDragActionReason,Nevron.Nov.UI.ENDragAction)">
            <summary>
            Raises the QueryDragAction event, by initializing the action with the specified suggested action.
            If the user did not alter the action as part of the QueryDragAction handling or did not handle the QueryDragAction event at all, 
            the suggested action is returned. Otherwise the Action set to the NQueryDragActionData dispatched with the event is returned.
            </summary>
            <param name="reason"></param>
            <param name="suggestedAction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NDragDropSource.OnDragEnded(Nevron.Nov.UI.ENDragDropEffects)">
            <summary>
            Raises the DragEnded event.
            </summary>
            <param name="finalEffect"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDropSource.NDragDropSourceSchema">
            <summary>
            Schema associated with NDragDropSource.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDropSource.DragStartingEvent">
            <summary>
            DragStarting event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDropSource.DragEndedEvent">
            <summary>
            DragEnded event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NDragDropSource.QueryDragActionEvent">
            <summary>
            QueryDragAction event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDragDropSource.DragStarting">
            <summary>
            Occurs when a drag a drop operation is about to be started with this source.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDragDropSource.QueryDragAction">
            <summary>
            Occurs during a drag a drop operation with this source, when there is an user activity reason 
            (mouse buttons press/release, keyboard modifies press/release, ESC pressed etc.), 
            that the source needs to interpret as DnD action - Drop, Continue or Cancel action.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NDragDropSource.DragEnded">
            <summary>
            Occurs when a drag a drop operation with this source has ended.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSource.AllowedEffects">
            <summary>
            Gets or sets the effects that the source supports. 
            It is only possible to set the allowed effects before you request a drag and drop with this source 
            (e.g. when the State property is equal to Ready)
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSource.DropOnMouseButtonsUp">
            <summary>
            Specifies the mouse buttons, that trigger Drop when released. 
            By default set to Left.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSource.DropOnMouseButtonsDown">
            <summary>
            Specifies the mouse buttons, that trigger Drop when pressed.
            By default set to All.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSource.State">
            <summary>
            Gets the state of this drag drop source
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NDragDropSource.DataObject">
            <summary>
            Gets the data object that is associated with this drag drop source.
            Only valid when this drag drop source, is requested for drag and drop, or is currently dragged and dropped.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NKeyboard">
            <summary>
            Manages the keyboard focus and operations related with the keyboard inside Nevron Open Vision.
            Also serves as dispatcher of native window peers keyboard events to the Nevron DOM.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.CanFocusWindowPeer(Nevron.Nov.UI.INInputNode)">
            <summary>
            Determines whether the specified target window peer can gain keyboard focus.
            This method should be called by all implementations of INInputTarget.CanFocus(),
            after target specific condition checks (such as Enabled, AllowFocus etc.)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.Focus(Nevron.Nov.UI.INInputNode)">
            <summary>
            Focuses the keyboard to the specified input target.
            This method should be called by all implementations of INInputTarget.Focus().
            Any subsequent keyboard events send to the DOM for processing will first be processed by the focus target.
            </summary>
            <param name="target"></param>
            <returns>returns true of the target has focus after the operation, otherwise returns false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.IsFocused(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the IsFocusedPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.IsFocusWithin(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the IsFocusWithinPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.IsKeyboardActionEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a keyboard action event (KeyDownEvent, KeyUpEvent, InputCharEvent).
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.IsKeyboardFocusEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a keyboard focus event (GotFocusEvent, LostFocusEvent, FocusInEvent, FocusOutEvent)
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.IsFocusedPropertyEx">
            <summary>
            The IsFocused Extended Property. 
            The value of this property is automatically set to true for the current focus target. 
            The value of this property is cleared from the previous focus target (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.IsFocusWithinPropertyEx">
            <summary>
            The IsFocusWithin Extended Property. 
            The value of this property is automatically set to true for the current focus target and its ancestors chain. 
            The value of this property is cleared from the previous focus target and its ancestors chain (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.GotFocusEvent">
            <summary>
            The Event associated with keyboard focus
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.FocusInEvent">
            <summary>
            The FocusIn event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.KeyDownEvent">
            <summary>
            The Event associated with Keyboard KeyDown
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.KeyUpEvent">
            <summary>
            The Event associated with Keyboard KeyUp
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.InputCharEvent">
            <summary>
            The Event associated with Char input
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.FocusOutEvent">
            <summary>
            The FocusOut event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKeyboard.LostFocusEvent">
            <summary>
            The Event associated with keyboard lost focus
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.FocusTarget">
            <summary>
            Gets the currently focused input target
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.ShiftPressed">
            <summary>
            Gets whether the SHIFT key (in any keyboard location) is currently pressed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.ShiftPressedAlone">
            <summary>
            Gets whether the SHIFT key (in any keyboard location) is currently the only pressed modifier.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.AltPressed">
            <summary>
            Gets whether the ALT key (in any keyboard location) is currently pressed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.AltPressedAlone">
            <summary>
            Gets whether the ALT key (in any keyboard location) is currently the only pressed modifier.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.CtrlPressed">
            <summary>
            Gets whether the Ctrl key (in any keyboard location) is currently pressed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.CtrlPressedAlone">
            <summary>
            Gets whether the Ctrl key (in any keyboard location) is currently the only pressed modifier.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.CommandPressed">
            <summary>
            Gets whether the Command key (Mac specific) is currently pressed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.CommandPressedAlone">
            <summary>
            Gets whether the Command key (Mac specific) is currently the only pressed modifier.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.DefaultCommandKey">
            <summary>
            Gets the deault command key. 
            Under under Mac is the Command key, while on other OSs this is the Ctrl key.
            </summary>
            <value>The default command key.</value>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.DefaultCommandPressed">
            <summary>
            Gets whether the DefaultCommand is currently pressed
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.DefaultCommandPressedAlone">
            <summary>
            Gets whether the DefaultCommand key is currently the only pressed modifier.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NKeyboard.PressedModifiers">
            <summary>
            Gets the currently pressed modifiers
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NKeyboard.INFocusedChangedCallback">
            <summary>
            A callback interface the that the NKeyboard.FocusedPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.INFocusedChangedCallback.OnKeyboardFocusedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NKeyboard.INFocusWithinChangedCallback">
            <summary>
            A callback interface the that the NKeyboard.FocusWithinPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKeyboard.INFocusWithinChangedCallback.OnKeyboardFocusWithinChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NKey">
            <summary>
            Represents a keyboard key (e.g. a physical key on the keyboard)
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.#ctor(Nevron.Nov.UI.ENKeyCode,Nevron.Nov.UI.ENKeyLocation)">
            <summary>
            Makes a new NKey that is associated with the specified key code and the specified key location.
            </summary>
            <param name="code"></param>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.#ctor(Nevron.Nov.UI.ENKeyCode)">
            <summary>
            Makes a new NKey that is associated with the specified key code and the Standard key location.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.IsFunctionKey">
            <summary>
            Determines whether the keyboard key is one of the function keys (e.g. F1 through F24)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.IsDigitKey">
            <summary>
            Determines whether the keyboard key is one of the digits keys (e.g. D0 through D9)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.IsLetterKey">
            <summary>
            Determines whether the keyboard key is one of the latin letter keys (e.g. A through Z)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.IsModifierKey">
            <summary>
            Determines whether the keyboard key is one of the function keys (e.g. Control, Alt or Shift)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.IsNumPadKey">
            <summary>
            Determines whether the keyboard key is located on the numeric pad
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NKey.Code">
            <summary>
            The keyboard key code
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NKey.Location">
            <summary>
            The keyboard key location 
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.op_Equality(Nevron.Nov.UI.NKey,Nevron.Nov.UI.NKey)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NKey.op_Inequality(Nevron.Nov.UI.NKey,Nevron.Nov.UI.NKey)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NShortcut">
            <summary>
            Represents a shortcut key, that is a pair of a keyboard key and modifiers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.#ctor(Nevron.Nov.UI.NKey)">
            <summary>
            Creates a shortcut for a key without modifiers
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.#ctor(Nevron.Nov.UI.ENKeyCode)">
            <summary>
            Creates a shortcut for a key without modifiers
            </summary>
            <param name="keyCode"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.#ctor(Nevron.Nov.UI.NKey,Nevron.Nov.UI.ENModifierKeys)">
            <summary>
            Creates a shortcut with the specified parameters. Throws an exception if the parameters are not a valid shortcut.
            </summary>
            <param name="key"></param>
            <param name="modifiers"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.#ctor(Nevron.Nov.UI.ENKeyCode,Nevron.Nov.UI.ENModifierKeys)">
            <summary>
            Creates a shortcut with the specified parameters. Throws an exception if the parameters are not a valid shortcut.
            </summary>
            <param name="keyCode"></param>
            <param name="modifiers"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.#ctor(Nevron.Nov.UI.NKey,Nevron.Nov.UI.ENModifierKeys,System.Boolean)">
            <summary>
            Creates a shortcut with the specified parameters. Throws an exception if the parameters are not a valid shortcut and the validate flag is true.
            </summary>
            <param name="key"></param>
            <param name="modifiers"></param>
            <param name="validate"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to the specified other object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.GetHashCode">
            <summary>
            Gets obejct hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.ToString">
            <summary>
            Gets a string representing this shortcut.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.Match(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Matches the shortcut to the specified key event arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NShortcut.Key">
            <summary>
            The keyboard key associated with the shortcut
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NShortcut.Modifiers">
            <summary>
            The modifiers associated with this shortcut
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NShortcut.None">
            <summary>
            The none shortcut.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.op_Equality(Nevron.Nov.UI.NShortcut,Nevron.Nov.UI.NShortcut)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NShortcut.op_Inequality(Nevron.Nov.UI.NShortcut,Nevron.Nov.UI.NShortcut)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NMouse">
            <summary>
            Manages the mouse capture and operations related with the mouse inside Nevron Open Vision. 
            Also serves as dispatcher of native window peers mouse events to the Nevron DOM.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.CanCaptureWindowPeer(Nevron.Nov.UI.INInputNode)">
            <summary>
            Determines whether the specified target window peer can capture the mouse.
            This method should be called by all implementations of INInputTarget.CanCapture(),
            after target specific condition checks (such as Enabled, AllowCapture etc.)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.Capture(Nevron.Nov.UI.INInputNode)">
            <summary>
            Captures the mouse to the specified input target.
            This method should be called by all implementations of INInputTarget.CaptureMouse().
            Any subsequent mouse events send to the DOM for processing will first be processed by the capture target.
            </summary>
            <param name="target"></param>
            <returns>returns true of the target has mouse capture after the operation, otherwise returns false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.ReleaseCapture(Nevron.Nov.UI.INInputNode)">
            <summary>
            Releases the mouse capture, if the specified input target holds the capture.
            Any subsequent mouse events send to the DOM for processing 
            will first be processed by the top-most input target below the mouse cursor.
            </summary>
            <param name="target"></param>
            <returns>returns true of the target does not have mouse capture after the operation, otherwise returns false</returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.CanRequestCursor">
            <summary>
            Determines whether a cursor can be requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.RequestCursor(Nevron.Nov.UI.INInputNode,Nevron.Nov.UI.NCursor)">
            <summary>
            Requests a cursor for the specified target
            </summary>
            <param name="target"></param>
            <param name="cursor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.CanRequestTooltip">
            <summary>
            Determines whether a tooltip can be requested
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.RequestTooltip(Nevron.Nov.UI.INInputNode,Nevron.Nov.UI.NTooltip)">
            <summary>
            Requests a tooltip for the specified target
            </summary>
            <param name="target"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsOver(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the OverPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsDirectlyOver(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the DirectlyOverPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsCaptured(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the CapturedPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsCaptureWithin(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the value of the CaptureWithinPropertyEx extended property for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsMouseActionEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a mouse action event (Move, Down, Up, Wheel).
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsMouseCaptureEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a mouse capture event (GotCapture, LostCapture, CaptureIn, CaptureOut)
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.IsMouseTargetEvent(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether the specified event is a mouse target notification event (EnterEvent, LeaveEvent, InEvent, OutEvent)
            </summary>
            <param name="eventInstance"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.IsCapturedPropertyEx">
            <summary>
            Gets the IsCaptured Extended Property. 
            The value of this property is automatically set to true for the current mouse capture target. 
            The value of this property is cleared from the previous mouse capture target (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.IsCaptureWithinPropertyEx">
            <summary>
            Gets the IsCaptureWithin Extended Property. 
            The value of this property is automatically set to true for the current mouse capture target and its ancestors chain. 
            The value of this property is cleared from the previous mouse capture target and its ancestors chain (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.IsDirectlyOverPropertyEx">
            <summary>
            Gets the IsDirectlyOver Extended Property. 
            The value of this property is automatically set to true for the current mouse over target. 
            The value of this property is cleared from the previous mouse over target (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.IsOverPropertyEx">
            <summary>
            Gets the IsOver Extended Property. 
            The value of this property is automatically set to true for the current mouse over target and its ancestors chain.
            The value of this property is cleared from the previous mouse capture target and its ancestors chain (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.EnterEvent">
            <summary>
            The event which is raised when the mouse enters a node
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.InEvent">
            <summary>
            The In event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.OutEvent">
            <summary>
            The Out event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.LeaveEvent">
            <summary>
            The Event associated with Mouse Leave
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.GotCaptureEvent">
            <summary>
            The Event associated with Mouse GotCapture
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.CaptureInEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.CaptureOutEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.LostCaptureEvent">
            <summary>
            The Event associated with Mouse LostCapture
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.MoveEvent">
            <summary>
            The event which is raised when the mouse moves over a node
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.DownEvent">
            <summary>
            The event which is raised when the mouse is down in a node
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.UpEvent">
            <summary>
            The event which is raised when the mouse is up in a node
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NMouse.WheelEvent">
            <summary>
            The event which is raised when the mouse wheel is moved in a node
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouse.ScreenPosition">
            <summary>
            Gets the screen position of the mouse
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NMouse.CaptureTarget">
            <summary>
            Gets the input target, which currently captured the mouse
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NMouse.INCapturedChangedCallback">
            <summary>
            A callback interface the that the NMouse.CapturedPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.INCapturedChangedCallback.OnMouseCapturedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NMouse.INCaptureWithinChangedCallback">
            <summary>
            A callback interface the that the NMouse.CaptureWithinPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.INCaptureWithinChangedCallback.OnMouseCaptureWithinChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NMouse.INDirectlyOverChangedCallback">
            <summary>
            A callback interface the that the NMouse.DirectlyOverPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.INDirectlyOverChangedCallback.OnMouseDirectlyOverChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.UI.NMouse.INOverChangedCallback">
            <summary>
            A callback interface the that the NMouse.OverPropertyEx tries to call whenever it changes for a node instance
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NMouse.INOverChangedCallback.OnMouseOverChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColorSpace">
            <summary>
            Represents a color space defined by 3 or 4 components.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.#ctor(System.Int32,System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="ccount">The number of components in this color space.</param>
            <param name="name">The name of this color space.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.VerifyValue(Nevron.Nov.Graphics.NColorValueF)">
            <summary>
            Verifies that the specified color value is valid for this color space.
            </summary>
            <param name="value">The color value to check for validity.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.GetCCount">
            <summary>
            Gets the number of components in this color space.
            </summary>
            <returns>The number of components in this color space.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.GetName">
            <summary>
            Gets the name of this color space.
            </summary>
            <returns>The name of this color space.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.ToRGB(Nevron.Nov.Graphics.NColorValueF)">
            <summary>
            Converts a value from this color space to RGB color space.
            </summary>
            <param name="color">The color value to convert.</param>
            <returns>The resulting RGB color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.FromRGB(Nevron.Nov.Graphics.NColorValue3F)">
            <summary>
            Converts a value from RGB color space to this color space.
            </summary>
            <param name="color">The RGB color value to convert.</param>
            <returns>The resulting color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.GetCName(System.Int32)">
            <summary>
            Gets the name of the specified component.
            </summary>
            <param name="component">The index of the component whose name to get.</param>
            <returns>The name of the color component at the specified index.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.GetCMin(System.Int32)">
            <summary>
            Gets the min value for the specified component.
            </summary>
            <param name="component">The index of the component whose min value to get.</param>
            <returns>The min value  of the color component at the specified index.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.GetCMax(System.Int32)">
            <summary>
            Gets the max value for the specified component.
            </summary>
            <param name="component">The index of the component whose max value to get.</param>
            <returns>The max value of the color component at the specified index.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColorSpace.Parse(System.String)">
            <summary>
            Creates a color space from the given string.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The color space corresponding to the given string.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.RGB">
            <summary>
            The Red-Green-Blue color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.HSB">
            <summary>
            The Hue-Saturation-Brightness(Value) color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.HSL">
            <summary>
            The Hue-Saturation-Luminance color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.CMYK">
            <summary>
            The Cyan-Magenta-Yellow-Black color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.XYZ">
            <summary>
            The CIE XYZ color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.LAB">
            <summary>
            The CIE Lab color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.YUV">
            <summary>
            The YUV color space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColorSpace.YCC">
            <summary>
            The YCC color space.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphicsPathFigure">
            <summary>
            Represents the information for a figure in a graphics path
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPathFigure.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="closed"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathFigure.Start">
            <summary>
            The index of the start point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathFigure.End">
            <summary>
            The index of the end point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPathFigure.Closed">
            <summary>
            Whether the figure is closed or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPathFigure.Count">
            <summary>
            Gets the count of points in this figure
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENDashStyle">
            <summary>
            Defines the supported line dashing patterns.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDashStyle.Custom">
            <summary>
            Specifies that a user-defined dash pattern will be used.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENBrushType">
            <summary>
            Enumerates brush types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBrushType.Solid">
            <summary>
            Specifies a solid color brush.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBrushType.LinearGradient">
            <summary>
            Specifies a linear gradient brush.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBrushType.RadialGradient">
            <summary>
            Specifies a radial gradient brush.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBrushType.Texture">
            <summary>
            Specifies a texture gradient brush.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENTileMode">
            <summary>
            Enumerates the tiling modes for an image brush.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTileMode.Tile">
            <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTileMode.FlipX">
            <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            Alternate columns of tiles are flipped horizontally.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTileMode.FlipY">
            <summary>
            The base tile is drawn and the remaining area is filled by repeating the base tile.
            Alternate rows of tiles are flipped vertically.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTileMode.FlipXY">
            <summary>
            The combination of FlipX and FlipY.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENTileMode.None">
            <summary>
            The base tile is drawn but not repeated. The remaining area is not filled.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENBaseLine">
            <summary>
            Specified the text base line (normal, superscript or subscript)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBaseLine.Normal">
            <summary>
            Normal text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBaseLine.Superscript">
            <summary>
            Superscript text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENBaseLine.Subscript">
            <summary>
            Subscript text
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphicsObject">
            <summary>
            Serves as base class for graphics objects such as pen, brush etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.#ctor(Nevron.Nov.Graphics.NGraphicsObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.DeepClone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.Seal">
            <summary>
            Seals this graphics object. Further attempts to modify the object throw an exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.VerifyNotSealed">
            <summary>
            Verifies that the object is not sealed. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.NewSealedException">
            <summary>
            Throwes the sealed exception
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.CanSeal">
            <summary>
            Determines whether this object can be sealed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsObject.OnSealed">
            <summary>
            Called when the object is sealed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsObject.IsSealed">
            <summary>
            Gets whether this graphics object is sealed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NImageEncoder">
            <summary>
            Abstract base class for image encoders (writers).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NImageEncoder.Encode(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Encodes the specified raster image.
            </summary>
            <remarks>
            The function throws an exception if it fails to encode the raster.
            </remarks>
            <param name="raster">The raster image to encode.</param>
            <returns>
            A byte array containing the encoded image.
            </returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPixelFormat">
            <summary>
            Represents a pixel format.
            </summary>
            <remarks>
            A pixel format describes the order and size of color channels in a raster image.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPixelFormat.ToString">
            <summary>
            Gets the string representation of this pixel format.
            </summary>
            <returns>The string that represents this pixel format.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.Format">
            <summary>
            Enumeration value that identifies the pixel format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.BitsPerPixel">
            <summary>
            The number of bits used to store the color information for a single pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.HasAlphaChannel">
            <summary>
            Indicates whether this pixel format has an Alpha (transparency) channel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPixelFormat.GetPixelFormat(Nevron.Nov.Graphics.ENPixelFormat)">
            <summary>
            Gets a pixel format object for the speciifed pixel format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.BGR24">
            <summary>
            BGR in register, RGB in memory (little endian), 8 bits per channel, 24 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.RGB24">
            <summary>
            RGB in register, BGR in memory (little endian), 8 bits per channel, 24 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.BGRA32">
            <summary>
            BGRA in register, ARGB in memory (little endian), 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.XRGB32">
            <summary>
            XRGB in register, BGR in memory (little endian), 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.ARGB32">
            <summary>
            ARGB in register, BGRA in memory (little endian), 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.ABGR32">
            <summary>
            ABGR in register, RGBA in memory (little endian), 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.pARGB32">
            <summary>
            ARGB in register, BGRA in memory (little endian), premultiplied Alpha, 8 bits per channel, 32 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.BGR48">
            <summary>
            BGR in register, RGB in memory (little endian), 16 bits per channel, 48 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.BGRA64">
            <summary>
            BGRA in register, ARGB in memory (little endian), 16 bits per channel, 64 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.ABGR64">
            <summary>
            ABGR in register, RGBA in memory (little endian), 16 bits per channel, 64 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.A8">
            <summary>
            Alpha channel only, 8 bits per pixel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.Gray8">
            <summary>
            Gray channel only, 8 bits per pixel - this pixel format is used to represent grayscale images.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPixelFormat.GrayA16">
            <summary>
            Gray and alpha channels, 8 bits per channel - this pixel format is used to represent grayscale images.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NReferenceEqualsFilter`1">
            <summary>
            Filters objects, which are equal by reference with the specified object. Uses the Object.ReferenceEquals method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReferenceEqualsFilter`1.#ctor(`0)">
            <summary>
            Creates a new equals filter that checks the items for equality with the specified other item
            </summary>
            <param name="other">other item to check with</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NReferenceEqualsFilter`1.Filter(`0)">
            <summary>
            Returns true, if the item is equal to the specified item.
            This operation uses the item Object.ReferenceEquals method.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NReferenceEqualsFilter`1.Other">
            <summary>
            Gets or sets the item to check with
            </summary>
        </member>
        <member name="T:Nevron.Nov.NTrace">
            <summary>
            A helper class for tracing Nevron Open Vision.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTrace.WriteLine(System.String)">
            <summary>
            Writes a message to the trace output.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.NTrace.WriteException(System.String,System.Exception)">
            <summary>
            Writes an exception to the trace.
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Nevron.Nov.IO.NBitConverter">
            <summary>
            Static class that converts base data types to an array of bytes,
            and an array of bytes to base data types and also provides 
            various routines for byte array manipulations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.Int16)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.Int16)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.UInt16)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.UInt16)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.Int32)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.Int32)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.UInt32)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.UInt32)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.Int64)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.Int64)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.UInt64)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.UInt64)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt16BE(System.Byte[],System.Int32)">
            <summary>
            Converts 2 bytes from the given big endian byte array, starting from the specified index,
            to a 16-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt16LE(System.Byte[],System.Int32)">
            <summary>
            Converts 2 bytes from the given little endian byte array, starting from the specified index,
            to a 16-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt16BE(System.Byte[],System.Int32)">
            <summary>
            Converts 2 bytes from the given Bid Endian byte array, starting from the specified index,
            to a 16-bit unsigned integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt16LE(System.Byte[],System.Int32)">
            <summary>
            Converts 2 bytes from the given little endian byte array, starting from the specified index,
            to a 16-bit unsigned integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt32BE(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes from the given big endian byte array, starting from the specified index,
            to a 32-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt32LE(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes from the given little endian byte array, starting from the specified index,
            to a 32-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt32BE(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes from the given big endian byte array, starting from the specified index,
            to a 32-bit unsigned integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt32LE(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes from the given little endian byte array, starting from the specified index,
            to a 32-bit unsignet integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt64BE(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes from the given big endian byte array, starting from the specified index,
            to a 64-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToInt64LE(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes from the given little endian byte array, starting from the specified index,
            to a 64-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt64BE(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes from the given big endian byte array, starting from the specified index,
            to a 64-bit unsigned integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToUInt64LE(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes from the given little endian byte array, starting from the specified index,
            to a 64-bit integer.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.Single)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.Single)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesBE(System.Double)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetBytesLE(System.Double)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToSingleBE(System.Byte[],System.Int32)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToSingleLE(System.Byte[],System.Int32)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToDoubleBE(System.Byte[],System.Int32)">
            <summary>
            Gets the bytes of the given value in big endian byte order (i.e. the most
            significant byte comes first).
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ToDoubleLE(System.Byte[],System.Int32)">
            <summary>
            Gets the bytes of the given value in little endian byte order (i.e. the most
            insignificant byte comes first).
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the bits of the given double value to a 64-bit integer.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the bits of the given 64-bit integer to a double.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ReverseArray16BitWord(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reverses the bytes in the specified portion of the given array swapping
            every byte with odd index with the one after it. For example the byte
            array {12, 67, 31, 204} will be modified to {67, 12, 204, 31}.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.ReverseArray16BitWord(System.Int32[])">
            <summary>
            Reverses the bytes of the given array swapping every byte with odd index with the one after it.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Nov.IO.NBitConverter.GetReversedArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the given bytes, reverses their order (the last comes first)
            and returns the resulting byte array.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.IO.NBitConverter.DoubleLongUnion">
            <summary>
            A struct used for converting double to long values (Int64) and vice versa.
            </summary>
            <remarks>The struct occupies 8 bytes and has two fields - the first one treats
            these 8 bytes as double and the second one - as long (Int64).</remarks>
        </member>
        <member name="F:Nevron.Nov.IO.NBitConverter.DoubleLongUnion.Double">
            <summary>
            The double value of the struct.
            </summary>
        </member>
        <member name="F:Nevron.Nov.IO.NBitConverter.DoubleLongUnion.Long">
            <summary>
            The long value (Int64) of the struct.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NEnum">
            <summary>
            Provides enum helper methods.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetNames(System.Type)">
            <summary>
            Gets the names of the specified enum type.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetNames``1">
            <summary>
            Gets the names of the specified enum type.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetValues(System.Type)">
            <summary>
            Gets the values of the specified enum type.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetValues``1">
            <summary>
            Gets the values of the specified enum type.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetBitValues``1">
            <summary>
            Gets the values of the specified enum that are represented by single bits in their binary representation (i.e. are exact powers of 2).
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetBitNames``1">
            <summary>
            Gets the names of the values in the specified enum that are represented by single bits in their binary representation (i.e. are exact powers of 2).
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetBitMaskNames``1(``0)">
            <summary>
            Gets an array of the raised bit names
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.IsDefined(System.Type,System.Object)">
            <summary>
            Checks whether a constant with the given value exists in the specified enumeration.
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.IsDefined``1(System.Object)">
            <summary>
            Checks whether a constant with the given value exists in the specified enumeration.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.HasFlag``1(``0,``0)">
            <summary>
            Checks whether the given flag is set for the specified flag enum value.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetFlags(System.Type)">
            <summary>
            Gets the flags for the given enumeration. This method should be used only for enumerations,
            which represent a set of flags.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetFlags``1">
            <summary>
            Gets the flags for the given enumeration. This method should be used only for enumerations,
            which represent a set of flags.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.GetFlags``1(``0)">
            <summary>
            Gets the flags set the given enumeration value. This method should be used only for enumerations,
            which represent a set of flags.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.TryParse``1(System.String,``0@)">
            <summary>
            Tries to parse the given string value to the specified enum. A case
            sensitive check is performed. Returns true on success.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NEnum.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Tries to parse the given string value to the specified enum. Returns true on success.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentException">TEnum is not an enumeration type.</exception>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NApplication">
            <summary>
            Represents the entry point of integration, between a specific presentation layer and NOV.
            Prior to using NOV, you need to manually install the touchbase that the application has for this specific presentation layer, 
            by calling the Install() method a presentation layer specific application installer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateChildWindow">
            <summary>
            Creates a child window, and adds it to the Application.Desktop.Windows collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateChildWindow``1">
            <summary>
            Creates a child window from the specified type, and adds it to the Application.Desktop.Windows collection.
            </summary>
            <typeparam name="TChildWindow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateTopLevelWindow">
            <summary>
            Creates a top-level window, and adds it is to the Windows collection of the currently focused window.
            If there is no focused window, the window is added to the NApplication.Desktop.Windows collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateTopLevelWindow(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a top-level window, and adds it is to the Windows collection of the specified parentWindow.
            If parentWindow is null, the window is added to the NApplication.Desktop.Windows collection.
            </summary>
            <param name="parentWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateTopLevelWindow``1">
            <summary>
            Creates a top-level window of the specified type, and adds it is to the Windows collection of the currently focused window.
            If there is no focused window, the window is added to the NApplication.Desktop.Windows collection.
            </summary>
            <typeparam name="TWindow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreateTopLevelWindow``1(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a top-level window of the specified type, and adds it is to the Windows collection of the specified parentWindow.
            If parentWindow is null, the window is added to the NApplication.Desktop.Windows collection.
            </summary>
            <typeparam name="TWindow"></typeparam>
            <param name="parentWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.OpenUrl(System.String)">
            <summary>
            Opens the given URL in a new tab/window of the default browser.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Nevron.Nov.NApplication.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified array of arguments on the UI thread (Application thread).
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.NApplication.ApplyTheme(Nevron.Nov.Dom.NTheme)">
            <summary>
            Applies the specified theme to the application desktop.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="M:Nevron.Nov.NApplication.ReapplyTheme">
            <summary>
            Reapplies the last theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NApplication.RegisterPlugin(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="pluginType"></param>
            <param name="pluginInstance"></param>
        </member>
        <member name="M:Nevron.Nov.NApplication.CreatePlugins``1">
            <summary>
            Cerates the plugins of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NApplication.GetModuleAssemblies">
            <summary>
            Returns the assemblies of the installed DOM modules
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NApplication.s_Type2PluginsMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.Platform">
            <summary>
            Gets the platform of the current application.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.FontService">
            <summary>
            Gets the application font service.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.IOService">
            <summary>
            Gets the application IO service.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.ImageService">
            <summary>
            Gets the application image service.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.Desktop">
            <summary>
            Gets the one and only application desktop element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.DesktopDocument">
            <summary>
            Gets the one and only application document, the content of which is the desktop element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NApplication.CurrentCulture">
            <summary>
            Gets/Sets the culture used by the current thread of the application.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NTimer">
            <summary>
            Represents a timer, which raises tick events at user specified amounts of time
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimer.#ctor">
            <summary>
            Default constructor (100 millisendons interval)
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimer.#ctor(System.Int32)">
            <summary>
            Creates a timer for the specified interval (in milliseconds).
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:Nevron.Nov.NTimer.Start">
            <summary>
            Starts the timer (by default a timer is stopped)
            </summary>
        </member>
        <member name="M:Nevron.Nov.NTimer.Stop">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="E:Nevron.Nov.NTimer.Tick">
            <summary>
            Raised when the timer is ticked
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTimer.IsStarted">
            <summary>
            Gets whether the timer is running
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTimer.Interval">
            <summary>
            Gets or sets the interval at which the tick event occurs (in milliseconds)
            If the timer is started, it is restarted.
            The change of this property restarts the timer, if it was started.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NTimer.Group">
            <summary>
            Gets or sets whether the timer is allowed to be grouped with other timers that have the same interval.
            When this property is set to true, and a timer of the same group is already created, the first tick may occur in a shorted interval of time.
            The change of this property restarts the timer, if it was started.
            By default set to false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NKeyInstanceCache`2">
            <summary>
            Serves as base class for cache objects that cache object instances constructed for keys.
            The NKeyInstanceCache is typically used when you have an expensive to construct object, 
            that is used to maintain readonly informaiton, such as a Nevron.Editors.NDesigner.
            Internally implemented as a MRU cache.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NKeyInstanceCache`2.#ctor(System.Int32)">
            <summary>
            Initializer protected ctor
            </summary>
            <param name="maxItemsCount"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NKeyInstanceCache`2.Fetch(`0)">
            <summary>
            Tries to fetch a cached instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NKeyInstanceCache`2.CreateValue(`0)">
            <summary>
            Must override to create a value for the specified key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NRegionHitTestVisitor">
            <summary>
            A display visitor that serves as base class for all region hit test visitors.
            It is passed as parameter to the NVisual-HitTest(NRegionHitTestVisitor visitor) method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NRegionHitTestVisitor.HitTest(Nevron.Nov.Dom.NVisual)">
            <summary>
            Hit tests by point the specified hit testable by taking into account the installed hit test filter
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NRegionHitTestVisitor.HitTestFilter">
            <summary>
            Gets the hit test filter
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRegionHitTestVisitor.LocalHitTestRegion">
            <summary>
            Gets the region to test with, in local coordinates of the current hit test target.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRegionHitTestVisitor.SceneHitTestRegion">
            <summary>
            Gets the region to test with, in scene coordinates
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NPointHitTestVisitor">
            <summary>
            A display visitor that serves as base class for all point hit test visitors
            It is passed as parameter to the NVisual-HitTest(NPointHitTestVisitor visitor) method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPointHitTestVisitor.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NVisual},Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NRegion)">
            <summary>
            Initializer constructor
            </summary>
            <param name="sceneHitTestPoint"></param>
            <param name="hitTestFilter"></param>
            <param name="transform"></param>
            <param name="clip"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPointHitTestVisitor.HitTest(Nevron.Nov.Dom.NVisual)">
            <summary>
            Hit tests by point the specified hit testable by taking into account the installed hit test filter
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPointHitTestVisitor.SkipBranchTraversal(Nevron.Nov.Dom.NVisual)">
            <summary>
            Determines whether the visitor needs to visit of the specified displayable branch.
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPointHitTestVisitor.OnTransformChanged">
            <summary>
            Called when the scene transform has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPointHitTestVisitor.HitTestFilter">
            <summary>
            Gets the hit test filter
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPointHitTestVisitor.LocalHitTestPoint">
            <summary>
            Gets the point to hit test with in the current target coordinate system.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPointHitTestVisitor.SceneHitTestPoint">
            <summary>
            Gets the point to hit test with in scene coordinates.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NColor">
            <summary>
            Represents a color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(Nevron.Nov.Graphics.ENNamedColor)">
            <summary>
            Creates an RGB color from a named color
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(System.UInt32)">
            <summary>
            Creates an RGB color from a packed uint. 
            The color component bytes are ordered in this order: alpha, red, gree, blue.
            </summary>
            <param name="argb">An 32-bit unsigned integer that contains the A, R, G and B values.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates an opaque RGB color with the specified red, green, and blue values in the range [0 - 255].
            The alpha is set to 255.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates an RGB color with the specified red, green, blue and alpha values in the range [0 - 255].
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(Nevron.Nov.Graphics.NColor,System.Byte)">
            <summary>
            Creates an RGB color based on the specified color and changes the transparency to the specified one.
            </summary>
            <param name="color">The base color.</param>
            <param name="a">The new alpha component.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.#ctor(Nevron.Nov.Graphics.NColorSpace,Nevron.Nov.Graphics.NColorValueF)">
            <summary>
            Creates a color in the specified color space and with the specified value. 
            The value must be from the rank of the color space. For example:
            RGB color space would expect NColorValue3F (c1 = red, c2 = green, c3 = blue) 
            CMYK color space would expect NColorValue4F (c1 = cyan, c2 = magenta, c3 = yellow, c4 = black)
            </summary>
            <param name="space">The color space.</param>
            <param name="value">The color value.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.ToString">
            <summary>
            Returns a string formatted with the RGB color equivalent for display purposes (e.g. values in range 0:255).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetHEX">
            <summary>
            Gets the HEX (Web) representation of the RGB color (e.g. #FF00A8).
            </summary>
            <returns>The HEX representation of this color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetRGB">
            <summary>
            Gets the color value in RGB space.
            </summary>
            <returns>The color value in RGB space.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetHSB">
            <summary>
            Gets the color value in HSB space.
            </summary>
            <returns>HSB color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetHSL">
            <summary>
            Gets the color value in HSL space.
            </summary>
            <returns>HSL color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetXYZ">
            <summary>
            Gets the color value in XYZ space.
            </summary>
            <returns>XYZ color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetYCC">
            <summary>
            Gets the color value in YCC space.
            </summary>
            <returns>YCC color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetCMYK">
            <summary>
            Gets the color value in CMYK space.
            </summary>
            <returns>CMYK color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Format">
            <summary>
            Formats this color value.
            </summary>
            <returns>A formatted string corresponding to this color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Grayscale">
            <summary>
            Returns a grayscale color in the same color space as this one.
            </summary>
            <returns>The grayscale color corresponding to this color value.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Darker">
            <summary>
            Gets a darker version of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Darker(System.Single)">
            <summary>
            Gets a darker version of this color.
            </summary>
            <param name="factor">A darkening factor. Must be between 0 and 1. Greater values result in darker colors.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Lighter">
            <summary>
            Gets a ligher version of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Lighter(System.Single)">
            <summary>
            Gets a ligher version of this color.
            </summary>
            <param name="factor">A lightening factor. Must be between 0 and 1. Greater values result in lighter colors.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Invert">
            <summary>
            Returns the inverse of this color.
            </summary>
            <returns>The inverse of this color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.RGBEquals(Nevron.Nov.Graphics.NColor)">
            <summary>
            Checks whether the packed RGB representation of the color is equal to the specified color.
            </summary>
            <param name="color">The color to compare this color with.</param>
            <returns>True if the packed RGB representations are equal.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Equals(Nevron.Nov.Graphics.NColor)">
            <summary>
            Determines if this color is equal to the specified color.
            </summary>
            <remarks>
            The RGB representation of the colors is used for the comparison even if the colors are specified in other color spaces.
            </remarks>
            <param name="other">The color to compare with.</param>
            <returns>Returns true if the colors are equal.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.InterpolateColors(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a new color by interpolating between the specified colors.
            </summary>
            <param name="color1">Color 1</param>
            <param name="color2">Color 2</param>
            <returns>Returns a color that is "between" colors 1 and color 2.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.InterpolateColors(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Creates a new color by interpolating between the specified colors with the specified factor
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.TryParse(System.String,Nevron.Nov.Graphics.NColor@)">
            <summary>
            Tries to create a color from the given string.
            </summary>
            <remarks>
            The string must be in one of the following formats:
            <para>1. In HEX format (e.g. FF0066 or #FF0066)</para>
            <para>2. A name of a predefined color (e.g. "green")</para>
            <para>3. A color function (e.g. "RGB(255, 210, 68)"</para>
            </remarks>
            <param name="str">The string to parse.</param>
            <param name="color">The resulting color.</param>
            <returns>True if the parsing was successful and false otherwise.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.Parse(System.String)">
            <summary>
            Creates a color from the given string. Throws an exception if the parsing fails.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The resulting color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.TryParseHex(System.String,Nevron.Nov.Graphics.NColor@)">
            <summary>
            Tries to create a color from a string in HEX format (e.g. "RRGGBB" or "#RRGGBB").
            where R, G and B are hex digits.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="color">The resulting color.</param>
            <returns>True if the parsing was successful and false otherwise.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.ParseHex(System.String)">
            <summary>
            Create a color from a string in HEX format (e.g. "RRGGBB" or "#RRGGBB").
            Throws an exception if the parsing fails.
            </summary>
            <param name="str"></param>
            <returns>The resulting color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.TryParseHtmlColor(System.String,Nevron.Nov.Graphics.NColor@)">
            <summary>
            Tries to parse the given string and create a color following the W3C specification.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="color">The resulting color.</param>
            <returns>True if the parsing was successful and false otherwise.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.TryParseHtmlHexColor(System.String,Nevron.Nov.Graphics.NColor@)">
            <summary>
            Creates an RGB color from a HEX color (Web color) string.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="color">The resulting color.</param>
            <returns>True if the parsing was successful and false otherwise.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetNameOrHex(Nevron.Nov.Graphics.NColor)">
            <summary>
            Gets the name or the HEX equivalent of a given color.
            </summary>
            <param name="color">The color whose name or HEX equivalent to get.</param>
            <returns>The name or the HEX equivalent of the given color.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.GetKnownColors">
            <summary>
            Gets a list that maps the known colors names to color values.
            </summary>
            <returns>A list with the know colors.</returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Empty">
            <summary>
            Empty color
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.AliceBlue">
            <summary>
            Alice Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.AntiqueWhite">
            <summary>
            Antique White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Aquamarine">
            <summary>
            Aquamarine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Azure">
            <summary>
            Azure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Bisque">
            <summary>
            Bisque
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.BlanchedAlmond">
            <summary>
            Blanched Almond
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.BlueViolet">
            <summary>
            Blue Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.BurlyWood">
            <summary>
            Burly Wood
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.CadetBlue">
            <summary>
            Cadet Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Chartreuse">
            <summary>
            Chartreuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Chocolate">
            <summary>
            Chocolate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.CornflowerBlue">
            <summary>
            Cornflower Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Cornsilk">
            <summary>
            Cornsilk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkBlue">
            <summary>
            Dark Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkCyan">
            <summary>
            Dark Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkGoldenrod">
            <summary>
            Dark Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkGray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkGreen">
            <summary>
            Dark Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkKhaki">
            <summary>
            Dark Khaki
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkMagenta">
            <summary>
            Dark Magenta
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkOliveGreen">
            <summary>
            Dark Olive Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkOrange">
            <summary>
            Dark Orange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkOrchid">
            <summary>
            Dark Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkRed">
            <summary>
            Dark Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkSalmon">
            <summary>
            Dark Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkSeaGreen">
            <summary>
            Dark Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkSlateBlue">
            <summary>
            Dark Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkSlateGray">
            <summary>
            Dark Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkTurquoise">
            <summary>
            Dark Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DarkViolet">
            <summary>
            Dark Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DeepPink">
            <summary>
            Deep Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DeepSkyBlue">
            <summary>
            Deep Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DimGray">
            <summary>
            Dim Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.DodgerBlue">
            <summary>
            Dodger Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Firebrick">
            <summary>
            Firebrick
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.FloralWhite">
            <summary>
            Floral White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.ForestGreen">
            <summary>
            Forest Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Fuchsia">
            <summary>
            Fuchsia
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Gainsboro">
            <summary>
            Gainsboro
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.GhostWhite">
            <summary>
            Ghost White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Goldenrod">
            <summary>
            Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.GreenYellow">
            <summary>
            Green Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Honeydew">
            <summary>
            Honeydew
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.HotPink">
            <summary>
            HotPink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.IndianRed">
            <summary>
            Indian Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Indigo">
            <summary>
            Indigo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Ivory">
            <summary>
            Ivory
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Khaki">
            <summary>
            Khaki
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LavenderBlush">
            <summary>
            Lavender Blush
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LawnGreen">
            <summary>
            Lawn Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LemonChiffon">
            <summary>
            Lemon Chiffon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightBlue">
            <summary>
            Light Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightCoral">
            <summary>
            Light Coral
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightCyan">
            <summary>
            Light Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightGoldenrodYellow">
            <summary>
            Light Goldenrod Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightGray">
            <summary>
            Light Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightGreen">
            <summary>
            Light Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightPink">
            <summary>
            Light Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightSalmon">
            <summary>
            Light Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightSeaGreen">
            <summary>
            Light Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightSkyBlue">
            <summary>
            Light Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightSlateGray">
            <summary>
            Light Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightSteelBlue">
            <summary>
            Light Steel Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LightYellow">
            <summary>
            Light Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.LimeGreen">
            <summary>
            Lime Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Linen">
            <summary>
            Linen
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumAquamarine">
            <summary>
            Medium Aquamarine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumBlue">
            <summary>
            Medium Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumOrchid">
            <summary>
            Medium Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumPurple">
            <summary>
            Medium Purple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumSeaGreen">
            <summary>
            Medium Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumSlateBlue">
            <summary>
            Medium Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumSpringGreen">
            <summary>
            Medium Spring Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumTurquoise">
            <summary>
            Medium Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MediumVioletRed">
            <summary>
            Medium Violet Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MidnightBlue">
            <summary>
            Midnight Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MintCream">
            <summary>
            Mint Cream
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.MistyRose">
            <summary>
            Misty Rose
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Moccasin">
            <summary>
            Moccasin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.NavajoWhite">
            <summary>
            Navajo White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.OldLace">
            <summary>
            Old Lace
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.OliveDrab">
            <summary>
            Olive Drab
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.OrangeRed">
            <summary>
            Orange Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Orchid">
            <summary>
            Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PaleGoldenrod">
            <summary>
            Pale Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PaleGreen">
            <summary>
            Pale Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PaleTurquoise">
            <summary>
            Pale Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PaleVioletRed">
            <summary>
            Pale Violet Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PapayaWhip">
            <summary>
            Papaya Whip
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PeachPuff">
            <summary>
            Peach Puff
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Peru">
            <summary>
            Peru
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Plum">
            <summary>
            Plum
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.PowderBlue">
            <summary>
            Powder Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.RosyBrown">
            <summary>
            Rosy Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.RoyalBlue">
            <summary>
            Royal Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SaddleBrown">
            <summary>
            Saddle Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Salmon">
            <summary>
            Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SandyBrown">
            <summary>
            Sandy Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SeaGreen">
            <summary>
            Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SeaShell">
            <summary>
            Sea Shell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Sienna">
            <summary>
            Sienna
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SkyBlue">
            <summary>
            Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SlateBlue">
            <summary>
            Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SlateGray">
            <summary>
            Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Snow">
            <summary>
            Snow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SpringGreen">
            <summary>
            Spring Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.SteelBlue">
            <summary>
            Steel Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Tan">
            <summary>
            Tan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Thistle">
            <summary>
            Thistle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Tomato">
            <summary>
            Tomato
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Turquoise">
            <summary>
            Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Violet">
            <summary>
            Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.WhiteSmoke">
            <summary>
            White Smoke
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NColor.YellowGreen">
            <summary>
            Yellow Green
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromColor(Nevron.Nov.Graphics.NColor,System.Single)">
            <summary>
            Creates a new color that has the color components of another color and has the specified alpha
            </summary>
            <param name="color"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromRGB(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new RGB color. Alpha is set to 1.0.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RGB color. Alpha is set to 255.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromRGBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new RGB color with the specified alpha.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromRGBA(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RGB color with the specified alpha.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromHSB(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new HSB color. Alpha is set to 1.0.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromHSBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new HSB color. 
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromHSL(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new HSL color. Alpha is set to 1.0.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromHSLA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new HSL color.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromCMYK(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new CMYK color. Alpha is set to 1.0.
            </summary>
            <param name="c"></param>
            <param name="m"></param>
            <param name="y"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromCMYK(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new CMYK color.
            </summary>
            <param name="c"></param>
            <param name="m"></param>
            <param name="y"></param>
            <param name="k"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new XYZ color. Alpha is set to 1.0.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromXYZA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new XYZ color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromYCC(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new YCC color. Alpha is set to 1.0.
            </summary>
            <param name="y"></param>
            <param name="cb"></param>
            <param name="cr"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromYCCA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new YCC color.
            </summary>
            <param name="y"></param>
            <param name="cb"></param>
            <param name="cr"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.FromBGRA(System.UInt32)">
            <summary>
            Creates a color from a packed BGRA value.
            </summary>
            <param name="packedBGRA"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.op_Equality(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Equality operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NColor.op_Inequality(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.A">
            <summary>
            Returns the alpha component in the range 0-255.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.R">
            <summary>
            Returns the red component in the range 0-255 in the default sRGB space.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.G">
            <summary>
            Returns the green component in the range 0-255 in the default sRGB
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.B">
            <summary>
            Returns the blue component in the range 0-255 in the default sRGB
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.PackedARGB">
            <summary>
            Gets a packed ARGB value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.PackedBGRA">
            <summary>
            Gets a packed BGRA value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.PackedRGB">
            <summary>
            Gets a packed RGB value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.Space">
            <summary>
            Gets the color space of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.Value">
            <summary>
            Gets the color value in it's color space.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.Alpha">
            <summary>
            Returns the alpha value of this color as a floating point variable in the range [0, 1].
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.IsTransparent">
            <summary>
            Returns true if the color is fully transparent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.IsTranslucent">
            <summary>
            Returns true if the color is semi-transparent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NColor.IsEmpty">
            <summary>
            Returns true if this is the empty color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGraphicsPath">
            <summary>
            Represents a graphics path.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.CommandStartFigure">
            <summary>
            The Start Figure command bit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.CommandLineTo">
            <summary>
            The Line To command bit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.CommandCubicBezierTo">
            <summary>
            The Cubic Bezier To command bit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.CommandMask">
            <summary>
            Masks the commands in a type byte
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.AttributeClose">
            <summary>
            The close figure command bit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.AttributeMask">
            <summary>
            Masks the attributes in a type byte
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.#ctor(Nevron.Nov.Graphics.NPoint[],System.Byte[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="points"></param>
            <param name="types"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.#ctor(Nevron.Nov.Graphics.NGraphicsPathPoint[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.#ctor(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Recycle">
            <summary>
            Recycles the object. This operation is performed 
            when the object enters a recycling pool.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Equals(System.Object)">
            <summary>
            Overriden to return true if the object is a NGraphicsPath that defines the same geometry as this graphics path.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetHashCode">
            <summary>
            Overriden because equals was overriden.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.StartFigure(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Moves to the specified point (starts a new figure) 
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.StartFigure(System.Double,System.Double)">
            <summary>
            Moves to the specified point (starts a new figure) 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTo(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws a line from the prev point to the specified point
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTo(System.Double,System.Double)">
            <summary>
            Draws a line from the prev point to the specified point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="points"></param>
            <param name="start">start point index</param>
            <param name="count">count of points</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="start">start point index</param>
            <param name="count">count of points</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NMultiPointBase,System.Int32,System.Int32)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NMultiPointBase)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.LineTos(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws multiple LineTo commands through the specified points.
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
            <param name="pt5"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CubicBezierTo(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws a cubic bezier from the prev point to the specified point
            </summary>
            <param name="pt"></param>
            <param name="c1"></param>
            <param name="c2"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CubicBezierTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a cubic bezier from the prev point to the specified point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="c1X"></param>
            <param name="c1Y"></param>
            <param name="c2X"></param>
            <param name="c2Y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CircularArcTo(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Draws a bowed arc to the specified point
            </summary>
            <param name="pt">end point</param>
            <param name="bow">distance from the arc's midpoint to the midpoint of its chord.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CircularArcTo(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Draws a circular arc to the specified point
            </summary>
            <param name="pt">end point</param>
            <param name="control">control point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.EllipticalArcTo(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double,System.Double)">
            <summary>
            Draws an elliptical arc to the specified point.
            </summary>
            <param name="pt">end point</param>
            <param name="control">control point</param>
            <param name="angle">angle which the ellipse major axis forms with the X axis</param>
            <param name="ratio">ratio between the major and minor ellipse axes</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CloseFigure">
            <summary>
            Closes the current figure.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddRectangle(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds a rectangle to the path
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle to the path
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddTriangle(Nevron.Nov.Graphics.NTriangle)">
            <summary>
            Adds a triangle.
            </summary>
            <param name="triangle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddQuad(Nevron.Nov.Graphics.NQuadrangle)">
            <summary>
            Adds a quad 
            </summary>
            <param name="quad"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddQuad(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds a quad 
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            <param name="pt4"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddRoundedRectangle(Nevron.Nov.Graphics.NRectangle,System.Double)">
            <summary>
            Adds a rounded rectangle to the path.
            The rounding parameter defines the desired size of the corner circle radius.
            </summary>
            <param name="rect"></param>
            <param name="rounding"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddRoundedRectangle(Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Adds a rounded rectangle to the path.
            </summary>
            <param name="rect"></param>
            <param name="roundingX">Specifies the X radius of the corner ellipse.</param>
            <param name="roundingY">Specifies the Y radius of the corner ellipse.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircle(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Adds a circle to the path
            </summary>
            <param name="circle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircle(System.Double,System.Double,System.Double)">
            <summary>
            Adds a circle to the path
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipse(Nevron.Nov.Graphics.NEllipse)">
            <summary>
            Adds an ellipse to the path
            </summary>
            <param name="ellipse"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipse(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Adds the ellipse enclosed by the specified rect
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an ellipse enclosed by the specified rect
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipse(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an ellipse
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolygon(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Adds a polygon to the path. The polygon is added as a separate figure.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolygon(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Adds a polygon to the path. The polygon is added as a separate figure.
            </summary>
            <param name="points"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolygon(Nevron.Nov.Graphics.NPolygon)">
            <summary>
            Adds a polygon to the path. The polygon is added as a separate figure
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPie(Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Adds a pie.
            </summary>
            <param name="bounds">The bounds of the pie.</param>
            <param name="startAngle">Starting angle of the pie (in radians). Measured from its major axis.</param>
            <param name="sweepAngle">Sweep angle of the pie (in radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPie(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a pie
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startAngle">Starting angle of the pie (in radians). Measured from its major axis.</param>
            <param name="sweepAngle">Sweep angle of the pie (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddLineSegment(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Adds a line segment to the path
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddLineSegment(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds a line segment to the path
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddLineSegment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a line segment to the path.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircleSegment(Nevron.Nov.Graphics.NCircleSegment)">
            <summary>
            Adds a circle segment to the path.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircleSegment(Nevron.Nov.Graphics.NCircle,System.Double,System.Double)">
            <summary>
            Adds a circle segment to the path.
            </summary>
            <param name="circle">The circle segment of which to add.</param>
            <param name="startAngle">The start angle of the segment in radians.</param>
            <param name="sweepAngle">The sweep angle of the segment in radians.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircleSegment(Nevron.Nov.Graphics.NPoint,System.Double,System.Double,System.Double)">
            <summary>
            Adds a circle segment to the path.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle segment.</param>
            <param name="startAngle">The start angle of the segment in radians.</param>
            <param name="sweepAngle">The sweep angle of the segment in radians.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircleSegment(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds a circle segment that starts and ends at the specified points. 
            The segment passes through the specified control point.
            </summary>
            <param name="start"></param>
            <param name="control"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCircleSegment(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Adds a circle segment that starts and ends at the specified points. 
            The bow parameter is the distance from the arc's midpoint to the midpoint of its chord.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="bow"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipseSegment(Nevron.Nov.Graphics.NEllipseSegment)">
            <summary>
            Adds an ellipse segment to the path
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipseSegment(Nevron.Nov.Graphics.NEllipse,System.Double,System.Double)">
            <summary>
            Adds an ellipse segment to the path
            </summary>
            <param name="ellipse"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipseSegment(Nevron.Nov.Graphics.NRectangle,System.Double,System.Double)">
            <summary>
            Adds the elliptical segment from an ellipse with the specified bounds. 
            </summary>
            <param name="bounds">bounds of the ellipse</param>
            <param name="startAngle">start angle (in radians)</param>
            <param name="sweepAngle">sweep angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipseSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the elliptical segment from an ellipse with the specified bounds. 
            </summary>
            <param name="x">the x coordinate of the ellipse</param>
            <param name="y">the y coordinate of the ellipse</param>
            <param name="width">the width of the ellipse</param>
            <param name="height">the height of the ellipse</param>
            <param name="startAngle">start angle (in radians)</param>
            <param name="sweepAngle">sweep angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddEllipticalArc(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc
            </summary>
            <param name="start"></param>
            <param name="control"></param>
            <param name="end"></param>
            <param name="angle">Angle between the major ellipse axis and the X-axis (specified in Radians).</param>
            <param name="ratio">Ratio between the major and minor ellipse axes, must be greater or euqal to 1.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCubicBezier(Nevron.Nov.Graphics.NCubicBezier)">
            <summary>
            Adds a cubic bezier
            </summary>
            <param name="bezier"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCubicBezier(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds a cubic bezier
            </summary>
            <param name="start"></param>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCubicBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a cubic bezier
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="c1X"></param>
            <param name="c1Y"></param>
            <param name="c2X"></param>
            <param name="c2Y"></param>
            <param name="endX"></param>
            <param name="endY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCubicBeziers(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            The points parameter specifies an array of endpoints and control points of the connected curves. 
            The first curve is constructed from the first point to the fourth point in the points array by using the second and third points as control points. 
            In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.
            If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddNurbsCurve(Nevron.Nov.Graphics.NNurbsCurve)">
            <summary>
            Adds a non-uniform rational B-spline (NURBS) curve.
            </summary>
            <param name="nurbsCurve"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolyline(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Adds a polyline.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolyline(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Adds a polyline.
            </summary>
            <param name="points"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPolyline(Nevron.Nov.Graphics.NPolyline)">
            <summary>
            Adds a polyline.
            </summary>
            <param name="polyline"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCurve(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Adds a cardinal spline to the current figure of this path.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddCurve(Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Adds a cardinal spline to the current figure of this path.
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddClosedCurve(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Adds a cardinal spline closed figure to this path.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddClosedCurve(Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Adds a cardinal spline closed figure to this path.
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.AddPath(Nevron.Nov.Graphics.NGraphicsPath,System.Boolean)">
            <summary>
            Adds the specified path to this path. 
            </summary>
            <param name="pathToAdd">path to add</param>
            <param name="connect">whether the added path must be connected with this path</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Union(Nevron.Nov.Graphics.ENFillRule,Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Gets a path that represents the union of this graphics path with the specified other graphics path
            </summary>
            <param name="thisFillRule"></param>
            <param name="other"></param>
            <param name="otherFillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Intersect(Nevron.Nov.Graphics.ENFillRule,Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Gets a path that represents the intersection of this graphics path with the specified other graphics path
            </summary>
            <param name="thisFillRule"></param>
            <param name="other"></param>
            <param name="otherFillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Subtract(Nevron.Nov.Graphics.ENFillRule,Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Gets a path that represents the subtraction of this graphics path with the specified other graphics path
            </summary>
            <param name="thisFillRule"></param>
            <param name="other"></param>
            <param name="otherFillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.ExclusiveOr(Nevron.Nov.Graphics.ENFillRule,Nevron.Nov.Graphics.NGraphicsPath,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Gets a path that represents the subtraction of this graphics path with the specified other graphics path
            </summary>
            <param name="thisFillRule"></param>
            <param name="other"></param>
            <param name="otherFillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetTypes">
            <summary>
            Gets the types of the points in the path.
            DO NOT MODIFY THE RETURNED ARRAY.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetPathPoints">
            <summary>
            Gets the points of the path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetPathPoint(System.Int32)">
            <summary>
            Gets the path point at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetPointType(System.Int32)">
            <summary>
            Gets the point type at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetPointInfo(System.Int32,System.Double@,System.Double@,System.Byte@)">
            <summary>
            Gets information about the point at the specified index
            </summary>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetFigureCount">
            <summary>
            Gets the figures count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetFigure(System.Int32)">
            <summary>
            Gets the figures in the graphics path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetFigureBounds(Nevron.Nov.Graphics.NGraphicsPathFigure)">
            <summary>
            Gets the bounds of the specified figure. The specified figure must belongs to this path.
            </summary>
            <param name="figure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetFigurePath(Nevron.Nov.Graphics.NGraphicsPathFigure)">
            <summary>
            Gets the sub-path of this path that represents the specified figure. The specified figure must belongs to this path.
            </summary>
            <param name="figure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Reverse">
            <summary>
            Reverses the order of points in the path and preserves the figures logical start and ends.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Flatten">
            <summary>
            Flattens the path with DefaultFlatness (0.25f)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Flatten(System.Double)">
            <summary>
            Flattens the path with the specified flatness, 
            which is the maximum allowed deviation from the appoximated line segments to the curve segments.
            </summary>
            <param name="flatness"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Widen(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Widen the path using default flatness.
            </summary>
            <param name="stroke"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Widen(Nevron.Nov.Graphics.NStroke,System.Double)">
            <summary>
            Widen the path
            </summary>
            <param name="stroke"></param>
            <param name="flatness"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.RoundCorners(System.Double)">
            <summary>
            Rounds the adjacent sharp corners in this path.
            </summary>
            <param name="cornerRounding"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Checks whether the specified point is contained in the filled interior of this path
            provided that it is filled with the specified filling rule.
            </summary>
            <param name="point"></param>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Checks whether the specified point is contained on the widened interior of this path outline.
            </summary>
            <param name="point"></param>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NStroke,System.Double)">
            <summary>
            Checks whether the specified point is contained on the widened interior of this path outline.
            </summary>
            <param name="point"></param>
            <param name="stroke"></param>
            <param name="flatness"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.CloseAllFigures">
            <summary>
            Closes all figures in this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetFigureTypes(System.Boolean@,System.Boolean@)">
            <summary>
            Gets the figure types .
            </summary>
            <param name="hasOpenFigures"></param>
            <param name="hasClosedFigures"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.TrySnapPoint(Nevron.Nov.Graphics.NPoint,System.Double,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to snap the specified point to the neareast point from this path outline, that is no further that the specified distance.
            </summary>
            <param name="point"></param>
            <param name="distance"></param>
            <param name="snappedPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.HitTestFillByPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Hit tests the filling of the path.
            </summary>
            <param name="hitTestPoint"></param>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.HitTestFillByRegion(Nevron.Nov.Graphics.NRegion,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Hit tests the filling of the path.
            </summary>
            <param name="hitTestRegion"></param>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.HitTestOutlineByPoint(Nevron.Nov.Graphics.NPoint,System.Double,System.Double)">
            <summary>
            Hit test the outline of a path by point.
            </summary>
            <param name="hitTestPoint"></param>
            <param name="closedWiden"></param>
            <param name="openWiden"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.HitTestOutlineByRegion(Nevron.Nov.Graphics.NRegion,System.Double,System.Double)">
            <summary>
            Hit test the outline of a path by region.
            </summary>
            <param name="hitTestRegion"></param>
            <param name="closedWiden"></param>
            <param name="openWiden"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetContourPositionAndAngle(System.Double,Nevron.Nov.Graphics.NPoint@,System.Double@)">
            <summary>
            Tries to get the percent position and angle from the specified location factor.
            </summary>
            <param name="factor"></param>
            <param name="point"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGraphicsPath.GetNearestIntersection(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Gets the nearest intersection point to dirPoint 
            out of all intersections between this geometry and the centerPoint:dirPoint vector.
            All points are in shape local coordinates.
            </summary>
            <param name="dirPoint"></param>
            <param name="centerPoint"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NGraphicsPath.DefaultFlattness">
            <summary>
            Default flatness for operations where flatness is not specified
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPath.IsFlat">
            <summary>
            Gets whether this path is flat (i.e. contains only line segments)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPath.ExactBounds">
            <summary>
            Gets the exact bounds of this path. 
            This method is more costly to caclulate than Bounds, but the returned bounds take into account the exact bounds of contained cubic beziers, 
            while the Bounds method only takes into account the cubic beziers hull bounds (bounds of end-points and control points).
            For flat paths the results of Bounds and ExactBounds is the same.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPath.HasOpenFigures">
            <summary>
            Checks if the graphics path contains open figures.
            </summary>
            <returns>Returns true if the graphics path contains one or more open figures.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPath.HasClosedFigures">
            <summary>
            Checks if the graphics path contains closed figures.
            </summary>
            <returns>Returns true if the graphics path contains one or more closed figures.</returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NGraphicsPath.IsFigureStarted">
            <summary>
            Returns true if a figure is started in this path, otherwise false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NAngle">
            <summary>
            Represents an angle, defined as a value and angle unit pair
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Rad2Degree">
            <summary>
            Radians to degrees convertion constant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Rad2Grad">
            <summary>
            Radians to grads convertion constant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Degree2Rad">
            <summary>
            Degrees to radians convertion constant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Degree2Grad">
            <summary>
            Degrees to grads convertion constant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Grad2Degree">
            <summary>
            Grads to degrees convertion constant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NAngle.Grad2Rad">
            <summary>
            Grads to degrees convertion constant
            </summary>
        </member>
        <member name="M:Nevron.Nov.NAngle.#ctor(System.Double)">
            <summary>
            Creates a NAngle object with the specified angle in degrees.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NAngle.#ctor(System.Int32)">
            <summary>
            Creates a NAngle object with the specified angle in degrees.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NAngle.#ctor(System.Double,Nevron.Nov.NUnit)">
            <summary>
            Creates a NAngle object with the specified angle and measurement.
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NAngle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.NAngle.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.NAngle.Equals(Nevron.Nov.NAngle)">
            <summary>
            Determines whether this angle is equal to the specified angle
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.Normalize">
            <summary>
            Returns the normalized angle of this angle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.ToDegrees">
            <summary>
            Returns the angle measured in degrees
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.ToRadians">
            <summary>
            Returns the angle measured in radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.ToGrads">
            <summary>
            Returns the angle measured in grads
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.ToString">
            <summary>
            Returns the string representation of this NAngle object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.Equals(System.Object)">
            <summary>
            Determines whether the lengths are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_UnaryNegation(Nevron.Nov.NAngle)">
            <summary>
            Arithmetic unary minus operator
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_UnaryPlus(Nevron.Nov.NAngle)">
            <summary>
            Arithmetic unary plus operator.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Addition(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Arithmetic binary plus operator. Defined if the lengths measurement units are from the same class 
            (e.g. absolute+absolute, device+device, relative+relative).
            The resulting angle uses the {a} parameter measurement unit.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Subtraction(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Arithmetic binary minus operator. Defined if the lengths measurement units are from the same class 
            (e.g. absolute-absolute, device-device, relative-relative).
            The resulting angle uses the {a} parameter measurement unit.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Multiply(Nevron.Nov.NAngle,System.Double)">
            <summary>
            Multiplication with a scalar value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Division(Nevron.Nov.NAngle,System.Double)">
            <summary>
            Division by scalar value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Division(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Division operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Equality(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_Inequality(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Not Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_LessThan(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Less Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_GreaterThan(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Greater Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_LessThanOrEqual(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Less Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.op_GreaterThanOrEqual(Nevron.Nov.NAngle,Nevron.Nov.NAngle)">
            <summary>
            Logical Greater Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.FromRadians(System.Double)">
            <summary>
            Creates an angle measured in radians
            </summary>
            <param name="radians">angle value (in radians)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.FromGrads(System.Double)">
            <summary>
            Creates an angle measured in grads
            </summary>
            <param name="grads">angle value (in grads)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.NormalizeRadians(System.Double)">
            <summary>
            Normalizes an angle specified in radians to be in the range [0, 2*PI).
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.NormalizeDirectionRadians(System.Double)">
            <summary>
            Normalizes an angle specified in radians to be in the range [0: PI)
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.NormalizeDegrees(System.Double)">
            <summary>
            Normalizes an angle specified in degrees to be in the range [0, 360).
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.NormalizeGrads(System.Double)">
            <summary>
            Normalizes an angle specified in grads to be in the range [0, 400).
            </summary>
            <param name="grads"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.TrySnapAngle(Nevron.Nov.NAngle,Nevron.Nov.NAngle,Nevron.Nov.NAngle,Nevron.Nov.NAngle@)">
            <summary>
            Tries to snap angleToSnap to a whole value of the snapStep snapping step.
            Retruns true if the snappedAngle is at most +-snapDeviation from the angleToSnap.
            </summary>
            <param name="angleToSnap"></param>
            <param name="snapStep"></param>
            <param name="snapDeviation"></param>
            <param name="snappedAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.GetAngleQuadrant(System.Double)">
            <summary>
            Returns the quadrant (0, 1, 2, 3) of the specified angle.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>
            0 - Quadrant [0, PI/2),
            1 - Quadrant [PI/2, PI),
            2 - Quadrant [PI, 3 * PI / 2)
            3 - Quadrant [3 * PI / 2, PI * 2)
            </returns>
        </member>
        <member name="M:Nevron.Nov.NAngle.AngleInRange(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether angle is in the sweep arc from start angle (in radians).
            </summary>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NAngle.Zero">
            <summary>
            The zero (0) angle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NAngle.Negate">
            <summary>
            Returns the negative value of this NAngle
            </summary>
        </member>
        <member name="P:Nevron.Nov.NAngle.Value">
            <summary>
            The angle value
            </summary>
        </member>
        <member name="P:Nevron.Nov.NAngle.Unit">
            <summary>
            The angle measurement unit
            </summary>
        </member>
        <member name="T:Nevron.Nov.Presentation.NResources">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_AppStarting_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_Arrow_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_Cross_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_Hand_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_Help_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_HSplit_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_IBeam_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_No_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_NoMove2D_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_NoMoveH_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_NoMoveV_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanAll_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanEast_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanNorth_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanNorthEast_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanNorthWest_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanSouth_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanSouthEast_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanSouthWest_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_PanWest_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_SizeAll_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_SizeNESW_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_SizeNS_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_SizeNWSE_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_SizeWE_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_UpArrow_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_VSplit_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RCUR_Wait_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RFONT_Fonts_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Automatic_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Loader_gif">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_None_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Preview_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_PrintPreview_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Properties_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_SelectPredefined_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Design_Add_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Design_DownArrow16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Design_Ellipses16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Design_MoveDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Design_MoveUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Copy_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Cut_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Delete_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Erase_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Find_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_FX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Paste_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_PasteSpecial_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Redo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Replace_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_SelectAll_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Undo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Edit_Update_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_DocumentInfo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_New_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_Open_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_Page_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_Pdf_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_Print_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_RecentDocuments_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_Save_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_File_SaveAs_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_Bold_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_Italic_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_StrikeThrough_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_Subscript_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_Superscript_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_FontStyle_Underline_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Help_About_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Help_Help_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_ImageService_Downloading_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_ImageService_Error_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Insert_Barcode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Insert_Barcode2D_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Insert_Image_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_DocumentInfo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_New_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Open_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Page_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Pinned_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Print_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Save_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_SaveAs_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Settings_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_AppMenu_Unpinned_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_Home_Paste_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_Insert_Barcode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_Insert_Barcode2D_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Ribbon_Insert_Image_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_FillStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_ShadowStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_StrokeStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_TextBackgroundFill_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_TextFill_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_TextHighlight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Styles_TextStroke_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_BeginArrowhead_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_Center_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_EndArrowhead_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_Justify_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_Left_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_Right_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_VAlignBottom_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_VAlignMiddle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_TextAlign_VAlignTop_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_DefaultCommandBarItemImage_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_Button_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_CheckBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_DateTimeBoxDropDownButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_GroupBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_NumericUpDownUpGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_RadioButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbLeftRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SliderThumbUpDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_SpinnerButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TabPageHeader_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TabPane_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TextBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBar_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarCloseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TitleBarRestoreGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TreeViewItemSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_TreeViewItemSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Aero_Window_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_BalloonClose_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_Button_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_CheckBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_GroupBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_RadioButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderThumbBoth_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SpinnerHorizontalButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_SpinnerVerticalButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TabPageHeaderInner_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TabPageHeaderNear_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TabPageHeaderNearAndFar_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TabPane_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TextBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBar_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TreeViewSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_TreeViewSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_Mac_Window_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_BalloonClose_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_Button_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_CheckBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_GroupBox_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_RadioButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbLeftRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SliderThumbUpDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SpinnerHorizontalDecreaseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SpinnerHorizontalIncreaseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SpinnerVerticalDecreaseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_SpinnerVerticalIncreaseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TabPageHeader_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TabPane_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBar_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarCloseButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TitleBarRestoreGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TreeViewItemSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_TreeViewItemSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Themes_XP_Window_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_Tools_Options_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_UI_MessageBox_Error_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_UI_MessageBox_Information_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_UI_MessageBox_Question_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_UI_MessageBox_Warning_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_View_ZoomIn_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_View_ZoomInCircle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_View_ZoomOut_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.RIMG_View_ZoomOutCircle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Presentation.NResources.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Automatic_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Loader_gif">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_None_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Preview_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_PrintPreview_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Properties_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_SelectPredefined_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Design_Add_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Design_DownArrow16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Design_Ellipses16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Design_MoveDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Design_MoveUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Copy_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Cut_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Delete_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Erase_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Find_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_FX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Paste_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_PasteSpecial_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Redo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Replace_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_SelectAll_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Undo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Edit_Update_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_DocumentInfo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_New_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_Open_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_Page_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_Pdf_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_Print_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_RecentDocuments_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_Save_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_File_SaveAs_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_Bold_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_Italic_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_StrikeThrough_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_Subscript_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_Superscript_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_FontStyle_Underline_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Help_About_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Help_Help_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_ImageService_Downloading_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_ImageService_Error_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Insert_Barcode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Insert_Barcode2D_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Insert_Image_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_DocumentInfo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_New_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Open_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Page_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Pinned_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Print_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Save_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_SaveAs_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Settings_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_AppMenu_Unpinned_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_Home_Paste_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_Insert_Barcode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_Insert_Barcode2D_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Ribbon_Insert_Image_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_FillStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_ShadowStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_StrokeStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_TextBackgroundFill_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_TextFill_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_TextHighlight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Styles_TextStroke_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_BeginArrowhead_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_Center_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_EndArrowhead_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_Justify_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_Left_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_Right_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_VAlignBottom_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_VAlignMiddle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_TextAlign_VAlignTop_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_DefaultCommandBarItemImage_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_Button_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_CheckBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_DateTimeBoxDropDownButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_GroupBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_NumericUpDownUpGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_RadioButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbLeftRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SliderThumbUpDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_SpinnerButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TabPageHeader_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TabPane_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TextBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBar_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarCloseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TitleBarRestoreGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TreeViewItemSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_TreeViewItemSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Aero_Window_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_BalloonClose_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_Button_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_CheckBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_GroupBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_RadioButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderThumbBoth_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SpinnerHorizontalButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_SpinnerVerticalButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TabPageHeaderInner_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TabPageHeaderNear_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TabPageHeaderNearAndFar_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TabPane_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TextBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBar_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TreeViewSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_TreeViewSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_Mac_Window_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_BalloonClose_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_Button_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_CheckBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_DropDownButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_DropDownEdit_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_DropDownSymbol_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_GroupBox_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarLeftArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarRightArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_HScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_LargeArrowRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_NumericUpDownDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_ProgressBarFilledPartHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_ProgressBarFilledPartVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_ProgressBarHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_ProgressBarVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_RadioButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderAxis_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbLeftRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SliderThumbUpDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SpinnerHorizontalDecreaseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SpinnerHorizontalIncreaseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SpinnerVerticalDecreaseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_SpinnerVerticalIncreaseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TabPageHeader_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TabPane_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBar_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarCloseButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarCloseGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarMaximizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarMenuDropDownGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarMinimizeGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TitleBarRestoreGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TittleBarHelpGlyph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TreeViewItemSymbolCollapsed_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_TreeViewItemSymbolExpanded_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarButton_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarDownArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarGripper_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarShaft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarThumb_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_VScrollBarUpArrow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Themes_XP_Window_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_Tools_Options_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_UI_MessageBox_Error_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_UI_MessageBox_Information_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_UI_MessageBox_Question_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_UI_MessageBox_Warning_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_View_ZoomIn_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_View_ZoomInCircle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_View_ZoomOut_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Image_View_ZoomOutCircle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_AppStarting_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_Arrow_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_Cross_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_Hand_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_Help_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_HSplit_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_IBeam_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_No_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_NoMove2D_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_NoMoveH_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_NoMoveV_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanAll_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanEast_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanNorth_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanNorthEast_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanNorthWest_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanSouth_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanSouthEast_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanSouthWest_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_PanWest_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_SizeAll_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_SizeNESW_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_SizeNS_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_SizeNWSE_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_SizeWE_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_UpArrow_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_VSplit_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Cursor_Wait_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Presentation.NResources.Font_Fonts_zip">
            <summary></summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCanvasPaintEventArgs">
            <summary>
            The event arguments associated with paint events raised by canvas elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCanvasPaintEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="paintVisitor"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NCanvasPaintEventArgs.PaintVisitor">
            <summary>
            Gets the paint context associated with the paint
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NScrollContent">
            <summary>
            A widget, which contains a single other widget and allows for its scrolling.
            It measures to fit the contained element without scrollbars, 
            but if this is not possible, the scroll content element will display scrollbars.
            The contained element is always sized to its desired size.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the forward display traversal to the node child
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NScrollContent.GetTotalViewport">
            <summary>
            Overriden to return the desired size of the content
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContent.NScrollContentSchema">
            <summary>
            Schema associated with NScrollContent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NScrollContent.ContentChild">
            <summary>
            Reference to the Content child
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NScrollContent.Content">
            <summary>
            Gets or sets the widget to apply scrolling to.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NCanvas">
            <summary>
            A widget, which raises pre and post paint events, that the user can intercept 
            to perform arbitrary custom painting with a NPaintVisitor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCanvas.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NCanvas.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called when the node must be pre painted. This implementation raises the PrePaintEvent
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NCanvas.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called when the node must be post painted. This implementation raises the PostPaintEvent
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NCanvas.NCanvasSchema">
            <summary>
            Schema associated with NCanvas
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCanvas.PrePaintEvent">
            <summary>
            Pre paint event
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NCanvas.PostPaintEvent">
            <summary>
            Post paint event
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NCanvas.PrePaint">
            <summary>
            Event, which occurs before the painting of the node children.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NCanvas.PostPaint">
            <summary>
            Event, which occurs after the painting of the node children.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDeclarationCollection">
            <summary>
            Represent a collection of declarations (property-value pairs)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclarationCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclarationCollection.#ctor(Nevron.Nov.Dom.NDeclarationCollection)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclarationCollection.NDeclarationCollectionSchema">
            <summary>
            Schema associated with NDeclarationCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclarationCollection.PropertyProperty">
            <summary>
            Reference to the Property property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDeclarationCollection.ValueProperty">
            <summary>
            Reference to the Value property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDeclarationCollection.NDeclarationCollectionDesigner">
            <summary>
            The designer for declaration collections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclarationCollection.NDeclarationCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDeclarationCollection.NDeclarationCollectionDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema 
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.ENConditionSpecificityRank">
            <summary>
            Enumerates the supported condition specificity ranks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENConditionSpecificityRank.None">
            <summary>
            The condition is without specificity (e.g. is ignored from the selector specificity calculations)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENConditionSpecificityRank.Low">
            <summary>
            The condition is with low specificity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENConditionSpecificityRank.Normal">
            <summary>
            The condition is with normal specificity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENConditionSpecificityRank.High">
            <summary>
            The condition is with high specificity
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomProperty">
            <summary>
            Represents a DOM property, which is a Name-Type pair.
            Each DOM property has an unique Id accessible by its Id readonly field. 
            Each DOM property has a list of it's NProperty instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.TryFindInstance(Nevron.Nov.Dom.NSchema,Nevron.Nov.Dom.NProperty@)">
            <summary>
            Given a schema, tries to find the instance self-property, 
            which is declared in the schema or a base schema
            </summary>
            <param name="schema"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomProperty.Id">
            <summary>
            Gets the property id
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomProperty.Name">
            <summary>
            Gets the property name
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomProperty.DomType">
            <summary>
            Gets the DOM type associated with the property value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomProperty.IsExtended">
            <summary>
            Gets whether the DOM property is created for an extended or self property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.Register(System.String,Nevron.Nov.Dom.NDomType)">
            <summary>
            Creates a new or returns an already created dom property with the specified name and type
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.GetById(System.Int32)">
            <summary>
            Gets the property associated with the specified id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.GetByName(System.String)">
            <summary>
            Gets the properties with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.GetByType(Nevron.Nov.Dom.NDomType)">
            <summary>
            Gets the properties with the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomProperty.IsExtenedName(System.String)">
            <summary>
            Checks whether the property name is the name of an extened property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomProperty.Instances">
            <summary>
            Gets the current instances of this property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NRule">
            <summary>
            The NRule class is a styling node, which represent a pair of selectors and a style declaration. 
            The style declaration of the rule applies to the elements, which match at least one of the rule selectors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.#ctor(Nevron.Nov.Dom.NRule)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.GetSelectorBuilder">
            <summary>
            Gets a selector build which adds created selectors to the Selectors 
            collection of this rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(Nevron.Nov.Dom.NProperty,``0)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(Nevron.Nov.Dom.NDomProperty,``0)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(System.String,``0)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(Nevron.Nov.Dom.NProperty,``0,System.Boolean)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(Nevron.Nov.Dom.NDomProperty,``0,System.Boolean)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.AddValueDeclaration``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a value declaration
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="important"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NRule.NRuleSchema">
            <summary>
            Schema associated with NRule
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NRule.CommentProperty">
            <summary>
            Reference to the Comment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NRule.MediaSelectorProperty">
            <summary>
            Reference to the MediaSelector property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NRule.SelectorsChild">
            <summary>
            Reference to the Selectors child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NRule.DeclarationsChild">
            <summary>
            Reference to the Declarations child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRule.Selectors">
            <summary>
            Gets or sets the rule selectors, that define the set of element for which the rule applies
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRule.Declarations">
            <summary>
            Gets or sets the style declaration of the rule, which constains the declarations for the property values
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRule.Comment">
            <summary>
            Gets or sets the author comment associated with the rule
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRule.MediaSelector">
            <summary>
            Gets or sets the media selector that specifies the set of medias for which this rule applies to.
            This selector is not taken into account, if the parent style sheet media selector fails to match the media.
            A value of null means that the stylesheet applies for all medias.
            By default set to null.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NRule.NRuleDesigner">
            <summary>
            The designer for rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NRule.NRuleDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NStyleSheetCollection">
            <summary>
            The NStyleSheetCollection class represent a collection of style sheets
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheetCollection.#ctor(Nevron.Nov.Dom.NStyleSheetCollection)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheetCollection.ApplyTheme(Nevron.Nov.Dom.NTheme)">
            <summary>
            Applies the specified theme. 
            The implementation creates an instance of the theme stylesheet and adds it to the collection.
            Any stylesheets created by themes of the same type are removed from the collection.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheetCollection.GetStyleSheetByTitle(System.String)">
            <summary>
            Returns the style sheet in this collection with the specified title or null
            if a style sheet with such title does not exist.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheetCollection.NStyleSheetCollectionSchema">
            <summary>
            Schema associated with NStyleSheetCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheetCollection.EnabledProperty">
            <summary>
            Reference to the Enabled property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelector">
            <summary>
            Represents a styling selector. 
            Selectors are parts of a rule and specify whether the rule declaration applies to an element or not.
            The selector couples a list of key conditions, and appends a list of combinators.
            In order for the selector to match an element, the element must match the key conditions and the combinators.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelector.#ctor(Nevron.Nov.Dom.NConditionCollection,Nevron.Nov.Dom.NCombinator)">
            <summary>
            Creates a selector with the specified conditions and a single combinator
            </summary>
            <param name="combinator"></param>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelector.#ctor(Nevron.Nov.Dom.NSelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelector.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the value of a property has changed
            </summary>
            <remarks>
            Overriden to invalidate the caches specificity
            </remarks>
            <param name="data">data for the change</param>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelector.NSelectorSchema">
            <summary>
            Schema associated with NSelector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelector.ConditionsProperty">
            <summary>
            Reference to the Conditions property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelector.CombinatorsProperty">
            <summary>
            Reference to the Combinators property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelector.Specificity">
            <summary>
            Gets the selector specificity
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelector.Conditions">
            <summary>
            Gets or sets the conditions associated with this selector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSelector.Combinators">
            <summary>
            Gets or sets the combinators associated with this selector.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelector.NSelectorDesigner">
            <summary>
            Designer for NSelector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelector.NSelectorDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSelectorCollection">
            <summary>
            The NSelectorCollection class represents a collection of selectors
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorCollection.#ctor(Nevron.Nov.Dom.NSelectorCollection)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSelectorCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Updates any references or cache related to the context of the node children
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NSelectorCollection.NSelectorCollectionSchema">
            <summary>
            Schema associated with NSelectorCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NStyleSheet">
            <summary>
            The NStyleSheet class represent a collection of rules, which applies for a target media type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheet.#ctor(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheet.CreateRule(Nevron.Nov.Function{Nevron.Nov.Dom.NSelectorBuilder})">
            <summary>
            Helper method for making a rule which matches the selector build by the specified delegate.
            </summary>
            <remarks>
            The method is intended to be used in the following way:
            <example>
            <code lang="C#">
            // create a rule that matches buttons
            NRule rule = sheet.CreateRule(delegate(NSelectorBuilder sb) { sb.TypeOf(NButton.NButtonSchema); });
            </code>
            </example>
            </remarks>
            <param name="buildSelectorDelegate"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheet.NStyleSheetSchema">
            <summary>
            Schema associated with NStyleSheet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheet.EnabledProperty">
            <summary>
            Reference to the Enabled property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheet.MediaSelectorProperty">
            <summary>
            Reference to the MediaSelector property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheet.TitleProperty">
            <summary>
            Reference to the Title property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NStyleSheet.AuthorProperty">
            <summary>
            Reference to the Source property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStyleSheet.Enabled">
            <summary>
            Gets or sets whether the style sheet is enabled.
            When set to false all rules contained in the stylesheet will be excluded from the cascade.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStyleSheet.MediaSelector">
            <summary>
            Gets or sets the media selector that specifies the set of medias for which the rules in this style sheet apply to.
            If the media selector of a stylesheet fails to match a specific media, the entire stylesheet will be excluded from the cascade,
            even if there are rules in the stylesheet that match the media. A value of null means that the stylesheet applies for all medias.
            By default set to null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStyleSheet.Title">
            <summary>
            Gets or sets the style sheet title. 
            This property is intended to give the user a human readable description 
            about the rules contained in the sheet.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NStyleSheet.Author">
            <summary>
            Gets or sets the author of the sheet.
            This property is intended to give the user a clue about the origin of the style sheet.
            Sheets created by themes are by default created with an author set to {ThemeType}_Theme string,
            where {ThemeType} is the type of the theme (returned by the GetThemeType() method of the NTheme class).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NStyleSheet.NStyleSheetDesigner">
            <summary>
            The designer for style sheets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NStyleSheet.NStyleSheetDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NMedia">
            <summary>
            The NMedia class is used to identify a media type.
            In the Nevron DOM there is a fixed set of media types,
            which are exposed as static members of this class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMedia.DeepClone">
            <summary>
            Simply returns this media instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NMedia.MediaType">
            <summary>
            The media type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NMedia.InteractityGroup">
            <summary>
            Gets the interactivity group to which the media belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NMedia.ContinuationGroup">
            <summary>
            Gets the continuation group to which the media belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NMedia.Screen">
            <summary>
            The generic Screen graphics media
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NMedia.Print">
            <summary>
            The generic Print graphics media
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMedia.GetByType(Nevron.Nov.Dom.ENMediaType)">
            <summary>
            Gets a generic media by its type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NMedia.DomSurrogateSerializer">
            <summary>
            Gets a surrogate serializer for this object.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NMediaSelector">
            <summary>
            A simple condition, which either matches a media type or not.
            A media selector is a part of each rule and stylesheet.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaSelector.#ctor">
            <summary>
            Creates a media selector that matches any media type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaSelector.#ctor(Nevron.Nov.Dom.ENMediaType[])">
            <summary>
            Creates a media selector that matches medias of any of the specified media types.
            </summary>
            <param name="mediaTypes"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaSelector.DeepClone">
            <summary>
            Creates a copy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NMediaSelector.Match(Nevron.Nov.Dom.NMedia)">
            <summary>
            Returns true if the specified media is matched by this this selector or is null (universal media). 
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NMediaSelector.MediasTypes">
            <summary>
            Gets the media types, matched by this selector. 
            If an empty array is returned, then the selector matches all medias types.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NExpressionChangeData">
            <summary>
            Represents the change data associated with an expression change 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NExpressionChangeData.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NExpressionChangeData.OldExpression">
            <summary>
            Old property expression
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NExpressionChangeData.NewExpression">
            <summary>
            New property expression
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NExpressionChangeEventArgs">
            <summary>
            The NExpressionChangeEventArgs class represents mutation event arguments,
            dispatched to handlers interested in expression change operations
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpressionChangeEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NExpressionChangeData)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpressionChangeEventArgs.Property">
            <summary>
            Property whose expression changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpressionChangeEventArgs.OldExpression">
            <summary>
            Old property expression
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpressionChangeEventArgs.NewExpression">
            <summary>
            New property expression
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpressionChangeEventArgs.Data">
            <summary>
            Gets the expression change data associated with the event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NExpression">
            <summary>
            Represents an expression and serves as base class for all expressions.
            Expressions are used to automatically update the value of an element property.
            </summary>
            <remarks>
            The {element:property} value, which is updated is called "expression target" or simply "target".
            The expression is bound to target, if the TargetElement and TargetProperty properties are determined.
            The binding/unbinding is automatically performed when an expression is set to an element property via the SetFx methods of NElement.
            You can check whether the expression is bound to target via the IsBoundToTarget property.
            <para>
            An expression can either be in parsed or unparsed state. 
            The expression can be evaluated only when it is parsed.
            The parsing and evaluation are automatically performed. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpression.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpression.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpression.Nevron#Nov#Serialization#INDomCustomSerializable#Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Safes the expression to a property bag
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpression.Nevron#Nov#Serialization#INDomCustomSerializable#Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NExpression.FromObject(System.Object)">
            <summary>
            Creates or gets the expressoin from an object.
            You can pass the following object types to this method:
            <para>
            1. NExpression - returns the NExpression itself.
            </para>
            <para>
            2. string - returns a NFormulaFx the formala of which is the specified string.
            </para>
            <para>
            3. null - returns null.
            </para>
            <para>
            4. Any other object - throws an exception.
            </para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.TargetElement">
            <summary>
            Gets the target element. Valid only when the expression is bound to target.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.TargetProperty">
            <summary>
            Gets the target property. Valid only when the expression is bound to target.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.Guard">
            <summary>
            Gets or sets whether the expression is guarded.
            When guarded, the expression can be removed or replaced only by force.
            This property can only be set prior to assigning the expression to a target.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.Permeable">
            <summary>
            Gets or sets whether the expression is permeable.
            This flag can optionally be raised for guarded expression, when you want to allow SetValue or ClearValue to allow local value modification.
            This property can only be set prior to assigning the expression to a target.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.IsBoundToTarget">
            <summary>
            Gets whether the expression is bound to the target {element:property}
            The binding to/unbinding from a target is automatically performed when the expression is set to an element property,
            and when an expression is removed from an element property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.IsParsed">
            <summary>
            Gets whether the expression is parsed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.HasCircularDependencies">
            <summary>
            Gets whether the expression has circular dependencies.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NExpression.LastError">
            <summary>
            Gets the last error, which was encounter when the expression was parsed, evaluated or unparsed.
            The error is automatically cleared if one of the specified operations succeeded.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NFormulaFx">
            <summary>
            Represents an expression, which binds a target element property value to be the result of a formula evaluation.
            </summary>
            <remarks>
            The formula expression is parsed and evaluated by the document evaluator.
            The functions set that you can use in formula expressions may be element specific as is the syntax in which dependencies are referenced.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Formulas.INVariableProvider">
            <summary>
            Implemented by objects, which can provide the formula engine with variables
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.INVariableProvider.GetVariableIndex(System.String)">
            <summary>
            Gets a variable index for the specified string (used during parsing).
            Returns -1 if the specified string is not a valid variable name.
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Formulas.INVariableProvider.GetVariableValue(System.Int32)">
            <summary>
            Gets the variable value by a previously provided the variable index (used during evaluation).
            Throws an exception if the specified index is not valid.
            </summary>
            <param name="varIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="formula"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.Nevron#Nov#Formulas#INVariableProvider#GetVariableIndex(System.String)">
            <summary>
            Gets a variable index for the specified string (used during parsing).
            Returns -1 if the specified string is not a valid variable name.
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.Nevron#Nov#Formulas#INVariableProvider#GetVariableValue(System.Int32)">
            <summary>
            Gets the variable value by a previously provided the variable index (used during evaluation).
            Throws an exception if the specified index is not valid.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.ToString">
            <summary>
            Overriden to return the formula.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NFormulaFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NFormulaFx.FormulaStepsSeparator">
            <summary>
            The seperator between formula steps - the '.' char.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NFormulaFx.Formula">
            <summary>
            Gets the formula, which this expression represents
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NBindingFx">
            <summary>
            Represents an expression, which binds the target element property to an arbitrary other element property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NBindingFx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NBindingFx.#ctor(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a new binding FX that binds the targetElement:property to the sourceElement:property.
            </summary>
            <param name="sourceElement"></param>
            <param name="sourceProperty"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NBindingFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NBindingFx.ToString">
            <summary>
            Overriden to return a meaningful description of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NBindingFx.TwoWayBind(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a two way binding between the specified elements properties. 
            </summary>
            <param name="element1"></param>
            <param name="element1Property"></param>
            <param name="element2"></param>
            <param name="element2Property"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NBindingFx.SourcePropertyName">
            <summary>
            Gets the name of the parent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Formulas.INObjectFromVariantFactory">
            <summary>
            Implemented by objects which can create a value from a variant
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.INObjectFromVariantFactory.CreateObject(Nevron.Nov.NVariant)">
            <summary>
            Creates a value object from a variant
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Formulas.INVariantFromValueFactory">
            <summary>
            Implemented by objects which can create a variant from a value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.INVariantFromValueFactory.CreateVariant(System.Object)">
            <summary>
            Creates a variant for the specified object
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NPropertyDomTypeFilter">
            <summary>
            Filters properties by their DOM type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyDomTypeFilter.#ctor(Nevron.Nov.Dom.NDomType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domType"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyDomTypeFilter.Filter(Nevron.Nov.Dom.NProperty)">
            <summary>
            Overriden to return true if the specified object type is a schema property, 
            whose backing type is the specified backing type
            </summary>
            <param name="property">property to filter</param>
            <returns>true if the specified object matches the filter criteria otherwise false</returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeRef">
            <summary>
            Represents a node reference.
            Node references are used to store the references to nodes as property values or inside expressions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.#ctor">
            <summary>
            Default constructor. Creates a NULL element ref.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a new element ref that references the specified element.
            </summary>
            <param name="node">the element for which to make a reference (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Performs deep cloning of the specified object in the specified context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.Equals(System.Object)">
            <summary>
            Overriden to return true if other is NNodeRef and it points to the same element.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.GetHashCode">
            <summary>
            Overriden to return the hash code of the referenced element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.SafeGetNode(Nevron.Nov.Dom.NNodeRef)">
            <summary>
            Safely gets the element referenced by the specified ref.
            </summary>
            <param name="nodeRef"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.GetValue``1(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty)">
            <summary>
            Gets a node ref property value 
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeRef.SetValue``1(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NProperty,``0)">
            <summary>
            Sets a node ref property value 
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeRef.Node">
            <summary>
            Gets the node referenced by this reference.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NThumbDragEventArgs">
            <summary>
            The NThumbDragEventArgs class represents the event arguments associated with thumb drag events
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NThumbDragEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NThumbDragEventArgs.Value">
            <summary>
            Gets the value relative to the thumb axis to which the thumb has been dragged
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorder">
            <summary>
            An attribute, which defines the appearance of a border wall.
            </summary>
            <remarks>
            Each border wall has four types of side bricks - left, right, top and bottom, 
            and eigth possible corner bricks - one for each possible side transition - 
            left-top, top-left, right-top, top-right, right-bottom, bottom-right, left-bottom and bottom-left.
            <para>
            The border itself defines a part (side or corner) for each brick type so that full control 
            can be gained over the outlining and filling of a specific brick type.
            </para>
            At it's simplest variant a border can be instructed to simply fill the interior of the wall 
            and stroke the inner and outer outlines of the wall.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.SetInnerRadiuses(System.Double)">
            <summary>
            Sets the InnerXRadius and InnerYRadius properties of all corners
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.SetOuterRadiuses(System.Double)">
            <summary>
            Sets the OuterXRadius and OuterYRadius properties of all corners
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.SetRadiuses(System.Double)">
            <summary>
            Sets the all radiues of all corners
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.SetRadiuses(System.Double,System.Double)">
            <summary>
            Sets the all radiues of all corners.
            </summary>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.PaintBackgroundGeometry(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.UI.NBorderWall)">
            <summary>
            Paints the background geometry of this border. 
            It is up to the caller to setup the visitor styles prior to calling this method.
            </summary>
            <param name="visitor"></param>
            <param name="wall"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.Paint(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.UI.NBorderWall)">
            <summary>
            Paints the wall provided by the specified border wall implementation to the specified paint context.
            </summary>
            <param name="visitor"></param>
            <param name="wall"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateHitTestPath(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.UI.NBorderWall)">
            <summary>
            Gets the path for hit testing.
            </summary>
            <param name="visitor"></param>
            <param name="wall"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.NBorderSchema">
            <summary>
            Schema associated with NBorder
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.LeftSideProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.TopSideProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.RightSideProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.BottomSideProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.LeftTopCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.TopLeftCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.RightTopCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.TopRightCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.RightBottomCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.BottomRightCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.LeftBottomCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.BottomLeftCornerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.MiddleOutlineFactorProperty">
            <summary>
            Reference to the MiddleOutlineFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.OuterStrokeProperty">
            <summary>
            Reference to the OuterStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.MiddleStrokeProperty">
            <summary>
            Reference to the MiddleStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.InnerStrokeProperty">
            <summary>
            Reference to the InnerStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.BackgroundOutlineProperty">
            <summary>
            Reference to the BackgroundOutline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NBorder.HitTestOutlineProperty">
            <summary>
            Reference to the HitTestOutline property
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateSunken3DBorder(Nevron.Nov.UI.NUIThemeColorMap)">
            <summary>
            Creates a Sunken Border for the specified theme colors.
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateRaised3DBorder(Nevron.Nov.UI.NUIThemeColorMap)">
            <summary>
            Creates a Raised Border for the specified theme colors.
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.Create3DBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a Windows Classic 3D border with the specified colors.
            </summary>
            <param name="ltOuter"></param>
            <param name="ltInner"></param>
            <param name="rbOuter"></param>
            <param name="rbInner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a border that fills its sides and corners with the specified color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a border that fills its sides and corners with the specified color.
            </summary>
            <param name="color"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NFill)">
            <summary>
            Creates a border that fills its sides and corners with the specified filling.
            </summary>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NFill,System.Double,System.Double)">
            <summary>
            Creates a border that fills its sides and corners with the specified filling.
            </summary>
            <param name="fill"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NFill,Nevron.Nov.Graphics.NStroke,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Creates a border that fills its sides and corners with the specified filling 
            and strokes the inner and outer outlines with the specified strokes.
            </summary>
            <param name="fill"></param>
            <param name="innerStroke"></param>
            <param name="outerStroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateFilledBorder(Nevron.Nov.Graphics.NFill,Nevron.Nov.Graphics.NStroke,Nevron.Nov.Graphics.NStroke,System.Double,System.Double)">
            <summary>
            Creates a border that fills its sides and corners with the specified filling 
            and strokes the inner and outer outlines with the specified strokes.
            </summary>
            <param name="fill"></param>
            <param name="innerStroke"></param>
            <param name="outerStroke"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateMiddleStrokeBorder(Nevron.Nov.Graphics.ENDashStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a middle stroke border using the given color and border thickness.
            </summary>
            <param name="dashStyle"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateOuterOutlineBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a border that strokes the outer outline with the specified color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateOuterOutlineBorder(Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Creates a border that strokes the outer outline with the specified color.
            </summary>
            <param name="color"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateOuterOutlineBorder(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Creates a border that strokes the outer outline with the specified stroke.
            </summary>
            <param name="outerStroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateOuterOutlineBorder(Nevron.Nov.Graphics.NStroke,System.Double)">
            <summary>
            Creates a border that strokes the outer outline with the specified stroke.
            </summary>
            <param name="outerStroke"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateInnerOutlineBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a border that strokes the inner outline with the specified color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateInnerOutlineBorder(Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Creates a border that strokes the inner outline with the specified color.
            </summary>
            <param name="color"></param>
            <param name="innerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateInnerOutlineBorder(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Creates a border that strokes the inner outline with the specified stroke.
            </summary>
            <param name="innerStroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateInnerOutlineBorder(Nevron.Nov.Graphics.NStroke,System.Double)">
            <summary>
            Creates a border that strokes the inner outline with the specified stroke.
            </summary>
            <param name="innerStroke"></param>
            <param name="innerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateDoubleBorder(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a double border filled with the given color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateDoubleBorder(Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a double border filled with the given color.
            </summary>
            <param name="color"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateDoubleBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a double border using the given inner and outer colors and applying the specified corner rounding.
            </summary>
            <param name="innerColor"></param>
            <param name="outerColor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateDoubleBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a double border using the given inner and outer colors and applying
            the specified corner rounding.
            </summary>
            <param name="innerColor"></param>
            <param name="outerColor"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateTwoColorBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a border that consists of two colors - inner and outer.
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateTwoColorBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a border that consists of two colors - inner and outer.
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateThreeColorBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a three-color border using the given inner, middle and outer colors.
            </summary>
            <param name="innerColor"></param>
            <param name="middleColor"></param>
            <param name="outerColor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreateThreeColorBorder(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Double,System.Double)">
            <summary>
            Creates a three-color border using the given inner, middle and outer colors and applying
            the specified corner rounding.
            </summary>
            <param name="innerColor"></param>
            <param name="middleColor"></param>
            <param name="outerColor"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreatePredefinedBorder(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a predefined border using the given predefined border style, color and thickness.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.CreatePredefinedBorder(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins,System.Double,System.Double)">
            <summary>
            Creates a predefined border using the given predefined border style, color and thickness and applying
            the specified corner radiuses.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.LeftSide">
            <summary>
            Gets or sets the left border side
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.TopSide">
            <summary>
            Gets or sets the top border side
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.RightSide">
            <summary>
            Gets or sets the right border side
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.BottomSide">
            <summary>
            Gets or sets the bottom border side
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.LeftTopCorner">
            <summary>
            Gets or sets the left-to-top corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.TopLeftCorner">
            <summary>
            Gets or sets the top-to-left corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.RightTopCorner">
            <summary>
            Gets or sets the right-to-top corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.TopRightCorner">
            <summary>
            Gets or sets the top-to-right corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.LeftBottomCorner">
            <summary>
            Gets or sets the left-to-bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.BottomLeftCorner">
            <summary>
            Gets or sets the bottom-to-left corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.RightBottomCorner">
            <summary>
            Gets or sets the right-to-bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.BottomRightCorner">
            <summary>
            Gets or sets the bottom-to-right corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.OuterStroke">
            <summary>
            The stroke for the entire border wall outer outline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.MiddleStroke">
            <summary>
            The stroke for the entire border wall middle outline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.InnerStroke">
            <summary>
            The stroke for the entire border wall inner outline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.Fill">
            <summary>
            The filling of the entire border wall interior.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.BackgroundOutline">
            <summary>
            Gets or sets the background outline, that defines which of the border outlines 
            should be used for a background area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NBorder.HitTestOutline">
            <summary>
            Gets or sets the hit test outline, that defines which of the border outlines 
            should be used for a hit testing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NBorder.NSimpleBorderDesigner">
            <summary>
            A designer for borders, which lets the user quickly edit the most commonly used border
            properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.NSimpleBorderDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.NSimpleBorderDesigner.CreateInstanceForSurrogateEditing(Nevron.Nov.Editors.NNodeSurrogate)">
            <summary>
            Creates an NBorder instance for the purpose of surrogate editing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NBorder.NAdvancedBorderDesigner">
            <summary>
            A designer for borders, which lets the user edit all border properties and parts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.NAdvancedBorderDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NBorder.NAdvancedBorderDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.UI.NPairBox">
            <summary>
            Represents a pair of two arbitrary widgets, which is a commonly used UI construction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor(System.Object,System.Object)">
            <summary>
            Initializing constructor
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <param name="embedBoxesInUnisizeBox"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor(System.Object,System.Object,Nevron.Nov.UI.ENPairBoxRelation)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <param name="relation"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor(System.Object,System.Object,Nevron.Nov.UI.ENPairBoxRelation,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <param name="relation"></param>
            <param name="embedBoxesInUnisizeBox"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.#ctor(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget,Nevron.Nov.UI.ENPairBoxRelation,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <param name="relation"></param>
            <param name="embedBoxesInUnisizeBox"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the context.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.NPairBoxSchema">
            <summary>
            Schema associated with NPairBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.Box1Child">
            <summary>
            Reference to the Box1 child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.Box2Child">
            <summary>
            Reference to the Box2 child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.BoxesRelationProperty">
            <summary>
            Reference to the BoxesRelation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.FillModeProperty">
            <summary>
            Reference to the FillMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.FitModeProperty">
            <summary>
            Reference to the FitMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NPairBox.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NPairBox.Create(System.String,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates a labeled widget.
            </summary>
            <param name="labelText">The label text.</param>
            <param name="widget">The widget.</param>
            <returns>A new NPairBox instance that contains a label and the specified widget.</returns>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.Box1">
            <summary>
            Gets or sets the Box1 widget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.Box2">
            <summary>
            Gets or sets the Box2 widget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.BoxesRelation">
            <summary>
            Gets or sets the pair box relation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.FillMode">
            <summary>
            Gets or sets the fill mode of the stack layout the 2 boxes are layouted with.
            Has effect only if BoxesRelation is not set to Overlay.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.FitMode">
            <summary>
            Gets or sets the fit mode of the stack layout the 2 boxes are layouted with.
            Has effect only if BoxesRelation is not set to Overlay.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NPairBox.Spacing">
            <summary>
            Gets or sets the spacing between the boxes of this pair box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NImageBox">
            <summary>
            A widget, which renders and sizes to an image.
            The image is controlled by the Image property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NImageBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NImageBox.#ctor(Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializer constructor
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NImageBox.MeasureContent(System.Boolean)">
            <summary>
            Measures the desired size of the element content
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NImageBox.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NImageBox.NImageBoxSchema">
            <summary>
            Schema associated with NImageBox
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NImageBox.ImageProperty">
            <summary>
            Reference to the Image property
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NImageBox.Image">
            <summary>
            Gets or sets the imagebox's image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENSymbolShape">
            <summary>
            Enumerates the predefined symbol shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowDown">
            <summary>
            Represents an arrow, which points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowLeft">
            <summary>
            Represents an arrow, which points left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowRight">
            <summary>
            Represents an arrow, which points right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowUp">
            <summary>
            Represents an arrow, which points up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowheadDown">
            <summary>
            An arrowhead that points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowheadLeft">
            <summary>
            An arrowhead that points left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowheadRight">
            <summary>
            An arrowhead that points right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.ArrowheadUp">
            <summary>
            An arrowhead that points up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.BeakDown">
            <summary>
            A beak that points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.BeakUp">
            <summary>
            A beak that points up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Check">
            <summary>
            A check mark.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.None">
            <summary>
            The none mark
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.DoubleTriangleDown">
            <summary>
            Two triangles that points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.DoubleTriangleRight">
            <summary>
            Two triangles that point right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.DoubleWindow">
            <summary>
            Two windows that overlap.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Ellipse">
            <summary>
            An ellipse.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Funel">
            <summary>
            The funel (filter) 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Minus">
            <summary>
            A minus symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.PendantDown">
            <summary>
            A pendant that points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.PendantRight">
            <summary>
            A pendant that points right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Pen">
            <summary>
            A pen symbol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Plus">
            <summary>
            A plus symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Question">
            <summary>
            A question mark.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Rectangle">
            <summary>
            A rectangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Recurrence">
            <summary>
            A recurrence symbol, which consists of two elliptical arrows with opposite directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Remove">
            <summary>
            A remove symbol (solid X)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.StrokedX">
            <summary>
            A stroked X symbol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TabStopDecimal">
            <summary>
            A decimal tab stop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TabStopCenter">
            <summary>
            A center tab stop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TabStopLeft">
            <summary>
            A left tab stop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TabStopRight">
            <summary>
            A right tab stop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TriangleDown">
            <summary>
            A triangle that points down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TriangleLeft">
            <summary>
            A triangle that points left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TriangleRight">
            <summary>
            A triangle that points right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.TriangleUp">
            <summary>
            A triangle that points up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolShape.Window">
            <summary>
            A window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENDropDownEditButtonPosition">
            <summary>
            Enumerates the supported drop down button positions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDropDownEditButtonPosition.Right">
            <summary>
            The drop down button is positioned to the right of the drop down edit content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDropDownEditButtonPosition.Bottom">
            <summary>
            The drop down button is positioned under the drop down edit content.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPredefinedBorderStyle">
            <summary>
            Enumerates the predefined border styles.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Solid">
            <summary>
            Solid border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Inset">
            <summary>
            A 3D border that seems embedded into the canvas.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Outset">
            <summary>
            A 3D border, which gives the impressions that it protrudes from the canvas.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Double">
            <summary>
            Double border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Dash">
            <summary>
            Dashed border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Dot">
            <summary>
            Dotted border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.DashDot">
            <summary>
            Border made of alternating dash and dot segments.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.DashDotDot">
            <summary>
            Border made of alternating dash and double-dot segments.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.DownwardDiagonal">
            <summary>
            Border filled with downward diagonal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.UpwardDiagonal">
            <summary>
            Border filled with upward diagonal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Bubble">
            <summary>
            Border filled with bubbles.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Brick">
            <summary>
            Border made of bricks.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedBorderStyle.Custom">
            <summary>
            Custom border.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCharacterCasing">
            <summary>
            Enumerates how to transform characters in text boxes and labels
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCharacterCasing.Normal">
            <summary>
            Characters retain thier original casing
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCharacterCasing.UpperCase">
            <summary>
            All characters are converted to upper case
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCharacterCasing.LowerCase">
            <summary>
            All characters are converted to lower case
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTextDirection">
            <summary>
            Enumerates the text directions
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTextDirection.LeftToRight">
            <summary>
            Left to right direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTextDirection.RightToLeft">
            <summary>
            Right to left direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTextDirection.Automatic">
            <summary>
            Automatic direction
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENViewportAutoScrollerMode">
            <summary>
            Enumerates the modes in which the autoscroller can operate
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENViewportAutoScrollerMode.Disabled">
            <summary>
            Autoscrolling is not performed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENViewportAutoScrollerMode.MouseInScrollMargins">
            <summary>
            Starts/stops autoscrolling when the mouse has entered/left the scrollable margins of the viewport
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENViewportAutoScrollerMode.MouseOrDragAreaInScrollMargins">
            <summary>
            Starts/stops autoscrolling when the mouse has entered/left the scrollable margins of the viewport,
            or a dragged area interests with the scrollable margins of the viewport.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENExtendedLook">
            <summary>
            Enumerates the extended looks supported by some widgets
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENExtendedLook.Normal">
            <summary>
            Normal - widget is styled with typical for the theme look.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENExtendedLook.Flat">
            <summary>
            Flat - widget is styled in a flat, that only uses the theme color map (i.e. other metrics are the same for all themes).
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENButtonState">
            <summary>
            Enumerates the button pressed states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENButtonState.Ready">
            <summary>
            The button is ready to be pressed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENButtonState.Pressed">
            <summary>
            The button is pressed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENButtonState.Released">
            <summary>
            The button is released. 
            This is an intermediate state which occurs when the button goes from pressed to ready state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENDateTimeBoxMode">
            <summary>
            Enumerates the date time box modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDateTimeBoxMode.Date">
            <summary>
            Shows a calendar for picking a date.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDateTimeBoxMode.Time">
            <summary>
            Shows 3 numeric up/downs for picking hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDateTimeBoxMode.DateAndTime">
            <summary>
            Shows a calendar and 3 numeric up/downs for picking time.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDateTimeBoxMode.MonthAndYear">
            <summary>
            Shows a combo box for selecting a month and a numeric up/down for
            selecting an year.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENComboBoxStyle">
            <summary>
            Enumerates the combo box styles.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENComboBoxStyle.DropDown">
            <summary>
            Specifies that the list is displayed by clicking the down arrow and that the text portion is editable.
            This means that the user can enter a new value and is not limited to selecting an existing value from the list.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENComboBoxStyle.DropDownList">
            <summary>
            Specifies that the list is displayed by clicking the down arrow and that the text portion is not editable.
            This means that the user cannot enter a new value. Only values already in the list can be selected.
            This is the default style.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENProgressBarStyle">
            <summary>
            Enumerates the progress bar style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarStyle.Horizontal">
            <summary>
            A horizontally oriented rectangular progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarStyle.Vertical">
            <summary>
            A vertically oriented rectangular progress bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarStyle.Circular">
            <summary>
            A circular progress bar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENProgressBarLabelStyle">
            <summary>
            Enumerates the progress bar label styles.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarLabelStyle.Hidden">
            <summary>
            The label will not be shown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarLabelStyle.Value">
            <summary>
            The label will show the current value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarLabelStyle.Factor">
            <summary>
            The label will show the current value as a factor of the progress bar range,
            i.e. as a number from 0 to 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENProgressBarLabelStyle.Percent">
            <summary>
            The label will show the current value as a percent of the progress bar range,
            i.e. as a number from 0 to 100 followed by the '%' sign.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMessageBoxButtons">
            <summary>
            Enumerates button combinations to display on a message box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.OK">
            <summary>
            The message box contains an OK button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.OKCancel">
            <summary>
            The message box contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.AbortRetryIgnore">
            <summary>
            The message box contains Abort, Retry, and Ignore buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.YesNoCancel">
            <summary>
            The message box contains Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.YesNo">
            <summary>
            The message box contains Yes and No buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxButtons.RetryCancel">
            <summary>
            The message box contains Retry and Cancel buttons.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMessageBoxIcon">
            <summary>
            Enumerates the message box icons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxIcon.None">
            <summary>
            Indicates that the message box should not contain a symbol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxIcon.Information">
            <summary>
            A symbol made of the letter 'I' in a blue circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxIcon.Question">
            <summary>
            A symbol made of a question mark in a blue circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxIcon.Warning">
            <summary>
            A symbol made of an exclamation mark in a yellow triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxIcon.Error">
            <summary>
            A symbol made of white letter 'X' in a red circle.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMessageBoxDefaultButton">
            <summary>
            Enumerates the message box default buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxDefaultButton.Button1">
            <summary>
            The first button of the message box is the default button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxDefaultButton.Button2">
            <summary>
            The second button of the message box is the default button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMessageBoxDefaultButton.Button3">
            <summary>
            The third button of the message box is the default button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTaskDialogButton">
            <summary>
            Enumerates the supported task dialog common buttons. This is a flag enum.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.Yes">
            <summary>
            Yes button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.No">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.Cancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.Retry">
            <summary>
            Retry button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTaskDialogButton.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENBorderBrickType">
            <summary>
            Enumerates the possible border wall brick types
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.LeftSide">
            <summary>
            A left side - oriented upwards - outer outline on left
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.RightSide">
            <summary>
            A right side - oriented downwards - outer outline on right
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.TopSide">
            <summary>
            A top side - oriented left-to-right - outer outline on top
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.BottomSide">
            <summary>
            A bottom side - oriented right-to-left - outer outline on bottom
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.LeftTopCorner">
            <summary>
            A corner which joins left and top sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.TopLeftCorner">
            <summary>
            A corner which joins top and left sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.LeftBottomCorner">
            <summary>
            A corner which joins left and bottom sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.BottomLeftCorner">
            <summary>
            A corner which joins bottom and left sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.RightTopCorner">
            <summary>
            A corner which joins right and top sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.TopRightCorner">
            <summary>
            A corner which joins top and right sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.RightBottomCorner">
            <summary>
            A corner which joins right and bottom sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.BottomRightCorner">
            <summary>
            A corner which joins bottom and right sides sequence
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.SideMask">
            <summary>
            Mask for sides
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.HSideMask">
            <summary>
            Mask for horizontal sides (top and bottom)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.VSideMask">
            <summary>
            Mask for vertical sides (left and right)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.CornerMask">
            <summary>
            Mask for corners
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.RightTurnCornerMask">
            <summary>
            Mask for right turn corners
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.LeftJoinCornerMask">
            <summary>
            Mask for left join corners
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderBrickType.TopJoinCorner">
            <summary>
            Mask for top join corners
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENBorderSide">
            <summary>
            Enumerates the types of border sides
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderSide.Left">
            <summary>
            Left border side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderSide.Right">
            <summary>
            Right border side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderSide.Top">
            <summary>
            Top border side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderSide.Bottom">
            <summary>
            Bottom border side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderSide.All">
            <summary>
            All border sides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENBorderOutline">
            <summary>
            Enumerates the border outlines
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderOutline.Inner">
            <summary>
            The inner outline
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENBorderOutline.Outer">
            <summary>
            The outer outline
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTabHeadersPosition">
            <summary>
            Enumerates the possible positions of the tab page headers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersPosition.Left">
            <summary>
            The tab page headers are positioned on the left side of the tab widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersPosition.Top">
            <summary>
            The tab page headers are positioned on the top side of the tab widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersPosition.Right">
            <summary>
            The tab page headers are positioned on the right side of the tab widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersPosition.Bottom">
            <summary>
            The tab page headers are positioned on the bottom side of the tab widget.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTabHeadersMode">
            <summary>
            Enumerates the possible tab page header modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersMode.Inner">
            <summary>
            The tab page headers are placed inside the tab widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersMode.Middle">
            <summary>
            Half of each tab page header is placed inside the tab widget and 
            the other half is placed outside of it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTabHeadersMode.Outer">
            <summary>
            The tab page headers are placed outside the tab widget.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENButtonClickMode">
            <summary>
            Enumerates the modes in which a button can be clicked
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENButtonClickMode.Press">
            <summary>
            The button is clicked when the button is pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENButtonClickMode.Release">
            <summary>
            The button is clicked when the button is released
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENContentPopupHostClickMode">
            <summary>
            Enumerates the modes in which a menu popup can be clicked
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENContentPopupHostClickMode.MouseDown">
            <summary>
            The menu drop down is clicked when the mouse is down insite its content
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENContentPopupHostClickMode.MouseUp">
            <summary>
            The menu drop down is clicked when the mouse is up insite its content
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMenuItemCloseOnClick">
            <summary>
            Enumerates the ways in which a menu item can close when clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMenuItemCloseOnClick.Automatic">
            <summary>
            Closes the owner menu with OK result if the item has no sub items.
            Otherwise does nothing.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMenuItemCloseOnClick.Never">
            <summary>
            The menu item never closes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMenuItemCloseOnClick.CloseOK">
            <summary>
            Closes the owner menu with OK result, which subsequently closes the entrire menu structure.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMenuItemCloseOnClick.CloseCancel">
            <summary>
            Closes the owner menu with Cancel result, which closes only the owner menu, and selects the owner menu item (if any).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMenuItemCloseOnClick.CloseNone">
            <summary>
            Closes the owner menu with None result, which closes only the owner menu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENScrollMode">
            <summary>
            Enumerates the modes in which a viewport can be scrolled.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollMode.Never">
            <summary>
            The scrolling is never allowed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollMode.Always">
            <summary>
            The scrolling is always allowed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollMode.WhenNeeded">
            <summary>
            The scrolling is allowed when needed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENZoomMode">
            <summary>
            Enumerates the modes in which a viewport can be zoomed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENZoomMode.Normal">
            <summary>
            Content is displayed with current zoom.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENZoomMode.Fit">
            <summary>
            Content is zoomed to fit the window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENZoomMode.FitToWidth">
            <summary>
            Content is zoomed to fit the window width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENZoomMode.FitToHeight">
            <summary>
            Content is zoomed to fit the window height.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENScrollType">
            <summary>
            Defines the possible types of scroller scroll event types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollType.IncreaseSmall">
            <summary>
            Increase small scroll type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollType.DecreaseSmall">
            <summary>
            Decrease small scroll type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollType.IncreaseLarge">
            <summary>
            Increase large scroll type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollType.DecreaseLarge">
            <summary>
            Decrase large scroll type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENScrollType.DragThumbTo">
            <summary>
            Drag thumb to scroll type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTicksPlacement">
            <summary>
            Enumerates the supported tick placement modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTicksPlacement.None">
            <summary>
            Ticks are not drawn.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTicksPlacement.TopLeft">
            <summary>
            Ticks are drawn on the top side of a horizontal axis or on the left side of a vertical axis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTicksPlacement.BottomRight">
            <summary>
            Ticks are drawn on the bottom side of a horizontal axis or on the right side of a vertical axis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTicksPlacement.Both">
            <summary>
            Ticks are drawn on both sides of the axis.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCalendarViewRange">
            <summary>
            Enumerates the view ranges of a calendar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarViewRange.DaysOfMonth">
            <summary>
            Days of month view range.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarViewRange.MonthsOfYear">
            <summary>
            Months of year view range.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarViewRange.YearsOfDecade">
            <summary>
            Years of decade view range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCalendarMonthFormatMode">
            <summary>
            The format used to represent the year months of a calendar month picker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarMonthFormatMode.MonthNumber">
            <summary>
            Month number
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarMonthFormatMode.MonthNumberWithLeadingZero">
            <summary>
            Month number with leading zero
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarMonthFormatMode.AbbreviatedMonthName">
            <summary>
            Abbreviated Month Name (e.g. Dec)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarMonthFormatMode.FullMonthName">
            <summary>
            Full month name (e.g. December)
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCalendarDayOfWeekFormatMode">
            <summary>
            The format used to represent the day of week headers of a calendar day picker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarDayOfWeekFormatMode.AbbreviatedDayName">
            <summary>
            The abbreviated day name (e.g. Sun)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarDayOfWeekFormatMode.FullDayName">
            <summary>
            The full day name (e.g. Sunday)
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPopupResize">
            <summary>
            Enumerates the sizing modes of a popup.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupResize.Desired">
            <summary>
            The popup width/height is equal to its desired width/height
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupResize.Parent">
            <summary>
            The popup width/height is equal to the popup parent width/height
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupResize.MaxOfDesiredAndParent">
            <summary>
            The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupResize.MinOfDesiredAndParent">
            <summary>
            The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPopupXPosition">
            <summary>
            Defines the X positioning of the popup relatively to the parent element screen placement
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.Automatic">
            <summary>
            The popup X position is automatically determined by the popup host.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.Left">
            <summary>
            The popup is displayed on the left side of the parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.Right">
            <summary>
            The popup is displayed on the right side of the parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.AlignLefts">
            <summary>
            Aligns the popup left side with the parent left side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.AlignRights">
            <summary>
            Aligns the popup right side with the parent right side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupXPosition.AlignCenters">
            <summary>
            Aligns the popup center with the parent center.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPopupYPosition">
            <summary>
            Defines the Y positioning of the popup relatively to the parent element screen placement
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.Automatic">
            <summary>
            The popup Y position is automatically determined by the popup host.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.Up">
            <summary>
            The popup is displayed on the top side of the parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.Down">
            <summary>
            The popup is displayed on the bottom side of the parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.AlignTops">
            <summary>
            Aligns the popup top side with the parent top side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.AlignBottoms">
            <summary>
            Aligns the popup bottom side with the parent bottom side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPopupYPosition.AlignCenters">
            <summary>
            Aligns the popup center with the parent center.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENTooltipPosition">
            <summary>
            Enumerates the possible tooltip positions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.BottomAlignLeft">
            <summary>
            The tooltip is placed at the bottom of the cursor, 
            with cursor hotspot aligned to the left side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.BottomAlignRight">
            <summary>
            The tooltip is placed at the bottom of the cursor, 
            with cursor hotspot aligned to the right side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.BottomAlignCenter">
            <summary>
            The tooltip is placed at the bottom of the cursor, 
            with cursor hotspot aligned with the X center of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.TopAlignLeft">
            <summary>
            The tooltip is placed at the top of the cursor, 
            with cursor hotspot aligned to the left side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.TopAlignRight">
            <summary>
            The tooltip is placed at the top of the cursor, 
            with cursor hotspot aligned to the right side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.TopAlignCenter">
            <summary>
            The tooltip is placed at the top of the cursor, 
            with cursor hotspot aligned with the X center of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.LeftAlignTop">
            <summary>
            The tooltip is placed at the left of the cursor, 
            with cursor hotspot aligned with the top side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.LeftAlignBottom">
            <summary>
            The tooltip is placed at the left of the cursor, 
            with cursor hotspot aligned with the bottom side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.LeftAlignCenter">
            <summary>
            The tooltip is placed at the left of the cursor, 
            with cursor hotspot aligned with the Y center of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.RightAlignTop">
            <summary>
            The tooltip is placed at the right side of the cursor, 
            with cursor hotspot aligned with the top side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.RightAlignBottom">
            <summary>
            The tooltip is placed at the right side of the cursor, 
            with cursor hotspot aligned with the bottom side of the tooltip.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENTooltipPosition.RightAlignCenter">
            <summary>
            The tooltip is placed at the right side of the cursor, 
            with cursor hotspot aligned with the Y center of the tooltip.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENSplitterSplitMode">
            <summary>
            Enumerates the modes in which a splitter splits its content area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSplitterSplitMode.Proportional">
            <summary>
            The splitter's thumb position is defined proportionally to the respective dimension (Width or Height, depending on splitter orientation).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSplitterSplitMode.OffsetFromNearSide">
            <summary>
            The splitter's thumb position is defined with a constant distance from the near side (Left or Top, depending on splitter orientation).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSplitterSplitMode.OffsetFromFarSide">
            <summary>
            The splitter's thumb position is defined with a constant distance from the far side (Right or Bottom, depending on splitter orientation).
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENSelectionMode">
            <summary>
            Defines the selection modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSelectionMode.Single">
            <summary>
            Only a single element can be selected at a time.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSelectionMode.Multiple">
            <summary>
            Multiple elements can be selected at a time.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENSelectionAnchorMode">
            <summary>
            Defines the selection anchor modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSelectionAnchorMode.First">
            <summary>
            The first selected element is the anchor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSelectionAnchorMode.Last">
            <summary>
            The last selected element is the anchor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMouseButtonEvent">
            <summary>
            Enumerates the mouse button events.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.None">
            <summary>
            Unknown button event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.LeftButtonDown">
            <summary>
            X button down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.LeftButtonDoubleClick">
            <summary>
            X button double click.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.LeftButtonUp">
            <summary>
            X button up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.RightButtonDown">
            <summary>
            Right buttom down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.RightButtonDoubleClick">
            <summary>
            Right buttom double click.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.RightButtonUp">
            <summary>
            Right buttom up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.MiddleButtonDown">
            <summary>
            Middle buttom down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.MiddleButtonDoubleClick">
            <summary>
            Middle buttom double click.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.MiddleButtonUp">
            <summary>
            Middle buttom up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonEvent.Any">
            <summary>
            The any button event.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMouseButtons">
            <summary>
            A masked enum, that enumerates the mouse buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.XButton1">
            <summary>
            The first XButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.XButton2">
            <summary>
            The second XButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtons.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENMouseButtonState">
            <summary>
            Enumerates the mouse button states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonState.Unknown">
            <summary>
            The button state is not known.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonState.Down">
            <summary>
            The button is down.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENMouseButtonState.Up">
            <summary>
            The button is up.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENKeyCode">
            <summary>
            Enumerates the keyboard key codes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Unknown">
            <summary>
            Unknown key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Accept">
            <summary>
            The Accept (Commit) key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Again">
            <summary>
            The Again key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.AllCandidates">
            <summary>
            The All Candidates key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Alphanumeric">
            <summary>
            The Alphanumeric key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Alt">
            <summary>
            The Alt (Menu) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.AltGraph">
            <summary>
            The Alt-Graph key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Apps">
            <summary>
            The Application key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserBack">
            <summary>
            The Browser Back key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserFavorites">
            <summary>
            The Browser Favorites key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserForward">
            <summary>
            The Browser Forward key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserHome">
            <summary>
            The Browser Home key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserRefresh">
            <summary>
            The Browser Refresh key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserSearch">
            <summary>
            The Browser Search key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.BrowserStop">
            <summary>
            The Browser Stop key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CapsLock">
            <summary>
            The Caps Lock (Capital) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Clear">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CodeInput">
            <summary>
            The Code Input key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Compose">
            <summary>
            The Compose key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Control">
            <summary>
            The Control (Ctrl) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Crsel">
            <summary>
            The Crsel key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Convert">
            <summary>
            The Convert key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Copy">
            <summary>
            The Copy key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Cut">
            <summary>
            The Cut key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Enter">
            <summary>
            The Enter key.
            This key identifier is also used for the Return (Macintosh numpad) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.EraseEof">
            <summary>
            The Erase EOF key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Execute">
            <summary>
            The Execute key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Exsel">
            <summary>
            The Exsel key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F1">
            <summary>
            The F1 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F2">
            <summary>
            The F2 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F3">
            <summary>
            The F3 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F5">
            <summary>
            The F5 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F6">
            <summary>
            The F6 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F7">
            <summary>
            The F7 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F8">
            <summary>
            The F8 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F9">
            <summary>
            The F9 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F10">
            <summary>
            The F10 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F11">
            <summary>
            The F11 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F12">
            <summary>
            The F12 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F13">
            <summary>
            The F13 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F14">
            <summary>
            The F14 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F15">
            <summary>
            The F15 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F16">
            <summary>
            The F16 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F17">
            <summary>
            The F17 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F18">
            <summary>
            The F18 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F19">
            <summary>
            The F19 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F20">
            <summary>
            The F20 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F21">
            <summary>
            The F21 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F22">
            <summary>
            The F22 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F23">
            <summary>
            The F23 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F24">
            <summary>
            The F24 key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.FinalMode">
            <summary>
            The Final Mode (Final) key used on some asian keyboards. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Find">
            <summary>
            The Find key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.FullWidth">
            <summary>
            The Full-Width Characters key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.HalfWidth">
            <summary>
            The Half-Width Characters key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.HangulMode">
            <summary>
            The Hangul (Korean characters) Mode key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.HanjaMode">
            <summary>
            The Hanja (Korean characters) Mode key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Help">
            <summary>
            The Help key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Hiragana">
            <summary>
            The Hiragana (Japanese Kana characters) key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Home">
            <summary>
            The Home key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Insert">
            <summary>
            The Insert (Ins) key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.JapaneseHiragana">
            <summary>
            The Japanese-Hiragana key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.JapaneseKatakana">
            <summary>
            The Japanese-Katakana key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.JapaneseRomaji">
            <summary>
            The Japanese-Romaji key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.JunjaMode">
            <summary>
            The Junja Mode key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.KanaMode">
            <summary>
            The Kana Mode (Kana Lock) key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.KanjiMode">
            <summary>
            The Kanji (Japanese name for ideographic characters of Chinese origin) Mode key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Katakana">
            <summary>
            The Katakana (Japanese Kana characters) key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LaunchApplication1">
            <summary>
            The Start Application One key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LaunchApplication2">
            <summary>
            The Start Application Two key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LaunchMail">
            <summary>
            The Start Mail key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Left">
            <summary>
            The Left Arrow key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Meta">
            <summary>
            The Meta key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.MediaNextTrack">
            <summary>
            The Media Next Track key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.MediaPlayPause">
            <summary>
            The Media Play Pause key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.MediaPreviousTrack">
            <summary>
            The Media Previous Track key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.MediaStop">
            <summary>
            The Media Stok key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.ModeChange">
            <summary>
            The Mode Change key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Nonconvert">
            <summary>
            The Nonconvert (Don't Convert) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.NumLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.PageDown">
            <summary>
            The Page Down (Next) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Paste">
            <summary>
            The Paste key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Pause">
            <summary>
            The Pause key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Play">
            <summary>
            The Play key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.PreviousCandidate">
            <summary>
            The Previous Candidate function key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.PrintScreen">
            <summary>
            The Print Screen (PrintScrn, SnapShot) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Process">
            <summary>
            The Process key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Props">
            <summary>
            The Props key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.RomanCharacters">
            <summary>
            The Roman Characters function key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Scroll">
            <summary>
            The Scroll Lock key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Select">
            <summary>
            The Select key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.SelectMedia">
            <summary>
            The Select Media key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Shift">
            <summary>
            The Shift key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Stop">
            <summary>
            The Stop key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Up">
            <summary>
            The Up Arrow key. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Undo">
            <summary>
            The Undo key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.VolumeDown">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.VolumeMute">
            <summary>
            The Volume Mute key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Windows">
            <summary>
            The Windows Logo key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Zoom">
            <summary>
            The Zoom key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Backspace">
            <summary>
            The Backspace (Back) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Tab">
            <summary>
            The Horizontal Tabulation (Tab) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Cancel">
            <summary>
            The Cancel key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Escape">
            <summary>
            The Escape (Esc) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Space">
            <summary>
            The Space (Spacebar) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.ExclamationMark">
            <summary>
            The Exclamation Mark (Factorial, Bang) key (!).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.QuotationMark">
            <summary>
            The Quotation Mark (Quote Double) key (").
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.NumberSign">
            <summary>
            The Number Sign (Pound Sign, Hash, Crosshatch, Octothorpe) key (#). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.DollarSign">
            <summary>
            The Dollar Sign (milreis, escudo) key ($). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Ampersand">
            <summary>
            The Ampersand key (&amp;).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Apostrophe">
            <summary>
            The Apostrophe (Apostrophe-Quote, APL Quote) key ('). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LeftParenthesis">
            <summary>
            The Left Parenthesis (Opening Parenthesis) key ((). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.RightParenthesis">
            <summary>
            The Right Parenthesis (Closing Parenthesis) key ()). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Asterisk">
            <summary>
            The Asterisk (Star) key (*). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Plus">
            <summary>
            The Plus Sign (Plus) key (+). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Comma">
            <summary>
            The Comma (decimal separator) sign key (,). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Minus">
            <summary>
            The Hyphen-minus (hyphen or minus sign) key (-). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.FullStop">
            <summary>
            The Full Stop (period, dot, decimal point) key (.). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Solidus">
            <summary>
            The Solidus (slash, virgule, shilling) key (/).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D0">
            <summary>
            The Digit Zero key (0). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D1">
            <summary>
            The Digit One key (1). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D2">
            <summary>
            The Digit Two key (2). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D3">
            <summary>
            The Digit Three key (3). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D4">
            <summary>
            The Digit Four key (4). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D5">
            <summary>
            The Digit Five key (5). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D6">
            <summary>
            The Digit Six key (6). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D7">
            <summary>
            The Digit Seven key (7). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D8">
            <summary>
            The Digit Eight key (8). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D9">
            <summary>
            The Digit Nine key (9). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Colon">
            <summary>
            The Colon key (:).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Semicolon">
            <summary>
            The Semicolon key (;).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LessThan">
            <summary>
            The Less-Than Sign key (&lt;).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Equals">
            <summary>
            The Equals Sign key (=).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.GreaterThan">
            <summary>
            The Greater-Than Sign key (&gt;).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.QuestionMark">
            <summary>
            The Question Mark key (?).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CommercialAt">
            <summary>
            The Commercial At (@) key (monkey A).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.A">
            <summary>
            The Latin Capital Letter A key (A). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.B">
            <summary>
            The Latin Capital Letter B key (B). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.C">
            <summary>
            The Latin Capital Letter C key (C). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.D">
            <summary>
            The Latin Capital Letter D key (D). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.E">
            <summary>
            The Latin Capital Letter E key (E). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.F">
            <summary>
            The Latin Capital Letter F key (F). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.G">
            <summary>
            The Latin Capital Letter G key (G). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.H">
            <summary>
            The Latin Capital Letter H key (H). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.I">
            <summary>
            The Latin Capital Letter I key (I). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.J">
            <summary>
            The Latin Capital Letter J key (J). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.K">
            <summary>
            The Latin Capital Letter K key (K). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.L">
            <summary>
            The Latin Capital Letter L key (L). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.M">
            <summary>
            The Latin Capital Letter M key (M). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.N">
            <summary>
            The Latin Capital Letter N key (N). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.O">
            <summary>
            The Latin Capital Letter O key (O). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.P">
            <summary>
            The Latin Capital Letter P key (P). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Q">
            <summary>
            The Latin Capital Letter Q key (Q). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.R">
            <summary>
            The Latin Capital Letter R key (R). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.S">
            <summary>
            The Latin Capital Letter S key (S). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.T">
            <summary>
            The Latin Capital Letter T key (T). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.U">
            <summary>
            The Latin Capital Letter U key (U). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.V">
            <summary>
            The Latin Capital Letter V key (V). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.W">
            <summary>
            The Latin Capital Letter W key (W). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.X">
            <summary>
            The Latin Capital Letter X key (X). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Y">
            <summary>
            The Latin Capital Letter Y key (Y). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Z">
            <summary>
            The Latin Capital Letter Z key (Z). 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LeftSquareBracket">
            <summary>
            The Left Square Bracket (Opening Square Bracket) key ([).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.ReverseSolidus">
            <summary>
            The Reverse Solidus (Backslash) key (\).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.RightSquareBracket">
            <summary>
            The Right Square Bracket (Closing Square Bracket) key (]).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CircumflexAccent">
            <summary>
            The Circumflex Accent key (^).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LowSign">
            <summary>
            The Low Sign (Spacing Underscore, Underscore) key (_).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.GraveAccent">
            <summary>
            The Grave Accent (Back Quote) key (`).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LeftCurlyBracket">
            <summary>
            The Left Curly Bracket (Opening Curly Bracket, Opening Brace, Brace X) key ({).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.VerticalLine">
            <summary>
            The Vertical Line (Vertical Bar, Pipe) key (|).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.RightCurlyBracket">
            <summary>
            The Right Curly Bracket (Closing Curly Bracket, Closing Brace, Brace Right) key (}).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Delete">
            <summary>
            The Delete (Del) Key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.InvertedExclamation">
            <summary>
            The Inverted Exclamation Mark key (?).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningGraveAccent">
            <summary>
            The Combining Grave Accent (Greek Varia, Dead Grave) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningAcuteAccent">
            <summary>
            The Combining Acute Accent (Stress Mark, Greek Oxia, Tonos, Dead Eacute) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningCircumflexAccent">
            <summary>
            The Combining Circumflex Accent (Hat, Dead Circumflex) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningTilde">
            <summary>
            The Combining Tilde (Dead Tilde) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningMacron">
            <summary>
            The Combining Macron (Long, Dead Macron) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningBreve">
            <summary>
            The Combining Breve (Short, Dead Breve) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningDotAbove">
            <summary>
            The Combining Dot Above (Derivative, Dead Above Dot) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningDiaeresis">
            <summary>
            The Combining Diaeresis (Double Dot Abode, Umlaut, Greek Dialytika, Double Derivative, Dead Diaeresis) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningRingAbove">
            <summary>
            The Combining Ring Above (Dead Above Ring) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningDoubleAcuteAccent">
            <summary>
            The Combining Double Acute Accent (Dead Doubleacute) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningCaron">
            <summary>
            The Combining Caron (Hacek, V Above, Dead Caron) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningCedilla">
            <summary>
            The Combining Cedilla (Dead Cedilla) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningOgonek">
            <summary>
            The Combining Ogonek (Nasal Hook, Dead Ogonek) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningGreekYpogegrammeni">
            <summary>
            The Combining Greek Ypogegrammeni (Greek Non-Spacing Iota Below, Iota Subscript, Dead Iota) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.EuroCurrencySign">
            <summary>
            The Euro Currency Sign key (€).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningKatakanaHiraganaVoicedSoundMark">
            <summary>
            The Combining Katakana-Hiragana Voiced Sound Mark (Dead Voiced Sound) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.CombiningKatakanaHiraganaSemiVoicedSoundMark">
            <summary>
            The Combining Katakana-Hiragana Semi-Voiced Sound Mark (Dead Semivoiced Sound) key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Print">
            <summary>
            The Print key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.LineFeed">
            <summary>
            The Line Feed key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.Sleep">
            <summary>
            The Sleep key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.AbntC1">
            <summary>
            Brazilian keyboard C1 key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyCode.AbntC2">
            <summary>
            Brazilian keyboard C2 key.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENKeyLocation">
            <summary>
            Indicates the location of a keyboard key on the keyboard
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyLocation.Left">
            <summary>
            The key activated is in the left key location (there is more than one possible location for this key). 
            Example: the left Shift key on a PC 101 Key US keyboard. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyLocation.Right">
            <summary>
            The key activation is in the right key location (there is more than one possible location for this key). 
            Example: the right Shift key on a PC 101 Key US keyboard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyLocation.NumPad">
            <summary>
            The key activation originated on the numeric keypad or with a virtual key corresponding to the numeric keypad. 
            Example: the '1' key on a PC 101 Key US keyboard located on the numeric pad. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyLocation.Standard">
            <summary>
            The key activation is not distinguished as the left or right version of the key, and did not originate from the numeric keypad 
            (or did not originate with a virtual key corresponding to the numeric keypad). 
            Example: the 'Q' key on a PC 101 Key US keyboard.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENKeyState">
            <summary>
            Enumerates the keyboard key states
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyState.Unknown">
            <summary>
            An unknown key state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyState.Down">
            <summary>
            Down key state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENKeyState.Up">
            <summary>
            Up key state.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENModifierKeys">
            <summary>
            Enumerates the modifier keys
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.None">
            <summary>
            Not a modifier key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.Control">
            <summary>
            Control.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.Shift">
            <summary>
            Shift.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.Alt">
            <summary>
            Alt.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.Command">
            <summary>
            Command (Mac specific)
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENModifierKeys.All">
            <summary>
            All modifier keys
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENDragDropEffects">
            <summary>
            Specifies the possible effects of a drag-and-drop operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropEffects.None">
            <summary>
            The drop target does not accept the data.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropEffects.Copy">
            <summary>
            The data from the drag source is copied to the drop target.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropEffects.Move">
            <summary>
            The data from the drag source is moved to the drop target.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropEffects.Link">
            <summary>
            The data from the drag source is linked to the drop target.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropEffects.All">
            <summary>
            All effects are possible
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENDragDropSourceState">
            <summary>
            Enumerates the states of a drag drop source.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropSourceState.Ready">
            <summary>
            The source is in ready state, and can be requested for drag and drop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropSourceState.Requested">
            <summary>
            The source is requested for drag and drop and is waiting for the drag and drop to start.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragDropSourceState.Dragging">
            <summary>
            The source is currently being dragged and dropped.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENDragAction">
            <summary>
            Enumerates the drag actions that are taken in response to modifiers keys change, pressed mouse buttons change, or escape key press.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragAction.Cancel">
            <summary>
            The drag and drop operation is canceled. Drop is not performed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragAction.Continue">
            <summary>
            The drag and drop operation continues.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENDragAction.Drop">
            <summary>
            The drag and drop operation performs Drop on the current DragAndDrop target.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENVisibility">
            <summary>
            Enumerates the visibility options for box elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENVisibility.Visible">
            <summary>
            The element is visible and occupies layout space
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENVisibility.Hidden">
            <summary>
            The element is not visible, but occupies layout space
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENVisibility.Collapsed">
            <summary>
            The element is not visible and does not occupy layout space
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPairBoxRelation">
            <summary>
            Enumerates box1 and box2 relation options in a pair box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPairBoxRelation.Overlay">
            <summary>
            Specifies that box1 and box2 share the same space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPairBoxRelation.Box1AboveBox2">
            <summary>
            Specifies that box1 is displayed vertically above box2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPairBoxRelation.Box2AboveBox1">
            <summary>
            Specifies that box2 is displayed vertically above box1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPairBoxRelation.Box1BeforeBox2">
            <summary>
            Specifies that box1 is displayed horizontally before box2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPairBoxRelation.Box2BeforeBox1">
            <summary>
            Specifies that box2 is displayed horizontally before box1.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENSymbolContentRelation">
            <summary>
            Enumerates symbol and content relation options.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolContentRelation.Overlay">
            <summary>
            Specifies that the symbol and the content share the same space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolContentRelation.SymbolAboveContent">
            <summary>
            Specifies that the symbol is displayed vertically above the content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolContentRelation.ContentAboveSymbol">
            <summary>
            Specifies that the content is displayed vertically above the symbol.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolContentRelation.SymbolBeforeContent">
            <summary>
            Specifies that the symbol is displayed horizontally before the content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENSymbolContentRelation.ContentBeforeSymbol">
            <summary>
            Specifies that the content is displayed horizontally before the symbol.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENHeaderContentRelation">
            <summary>
            Enumerates header and content relation options.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENHeaderContentRelation.Overlay">
            <summary>
            Specifies that header and content share the same space.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENHeaderContentRelation.HeaderAboveContent">
            <summary>
            Specifies that header is displayed vertically above content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENHeaderContentRelation.ContentAboveHeader">
            <summary>
            Specifies that content is displayed vertically above header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENHeaderContentRelation.HeaderBeforeContent">
            <summary>
            Specifies that header is displayed horizontally before content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENHeaderContentRelation.ContentBeforeHeader">
            <summary>
            Specifies that content is displayed horizontally before header.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENUniSizeMode">
            <summary>
            Enumerates the size modes for a widget in an alignable content element which is
            placed in an alignable content element container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUniSizeMode.None">
            <summary>
            No sizing is applied. The widget's desired size is used.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUniSizeMode.Width">
            <summary>
            The widget's desired width is set to the max width of a widget in the same group
            of the alignable element container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUniSizeMode.Height">
            <summary>
            The widget's desired height is set to the max height of a widget in the same group
            of the alignable element container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENUniSizeMode.WidthAndHeight">
            <summary>
            The widget's desired width and height are set to the max width and height of a widget
            in the same group of the alignable element container.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENWindowResult">
            <summary>
            Enumerates predefined results of a user interaction with a window
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.None">
            <summary>
            The result is undefined.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.OK">
            <summary>
            The OK button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.Cancel">
            <summary>
            The Cancel button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.Abort">
            <summary>
            The Abort button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.Retry">
            <summary>
            The Retry button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.Ignore">
            <summary>
            The Ignore button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.Yes">
            <summary>
            The Yes button was clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowResult.No">
            <summary>
            The No button was clicked.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENWindowStartPosition">
            <summary>
            Enumerates the predefined start positions for a popup window
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowStartPosition.CenterScreen">
            <summary>
            The window is positioned in the center of the screen
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowStartPosition.CenterWorkingArea">
            <summary>
            The window is positioned in the center of the working area
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowStartPosition.CenterOwner">
            <summary>
            The window is positioned in the center of the owner window
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowStartPosition.Manual">
            <summary>
            The window is manually positioned
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCursorType">
            <summary>
            Enumerates the possible cursor types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCursorType.Predefined">
            <summary>
            The cursor is predefined
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCursorType.Custom">
            <summary>
            A custom (user defined) defined cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCursorType.EmbeddedResource">
            <summary>
            The cursor is created from an embedded resource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENPredefinedCursor">
            <summary>
            Enumerates the possible cursor types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.AppStarting">
            <summary>
            The cursor that appears when an application starts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.Arrow">
            <summary>
            The arrow cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.Cross">
            <summary>
            The crosshair cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.Hand">
            <summary>
            The hand cursor, typically used when hovering over a Web link.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.Help">
            <summary>
            The Help cursor, which is a combination of an arrow and a question mark.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.HSplit">
            <summary>
            The cursor that appears when the mouse is positioned over a horizontal splitter bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.IBeam">
            <summary>
            The I-beam cursor, which is used to show where the text cursor appears when the mouse is clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.No">
            <summary>
            The cursor that indicates that a particular region is invalid for the current operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.NoMove2D">
            <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in both a horizontal and vertical direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.NoMoveH">
            <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in a horizontal direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.NoMoveV">
            <summary>
            The cursor that appears during wheel operations when the mouse is not moving, but the window can be scrolled in a vertical direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanAll">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanEast">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanNorthEast">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanNorth">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in an upward direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanNorthWest">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanSouthEast">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanSouth">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in a downward direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanSouthWest">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.PanWest">
            <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.SizeAll">
            <summary>
            The four-headed sizing cursor, which consists of four joined arrows that point north, south, east, and west.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.SizeNESW">
            <summary>
            The two-headed diagonal (northeast/southwest) sizing cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.SizeNS">
            <summary>
            The two-headed vertical (north/south) sizing cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.SizeNWSE">
            <summary>
            The two-headed diagonal (northwest/southeast) sizing cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.SizeWE">
            <summary>
            The two-headed horizontal (west/east) sizing cursor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.UpArrow">
            <summary>
            The up arrow cursor, typically used to identify an insertion point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.VSplit">
            <summary>
            The cursor that appears when the mouse is positioned over a vertical splitter bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENPredefinedCursor.Wait">
            <summary>
            The wait cursor, typically an hourglass shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENColorPaletteType">
            <summary>
            Enumerates the color palette types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENColorPaletteType.WebSafe">
            <summary>
            Web-safe color palette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENColorPaletteType.MicrosoftPaint">
            <summary>
            Microsoft Paint color palette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENColorPaletteType.MicrosoftOffice2003">
            <summary>
            Microsoft Office 2003 color palette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENColorPaletteType.MicrosoftOffice2007">
            <summary>
            Microsoft Office 2007 color palette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENColorPaletteType.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommandBarDockType">
            <summary>
            Enumerates the command bar dock types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarDockType.Left">
            <summary>
            Dock left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarDockType.Right">
            <summary>
            Dock right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarDockType.Top">
            <summary>
            Dock top.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarDockType.Bottom">
            <summary>
            Dock bottom.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommandBarReopenMode">
            <summary>
            Determines the action that needs to be executed when the command bar is closed and needs to be opened once again.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarReopenMode.Redock">
            <summary>
            Redocks the bar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandBarReopenMode.Refloat">
            <summary>
            Refloats the bar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommandSourceUpdateReason">
            <summary>
            Enumerates the command source update reasons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateReason.AutoUpdate">
            <summary>
            Auto update.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateReason.MouseOverSource">
            <summary>
            Mouse over update.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommandSourceUpdateMask">
            <summary>
            The mask associated with a command source update event, that defines the aspects of the command source that need to be updated.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.None">
            <summary>
            The source must not be updated in any way
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.UpdateEnabled">
            <summary>
            Whether the enabled state of the source must be updated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.UpdateTooltip">
            <summary>
            Whether the tooltip content of the source must be updated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.UpdateChecked">
            <summary>
            Whether the checked state of the source must be updated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.UpdateParameterList">
            <summary>
            Whether the parameter list of the source must be updated
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandSourceUpdateMask.UpdateActiveParameter">
            <summary>
            Whether the active parameter of the source must be updated
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENWindowFrameType">
            <summary>
            Enumerates the window frame types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowFrameType.None">
            <summary>
            No frame.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowFrameType.Fixed">
            <summary>
            Fixed (not resizable) window frame.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENWindowFrameType.Resizable">
            <summary>
            Resizable window frame.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENQueryDragActionReason">
            <summary>
            Enumerates the reasons for which a drag and drop operation may call the drag and drop source QueryDragAction method.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.MouseMove">
            <summary>
            The mouse has moved
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.EscapePressed">
            <summary>
            The escape key was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.ModifiersChanged">
            <summary>
            The state of the modifiers keys has changed (e.g. CONTROL, SHIFT or ALT was pressed or released).
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.LeftMouseButtonDown">
            <summary>
            The left mouse button was pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.MiddleMouseButtonDown">
            <summary>
            The middle mouse button was pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.RightMouseButtonDown">
            <summary>
            The right mouse button was pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.X1MouseButtonDown">
            <summary>
            The X1 mouse button was pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.X2MouseButtonDown">
            <summary>
            The X2 mouse button was pressed
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.LeftMouseButtonUp">
            <summary>
            The left mouse button was released
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.RightMouseButtonUp">
            <summary>
            The right mouse button was released
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.MiddleMouseButtonUp">
            <summary>
            The middle mouse button was released
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.X1MouseButtonUp">
            <summary>
            The X1 mouse button was released
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENQueryDragActionReason.X2MouseButtonUp">
            <summary>
            The X2 mouse button was released
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENStepMode">
            <summary>
            Defines the possible settings for an automatic step mode
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStepMode.Fine">
            <summary>
            Small step
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStepMode.Normal">
            <summary>
            Normal step
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStepMode.Coarse">
            <summary>
            Large step
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStepMode.Fixed">
            <summary>
            User defined step
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENNoScrollHAlign">
            <summary>
            Specifies the horizonal alignment of the viewport when the scollbars are not visible.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollHAlign.None">
            <summary>
            The viewport is not horizontally aligned. The viewport origin is used.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollHAlign.Center">
            <summary>
            The viewport is horizontally inside the window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollHAlign.Left">
            <summary>
            The viewport left side is aligned to the window left side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollHAlign.Right">
            <summary>
            The viewport right side is aligned to the window right side.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENNoScrollVAlign">
            <summary>
            Specifies the vertical alignment of the viewport when the scollbars are not visible.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollVAlign.None">
            <summary>
            The viewport is not vertically aligned. The viewport origin is used.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollVAlign.Center">
            <summary>
            The viewport is vertically inside the window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollVAlign.Top">
            <summary>
            The viewport top side is aligned to the window top side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENNoScrollVAlign.Bottom">
            <summary>
            The viewport bottom side is aligned to the window bottom side.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENStringMatchMode">
            <summary>
            Enumerates the supported string match modes used by the autocomplete text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStringMatchMode.StartsWith">
            <summary>
            Matches all strings that start with a given substring.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStringMatchMode.WordStartsWith">
            <summary>
            Matches all strings that contain a word starting with a given substring.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStringMatchMode.Contains">
            <summary>
            Matches all strings that contain a given substring.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStringMatchMode.EndsWith">
            <summary>
            Matches all strings that end with a given substring.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENStringMatchMode.WordEndsWith">
            <summary>
            Matches all strings that contains a word ending with a given substring.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCalendarArrowDirection">
            <summary>
            Enumerates the calendar arrow directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarArrowDirection.Previous">
            <summary>
            Denotes the previous view range direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCalendarArrowDirection.Next">
            <summary>
            Denotes the next view range direction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.ENCommandUIType">
            <summary>
            Enumerates the supported command UI types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandUIType.Ribbon">
            <summary>
            Ribbon based command UI.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.ENCommandUIType.CommandBars">
            <summary>
            Command bar (menus and toolbars) based command UI.
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NHsbWheelColorPicker">
            <summary>
            A color picker, which consists of a Saturation-Brightness triangle and a hue color wheel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return a constant measure
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.OnSelectedColorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when SelectedColor has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.PaintHueWheel(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the Hue wheel
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.PaintHueSelector(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the Hue selector
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.PaintSBTriangle(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the SB triangle for the current Hue
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.UI.NHsbWheelColorPicker.PaintSBSelector(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the SB selector
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.NHsbWheelColorPickerSchema">
            <summary>
            Schema associated with NHsbWheelColorPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.SelectedColorProperty">
            <summary>
            Reference to the SelectedColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.UpdateWhileDraggingProperty">
            <summary>
            Reference to the UpdateWhileDragging property
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.HueSelectorSectorAngleProperty">
            <summary>
            Reference to the HueSelectorSectorAngle property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.HueWheelWidthPercentProperty">
            <summary>
            Reference to the HueWheelWidthPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.HueSelectorExtendPercentProperty">
            <summary>
            Reference to the HueSelectorExtendPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.SBTriangleMarginsPercentProperty">
            <summary>
            Reference to the SBTriangleMarginsPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.UI.NHsbWheelColorPicker.SBSelectorRadiusPercentProperty">
            <summary>
            Reference to the SBSelectorRadiusPercent property.
            </summary>
        </member>
        <member name="E:Nevron.Nov.UI.NHsbWheelColorPicker.SelectedColorChanged">
            <summary>
            UI event, which occurs when the user selects a new color from the color picker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.UpdateWhileDragging">
            <summary>
            Gets or sets whether the selected color should be updated while the user drags the Hue or Saturation-Brightness selectors.
            If set to false the selected color is updated when the user releases the left mouse button. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.HueSelectorSectorAngle">
            <summary>
            Gets or sets the sector angle of the hue selector, 
            which defines the sector (arc) of the wheel occupied by the hue selector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.HueWheelWidthPercent">
            <summary>
            Gets or sets the hue wheel width percent, which defines the width of
            the hue wheel relative to the hue wheel outer radius.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.HueSelectorExtendPercent">
            <summary>
            Gets or sets the extend of the hue selector pointers, 
            measured as a percent of the hue wheel width.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.SBTriangleMarginsPercent">
            <summary>
            Gets or sets the margins applied to the SB triangle, 
            measures as a percent of the hue wheel inner radius.
            </summary>
        </member>
        <member name="P:Nevron.Nov.UI.NHsbWheelColorPicker.SBSelectorRadiusPercent">
            <summary>
            Gets or sets the radius percent for the SB selector circle, 
            measured as a percent of the hue wheel inner radius.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomSettings">
            <summary>
            The NDomSettings static class provides fine tuning settings for DOM related features.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomSettings.ValidateProperties">
            <summary>
            Specifies whether property validation should be performed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomSettings.ValidateChildren">
            <summary>
            Specifies whether named child validation should be performed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomSettings.ValidateSchemas">
            <summary>
            Specifies whether schema validation should be performed
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NWrapFlowCategoryEditor">
            <summary>
            The NWrapFlowCategoryEditor class is an aggregate category editor,
            which embeds the aggregated editors in a wrap flow layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NWrapFlowCategoryEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NWrapFlowCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Overriden to create a flow layout container
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NWrapFlowCategoryEditor.NWrapFlowCategoryEditorSchema">
            <summary>
            Schema associated with NWrapFlowCategoryEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NWrapFlowCategoryEditor.LeftToRightTemplate">
            <summary>
            Wrap flow category editor with left to right direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NWrapFlowCategoryEditor.TopToBottomTemplate">
            <summary>
            Wrap flow category editor with top to bottom direction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NListGroupCategoryEditor">
            <summary>
            A category editor, which embeds the child editors in a list editors group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListGroupCategoryEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NListGroupCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Overriden to create a list editors group
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NListGroupCategoryEditor.NListGroupCategoryEditorSchema">
            <summary>
            Schema associated with NListGroupCategoryEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NListGroupCategoryEditor.DefaultTemplate">
            <summary>
            The default template for list group category editors.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStackCategoryEditor">
            <summary>
            A category editor, which embeds the child editors in a stack layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStackCategoryEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStackCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Overriden to create a stack layout container.
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NStackCategoryEditor.CreateStackPanel">
            <summary>
            Creates the stack panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NStackCategoryEditor.PopulateStackPanel(Nevron.Nov.UI.NStackPanel,Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Populates the given stack panel with the specified editors.
            </summary>
            <param name="stackPanel"></param>
            <param name="editors"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.NStackCategoryEditorSchema">
            <summary>
            Schema associated with NStackCategoryEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.FitModeProperty">
            <summary>
            Reference to the FitMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.LayoutDirectionProperty">
            <summary>
            Reference to the LayoutDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.AlignLabelsProperty">
            <summary>
            Reference to the AlignLabels property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalWithoutLabelAlignmentTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom and AlignLabels = false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalEmbedChildEditorsTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom, EmbedChildEditors = true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalEmbedControlTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom, EmbedControl = true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalLastFillTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom, FillMode = Last.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.VerticalFirstFillTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = TopToBottom, FillMode = First.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalEmbedChildEditorsTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, EmbedChildEditors = true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalEmbedControlTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, EmbedControl = true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalLastFillTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, FillMode = Last.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalFirstFillTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, FillMode = First.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalEqualFillTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, FillMode = Equal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStackCategoryEditor.HorizontalEqualFillEmbedControlTemplate">
            <summary>
            Stack category editor template with: LayoutDirection = LeftToRight, FillMode = Equal, EmbedControl = true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStackCategoryEditor.FillMode">
            <summary>
            Gets or sets the fill mode of the editor stack
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStackCategoryEditor.FitMode">
            <summary>
            Gets or sets the fit mode of the editor stack
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStackCategoryEditor.LayoutDirection">
            <summary>
            Gets or sets the layout direction of the editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStackCategoryEditor.AlignLabels">
            <summary>
            Gets/Sets whether to align labels by placing them in an uni size group box.
            Applicable only for vertically oriented stacks, i.e. stacks with TopToBottom
            or BottomToTop direction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NTabCategoryEditor">
            <summary>
            A property category editor, which embeds the child editors in tabs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTabCategoryEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NTabCategoryEditor.CreateChildEditorsContainer(Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Overriden to create a tab container
            </summary>
            <param name="editors"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.NTabCategoryEditorSchema">
            <summary>
            Schema associated with NTabCategoryEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.HeadersPositionProperty">
            <summary>
            Reference to the HeadersPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.HeadersTopTemplate">
            <summary>
            Tab category editor template with: HeadersPosition = Top
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.HeadersLeftTemplate">
            <summary>
            Tab category editor template with: HeadersPosition = Left
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.HeadersRightTemplate">
            <summary>
            Tab category editor template with: HeadersPosition = Right
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NTabCategoryEditor.HeadersBottomTemplate">
            <summary>
            Tab category editor template with: HeadersPosition = Bottom
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NTabCategoryEditor.HeadersPosition">
            <summary>
            Gets or sets the position of the tab headers.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorTemplate">
            <summary>
            Represents a pair of an editor type and an optional dictionary of editor property values,
            which must be applied to the editor when it is created.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.#ctor(Nevron.Nov.Dom.NDomType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="editorType">The editor type this template is for.</param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.#ctor(System.Type)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="editorType">The editor type this template is for.</param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.#ctor(Nevron.Nov.Dom.NDomType,Nevron.Nov.DataStructures.NMap{Nevron.Nov.Dom.NProperty,System.Object})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="editorType">The editor type this template is for.</param>
            <param name="properties"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.#ctor(System.Type,Nevron.Nov.DataStructures.NMap{Nevron.Nov.Dom.NProperty,System.Object})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="editorType">The editor type this template is for.</param>
            <param name="properties"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.#ctor(Nevron.Nov.Editors.NEditorTemplate)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorTemplate.CreateInstance">
            <summary>
            Creates a new instance of the editor template
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorTemplate.EditorType">
            <summary>
            Gets or sets the type of the editor, that needs to be created
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorTemplate.EditorProperties">
            <summary>
            Gets or sets the property values, which need to be applied to the editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorTemplate.EmbedEditor">
            <summary>
            Template for embed editor property editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorTemplate.PopupEditor">
            <summary>
            Template for popup editor proeprty editor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NNodeSurrogate">
            <summary>
            A node that surrogates the editing of another node value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNodeSurrogate.NNodeSurrogateSchema">
            <summary>
            Schema associated with NNodeSurrogate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NNodeSurrogate.ValueChangedEvent">
            <summary>
            Refernce to the ValueChanged event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Editors.NNodeSurrogate.ValueChanged">
            <summary>
            Occurs when the value property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogate.Value">
            <summary>
            Gets or sets the node surrogage value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogate.EditedNodeParent">
            <summary>
            Gets or sets the node which is parent to the surrogately edited property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogate.AllowNull">
            <summary>
            Gets or sets whether the surrogate value can be null
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogate.AllowAutomatic">
            <summary>
            Gets or sets whether the surrogate value can automatic
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogate.CompatibleTypes">
            <summary>
            Gets or sets the value compatible types
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NPropertyEditorManager">
            <summary>
            The NPropertyEditorManager static class is used as a 
            registry, which maps property types to property editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorManager.RegisterEditor(Nevron.Nov.Dom.NDomType,Nevron.Nov.Editors.NEditorTemplate)">
            <summary>
            Registers the editor, which must be used for the editing of the properties of the specified type
            </summary>
            <param name="type">property type</param>
            <param name="editor">editor template</param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorManager.RegisterEditor(System.Type,Nevron.Nov.Editors.NEditorTemplate)">
            <summary>
            Registers the editor, which must be used for the editing of the properties of the specified type
            </summary>
            <param name="type"></param>
            <param name="editor"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NPropertyEditorManager.GetEditor(Nevron.Nov.Dom.NDomType)">
            <summary>
            Gets the editor, which can handle the editing of a property from the specified type
            </summary>
            <param name="type">property type</param>
            <returns>editor template</returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueChangeData">
            <summary>
            Serves as base class for all types of value change datas
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.HasLocalValueChange">
            <summary>
            Determines whether the change data holds information about a local value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.NewLocalValue">
            <summary>
            Gets the new local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.NewLocalValueIsDefault">
            <summary>
            Gets whether the new local value is the default value (local value cleared) or an explicit local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.OldLocalValue">
            <summary>
            Gets the old local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.OldLocalValueIsDefault">
            <summary>
            Gets whether the old local value was the default value or an explicit local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.HasComputedValueChange">
            <summary>
            Determines whether the change data holds information about a computed value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.NewComputedValue">
            <summary>
            Gets the new computed value.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.NewComputedValueSource">
            <summary>
            Gets the new computed value source.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.OldComputedValue">
            <summary>
            Gets the old computed value.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.OldComputedValueSource">
            <summary>
            Gets the old computed value source.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.Property">
            <summary>
            Gets the property, whose value has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.PropertyFlags">
            <summary>
            Gets the property flags, for the node schema that created this value change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.NewValue">
            <summary>
            Gets the new effective value for the data change. 
            If the HasComputedValueChange property is true returns NewComputedValue otherwise returns NewLocalValue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeData.OldValue">
            <summary>
            Gets the old effective value of the property.
            If the HasComputedValueChange property is true returns OldComputedValue otherwise returns OldLocalValue.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NLocalValueChangeData">
            <summary>
            Represents a local value change
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.HasLocalValueChange">
            <summary>
            Determines whether the change data holds information about a local value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.NewLocalValue">
            <summary>
            Gets the new local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.NewLocalValueIsDefault">
            <summary>
            Gets whether the new local value is the default value (local value cleared) or an explicit local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.OldLocalValue">
            <summary>
            Gets the old local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.OldLocalValueIsDefault">
            <summary>
            Gets whether the old local value was the default value or an explicit local value.
            Throws an exception if the HasLocalValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.HasComputedValueChange">
            <summary>
            Determines whether the change data holds information about a computed value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.NewComputedValue">
            <summary>
            Gets the new computed value.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.NewComputedValueSource">
            <summary>
            Gets the new computed value source.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.OldComputedValue">
            <summary>
            Gets the old computed value.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NLocalValueChangeData.OldComputedValueSource">
            <summary>
            Gets the old computed value source.
            Throws an exception if the HasComputedValueChange property is false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NAddNodeCommand">
            <summary>
            Represents an add node command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.Execute">
            <summary>
            Overriden to show a Select Type Window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.CanExecute">
            <summary>
            Overriden to determine whether a child node can be added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.OnSelectTypeWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the Select Type window was closed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NAddNodeCommand.CreateNode(Nevron.Nov.Dom.NDomType)">
            <summary>
            Creates a node of the given DOM type.
            </summary>
            <param name="domType"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NEditorWindow">
            <summary>
            An abstract window, which is used to host an editor. 
            It is by default initialized as a dialog window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.OnOpened">
            <summary>
            Called when the window is opened
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Overriden to close the window when the user presses "Escape" from the keyboard.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.AttachToEditor">
            <summary>
            Attaches the window to the editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.DetachFromEditor">
            <summary>
            Detaches the window from the editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.CreateButtonsStrip">
            <summary>
            Creates and initializes the button strip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.CreatePreviewGroupBox">
            <summary>
            Creates and initializes the preview group box.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.CreatePreviewHost">
            <summary>
            Creates a preview widget host.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.HostPreviewWidget(Nevron.Nov.UI.NPreview)">
            <summary>
            Hosts the given preview widget in the preview widget host.
            </summary>
            <param name="previewWidget"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.UpdatePreview">
            <summary>
            Updates the editor preview.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.OnEditorUpdatePreview(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Handles the editor update preview event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.m_PreviewWidget">
            <summary>
            The preview widget of this editor window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.NEditorWindowSchema">
            <summary>
            Schema associated with NEditorWindow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.PreviewDockAreaProperty">
            <summary>
            Reference to the PreviewDockArea property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.PreviewHorizontalPlacementProperty">
            <summary>
            Reference to the PreviewHorizontalPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.PreviewVerticalPlacementProperty">
            <summary>
            Reference to the PreviewVerticalPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NEditorWindow.PreviewSizeProperty">
            <summary>
            Reference to the PreviewSize property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.CreateForInstance``1(``0,Nevron.Nov.UI.NWindow,Nevron.Nov.Function{``0})">
            <summary>
            Creates an editor window for the given node instance.
            </summary>
            <typeparam name="T">The type to create an editor window for. This should be a type that derives from NNode.</typeparam>
            <param name="node">The node this editor should edit.</param>
            <param name="parentWindow">The parent window.</param>
            <param name="onOkClicked">The function to call if the user clicks the OK button of the editor window.
            Pass null if you are not interested in this event.</param>
            <returns>An editor window for the given node.</returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEditorWindow.CreateForType``1(``0,Nevron.Nov.UI.NWindow,System.Boolean,Nevron.Nov.Function{``0})">
            <summary>
            Creates an editor window for the type of the given node. If the type has derived types, the user will be able
            to select a derived type and edit an instance of this type.
            </summary>
            <typeparam name="T">The type to create an editor window for. This should be a type that derives from NNode.</typeparam>
            <param name="node">The node this editor should edit.</param>
            <param name="parentWindow">The parent window.</param>
            <param name="nullable">Specifies whether the edited value can be set to null or not.</param>
            <param name="onOkClicked">The function to call if the user clicks the OK button of the editor window.
            Pass null if you are not interested in this event.</param>
            <returns>An editor window for the type of the given node.</returns>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewDockArea">
            <summary>
            Gets or sets the dock area of the preview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewHorizontalPlacement">
            <summary>
            Gets or sets the horizontal placement of the preview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewVerticalPlacement">
            <summary>
            Gets or sets the vertical placement of the preview.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewSize">
            <summary>
            Gets or sets the value of the PreviewSize property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.Editor">
            <summary>
            Gets or sets the hosted editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.Buttons">
            <summary>
            Gets or sets the buttons with witch the window must be shown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewHost">
            <summary>
            Gets the preview host.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.PreviewWidget">
            <summary>
            Gets the preview widget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NEditorWindow.ButtonStrip">
            <summary>
            Gets the button strip.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NInsertChildEventArgs">
            <summary>
            Event arguments, associated with inserting/inserted child events.
            The TargetNode property represents the parent node in which the InsertedNode is inserted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NInsertChildEventArgs.InsertedNode">
            <summary>
            Gets the child node, which is inserted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NInsertChildEventArgs.InsertedNodeIndex">
            <summary>
            Gets the index at which the child node is inserted inside its parent node (valid for collection and container nodes).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NInsertChildEventArgs.InsertedNodeSlot">
            <summary> 
            Gets the named child slot at which the node is inserted inside its parent node - valid only for container nodes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NRemoveChildEventArgs">
            <summary>
            Event arguments, associated with a removing/removed child events.
            The TargetNode property represents the parent node from which the RemovedNode is about to be removed/is being removed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRemoveChildEventArgs.RemovedNode">
            <summary>
            Node which is removed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRemoveChildEventArgs.RemovedNodeIndex">
            <summary>
            Index at which the node is removed - valid for collection and container nodes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NRemoveChildEventArgs.RemovedNodeSlot">
            <summary> 
            Child slot inside the parent node, from which the node is removed - valid only for container nodes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDateTimeValueFormatter">
            <summary>
            Represents a Date-Time values formatter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDateTimeValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>Creates a new date time formatter, with default format specifier</remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NDateTimeValueFormatter.#ctor(Nevron.Nov.Dom.NDateTimeValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDateTimeValueFormatter.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <remarks>Creates a new date time formatter, with the specified format specifier</remarks>
            <param name="formatSpecifier">format specifier</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDateTimeValueFormatter.#ctor(Nevron.Nov.ENDateTimeValueFormat)">
            <summary>
            Creates a new date time formatter, initialized with the specified predefined format
            </summary>
            <param name="format">predefined date time value format</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDateTimeValueFormatter.SetPredefinedFormat(Nevron.Nov.ENDateTimeValueFormat)">
            <summary>
            Sets a predefined format specifier to this value formatter
            </summary>
            <param name="format"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NDateTimeValueFormatter.NDateTimeValueFormatterSchema">
            <summary>
            Schema associated with NDateTimeValueFormatter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDateTimeValueFormatter.QuarterFormatStringProperty">
            <summary>
            Schema associated with QuarterFormat property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDateTimeValueFormatter.WeekFormatStringProperty">
            <summary>
            Schema associated with WeekFormat property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDateTimeValueFormatter.HalfYearFormatStringProperty">
            <summary>
            Schema associated with HalfYearFormat property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDateTimeValueFormatter.QuarterFormatString">
            <summary>
            Gets or sets the quarter format string
            </summary>
            <remarks>
            The quarter format string is used to format quarter number. By default quarters will be formatted as Q1, Q2 etc.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Dom.NDateTimeValueFormatter.WeekFormatString">
            <summary>
            Gets or sets the week format string
            </summary>
            <remarks>
            The week format string is used to format week number. By default weeks will be formatted as Week 1, Week 2 etc.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Dom.NDateTimeValueFormatter.HalfYearFormatString">
            <summary>
            Gets or sets the half year format string
            </summary>
            <remarks>
            The half yeaer format string is used to format half year number. By default half years will be formatted as H1 or H2.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NNumericValueFormatter">
            <summary>
            Represents a numeric values formatter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNumericValueFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Creates a new numeric value formatter with default format specifier
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NNumericValueFormatter.#ctor(Nevron.Nov.Dom.NNumericValueFormatter)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNumericValueFormatter.#ctor(System.String)">
            <summary>
            Creates a new numeric formatter, with the specified format specifier
            </summary>
            <param name="formatSpecifier">format specifier</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNumericValueFormatter.#ctor(Nevron.Nov.ENNumericValueFormat)">
            <summary>
            Creates a numeric time formatter, initialized with the specified predefined format
            </summary>
            <param name="format">predefined numeric value format</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NNumericValueFormatter.SetPredefinedFormat(Nevron.Nov.ENNumericValueFormat)">
            <summary>
            Sets a predefined format specifier to this value formatter
            </summary>
            <param name="format"></param>
        </member>
        <member name="F:Nevron.Nov.Dom.NNumericValueFormatter.NNumericValueFormatterSchema">
            <summary>
            Schema associated with NNumericValueFormatter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NColorPropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of NColor type. 
            The value control can be a color drop down or an advanced color picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NColorPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NColorPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NColorPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a color picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NColorPropertyEditor.OnColorDropDownSelectedColorChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected color of the color drop has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NColorPropertyEditor.OnAdvancedColorPickerSelectedColorChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected color of the advanced color picker has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NColorPropertyEditor.NColorPropertyEditorSchema">
            <summary>
            Schema associated with NColorPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NColorPropertyEditor.StyleProperty">
            <summary>
            Reference to the Style property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NColorPropertyEditor.DropDownTemplate">
            <summary>
            An editor template, for a color property editor, which is displayed as a color drop down (the default).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NColorPropertyEditor.AdvancedTemplate">
            <summary>
            An editor template, for an color property editor, which is displayed as an advanced color picker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NColorPropertyEditor.Style">
            <summary>
            Gets or sets the style of the color property editor. 
            It controls the type of value control that the editor must use, and is only regarded prior to editor initialization.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NFontNamePropertyEditor">
            <summary>
            The NFontNamePropertyEditor class is a popup property editor, 
            which is by default assigned to properties exposing a font name. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontNamePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontNamePropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontNamePropertyEditor.CreateValueControl">
            <summary>
            Overriden to create a font name combo box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NFontNamePropertyEditor.OnFontNameComboBoxSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a property of the FontName combo box has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NFontNamePropertyEditor.NFontNamePropertyEditorSchema">
            <summary>
            Schema associated with NFontNamePropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NFontNamePropertyEditor.DefaultTemplate">
            <summary>
            Default template
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NFontNamePropertyEditor.FontNameComboBox">
            <summary>
            Gets the font name combo box of the editor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NNodeSurrogateEditor">
            <summary>
            An editor, which is used for the editing of a property value surrogate node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.Initialize(Nevron.Nov.Editors.NNodeSurrogate,Nevron.Nov.Editors.NEditor,System.String)">
            <summary>
            Initializes the node surrogate editor.
            </summary>
            <param name="editedNode"></param>
            <param name="ownerEditor"></param>
            <param name="title"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.CreateControl">
            <summary>
            Overriden to create a combo editors group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.CreatePreviewFactory">
            <summary>
            Overriden to create a group preview factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.GetDefaultPrompt">
            <summary>
            Gets the default editor prompt
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.OnComboEditorsGroupSelectedIndexChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the selected editor of the editors group has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NNodeSurrogateEditor.OnEmbeddedEditorsUpdatePreview(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Handles the UpdatePreview event of the embedded editors. Raises the UpdatePreview event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NNodeSurrogateEditor.NNodeSurrogateEditorSchema">
            <summary>
            Schema associated with NNodeSurrogateEditor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NNodeSurrogateEditor.Surrogate">
            <summary>
            Gets the edited surrogate node.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDialogNodePropertyEditor">
            <summary>
            A dialog property editor, which shows a dialog containing the editor of a node exposed by a property value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDialogPropertyEditor">
            <summary>
            A property editor, which serves as base class for property editors, which display a modal dialog.
            It adds core support for text and image preview of the current property value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create the edit element of the popup editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.OnEditButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the edit value button of the editor was clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreateDialogWindow">
            <summary>
            Must override to create the popup window of the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.ShowDialogWindow">
            <summary>
            Shows the popup window
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.OnDialogWindowClosed(Nevron.Nov.UI.NTopLevelWindow)">
            <summary>
            Called when the popup window has been closed
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreatePreview">
            <summary>
            Creates the control, which is used for the value preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreateTextPreview">
            <summary>
            Creates the text box control, which is used for the textual value preview 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreatePreviewHost">
            <summary>
            Creates the preview host which is used to host preview widgets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.CreatePreviewFactory">
            <summary>
            Creates the property preview factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.UpdateValuePreview(System.Object,System.Boolean)">
            <summary>
            Updates the value preview (both text and optional image)
            </summary>
            <param name="value"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogPropertyEditor.GetValuePreviewText(System.Object,System.Boolean)">
            <summary>
            Gets the value preview text
            </summary>
            <param name="value"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDialogPropertyEditor.NDialogPropertyEditorSchema">
            <summary>
            Schema associated with NDialogPropertyEditor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.CreateDialogWindow">
            <summary>
            Overriden to create an NEditorWindow, which hosts an instance or surrogate editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.OnDialogWindowClosed(Nevron.Nov.UI.NTopLevelWindow)">
            <summary>
            Overriden to update a NNode property value
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.GetValuePreviewText(System.Object,System.Boolean)">
            <summary>
            Gets the value preview text
            </summary>
            <param name="value"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.OnSurrogateValueChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the value of the surrogate has changed.
            Updates the editor window preview.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.GetEditedPropertyTypeDesigner">
            <summary>
            Gets the designer, applicable for the specified edited property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDialogNodePropertyEditor.CreatePreviewFactory">
            <summary>
            Creates the preview factory
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDialogNodePropertyEditor.NDialogNodePropertyEditorSchema">
            <summary>
            Schema associated with NDialogNodePropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStateEditor">
            <summary>
            An editor, which is designed to edit the state of a node.
            It couples a verb commands browser and a root category editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStateEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStateEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStateEditor.CreateControl">
            <summary>
            Overriden to create the editor content
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NStateEditor.NStateEditorSchema">
            <summary>
            Schema associated with NStateEditor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStateEditor.VerbCommandsBrowser">
            <summary>
            Gets the design commands browser of the state commands  (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStateEditor.RootCategoryEditor">
            <summary>
            Gets the editor of the root category (valid after initialization)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENColorPropertyEditorStyle">
            <summary>
            Defines the styles for a color property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENColorPropertyEditorStyle.Advanced">
            <summary>
            The value control is an advanced color picker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENColorPropertyEditorStyle.DropDown">
            <summary>
            The value control is a color drop down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENEditorWindowButtons">
            <summary>
            Enumerates the configurations of editor host buttons
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENEditorWindowButtons.OKCancel">
            <summary>
            OK - Cancel pair of buttons
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENEditorWindowButtons.Close">
            <summary>
            Close button
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENOptionsPropertyEditorStyle">
            <summary>
            Defines the styles for an enum property editor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENOptionsPropertyEditorStyle.ComboBox">
            <summary>
            The enum is edited by a combo box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENOptionsPropertyEditorStyle.ListBox">
            <summary>
            The enum is edited by a list box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENOptionsPropertyEditorStyle.HorizontalRadioGroup">
            <summary>
            The enum is edited by a horizontal radio group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENOptionsPropertyEditorStyle.VerticalRadioGroup">
            <summary>
            The enum is edited by a vertical radio group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENMaskedEnumPropertyEditorStyle">
            <summary>
            Enumerates the styles of masked enum property editors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENMaskedEnumPropertyEditorStyle.Panel">
            <summary>
            The enum is edited by a masked enum panel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENMaskedEnumPropertyEditorStyle.DropDown">
            <summary>
            The enum is edited by a masked enum drop down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENChildrenHierarchyEditorStyle">
            <summary>
            Enumerates the styles for children hierarchy editors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENChildrenHierarchyEditorStyle.ComboBox">
            <summary>
            The children are selected through a combo box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENChildrenHierarchyEditorStyle.ListBox">
            <summary>
            This children are selected through a list box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENStringPropertyEditorStyle">
            <summary>
            Defines the styles for a string property editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENStringPropertyEditorStyle.TextBox">
            <summary>
            The string is edited by a text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENStringPropertyEditorStyle.MultilineTextBox">
            <summary>
            The string is edited by a multiline text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENStringPropertyEditorStyle.AutocompleteTextBox">
            <summary>
            The string is edited by an autocomplete text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENStringPropertyEditorStyle.ComboBox">
            <summary>
            The string is edited by a drop down style (i.e. editable) combo box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENEditorEmbedding">
            <summary>
            Defines the embedding mode for an editor control or child editor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENEditorEmbedding.None">
            <summary>
            The element is not embedded in anything
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENEditorEmbedding.GroupBox">
            <summary>
            The element is embedded in a group box
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENPropertyDisplayOrder">
            <summary>
            Enumerates the category editor comparer display order modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENPropertyDisplayOrder.Ignore">
            <summary>
            The property this display order is for is ignored.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENPropertyDisplayOrder.Ascending">
            <summary>
            The editors that match the property this order is for are displayed ins acsending order
            (i.e. from first to last).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENPropertyDisplayOrder.Descending">
            <summary>
            The editors that macth the property this order is meant for are displayed in descending order
            (i.e. from last to first).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.ENMarginsType">
            <summary>
            Enumerates the numeric up downs area supported by the Margins edit widget.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENMarginsType.Margins">
            <summary>
            Represents margins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENMarginsType.Border">
            <summary>
            Represents border thickness.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.ENMarginsType.Padding">
            <summary>
            Represents padding.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDesignConstants">
            <summary>
            Contains some constants used by editors and designers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.PropertyDescriptionExtend">
            <summary>
            Size of property description in properties browser.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.NodeSelectorExtend">
            <summary>
            Size of node selector in selection node editors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.PropertyListBoxMinWidth">
            <summary>
            The minimum width of the property list box in list editors browsers.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.MinTextBoxWidth">
            <summary>
            The minimum width of a text box in a designer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.HorizontalSpacing">
            <summary>
            Default horizontal spacing.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.VerticalSpacing">
            <summary>
            Default vertical spacing.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.HorizontalContentPlacement">
            <summary>
            Default value for horizontal content placement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.VerticalContentPlacement">
            <summary>
            Default value for vertical content placement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.HelpBrowserSize">
            <summary>
            Default size of the help browser.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.LargePreviewSize">
            <summary>
            Default large preview size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.MediumPreviewSize">
            <summary>
            Default medium preview size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.RibbonPreviewSize">
            <summary>
            Default preview size for large ribbon buttons.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.SmallPreviewSize">
            <summary>
            Default small preview size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.AutomaticColor">
            <summary>
            The automatic color
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignConstants.NoneColor">
            <summary>
            The none color
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NEmptyEditor">
            <summary>
            NEmptyEditor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmptyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmptyEditor.Initialize">
            <summary>
            Initializes the empty editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmptyEditor.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NEmptyEditor.GetDefaultTitle">
            <summary>
            Gets the default editor title
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NEmptyEditor.NEmptyEditorSchema">
            <summary>
            Schema associated with NEmptyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NChildrenHierarchyEditor">
            <summary>
            The NChildrenHierarchyEditor class is a hierarchy editor, 
            which is used for the editing of the node children.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NHierarchyEditor">
            <summary>
            The NHierarchyEditor class is an editor, which serves as base class for all editors,
            which provide the user with the ability to edit the node sub hierarchy as well as the 
            state of each node, which resides in this sub hierarchy. 
            Hierachy editors embed the state editor of the currently selected node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.CreateControl">
            <summary>
            Overriden to create the hierarchy editor content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.CreateControl(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            Creates the control of this editor.
            </summary>
            <param name="hierachyNavigator"></param>
            <param name="stateEditor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.CreateHierarchyBrowser">
            <summary>
            Creates an instance of the element, which is used for the selection of node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.GetAddChildCommandNode">
            <summary>
            Gets the node upon, which the add child command must be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.GetDesigner(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the designer for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NHierarchyEditor.OnSelectedNodeChanged">
            <summary>
            Called when the selected node has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NHierarchyEditor.NHierarchyEditorSchema">
            <summary>
            Schema associated with NHierarchyEditor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyEditor.SelectedNode">
            <summary>
            Gets the currently selected node
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyEditor.HierarchyBrowser">
            <summary>
            Gets the hierarchy browser
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyEditor.HierarchyCommands">
            <summary>
            Gets the design commands browser, which is populated with the currently selected node hierarchy commands
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NHierarchyEditor.StateEditorHost">
            <summary>
            Gets the content container, which is designated to host the selected node state editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyEditor.CreateHierarchyBrowser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyEditor.CreateControl(Nevron.Nov.UI.NWidget,Nevron.Nov.UI.NWidget)">
            <summary>
            
            </summary>
            <param name="hierachyNavigator"></param>
            <param name="stateEditor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyEditor.GetAddChildCommandNode">
            <summary>
            Overriden to return the edited node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NChildrenHierarchyEditor.OnItemSelected(Nevron.Nov.UI.NTextRepresentableItem)">
            <summary>
            Called when an item is selected from the children's browser.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenHierarchyEditor.NChildrenHierarchyEditorSchema">
            <summary>
            Schema associated with NChildrenHierarchyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenHierarchyEditor.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenHierarchyEditor.ComboBoxTemplate">
            <summary>
            A children hierarchy editor template for which the children browser is a combo box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NChildrenHierarchyEditor.ListBoxTemplate">
            <summary>
            A children hierarchy editor template for which the children browser is a list box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NChildrenHierarchyEditor.Style">
            <summary>
            Gets or sets the value of the Style property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NSubtreeHierarchyEditor">
            <summary>
            The NSubtreeHierarchyEditor class is a hierarchy editor, 
            which is used for the editing of the node subtree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyEditor.CreateHierarchyBrowser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyEditor.GetAddChildCommandNode">
            <summary>
            Overriden to return the selected node itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NSubtreeHierarchyEditor.OnBrowserTreeViewSelectedPathChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a property of the subtree browser tree view has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NSubtreeHierarchyEditor.NSubtreeHierarchyEditorSchema">
            <summary>
            Schema associated with NSubtreeHierarchyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NStringPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of string type. 
            The value control is a text box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create an abstract text box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NStringPropertyEditor.OnTextBoxTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the text of the editor text box has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.NStringPropertyEditorSchema">
            <summary>
            Schema associated with NStringPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.TextBoxTemplate">
            <summary>
            An editor template for a string property editor, which is displayed as a text box (the default).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.TextBoxNoLabelTemplate">
            <summary>
            An editor template for a string property editor, which is displayed as a text box and does not show the
            property name label (i.e. only the text box is shown).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.TextBoxMultilineTemplate">
            <summary>
            An editor template for a string property editor, which is displayed as a multiline text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Editors.NStringPropertyEditor.ComboBoxTemplate">
            <summary>
            An editor template for a string property editor, which is displayed as a drop down (editable) combo box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NStringPropertyEditor.Style">
            <summary>
            Gets or sets the value of the Style property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NBooleanPropertyEditor">
            <summary>
            A property editor, which is by default assigned to properties of Boolean type. 
            The edit control is a check box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBooleanPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBooleanPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NBooleanPropertyEditor.CreateControl">
            <summary>
            Overriden to create a check box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NBooleanPropertyEditor.OnCheckBoxCheckedChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a property of the check box has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NBooleanPropertyEditor.NBooleanPropertyEditorSchema">
            <summary>
            Schema associated with NBooleanPropertyEditor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NBooleanPropertyEditor.CheckBox">
            <summary>
            Gets the check box of the editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NDefaultPropertyEditor">
            <summary>
            A labeledbox property editor, which is by default assigned to properties for which there is no specific editor.
            The value control is a text box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDefaultPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDefaultPropertyEditor.UpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDefaultPropertyEditor.CreateValueControl">
            <summary>
            Overriden to create an abstract text box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NDefaultPropertyEditor.OnTextBoxTextChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a property of the editor text box has changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Editors.NDefaultPropertyEditor.NDefaultPropertyEditorSchema">
            <summary>
            Schema associated with NDefaultPropertyEditor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NDefaultPropertyEditor.TextBox">
            <summary>
            Gets the text box of the editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NMoveNodeDownCommand">
            <summary>
            NMoveNodeDownCommand
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeDownCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeDownCommand.Execute">
            <summary>
            Overiden to move the node down in its parent nodes collection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeDownCommand.CanExecute">
            <summary>
            Overriden to determine whether the node can be moved down in its parent collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeDownCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NMoveNodeUpCommand">
            <summary>
            NMoveNodeUpCommand
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeUpCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeUpCommand.Execute">
            <summary>
            Overiden to move the node up in its parent nodes collection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeUpCommand.CanExecute">
            <summary>
            Overriden to determine whether the node can be moved up in its parent collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NMoveNodeUpCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NRemoveNodeCommand">
            <summary>
            NRemoveNodeCommand
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NRemoveNodeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NRemoveNodeCommand.Execute">
            <summary>
            Overiden to remove the node from its parent
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NRemoveNodeCommand.CanExecute">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Editors.NRemoveNodeCommand.CreateWidget">
            <summary>
            Overriden to create a toolbar button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Editors.NDesignerMetaUnit">
            <summary>
            A meta unit applicable to scheams, which defines the designer of a schema.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignerMetaUnit.#ctor(System.Type)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignerMetaUnit.GetAppliance">
            <summary>
            Gets the meta unit appliance mask.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NDesignerMetaUnit.CreateInstance">
            <summary>
            Creates a new designer of the type specified by the meta unit constructor
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Editors.NDesignerMetaUnit.DesignerType">
            <summary>
            The DomType of the designer to create for a specific schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NVerb">
            <summary>
            The NVerb class represents a verb of a node. 
            It serves as base class for all verbs, which can appear in any DOM editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NVerb.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">verb name</param>
        </member>
        <member name="M:Nevron.Nov.Editors.NVerb.Execute">
            <summary>
            Must override to perform the verb action.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Editors.NVerb.Name">
            <summary>
            Gets or sets the name of the verb.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Editors.NVerbList">
            <summary>
            The NVerbList class represents a typed list of NVerb instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NVerbList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Editors.NVerbList.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.Editors.NVerb})">
            <summary>
            Initializer constructor
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Nevron.Nov.Editors.NVerbList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.Dom.NInsertChildData">
            <summary>
            Represents the change data associated with a child insertion change
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NRemoveChildData">
            <summary>
            Represents the data associated with child removal
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomDeepCopyContext">
            <summary>
            Represents the context for nodes deep copying/cloning.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepCopyContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepCopyContext.Begin">
            <summary>
            Marks the start of cloning session.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomDeepCopyContext.End">
            <summary>
            Marks the end of a cloning session.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeAggregationInfo">
            <summary>
            Encapsulates information related to the way, in which the node is aggregated by its parent
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeAggregationInfo.Type">
            <summary>
            Gets the node aggregation type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeAggregationInfo.Index">
            <summary>
            Gets the index of the child in its parent.
            Valid only if Type is CollectionChild.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeAggregationInfo.Child">
            <summary>
            Gets the child exposing the node inside its parent. 
            Valid only if Type is ContainerChild.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeAggregationInfo.Property">
            <summary>
            Gets the property exposing the node inside its parent. 
            Valid only if Type is Property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomPath">
            <summary>
            Used for the dynamic navigion of one DOM node to another. A DOM path is encoded as a sequence of steps. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.#ctor(Nevron.Nov.Dom.NDomPath)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.ToString">
            <summary>
            Overriden to generate the string representation of a DOM path, 
            which is a concatenation of the contained steps, divided by the '\' character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.Select(Nevron.Nov.Dom.NNode)">
            <summary>
            Selects the node identified by this path, by traversing the path from the specified origin node.
            </summary>
            <param name="from">origin node</param>
            <returns>from node if path is empty, or node at the end of the path</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.Parse(System.String)">
            <summary>
            Creates a NDomPath instance from its string representation
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.FromDocumentToElement(Nevron.Nov.Dom.NDocument,Nevron.Nov.Dom.NElement)">
            <summary>
            Creates a path to the specified element from the specified document
            </summary>
            <param name="fromDocument"></param>
            <param name="toElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.FromDocumentToNode(Nevron.Nov.Dom.NDocument,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a path to the specified node from the specified document
            </summary>
            <param name="fromDocument"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.FromAncestorToNode(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a path from the specified ancestor to the specified node
            </summary>
            <param name="fromAncestor"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.FromNodeToAncestor(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a path from the specified node to the specified ancestor
            </summary>
            <param name="fromNode"></param>
            <param name="toAncestor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPath.FromNodeToNode(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a path from the specified node to the specified node
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomPathStep">
            <summary>
            Represents a step inside a Nevron DOM path, which knows how to select a certain TO node from a certain FROM node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPathStep.ToString">
            <summary>
            Overriden to return the string representation of the step
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPathStep.Equals(System.Object)">
            <summary>
            Overriden to return true, if the passed object is a DOM path step that equals to this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomPathStep.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.ENDocumentSaveTarget">
            <summary>
            Enumerates the text export targets
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDocumentSaveTarget.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDocumentSaveTarget.Clipboard">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENDocumentLoadSource">
            <summary>
            Enumerates the text import sources
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDocumentLoadSource.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDocumentLoadSource.Clipboard">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENStylingOperator">
            <summary>
            Enumerates the supported operators used to define styling states.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENStylingOperator.Equals">
            <summary>
            Equals operator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENStylingOperator.NotEquals">
            <summary>
            Not equals operator.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENEventPhase">
            <summary>
            Defines the possible phases in events handling
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENEventPhase.Sinking">
            <summary>
            The event is in sinking phase.
            (e.g. the event travels from the root towards the target).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENEventPhase.AtTarget">
            <summary>
            The event has arrived at the target.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENEventPhase.Bubbling">
            <summary>
            The event is in bubbling phase.
            (e.g. the event travels from the event target towards the root).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENServiceStatus">
            <summary>
            Enumerates the possible states of a service
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENServiceStatus.Started">
            <summary>
            The service is started and is running
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENServiceStatus.Paused">
            <summary>
            The service is started, but is temporary paused and is not running
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENServiceStatus.Stopped">
            <summary>
            The service is stopped and is not running
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENTreeTraversalOrder">
            <summary>
            Enumerates the order in which trees can be traversed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENTreeTraversalOrder.BreadthFirst">
            <summary>
            Breadth-first traversal order - visit the nodes by levels
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENTreeTraversalOrder.DepthFirstPostOrder">
            <summary>
            Depth-First Post-Order traversal order - visit the children and then visit the parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENTreeTraversalOrder.DepthFirstPreOrder">
            <summary>
            Depth-First Pre-Order traversal order - visit the parent and then visit the children
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENNodeChildrenAggregation">
            <summary>
            Enumerates the modes in which a node can store its children
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeChildrenAggregation.None">
            <summary>
            The node is a leaf and cannot have any child nodes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeChildrenAggregation.Collection">
            <summary>
            The node is a collection of children of a certain base schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeChildrenAggregation.Container">
            <summary>
            The node is a container for named children of certain schemas
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENNodeAggregationType">
            <summary>
            Defines the ways in which a node can be aggregated by another node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeAggregationType.None">
            <summary>
            The is not aggregated, since it does not have a parent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeAggregationType.Property">
            <summary>
            The node parent exposes the node as a property value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeAggregationType.CollectionChild">
            <summary>
            The node parent is a collection and the node itself is a child node at a specific index
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeAggregationType.ContainerChild">
            <summary>
            The node parent is a container and the node itself is a child node with a specific child slot
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENDomPathStepType">
            <summary>
            Defines the possible types of DOM path steps
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDomPathStepType.SelectParentNode">
            <summary>
            Selects the parent node of a node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDomPathStepType.SelectPropertyNode">
            <summary>
            Selects a node exposed by a property of the node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDomPathStepType.SelectCollectionChildNode">
            <summary>
            Selects the child node of a node at a specific index
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDomPathStepType.SelectContainerChildNode">
            <summary>
            Selects the child node of a node with a specific name
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENDomPathStepType.SelectDocumentElement">
            <summary>
            Selects a document element
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENNodeCompositionType">
            <summary>
            Defines the node composition type
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeCompositionType.Leaf">
            <summary>
            The node is a leaf and does not support any composition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENNodeCompositionType.Branch">
            <summary>
            The node is a branch and other nodes cannot be inserted or removed from it.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENMetaUnitAppliance">
            <summary>
            Defines the schema objects to which certain metadata can be applied
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMetaUnitAppliance.Schemas">
            <summary>
            The metadata is applicable to schemas
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMetaUnitAppliance.Properties">
            <summary>
            The metadata is applicable to properties
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMetaUnitAppliance.ChildSlots">
            <summary>
            The metadata is applicable to child slots
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMetaUnitAppliance.All">
            <summary>
            The metadata is applicable to all metadata containers
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENMediaInteractityGroup">
            <summary>
            Enumerates the possible media interactivity groups 
            (e.g. whether the user can interact with the media)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaInteractityGroup.NA">
            <summary>
            The media interactity is NA
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaInteractityGroup.Static">
            <summary>
            The media is static (cannot handle UI input)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaInteractityGroup.Interactive">
            <summary>
            The media is interactive (can handle UI input)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaInteractityGroup.Both">
            <summary>
            The media can be both static and interactive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaInteractityGroup.Any">
            <summary>
            Matches any interactity group
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENMediaContinuationGroup">
            <summary>
            Enumerates the possible media continuation groups
            (e.g. how content flow is handled by the media)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaContinuationGroup.NA">
            <summary>
            The media continuation is NA
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaContinuationGroup.Continuous">
            <summary>
            The media is continuous
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaContinuationGroup.Paged">
            <summary>
            The media is paged
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaContinuationGroup.Both">
            <summary>
            The media is both paged and continuous
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaContinuationGroup.Any">
            <summary>
            Matches any continuation group
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENPaintMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintMask.Appearance">
            <summary>
            Appearance
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintMask.Shadow">
            <summary>
            Shadow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintMask.AppearanceAndShadow">
            <summary>
            Appearance and shadow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENThemeStatesCombineMode">
            <summary>
            Defines the way in which a theme states meta unit is combined with the base theme states
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeStatesCombineMode.Prepend">
            <summary>
            The theme states are prepended to the base theme states
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeStatesCombineMode.Append">
            <summary>
            The theme states are appended to the base theme states
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENThemeStatesCombineMode.Replace">
            <summary>
            The theme states replace the base theme states
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENMediaType">
            <summary>
            Enumerates the supported media types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaType.Screen">
            <summary>
            The screen media type
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENMediaType.Print">
            <summary>
            The print media type
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENValueSource">
            <summary>
            Enumerates the possible sources of computed property values.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENValueSource.Default">
            <summary>
            The value was obtained by the property metadata.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENValueSource.Local">
            <summary>
            The value is set by the user or an expression.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENValueSource.Styling">
            <summary>
            The value was obtained by the document cascade.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENValueSource.Inherited">
            <summary>
            The value was inherited.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENValueSource.LocalOrDefaultMask">
            <summary>
            Mask for local or default bits.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENPaintCacheMode">
            <summary>
            Gets the mode in which the painting of a paint cachable display node can be cached.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintCacheMode.None">
            <summary>
            The node currently does not allow paint caching.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintCacheMode.VisibleClip">
            <summary>
            Flag that signals that the node allows the caching of its visible clipped area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintCacheMode.FullClip">
            <summary>
            Flag that signals that the node allows the caching of its full clipped area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENPaintCacheMode.Auto">
            <summary>
            The node allows the caching of its visible and full clipped area. 
            The paint caching system automatically determines which one to cache.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENLayoutParentInvalidationReason">
            <summary>
            Enumerates the reasons a layout invalidates its parent for.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENLayoutParentInvalidationReason.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENLayoutParentInvalidationReason.Registered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENLayoutParentInvalidationReason.Unregistered">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.ENVisualInvalidationReason">
            <summary>
            Enumerates the reasons for invalidation of a visual.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENVisualInvalidationReason.TransformChanged">
            <summary>
            The transform of the visual has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENVisualInvalidationReason.DisplayChanged">
            <summary>
            The display has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.ENVisualInvalidationReason.Unregistered">
            <summary>
            The visual has been unregistered from the DOM tree.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NPropertyNodesIterator">
            <summary>
            The NPropertyNodesIterator class represents an iterator, which can be used to 
            enumerate the col nodes of a node and supports filtering.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyNodesIterator.#ctor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates an iterator, which enumerates the direct attributes of the node
            </summary>
            <param name="node">node whose attributes to enumerate</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyNodesIterator.#ctor(Nevron.Nov.Dom.NNode,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Creates an iterator, which enumerates the direct attributes of the node, 
            which satisfy the specified filter
            </summary>
            <param name="node">node whose attributes to enumerate</param>
            <param name="filter">filter, which must be used to filter the node attributes, or null if no filter should be applied</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyNodesIterator.MoveNext">
            <summary>
            Advances the iterator to the next attribute of the node, which satifies the specified filter
            </summary>
            <returns>true if advance succeeded, false if the end of the node was reached</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyNodesIterator.Reset">
            <summary>
            Resets the iterator (positions it before the first attribute of the node)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NPropertyNodesIterator.Current">
            <summary>
            Obtains the current node 
            </summary>
            <remarks>
            This property will throw an InvalidOperationException exception if the iterator has not been started, 
            or has ended.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NNodeSubtreeIterator">
            <summary>
            The NNodeForwardSubtreeIterator class represents a filtered iterator, which can be used to 
            sequencially traverse a node subtree in PreOrder, PostOrder and BreadthFirst tree traversal order.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeIterator.#ctor(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.ENTreeTraversalOrder)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="container">container whose descenendants to enumerate</param>
            <param name="order">order in which to traverse the subtree</param> 
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeIterator.MoveNext">
            <summary>
            Advances the iterator to the next node in the container (or its descendants)
            </summary>
            <returns>true if the iterator was successfully advanced to the next node, false if the iterator has passed the end of the container (or all its descendants)</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NNodeSubtreeIterator.Reset">
            <summary>
            Sets the iterator to its initial position, which is before the container node argument passed in the ctor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NNodeSubtreeIterator.Current">
            <summary>
            Obtains the current node 
            </summary>
            <remarks>
            This property will throw an InvalidOperationException exception if the iterator has not been started, or has ended.
            </remarks>
        </member>
        <member name="T:Nevron.Nov.Dom.NValueChangeEventArgs">
            <summary>
            Event arguments, associated with property value changing/changed events
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.Property">
            <summary>
            Gets the Property whose value is changing or has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.PropertyFlags">
            <summary>
            Gets the property Flags associated with the property for the target node schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.NewValue">
            <summary>
            Gets the new effective value for the property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.OldValue">
            <summary>
            Gets the old effective value for the property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.HasLocalValueChange">
            <summary>
            Determines whether the event holds information about a local value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.NewLocalValue">
            <summary>
            Gets the new local value. Throws an exception if HasLocalValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.NewLocalValueIsDefault">
            <summary>
            Gets whether the new local value is of default origin or not. Throws an exception if HasLocalValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.OldLocalValue">
            <summary>
            Gets the old local value. Throws an exception if HasLocalValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.OldLocalValueIsDefault">
            <summary>
            Gets whether the old local value is of default origin or not. Throws an exception if HasLocalValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.HasComputedValueChange">
            <summary>
            Determines whether the event holds information about a computed value change or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.NewComputedValue">
            <summary>
            Gets the new computed value. Throws an exception if HasComputedValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.NewComputedValueSource">
            <summary>
            Gets the new computed value source. Throws an exception if HasComputedValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.OldComputedValue">
            <summary>
            Gets the old computed value. Throws an exception if HasComputedValueChange returns false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NValueChangeEventArgs.OldComputedValueSource">
            <summary>
            Gets the old computed value source. Throws an exception if HasComputedValueChange returns false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NEvent">
            <summary>
            The NEvent class is used for the classification of events raised by DOM nodes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.IsFromCategory(Nevron.Nov.Dom.NEvent)">
            <summary>
            Checks whether this event is from the specified event category
            </summary>
            <param name="eventCategory"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.UICategoryEvent">
            <summary>
            The User Input Event - a category event which occurs in response to user activity.
            All events in this category can bubble and sink.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.ChangingCategoryEvent">
            <summary>
            The Changing Category Event - a category event which occurs whenever a node is about to change.
            All events in this category are direct.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.ChildrenChangingCategoryEvent">
            <summary>
            The Children Changing Category Event - a sub category event of the ChangingCategory event.
            All events in this category are direct.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.ChangedCategoryEvent">
            <summary>
            The Changed Category Event - a category event which occurs whenever a node has changed.
            All events in this category are direct.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.ChildrenChangedCategoryEvent">
            <summary>
            The Children Changed Category Event - a sub category event of the ChangedCategory event.
            All events in this category are direct.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NEvent.ContextChangedCategoryEvent">
            <summary>
            The Context Changed Category Event - a category event which occurs whenever a certain aspect of context in node hierachy changes.
            All events in this category are direct.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.Create(System.String,Nevron.Nov.Dom.NSchema,System.Type)">
            <summary>
            Creates a new event with the specified parameters. This method creates a direct event, which cannot bubble and sink.
            </summary>
            <param name="name">event name</param>
            <param name="ownerSchema">schema which owns the event, or null if the event must be considered shared</param>
            <param name="eventArgsType">the type of the event arguments. Must be a NEventArgs derived type</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.Create(System.String,Nevron.Nov.Dom.NSchema,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Creates a new DOM event with the specified parameters.
            </summary>
            <param name="name">event name</param>
            <param name="ownerSchema">schema which owns the event, or null if the event must be considered shared</param>
            <param name="eventArgsType">the type of the event arguments. Must be a NEventArgs derived type</param>
            <param name="canBubble">whether the event uses the bubbling routing strategy</param>
            <param name="canSink">whether the event uses the sinking routing strategy</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.Create(System.String,Nevron.Nov.Dom.NSchema,System.Type,Nevron.Nov.Dom.NEvent)">
            <summary>
            Creates a new DOM event with the specified parameters, which belongs to the specified dom event category.
            The routing strategy is defined by the event category (e.g. all events in the same event category have the same routing strategy)
            </summary>
            <param name="name">event name</param>
            <param name="ownerSchema">schema which owns the event, or null if the event must be considered shared</param>
            <param name="eventArgsType">the type of the event arguments. Must be a NEventArgs derived type</param>
            <param name="category">dom event for which the event is a sub event</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.GetByName(System.String)">
            <summary>
            Gets the event associated with the specified event name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NEvent.GetById(System.Int32)">
            <summary>
            Gets the event associated with the specified id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.Id">
            <summary>
            Gets the event Id
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.Name">
            <summary>
            Gets the name of the event
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.CategoryEvent">
            <summary>
            Gets the category event of this event
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.ArgumentsType">
            <summary>
            Gets the type of event arguments that are associated with this event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.CanSink">
            <summary>
            Indicates whether events of this type use the sinking routing strategy or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.CanBubble">
            <summary>
            Indicates whether events of this type use the bubbling routing strategy or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NEvent.ChildEvents">
            <summary>
            Gets the child events of this event.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NInstanceOfSchemaFilter">
            <summary>
            Filters nodes, which are instances of the specified schema
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NInstanceOfSchemaFilter.#ctor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NInstanceOfSchemaFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is instance of the target schema.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NPropertyBackingTypeFilter">
            <summary>
            Filters properties by their backing type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyBackingTypeFilter.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="backedByMember">whether to match properties backed by member or by slot</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyBackingTypeFilter.Filter(Nevron.Nov.Dom.NProperty)">
            <summary>
            Return true if the property backing type matches the target backing type
            </summary>
            <param name="property">property to filter</param>
            <returns>true if the specified object matches the filter criteria otherwise false</returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NPropertyDomTypeInfoMaskFilter">
            <summary>
            Filters properties, which satisfy the specified dom type info mask
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyDomTypeInfoMaskFilter.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="valueType"></param>
            <param name="nodeType"></param>
            <param name="deeplyCloable"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NPropertyDomTypeInfoMaskFilter.Filter(Nevron.Nov.Dom.NProperty)">
            <summary>
            Filters properties that match the target ENDomTypeInfoMask
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomConstants">
            <summary>
            The NDomConstants static class serves as repository for constants used by DOM
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomConstants.HistoryServiceUID">
            <summary>
            Guid associated with the history service
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomConstants.MergeStyleSheetsServiceUID">
            <summary>
            Guid associated with the merge style sheets service
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomResources">
            <summary>
            The NDomResources static class serves as repository for resources used by DOM
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomResources.HistoryUnitInsertNode">
            <summary>
            Description for the insert node history unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomResources.HistoryUnitRemoveNode">
            <summary>
            Description for the remove node history unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomResources.HistoryUnitFieldsChange">
            <summary>
            Fields changed unit name
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomResources.HistoryUnitPropertyChangeFormat">
            <summary>
            Format string for property changes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomResources.HistoryUnitExpressionChangeFormat">
            <summary>
            Format string for expression changes 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSchema">
            <summary>
            Represents a metadata container, which defines the structure of a class of NNode derivates. 
            For each type of NNode derivates there is exactly one instance of the NSchema class associated with it.
            </summary>
            <remarks>
            NSchema instances are created by the static constructor of each type that derives from NNode derivate, 
            with the help of the NSchema.Create static method.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddMember(System.String,System.Type,System.Object,Nevron.Nov.FunctionResult{System.Object,Nevron.Nov.Dom.NNode},Nevron.Nov.Function{Nevron.Nov.Dom.NNode,System.Object})">
            <summary>
            Adds a property backed by a pair of getter and setter delegates.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <param name="getter"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddMember(System.String,Nevron.Nov.Dom.NDomType,System.Object,Nevron.Nov.FunctionResult{System.Object,Nevron.Nov.Dom.NNode},Nevron.Nov.Function{Nevron.Nov.Dom.NNode,System.Object})">
            <summary>
            Adds a property backed by a pair of getter and setter delegates.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <param name="getter"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddSlot(System.String,System.Type,System.Object)">
            <summary>
            Adds a property backed by a slot
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddSlot(System.String,Nevron.Nov.Dom.NDomType,System.Object)">
            <summary>
            Adds a property backed by a slot
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetPropertiesCount">
            <summary>
            Gets the count of properties declared in this and base schemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetPropertyByName(System.String)">
            <summary>
            Tries to find a property with the specified name, which is declared in this or base schemas.
            Returns null if such property does not exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetPropertyById(System.Int32)">
            <summary>
            Tries to find a property with the specified id, which is declared in this or base schemas.
            Returns null if such property does not exist.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetPropertyIterator">
            <summary>
            Gets an iterator, that iterates through the properties declared in this and base schemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetPropertyIterator(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NProperty})">
            <summary>
            Gets an iterator, that iterates through the properties declared in this and base schemas, that pass the specified filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.MakeCollection(System.Type)">
            <summary>
            Instructs the node instances of this schema to allow collection children storage 
            of nodes, the schemas of which are exact or derived instances of the specified schema.
            </summary>
            <param name="childrenBaseType"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.MakeContainer">
            <summary>
            Instructs the node instances of this schema to allow container children storage
            of nodes, the schemas of which are exact or derived instances of the specified schema.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddChild(System.String,System.Type)">
            <summary>
            Adds a named child to the schema definition.
            The child is not readonly, is nullable and is created on demand.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddChild(System.String,Nevron.Nov.Dom.NDomType)">
            <summary>
            Adds a named child to the schema definition.
            The child is not readonly, is nullable and is created on demand.
            </summary>
            <param name="name"></param>
            <param name="domType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenCount">
            <summary>
            Gets the count of children declared in this and base schemas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildByName(System.String)">
            <summary>
            Tries to find a child with the specified name, which is declared in this or base schemas
            </summary>
            <param name="name">child name</param>
            <returns>child with the specified name, or null if such child does not exist</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildById(System.Int32)">
            <summary>
            Tries to find a child with the specified id, which is declared in this or base schemas.
            </summary>
            <param name="id">child id</param>
            <returns>child with the specified id, or null if such child does not exist</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildIterator">
            <summary>
            Gets the children declared in this and base schemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildIterator(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NChild})">
            <summary>
            Gets the children declared in this and base schemas, that pass the specified filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler)">
            <summary>
            Adds an event handler, which belongs to the default event handlers group, 
            which is triggered during the AtTarget/Bubbling phase.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to add</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.AddEventHandler(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.INEventHandler,System.Boolean)">
            <summary>
            Adds an event handler, which belongs to the default event handlers group, 
            which is triggered during the AtTarget/Bubbling phase or the Capturing phase if sinking is true.
            </summary>
            <param name="domEvent">DOM event</param>
            <param name="eventHandler">event handler to add</param>
            <param name="sinking">whether to add a normal or sinking handler</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetBaseSchemas">
            <summary>
            Gets a list of the base schemas of this schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.IsEqualOrDerivedFromSchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Determines whether this schema is derived from, or equal to the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.IsDerivedFromSchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Deterimes whether this schema is derived from the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetFirstCommonSchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first base schema, that is common for both this schema and the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetMetaUnit(System.Int32)">
            <summary>
            Gets a meta unit by key. Queries base schemas
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetMetaUnit(System.Type)">
            <summary>
            Gets a meta unit by type. Queries base schemas.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetMetaUnit(System.Int32,System.Boolean)">
            <summary>
            Gets a meta unit by key. Queries base schemas if specified.
            </summary>
            <param name="key"></param>
            <param name="queryBaseSchemas"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetMetaUnit(System.Type,System.Boolean)">
            <summary>
            Gets a meta unit by type. Queries base schemas if specified.
            </summary>
            <param name="type"></param>
            <param name="queryBaseSchemas"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetMetaUnit(Nevron.Nov.Dom.NMetaUnit)">
            <summary>
            Sets the specified meta unit to this schema
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetFormulaSheet(System.Boolean)">
            <summary>
            Sets whether element instances of this schema are considered as formula sheets or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetFormulaSheet">
            <summary>
            Gets whether element instances of this schema are considered as formula sheets or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectMeasure(System.Boolean)">
            <summary>
            Sets whether the child elements of affect the measure of the element or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectMeasure">
            <summary>
            Gets whether the child elements of affect the measure of the element or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectArrange(System.Boolean)">
            <summary>
            Sets whether the child elements of affect the arrange of the element or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectArrange">
            <summary>
            Gets whether the child elements of affect the arrange of the element or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectDisplay(System.Boolean)">
            <summary>
            Sets whether the child elements affect the display of the element or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectDisplay">
            <summary>
            Gets whether the child elements of affect the display of the element or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectParentMeasure(System.Boolean)">
            <summary>
            Sets whether the child elements of affect the measure of the element parent or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectParentMeasure">
            <summary>
            Gets whether the child elements of affect the measure of the element parent or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectParentArrange(System.Boolean)">
            <summary>
            Sets whether the child elements of affect the arrange of the element parent or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectParentArrange">
            <summary>
            Gets whether the child elements of affect the arrange of the element parent or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetChildrenAffectParentDisplay(System.Boolean)">
            <summary>
            Sets whether the child elements of affect the display of the element parent or not.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetChildrenAffectParentDisplay">
            <summary>
            Gets whether the child elements of affect the display of the element parent or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetCustom1">
            <summary>
            Gets the value for the Custom1 flag.
            By default Custom1 is set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetCustom1(System.Boolean)">
            <summary>
            Sets the value for the Custom1 flag.
            By default Custom1 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetCustom2">
            <summary>
            Gets the value for the Custom2 flag.
            By default Custom2 is set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetCustom2(System.Boolean)">
            <summary>
            Sets the value for the Custom2 flag.
            By default Custom2 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetCustom3">
            <summary>
            Gets the value for the Custom3 flag.
            By default Custom3 is set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetCustom3(System.Boolean)">
            <summary>
            Sets the value for the Custom3 flag.
            By default Custom3 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetCustom4">
            <summary>
            Gets the value for the Custom4 flag.
            By default Custom4 is set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetCustom4(System.Boolean)">
            <summary>
            Sets the value for the Custom4 flag.
            By default Custom4 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetCustom5">
            <summary>
            Gets the value for the Custom5 flag.
            By default Custom5 is set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.SetCustom5(System.Boolean)">
            <summary>
            Sets the value for the Custom5 flag.
            By default Custom5 is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.Create(System.Type,Nevron.Nov.Dom.NSchema)">
            <summary>
            Creates a new schema that is associated with the specified CLR type and is based on the specified schema.
            The base schema must be associated with the immediate base CLR type of the specified CLR type.
            </summary>
            <param name="type"></param>
            <param name="baseSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetById(System.Int32)">
            <summary>
            Gets the schema associated with the specified id.
            Returns null if a schema with the specified id is not registered yet.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetByType(System.Type)">
            <summary>
            Gets the schema associated with the specified node type.
            Returns null if the specified type is not of node type, or the public static readonly ClassNameSchema pattern was not obeyed.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NSchema.GetByName(System.String)">
            <summary>
            Gets the schema associated with the specified name.
            Returns null if the specified name is not a valid schema name, or the public static readonly ClassNameSchema pattern was not obeyed.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.Id">
            <summary>
            Gets the id of the schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.DomType">
            <summary>
            Gets the DOM type, associated with this schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.BaseSchema">
            <summary>
            Gets the base schema, or null if this is the root schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.Name">
            <summary>
            Gets the name of the schema
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.ChildrenAggregation">
            <summary>
            Gets the way in which node instances of this schema aggregate their children.
            The value of this property is affected by the MakeCollection and MakeContainer methods.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSchema.ChildrenBaseSchema">
            <summary>
            Gets the base schema of the possible node children.
            For ChildrenStorage.Collection, returns the childrenBaseSchema, with which this schema was last defined as collection, via the MakeCollection method.
            For ChildrenStorage.Container, returns the first common ancestor schema, of this schema children (valid only after the schema is Sealed).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NProperty">
            <summary>
            A schema part that represents a property declared by a schema or an extended property.
            The property defines much of the property values characteristics at a meta level.
            </summary>
            <remarks>
            <para>
            A property can be either self or extended. 
            </para>
            <para>
            Self properties are properties that are created for a specific owner schema, with the help of the NSchema.AddSlot or NSchema.AddMember methods.
            A self property created by NSchema.AddMember method is backed by a pair of getter/setter delegates that typically get and set the value of a node member field.
            A self property created by NSchema.AddSlot method is backed by a slot in the node internal slot property value storage.
            </para>
            <para>
            Extented properties are properties for which you can set a local value in arbitrary NNode instances. 
            That is why extended properties consider the NNode.NNodeSchema as owner schema (i.e. can be applied to all types of NNode instances).
            Extended properties are created by the NProperty.CreateExtended method.
            </para>
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_Styleable">
            <summary>
            The stylable flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_Inherited">
            <summary>
            The inherited flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsArrange">
            <summary>
            The affects layout flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsParentArrange">
            <summary>
            The affects parent layout flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsMeasure">
            <summary>
            The affects measure flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsParentMeasure">
            <summary>
            The affects parent measure flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsDisplayTransform">
            <summary>
            The affects display transform flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsDisplay">
            <summary>
            The affects display list flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.Flag_AffectsParentDisplay">
            <summary>
            The affects parent display list flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.AffectsMeasureGroupMask">
            <summary>
            A mask that includes the values of the AffectsMeasureFlag and AffectsParentMeasureFlag flags
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.AffectsArrangeGroupMask">
            <summary>
            A mask that includes the values of the AffectsArrangeFlag and AffectsParentArrangeFlag flags
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.AffectsMeasureOrArrangeGroupMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.AffectsParentMeasureOrParentArrangeGroupMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.AffectsDisplayGroupMask">
            <summary>
            A mask that includes the values of the AffectsDisplayFlag and AffectsParentDisplayFlag flags
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NProperty.ComputableGroupMask">
            <summary>
            A mask that includes the values of the StyleableFlag and InheritedFlag flags
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.AddLocalValueChangingCallback(Nevron.Nov.FunctionResult{System.Boolean,Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NValueChangeData})">
            <summary>
            Adds a local value changing delegate. 
            The callback is called when this property local value is about to change for the specified node.
            The callback must return false, if the new value is not acceptable.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.AddValueChangedCallback(Nevron.Nov.Function{Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NValueChangeData})">
            <summary>
            Adds a value changed delegate.
            The callback is called when this property local and/or recomputed value has changed for the specified node.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetDefaultValue(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the default property value that applies for the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetDefaultValue(Nevron.Nov.Dom.NSchema,System.Object)">
            <summary>
            Sets the default property value that applies for the specified schema
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetNullable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is nullable for the specified schema.
            By default Nullable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetNullable(System.Boolean)">
            <summary>
            Sets whether this property is nullable for the owner schema.
            By default Nullable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetNullable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is nullable for the specified schema.
            By default Nullable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetSerializable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is serializable for the specified schema.
            By default Serializable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetSerializable(System.Boolean)">
            <summary>
            Sets whether this property is serializable for the owner schema.
            By default Serializable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetSerializable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is serializable for the specified schema.
            By default Serializable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetDeeplyCloneable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is deeply clonable for the specified schema.
            By default DeeplyClonable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetDeeplyCloneable(System.Boolean)">
            <summary>
            Sets whether this property is DeeplyCloneable for the owner schema.
            By default DeeplyCloneable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetDeeplyCloneable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is DeeplyCloneable for the specified schema.
            By default DeeplyCloneable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetRecordable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is recordable for the specified schema.
            By default Recordable is set to true.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetRecordable(System.Boolean)">
            <summary>
            Sets whether this property is recordable for the owner schema.
            By default Recordable is set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetRecordable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is recordable for the specified schema.
            By default Recordable is set to true.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetStyleable(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is styleable for the specified schema.
            By default Styleable is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetStyleable(System.Boolean)">
            <summary>
            Sets whether this property is styleable for the owner schema.
            By default Styleable is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetStyleable(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is styleable for the specified schema.
            By default Styleable is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetInherited(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property is inherited for the specified schema.
            By default Inherited is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetInherited(System.Boolean)">
            <summary>
            Sets whether this property is inherited for the owner schema.
            By default Inherited is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetInherited(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property is inherited for the specified schema.
            By default Inherited is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsMeasure(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the measure for the specified schema.
            By default AffectsMeasure is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsMeasure(System.Boolean)">
            <summary>
            Sets whether this property affects the measure for the owner schema.
            By default AffectsMeasure is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsMeasure(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the measure for the specified schema.
            By default AffectsMeasure is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsArrange(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the layout for the specified schema.
            By default AffectsArrange is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsArrange(System.Boolean)">
            <summary>
            Sets whether this property affects the layout for the owner schema.
            By default AffectsArrange is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsArrange(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the layout for the specified schema.
            By default AffectsArrange is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsTransform(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the display transform for the specified schema.
            By default AffectsTransform is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsTransform(System.Boolean)">
            <summary>
            Sets whether this property affects the display transform for the owner schema.
            By default AffectsTransform is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsTransform(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the display transform for the specified schema.
            By default AffectsTransform is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsDisplay(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the display list for the specified schema.
            By default AffectsDisplay is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsDisplay(System.Boolean)">
            <summary>
            Sets whether this property affects the display for the owner schema.
            By default AffectsDisplay is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsDisplay(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the display for the specified schema.
            By default AffectsDisplay is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsParentMeasure(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the parent measure for the specified schema.
            By default AffectsParentMeasure is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentMeasure(System.Boolean)">
            <summary>
            Sets whether this property affects the parent measure for the owner schema.
            By default AffectsParentMeasure is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentMeasure(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the parent measure for the specified schema.
            By default AffectsParentMeasure is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsParentArrange(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the parent layout for the specified schema.
            By default AffectsParentArrange is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentArrange(System.Boolean)">
            <summary>
            Sets whether this property affects the parent layout for the owner schema.
            By default AffectsParentArrange is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentArrange(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the parent layout for the specified schema.
            By default AffectsParentArrange is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetAffectsParentDisplay(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets whether this property affects the parent display list for the specified schema.
            By default AffectsParentDisplay is set to false.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentDisplay(System.Boolean)">
            <summary>
            Sets whether this property affects the parent display list for the owner schema.
            By default AffectsParentDisplay is set to false.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.SetAffectsParentDisplay(Nevron.Nov.Dom.NSchema,System.Boolean)">
            <summary>
            Sets whether this property affects the parent display list for the specified schema.
            By default AffectsParentDisplay is set to false.
            </summary>
            <param name="schema"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.ToString">
            <summary>
            Returns the string representation of the property (i.e. its name).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.CreateExtended(Nevron.Nov.Dom.NSchema,System.String,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="declaringSchema"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.CreateExtended(Nevron.Nov.Dom.NSchema,System.String,Nevron.Nov.Dom.NDomType,System.Object)">
            <summary>
            Registers an extended property
            </summary>
            <param name="name">The short name of the property</param>
            <param name="declaringSchema">The declaring schema - used in the full name generation</param>
            <param name="type">The type of the values for the property</param>
            <param name="defaultValue">The default value for the property</param>
            <returns>the extened property</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.CreateExtended(System.Type,System.String,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="declaringType"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.CreateExtended(System.Type,System.String,Nevron.Nov.Dom.NDomType,System.Object)">
            <summary>
            
            </summary>
            <param name="declaringType"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NProperty.GetExtendedByName(System.String)">
            <summary>
            Gets the schema associated with the specified name.
            Returns null if the specified name is not a valid schema name, or the public static readonly ClassNameSchema pattern was not obeyed.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.Id">
            <summary>
            Gets the property id, which is the Id of the DOM property associated with this property.
            The Id is unique for the properties declared in a schema and for all extended properties in general.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.Name">
            <summary>
            Gets the name of the property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.DomType">
            <summary>
            Gets the type associated with the property values
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.DomProperty">
            <summary>
            Gets the DOM property associated with this property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.IsExtended">
            <summary>
            Gets whether this is an extended property or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.OwnerSchema">
            <summary>
            Gets the schema, which owns this property.
            For a self property, this is the schema that declared the property.
            For an extended property, this is always the NNode schema.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.DeclarationOrder">
            <summary>
            Gets the order in which this property is declared in the schema. 
            Only valid for self properties. For extended properties always returns -1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.LocalValueChangingEvent">
            <summary>
            Gets the event, which is dispatched when the local property value is about to be changed.
            This event is assigned to the NNode.ChangingEvent category, and is associated with the Function&lt;NValueChangeEventArgs> delegate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.ValueChangedEvent">
            <summary>
            Gets the event, which is dispatched when the local property value has changed.
            This event is assigned to the NNode.ChangedEvent category, and is associated with the Function&lt;NValueChangeEventArgs> delegate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.IsBackedByMember">
            <summary>
            Gets whether the property is backed by a member or not (is backed by a slot). 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.MemberValueGetter">
            <summary>
            Gets the get member value delegate.
            Only applicable for properties backed by member.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NProperty.MemberValueSetter">
            <summary>
            Gets the set member value delegate.
            Only applicable for properties backed by member.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NTransactionHistoryUnit">
            <summary>
            A history unit with an user defined description, that holds other history units.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="description"></param>
            <param name="allowPrevUnitMerging"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.IsEmpty">
            <summary>
            Determines whether the unit is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.DumpToTreeItem(Nevron.Nov.UI.NTreeViewItem)">
            <summary>
            Overriden to create a new tree node brach under the parent tree node
            </summary>
            <param name="parent">parent tree node</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.Undo">
            <summary>
            Undoes the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.Redo">
            <summary>
            Redoes the unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NTransactionHistoryUnit.ToString">
            <summary>
            Overriden to return the description
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Dom.NTransactionHistoryUnit.Description">
            <summary>
            Gets the human readable description of the transaction.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NTransactionHistoryUnit.AllowPrevUnitMerging">
            <summary>
            Gets whether the transaction allows for the merging of newly added units existing ones.
            By default set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NFieldsChangeHistoryUnit">
            <summary>
            Represents a history unit, which undoes/redoes a node fields change action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.#ctor(Nevron.Nov.Dom.NNode,System.String[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode">node whose fields to record</param>
            <param name="fieldNames">names of the fields to record</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.ToString">
            <summary>
            Overriden to provide a human readable representation of this transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.UndoAction">
            <summary>
            Overriden to toggle the state of the node fields.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.RedoAction">
            <summary>
            Overriden to toggle the state of the node fields.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.ToggleNodeFields">
            <summary>
            Toggles the state of the node fields with the stored field value copies
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.FieldNames">
            <summary>
            Names of the fields whose values are saved 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NFieldsChangeHistoryUnit.FieldValuesCopies">
            <summary>
            Copies of the field values 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NHistoryContext">
            <summary>
            Represents the context in which history units are undone or redone.
            It provides them with ambient information.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryContext.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryContext.Document">
            <summary>
            Gets the document used as origin for DOM paths
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NHistoryService">
            <summary>
            The NHistoryService class represents a suspendable service, 
            which provides documents with the ability to support Undo and Redo 
            for all the operations performed upon the document content
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NSuspendableService">
            <summary>
            The NService abstract class is a node, 
            which serves as base class for all types of services.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.Start">
            <summary>
            Starts the service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.Stop">
            <summary>
            Stops the service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.Pause">
            <summary>
            Pauses the service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.Resume">
            <summary>
            Resumes the service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.Restart">
            <summary>
            Restarts the service
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.OnStarted">
            <summary>
            Called when the service is started
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.OnStoped">
            <summary>
            Called when the service is stopped
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.OnPaused">
            <summary>
            Called when the service is paused
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NSuspendableService.OnResumed">
            <summary>
            Called when the service is resumed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NSuspendableService.Started">
            <summary>
            Occurs when the service was started
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NSuspendableService.Stopped">
            <summary>
            Occurs when the service was stopped
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NSuspendableService.Resumed">
            <summary>
            Occurs when the service was resumed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NSuspendableService.Paused">
            <summary>
            Occurs when the service was paused
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NSuspendableService.Status">
            <summary>
            Gets the current service status
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.CanRedo">
            <summary>
            Determines whether the user can perform Redo
            </summary>
            <returns>true if redo can be executed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.CanUndo">
            <summary>
            Determines whether the user can perform Undo
            </summary>
            <returns>true if undo can be executed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.CanRecord">
            <summary>
            Determines whether a new unit can be recorded. 
            The history cannot record any unit if it is not in started state, 
            or is currently undoing or redoing an unit.
            </summary>
            <returns>true if a new unit can be recorded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.Undo">
            <summary>
            Undoes the peak unit from the undo stack and pushes in the redo stack.
            </summary>
            <returns>true if undoing succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.Redo">
            <summary>
            Redoes the peak unit from the redo stack and pushes in the undo stack.
            </summary>
            <returns>true if redoing succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.Record(Nevron.Nov.Dom.NHistoryUnit)">
            <summary>
            Records the specified unit.
            If there are no started transactions, the unit is pushed in the undo stack and the redo stack is cleared.
            It there is a started transaction, the unit is appended as a child unit of the transaction unit.
            </summary>
            <param name="unit">unit to record</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.StartTransaction(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Starts a new history transaction. Transactions are units, which are pushed in the transaction stack 
            and their recording is suspended until the CommitTransaction method is called.
            </summary>
            <param name="transaction">the transaction description</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.StartTransaction(System.String)">
            <summary>
            Starts a new history transaction. Transactions are units, which are pushed in the transaction stack 
            and their recording is suspended until the CommitTransaction method is called.
            </summary>
            <param name="description">the transaction description</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.CommitTransaction">
            <summary>
            Commits the last started transaction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.RollbackTransaction">
            <summary>
            Rolls back the currently started transaction and undoes the effect of the units recorded in it
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.DumpToListBoxes(Nevron.Nov.UI.NListBox,Nevron.Nov.UI.NListBox)">
            <summary>
            Dumps the state of the undo and redo stacks in the specified ListBox instances
            </summary>
            <param name="undoList">undo list box</param>
            <param name="redoList">redo list box</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.DumpToTreeViews(Nevron.Nov.UI.NTreeView,Nevron.Nov.UI.NTreeView)">
            <summary>
            Dumps the state of the undo and redo stacks in the specified TreeView instances
            </summary>
            <param name="undoTree">undo tree view</param>
            <param name="redoTree">redo tree view</param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.DumpUndoStackToObjectsList(Nevron.Nov.DataStructures.NList{System.Object})">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.DumpRedoStackToObjectsList(Nevron.Nov.DataStructures.NList{System.Object})">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnUndoExecuted">
            <summary>
            Called when an unit has been successfully undone
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnRedoExecuted">
            <summary>
            Called when an unit has been successfully redone
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnUnitRecorded(Nevron.Nov.Dom.NHistoryUnit,Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Called whenever an unit has been recored in the undo stack
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnTransactionStarted(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Called when a transaction has been started
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnTransactionCommited(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Called when a transaction has been commited
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnTransactionRolledback(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Called when the last started transaction has been rolled back
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NHistoryService.OnStoped">
            <summary>
            Overriden to clear the state of the history service
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.NHistoryServiceSchema">
            <summary>
            Schema associated with NHistoryService
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.UnitRecordedEvent">
            <summary>
            Reference to the UnitRecorded event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.UndoExecutedEvent">
            <summary>
            Reference to the UndoExecuted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.RedoExecutedEvent">
            <summary>
            Reference to the RedoExecuted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.TransactionStartedEvent">
            <summary>
            Reference to the TransactionStarted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.TransactionRolledbackEvent">
            <summary>
            Reference to the TransactionRolledback event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NHistoryService.TransactionCommitedEvent">
            <summary>
            Reference to the TransactionRolledback event
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.UnitRecorded">
            <summary>
            Occurs when a new unit has been recorded
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.UndoExecuted">
            <summary>
            Occurs when undo is executed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.RedoExecuted">
            <summary>
            Occurs when redo is executed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.TransactionStarted">
            <summary>
            Occurs when a transaction has been started
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.TransactionRolledback">
            <summary>
            Occurs when a transaction has been rolled back
            </summary>
        </member>
        <member name="E:Nevron.Nov.Dom.NHistoryService.TransactionCommited">
            <summary>
            Occurs when a transaction has been commited
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.MaxUndoLevels">
            <summary>
            Controls the max depth of the undo stack. Setting this property will automatically clear 
            the extra units in the undo stack. By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.UndoStack">
            <summary>
            Gets the Undo units stack
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.RedoStack">
            <summary>
            Gets the Redo units stack
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.TransactionStack">
            <summary>
            Gets the Transaction units stack
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.OwnerDocument">
            <summary>
            Gets the resolving document. 
            The resolving document is the root document monitored by this history service.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.IsUndoing">
            <summary>
            Determines whether the history service is currently undoing an unit
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.IsRedoing">
            <summary>
            Determines whether the history service is currently redoing an unit
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NHistoryService.IsUndoingOrRedoing">
            <summary>
            Determines whether the history service is currently undoing or redoing an unit
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENPageOrientation">
            <summary>
            Specifies the orientation of a page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPageOrientation.Portrait">
            <summary>
            The default page orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPageOrientation.Landscape">
            <summary>
            The width and height of the page are reversed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENPaperKind">
            <summary>
            Enumerates the predefined paper kinds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Letter">
            <summary>
            Letter - 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Tabloid">
            <summary>
            Tabloid - 11 x 17 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Ledger">
            <summary>
            Ledger - 17 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Legal">
            <summary>
            Legal 8 1/2 x 14 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Statement">
            <summary>
            Statement 5 1/2 x 8 1/2 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Executive">
            <summary>
            Executive 7 1/4 x 10 1/2 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A3">
            <summary>
            A3 297 x 420 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A4">
            <summary>
            A4 210 x 297 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A5">
            <summary>
            A5 148 x 210 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B4">
            <summary>
            B4 (JIS) 250 x 354
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B5">
            <summary>
            B5 (JIS) 182 x 257 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Folio">
            <summary>
            Folio 8 1/2 x 13 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Quarto">
            <summary>
            Quarto 215 x 275 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size10X14">
            <summary>
            Size 10x14 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size11X17">
            <summary>
            Size 11x17 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Note">
            <summary>
            Note 8 1/2 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Envelope9">
            <summary>
            Envelope #9 3 7/8 x 8 7/8 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Envelope10">
            <summary>
            Envelope #10 4 1/8 x 9 1/2 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Envelope11">
            <summary>
            Envelope #11 4 1/2 x 10 3/8 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Envelope12">
            <summary>
            Envelope #12 4 \276 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Envelope14">
            <summary>
            Envelope #14 5 x 11 1/2 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.CSheet">
            <summary>
            C size sheet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.DSheet">
            <summary>
            D size sheet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.ESheet">
            <summary>
            E size sheet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeDL">
            <summary>
            Envelope DL 110 x 220mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeC5">
            <summary>
            Envelope C5 162 x 229 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeC3">
            <summary>
            Envelope C3 324 x 458 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeC4">
            <summary>
            Envelope C4 229 x 324 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeC6">
            <summary>
            Envelope C6 114 x 162 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeC65">
            <summary>
            Envelope C65 114 x 229 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeB4">
            <summary>
            Envelope B4 250 x 353 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeB5">
            <summary>
            Envelope B5 176 x 250 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeB6">
            <summary>
            Envelope B6 176 x 125 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeItaly">
            <summary>
            Envelope 110 x 230 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeMonarch">
            <summary>
            Envelope Monarch 3.875 x 7.5 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopePersonal">
            <summary>
            6 3/4 Envelope 3 5/8 x 6 1/2 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.FanfoldUS">
            <summary>
            US Std Fanfold 14 7/8 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.FanfoldGermanStandard">
            <summary>
            German Std Fanfold 8 1/2 x 12 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.FanfoldGermanLegal">
            <summary>
            German Legal Fanfold 8 1/2 x 13 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.ISOB4">
            <summary>
            B4 (ISO) 250 x 353 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapanesePostcard">
            <summary>
            Japanese Postcard 100 x 148 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size9X11">
            <summary>
            Size 9 x 11 in 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size10X11">
            <summary>
            Size 10 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size15X11">
            <summary>
            Size 15 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.EnvelopeInvite">
            <summary>
            Envelope Invite 220 x 220 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LetterExtra">
            <summary>
            Letter Extra 9 \275 x 12 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LegalExtra">
            <summary>
            Legal Extra 9 \275 x 15 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.TabloidExtra">
            <summary>
            Tabloid Extra 11.69 x 18 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A4Extra">
            <summary>
            A4 Extra 9.27 x 12.69 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LetterTransverse">
            <summary>
            Letter Transverse 8 \275 x 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A4Transverse">
            <summary>
            A4 Transverse 210 x 297 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LetterExtraTransverse">
            <summary>
            Letter Extra Transverse 9\275 x 12 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.SuperA">
            <summary>
            SuperA/SuperA/A4 227 x 356 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.SuperB">
            <summary>
            SuperB/SuperB/A3 305 x 487 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LetterPlus">
            <summary>
            Letter Plus 8.5 x 12.69 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A4Plus">
            <summary>
            A4 Plus 210 x 330 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A5Transverse">
            <summary>
            A5 Transverse 148 x 210 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B5Transverse">
            <summary>
            B5 , // (JIS) Transverse 182 x 257 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A3Extra">
            <summary>
            A3 Extra 322 x 445 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A5Extra">
            <summary>
            A5 Extra 174 x 235 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B5Extra">
            <summary>
            B5 , // (ISO) Extra 201 x 276 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A2">
            <summary>
            A2 420 x 594 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A3Transverse">
            <summary>
            A3 Transverse 297 x 420 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A3ExtraTransverse">
            <summary>
            A3 Extra Transverse 322 x 445 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseDoublePostcard">
            <summary>
            Japanese Double Postcard 200 x 148 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A6">
            <summary>
            A6 105 x 148 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeKaku2">
            <summary>
            Japanese Envelope Kaku #2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeKaku3">
            <summary>
            Japanese Envelope Kaku #3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeChou3">
            <summary>
            Japanese Envelope Chou #3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeChou4">
            <summary>
            Japanese Envelope Chou #4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.LetterRotated">
            <summary>
            Letter Rotated 11 x 8 1/2 11 in
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A3Rotated">
            <summary>
            A3 Rotated 420 x 297 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A4Rotated">
            <summary>
            A4 Rotated 297 x 210 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A5Rotated">
            <summary>
            A5 Rotated 210 x 148 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B4JisRotated">
            <summary>
            B4 , (JIS) Rotated 364 x 257 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B5JisRotated">
            <summary>
            B5 , (JIS) Rotated 257 x 182 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapanesePostcardRotated">
            <summary>
            Japanese Postcard Rotated 148 x 100 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.DoubleJapanesePostcardRotated">
            <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.A6Rotated">
            <summary>
            A6 Rotated 148 x 105 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeKaku2Rotated">
            <summary>
            Japanese Envelope Kaku #2 Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeKaku3Rotated">
            <summary>
            Japanese Envelope Kaku #3 Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeChou3Rotated">
            <summary>
            Japanese Envelope Chou #3 Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeChou4Rotated">
            <summary>
            Japanese Envelope Chou #4 Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B6JIS">
            <summary>
            B6 , (JIS) 128 x 182 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.B6JISRotated">
            <summary>
            B6 , (JIS) Rotated 182 x 128 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.Size12X11">
            <summary>
            (12 x 11 in)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeYou4">
            <summary>
            Japanese Envelope You #4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.JapaneseEnvelopeYou4Rotated">
            <summary>
            Japanese Envelope You #4 Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC16K">
            <summary>
            PRC 16K 146 x 215 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC32K">
            <summary>
            PRC 32K 97 x 151 mm 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC32KBIG">
            <summary>
            PRC 32K, // (Big) 97 x 151 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope1">
            <summary>
            PRC Envelope #1 102 x 165 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope2">
            <summary>
            PRC Envelope #2 102 x 176 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope3">
            <summary>
            PRC Envelope #3 125 x 176 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope4">
            <summary>
            PRC Envelope #4 110 x 208 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope5">
            <summary>
            PRC Envelope #5 110 x 220 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope6">
            <summary>
            PRC Envelope #6 120 x 230 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope7">
            <summary>
            PRC Envelope #7 160 x 230 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope8">
            <summary>
            PRC Envelope #8 120 x 309 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope9">
            <summary>
            PRC Envelope #9 229 x 324 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope10">
            <summary>
            PRC Envelope #10 324 x 458 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC16KRotated">
            <summary>
            PRC 16K Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC32KRotated">
            <summary>
            PRC 32K Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRC32KBigRotated">
            <summary>
            PRC 32K, // (Big) Rotated
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope1Rotated">
            <summary>
            PRC Envelope #1 Rotated 165 x 102 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope2Rotated">
            <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope3Rotated">
            <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope4Rotated">
            <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope5Rotated">
            <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope6Rotated">
            <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope7Rotated">
            <summary>
            PRC Envelope #7 Rotated 230 x 160 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope8Rotated">
            <summary>
            PRC Envelope #8 Rotated 309 x 120 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope9Rotated">
            <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPaperKind.PRCEnvelope10Rotated">
            <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENLineSegmentsRelation">
            <summary>
            Enumerates all possible line segment relations.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineSegmentsRelation.CollinearOverlap">
            <summary>
            The line segments are collinear and overlap each other (they are coincident).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineSegmentsRelation.CollinearNoOverlap">
            <summary>
            The line segments are collinear and do not overlap.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineSegmentsRelation.Parallel">
            <summary>
            The line segments are parallel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineSegmentsRelation.Intersect">
            <summary>
            The line segments intersect each other.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineSegmentsRelation.Arbitrary">
            <summary>
            The line segments are arbitraty (i.e. they do not intersect, overlap and they are not parallel).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENNamedColor">
            <summary>
            Enumerates the named colors
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.AliceBlue">
            <summary>
            Alice Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.AntiqueWhite">
            <summary>
            Antique White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Aquamarine">
            <summary>
            Aquamarine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Azure">
            <summary>
            Azure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Bisque">
            <summary>
            Bisque
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.BlanchedAlmond">
            <summary>
            Blanched Almond
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.BlueViolet">
            <summary>
            Blue Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.BurlyWood">
            <summary>
            BurlyWood
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.CadetBlue">
            <summary>
            Cadet Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Chartreuse">
            <summary>
            Chartreuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Chocolate">
            <summary>
            Chocolate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.CornflowerBlue">
            <summary>
            Cornflower Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Cornsilk">
            <summary>
            Cornsilk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkBlue">
            <summary>
            Dark Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkCyan">
            <summary>
            Dark Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkGoldenrod">
            <summary>
            Dark Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkGray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkGreen">
            <summary>
            Dark Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkKhaki">
            <summary>
            Dark Khaki
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkMagenta">
            <summary>
            Dark Magenta
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkOliveGreen">
            <summary>
            Dark Olive Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkOrange">
            <summary>
            Dark Orange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkOrchid">
            <summary>
            Dark Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkRed">
            <summary>
            Dark Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkSalmon">
            <summary>
            Dark Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkSeaGreen">
            <summary>
            Dark Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkSlateBlue">
            <summary>
            Dark Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkSlateGray">
            <summary>
            Dark Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkTurquoise">
            <summary>
            Dark Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DarkViolet">
            <summary>
            Dark Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DeepPink">
            <summary>
            Deep Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DeepSkyBlue">
            <summary>
            Deep Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DimGray">
            <summary>
            Dim Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.DodgerBlue">
            <summary>
            Dodger Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Firebrick">
            <summary>
            Firebrick
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.FloralWhite">
            <summary>
            Floral White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.ForestGreen">
            <summary>
            Forest Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Fuchsia">
            <summary>
            Fuchsia
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Gainsboro">
            <summary>
            Gainsboro
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.GhostWhite">
            <summary>
            Ghost White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Goldenrod">
            <summary>
            Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.GreenYellow">
            <summary>
            Green Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Honeydew">
            <summary>
            Honeydew
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.HotPink">
            <summary>
            Hot Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.IndianRed">
            <summary>
            Indian Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Indigo">
            <summary>
            Indigo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Ivory">
            <summary>
            Ivory
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Khaki">
            <summary>
            Khaki
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LavenderBlush">
            <summary>
            Lavender Blush
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LawnGreen">
            <summary>
            Lawn Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LemonChiffon">
            <summary>
            Lemon Chiffon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightBlue">
            <summary>
            Light Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightCoral">
            <summary>
            Light Coral
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightCyan">
            <summary>
            Light Cyan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightGoldenrodYellow">
            <summary>
            Light Goldenrod Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightGray">
            <summary>
            Light Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightGreen">
            <summary>
            Light Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightPink">
            <summary>
            Light Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightSalmon">
            <summary>
            Light Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightSeaGreen">
            <summary>
            Light Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightSkyBlue">
            <summary>
            Light Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightSlateGray">
            <summary>
            Light Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightSteelBlue">
            <summary>
            Light Steel Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LightYellow">
            <summary>
            Light Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.LimeGreen">
            <summary>
            Lime Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Linen">
            <summary>
            Linen
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumAquamarine">
            <summary>
            Medium Aquamarine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumBlue">
            <summary>
            Medium Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumOrchid">
            <summary>
            Medium Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumPurple">
            <summary>
            Medium Purple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumSeaGreen">
            <summary>
            Medium Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumSlateBlue">
            <summary>
            Medium Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumSpringGreen">
            <summary>
            Medium Spring Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumTurquoise">
            <summary>
            Medium Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MediumVioletRed">
            <summary>
            Medium Violet Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MidnightBlue">
            <summary>
            Midnight Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MintCream">
            <summary>
            Mint Cream
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.MistyRose">
            <summary>
            Misty Rose
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Moccasin">
            <summary>
            Moccasin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.NavajoWhite">
            <summary>
            Navajo White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.OldLace">
            <summary>
            Old Lace
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.OliveDrab">
            <summary>
            Olive Drab
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.OrangeRed">
            <summary>
            Orange Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Orchid">
            <summary>
            Orchid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PaleGoldenrod">
            <summary>
            Pale Goldenrod
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PaleGreen">
            <summary>
            Pale Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PaleTurquoise">
            <summary>
            Pale Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PaleVioletRed">
            <summary>
            Pale Violet Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PapayaWhip">
            <summary>
            Papaya Whip
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PeachPuff">
            <summary>
            Peach Puff
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Peru">
            <summary>
            Peru
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Plum">
            <summary>
            Plum
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.PowderBlue">
            <summary>
            Powder Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.RosyBrown">
            <summary>
            Rosy Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.RoyalBlue">
            <summary>
            Royal Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SaddleBrown">
            <summary>
            Saddle Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Salmon">
            <summary>
            Salmon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SandyBrown">
            <summary>
            Sandy Brown
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SeaGreen">
            <summary>
            Sea Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SeaShell">
            <summary>
            Sea Shell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Sienna">
            <summary>
            Sienna
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SkyBlue">
            <summary>
            Sky Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SlateBlue">
            <summary>
            Slate Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SlateGray">
            <summary>
            Slate Gray
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Snow">
            <summary>
            Snow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SpringGreen">
            <summary>
            Spring Green
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.SteelBlue">
            <summary>
            Steel Blue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Tan">
            <summary>
            Tan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Thistle">
            <summary>
            Thistle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Tomato">
            <summary>
            Tomato
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Turquoise">
            <summary>
            Turquoise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.UnknownColor">
            <summary>
            Unknown Color
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Violet">
            <summary>
            Violet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.WhiteSmoke">
            <summary>
            White Smoke
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENNamedColor.YellowGreen">
            <summary>
            Yellow Green
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENPredefinedFillPattern">
            <summary>
            Enumerates the supported fill patterns.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.Solid">
            <summary>
            Solid color fill.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientHorizontal">
            <summary>
            Horizontal gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientVertical">
            <summary>
            Vertical gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientDiagonalUp">
            <summary>
            Diagonal gradient with direction from the bottom left corner
            to the top right corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientDiagonalDown">
            <summary>
            Diagonal gradient with direction from the bottom right corner
            to the top left corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientFromCorner">
            <summary>
            Diagonal gradient starting from one of the four corners.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.GradientFromCenter">
            <summary>
            Gradient starting from the center.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchHorizontal">
            <summary>
            A pattern of horizontal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchVertical">
            <summary>
            A pattern of vertical lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchForwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper left to lower right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchBackwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchCross">
            <summary>
            Specifies horizontal and vertical lines that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDiagonalCross">
            <summary>
            A pattern of crisscross diagonal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent05">
            <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent10">
            <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent20">
            <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent25">
            <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent30">
            <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent40">
            <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent50">
            <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent60">
            <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent70">
            <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent75">
            <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent80">
            <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPercent90">
            <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLightDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than ForwardDiagonal, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDarkDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal. This hatch pattern is not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDarkUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than BackwardDiagonal, and are twice its width, but the lines are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchWideDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style ForwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchWideUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style BackwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLightVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLightHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchNarrowVertical">
            <summary>
            Specifies vertical lines that are spaced 75 percent closer together than hatch style Vertical (or 25 percent closer together than LightVertical).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchNarrowHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 75 percent closer together than hatch style Horizontal (or 25 percent closer together than LightHorizontal).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDarkVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDarkHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of Horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDashedDownwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDashedHorizontal">
            <summary>
            Specifies dashed horizontal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDashedVertical">
            <summary>
            Specifies dashed vertical lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchSmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLargeConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti, and is composed of larger pieces than SmallConfetti.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchWave">
            <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDiagonalBrick">
            <summary>
            Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchHorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchWeave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchPlaid">
            <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDivot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDottedGrid">
            <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchDottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchShingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchTrellis">
            <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchSphere">
            <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchSmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style Cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchSmallCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchLargeCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of SmallCheckerBoard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchOutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENPredefinedFillPattern.HatchSolidDiamond">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENFillType">
            <summary>
            Defines the supported fill types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.Color">
            <summary>
            Solid color fill.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.StockGradient">
            <summary>
            A gradient fill based on two colors and predefined style and variant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.LinearGradient">
            <summary>
            A linear gradient with custom gradient stops.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.RadialGradient">
            <summary>
            A radial gradient with custom gradient stops.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.AdvancedGradient">
            <summary>
            A gradient fill based on an arbitrary number of points with different shape, color, intensity and angle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.Hatch">
            <summary>
            A fill based on an pattern with foreground and background colors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillType.Image">
            <summary>
            A fill based on an image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENGradientMappingMode">
            <summary>
            Enumerates the supported mapping modes for gradients.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientMappingMode.Stretch">
            <summary>
            The gradient square is scaled to cover the bounding box of the target geometry. Its aspect ratio is not necessarily preserved.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientMappingMode.ZoomToFill">
            <summary>
            The gradient square is scaled to cover the bounding box of the target geometry. Its aspect ratio is preserved.
            If the aspect of the gradient does not match the aspect of the target bounds, some of the gradient will extend beyond the target bounds.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENGradientStyle">
            <summary>
            Defines the possible gradient styles for a stock gradient fill.
            The gradient style determines the direction in which the gradient colors spread. 
            This direction is perpendicular to the direction of the gradient axis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.Horizontal">
            <summary>
            Horizontal gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.Vertical">
            <summary>
            Vertical gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.DiagonalUp">
            <summary>
            Diagonal gradient with direction from the bottom left corner 
            to the top right corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.DiagonalDown">
            <summary>
            Diagonal gradient with direction from the bottom right corner 
            to the top left corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.FromCorner">
            <summary>
            Diagonal gradient starting from one of the four corners.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientStyle.FromCenter">
            <summary>
            Gradient starting from the center.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENGradientVariant">
            <summary>
            The variant of the gradient style. All gradient styles have four gradient variants.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientVariant.Variant1">
            <summary>
            Variant 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientVariant.Variant2">
            <summary>
            Variant 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientVariant.Variant3">
            <summary>
            Variant 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENGradientVariant.Variant4">
            <summary>
            Variant 4
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENHatchStyle">
            <summary>
            Enumerates the hatch styles.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Horizontal">
            <summary>
            A pattern of horizontal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Vertical">
            <summary>
            A pattern of vertical lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.ForwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper left to lower right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.BackwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Cross">
            <summary>
            Specifies horizontal and vertical lines that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DiagonalCross">
            <summary>
            A pattern of crisscross diagonal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent05">
            <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent10">
            <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent20">
            <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent25">
            <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent30">
            <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent40">
            <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent50">
            <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent60">
            <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent70">
            <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent75">
            <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent80">
            <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Percent90">
            <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LightDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than ForwardDiagonal, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DarkDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal. This hatch pattern is not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DarkUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than BackwardDiagonal, and are twice its width, but the lines are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.WideDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style ForwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.WideUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style BackwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LightVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LightHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.NarrowVertical">
            <summary>
            Specifies vertical lines that are spaced 75 percent closer together than hatch style Vertical (or 25 percent closer together than LightVertical).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.NarrowHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 75 percent closer together than hatch style Horizontal (or 25 percent closer together than LightHorizontal).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DarkVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DarkHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of Horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DashedDownwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DashedHorizontal">
            <summary>
            Specifies dashed horizontal lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DashedVertical">
            <summary>
            Specifies dashed vertical lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.SmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LargeConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti, and is composed of larger pieces than SmallConfetti.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Wave">
            <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DiagonalBrick">
            <summary>
            Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.HorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Weave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Plaid">
            <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Divot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DottedGrid">
            <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.DottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Shingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Trellis">
            <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.Sphere">
            <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.SmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style Cross.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.SmallCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.LargeCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of SmallCheckerBoard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.OutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENHatchStyle.SolidDiamond">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENAdvancedGradientPointShape">
            <summary>
            The shape of a point in an advanced gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientPointShape.Circle">
            <summary>
            Circle shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientPointShape.Rectangle">
            <summary>
            Rectangle shape with controlled rotation angle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientPointShape.Line">
            <summary>
            Line shape with controlled slope angle.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme">
            <summary>
            Enumerates predefined color schemes used for creation of advanced gradients.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.NightFall1">
            <summary>
            Blue and magenta color points on black background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.NightFall2">
            <summary>
            Magenta and blue color points on black background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Ocean1">
            <summary>
            Sky blue and spring green points on blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Ocean2">
            <summary>
            Spring green and sky blue points on blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Ocean3">
            <summary>
            Sky blue and spring green points on dark blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Ocean4">
            <summary>
            Spring green and sky blue points on dark blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.CalmWater1">
            <summary>
            Dodger blue and red points on sky blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.CalmWater2">
            <summary>
            Red and dodger blue points on sky blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Desert1">
            <summary>
            Yellow and red points on white background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Desert2">
            <summary>
            Red and yellow points on white background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Fire1">
            <summary>
            Red and yellow points on black background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Fire2">
            <summary>
            Yellow and red points on black background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Fog1">
            <summary>
            Teal and light olive points on deep sky blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Fog2">
            <summary>
            Light olive and teal points on deep sky blue background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Mahogany1">
            <summary>
            Coral and indian red points on black background.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENAdvancedGradientColorScheme.Mahogany2">
            <summary>
            Indian red and coral points on black background.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENCompassDirection">
            <summary>
            Enumerates the compass directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.South">
            <summary>
            South
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.West">
            <summary>
            West
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.NorthEast">
            <summary>
            North East
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.NorthWest">
            <summary>
            North West
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.SouthEast">
            <summary>
            South East
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCompassDirection.SouthWest">
            <summary>
            South West
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENDimension">
            <summary>
            Enumerates the dimensions in a 3D Cartesian coordinate system.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDimension.X">
            <summary>
            X dimension
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDimension.Y">
            <summary>
            Y dimension
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENDimension.Z">
            <summary>
            Z dimension
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENFillRule">
            <summary>
            Determines the filling rule of a graphics path
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillRule.EvenOdd">
            <summary>
            Determines the "insideness" of a point on the shape by drawing a ray from that point to infinity 
            in any direction and counting the number of path segments from the given shape that the ray crosses. 
            If this number is odd, the point is inside; if even, the point is outside. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENFillRule.NonZero">
            <summary>
            Determines the "insideness" of a point on the shape by drawing a ray from that point to 
            infinity in any direction and then examining the places where a segment of the shape crosses the ray. 
            Starting with a count of zero, add one each time a Segment crosses the ray from left to right 
            and subtract one each time a path segment crosses the ray from right to left. 
            After counting the crossings, if the result is zero then the point is outside the path. 
            Otherwise, it is inside. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENLineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a figure (subpath).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineJoin.Miter">
            <summary>
            Specifies a mitered join. This produces a sharp or a clipped corner,
            depending on whether the length of the miter exceeds the miter limit.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineJoin.Bevel">
            <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineJoin.Round">
            <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENLineCap">
            <summary>
            Specifies the figure drawn on a line end (start or end)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineCap.Flat">
            <summary>
            Specifies a butt (flat) line cap.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineCap.Square">
            <summary>
            Specifies a square line cap.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineCap.Round">
            <summary>
            Specifies a round line cap.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENLineCap.Triangle">
            <summary>
            Specifies a triangular line cap.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENCursorPixel">
            <summary>
            Defines the possible monochrome cursor pixels
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCursorPixel.Black">
            <summary>
            The pixel is black
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCursorPixel.White">
            <summary>
            The pixel is white
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCursorPixel.Transparent">
            <summary>
            The pixel is transparent - e.g. has the color of the pixel below it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENCursorPixel.Inverted">
            <summary>
            The pixel is inverted - e.g. inverts the color of the pixel below it.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.ENRangeDisposition">
            <summary>
            Enumerates the possible range dispositions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.Below">
            <summary>
            Current range is below range.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.Above">
            <summary>
            Current range is above range.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.InnerContained">
            <summary>
            Current range is fully contained.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.OuterContained">
            <summary>
            Current range outer contained.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.LeftContained">
            <summary>
            Current range is left contained.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.RightContained">
            <summary>
            Current range is right contained.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.ENRangeDisposition.IntersectsMask">
            <summary>
            Specifies an intersection mask
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NGeometry2D">
            <summary>
            Namespace class for commonly used geometry routines in 2D space.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsAngle(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the angle formed by the line (p1, p2) and the X axis.
            </summary>
            <param name="p1">First endpoint of the line.</param>
            <param name="p2">Second endpoint of the line.</param>
            <returns>An angle (measured in radians) in the range [-PI, PI].</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsAngleNormalized(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the normalized angle formed by the line (p1, p2) and the X axis.
            </summary>
            <param name="p1">First endpoint of the line.</param>
            <param name="p2">Second endpoint of the line.</param>
            <returns>An angle (measured in radians) in the range [0, 2*PI).</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsDistance(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the distance between the specified points.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsDistance(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Calculates the distance between the specified points.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between the specified points.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsDistanceSquare(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the distance between the specified points, raised to the power of 2.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.PointsDistanceSquare(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between the specified points, raised to the power of 2.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.MiddlePoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the middle point between the specified points.
            </summary>
            <param name="p1">point1</param>
            <param name="p2">point2</param>
            <returns>middle point</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.MiddlePoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Calculates the middle point between the specified points.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetLength(System.Double,System.Double)">
            <summary>
            Gets the length (magnitute) of a vector whoses run is DX and whoses rise is DY.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBounds(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Calculates the bounds of the points in the specified points array range.
            </summary>
            <param name="points">Array of points.</param>
            <returns>the bounds of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBounds(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Calculates the bounds of the points in the specified points array range.
            </summary>
            <param name="points">Array of points.</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <returns>the bounds of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBounds(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the bounds of the points in the specified points array range.
            </summary>
            <param name="x">Array of x coordinates.</param>
            <param name="y">Array of y coordinates.</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <returns>the bounds of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBoundsRange(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Calculates the bounding range of the points in the specified points array range.
            </summary>
            <param name="points">Array of points.</param>
            <returns>the bounding range of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBoundsRange(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32)">
            <summary>
            Calculates the bounding range of the points in the specified points array range.
            </summary>
            <param name="points">Array of points.</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <returns>the bounding range of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetBoundsRange(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the bounding range of the points in the specified points array range.
            </summary>
            <param name="x">Array of x coordinates.</param>
            <param name="y">Array of y coordinates.</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <returns>the bounding range of the points in the list</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetMedicenter(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Calculates the medicenter (center of mass) of the points in the specified points array.
            </summary>
            <param name="points">Array of points.</param>
            <returns>the medicenter</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetNearestPoint(Nevron.Nov.Graphics.NPoint[],Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the point in the specified array, which is nearest to the specified point.
            If array is empty returns the point itself.
            </summary>
            <param name="points">Array of points.</param>
            <param name="pt">point whose nearest point to return</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.GetNearestPoint(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the point in the specified points array range, which is nearest to the specified point. 
            If count is zero returns the point itself.
            </summary>
            <param name="points">Array of points.</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <param name="pt">point whose nearest point to return</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Rotate(Nevron.Nov.Graphics.NPoint[],System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Rotates the specified array of points around the specified pin point.
            </summary>
            <param name="points">An array of points.</param>
            <param name="angle">Rotation angle (in Radians).</param>
            <param name="pin">Rotation pin point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Rotate(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Rotates a range of points from the specified array around the specified pin point.
            </summary>
            <param name="points">An array of points.</param>
            <param name="start">The index of the first point to rotate.</param> 
            <param name="count">The number of points to rotate.</param>
            <param name="angle">Rotation angle (in Radians).</param>
            <param name="pin">Rotation pin point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Rotate(Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Rotates the specified points.
            </summary>
            <param name="points">An array of points.</param>
            <param name="angle">Rotation angle (in Radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Rotate(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,System.Double)">
            <summary>
            Rotates a range of points from the specified array.
            </summary>
            <param name="points">An array of points.</param>
            <param name="start">The index of the first point to rotate.</param> 
            <param name="count">The number of points to rotate.</param>
            <param name="angle">Rotation angle (in Radians).</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Double,System.Double)">
            <summary>
            Scales the specified points
            </summary>
            <param name="points">array of points</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Double,System.Double)">
            <summary>
            Scales the specified count of points from the specified array.
            </summary>
            <param name="points">array of points</param>
            <param name="count">the count of points to perform operation upon</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Scales a range of points from the specified array
            </summary>
            <param name="points">array of points</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Scales the specified points
            </summary>
            <param name="points">array of points</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
            <param name="pin">pin point for scaling</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Scales the specified count of points from the specified array
            </summary>
            <param name="points">array of points</param>
            <param name="count">the count of points to perform operation upon</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
            <param name="pin">pin point for scaling</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Scale(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Scales a range of points from the specified array around the specified pin
            </summary>
            <param name="points">array of points</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <param name="scaleX">X scale</param>
            <param name="scaleY">Y scale</param>
            <param name="pin">pin point for scaling</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Translate(Nevron.Nov.Graphics.NPoint[],System.Double,System.Double)">
            <summary>
            Translates the specified points
            </summary>
            <param name="points">array of points</param>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Translate(Nevron.Nov.Graphics.NPoint[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Translates a range of points from the specified array
            </summary>
            <param name="points">array of points</param>
            <param name="start">the index of the first point</param> 
            <param name="count">the count of points to perform operation upon</param>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Determinant(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Calculates the oriented area of the triangle formed by the given points.
            </summary>
            <remarks>
            The oriented area of the triangle is calculated with the following determinant:
            | a.x  a.y  1 |
            | b.x  b.y  1 |
            | c.x  c.y  1 |
            </remarks>
            <param name="a">Triangle point 1.</param>
            <param name="b">Triangle point 2.</param>
            <param name="c">Triangle point 3.</param>
            <returns>
            The oriented area of the triangle.
            If the returned value is positive -> the triplet is counter-clockwise oriented (CCW).
            If the returned value is negative -> the triplet is clockwise oriented (CW).
            If the returned value equals zero -> the triplet is collinear.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Determinant(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the oriented area of the triangle formed by the given points.
            </summary>
            <remarks>
            The oriented area of the triangle is calculated with the following determinant:
            | a.x  a.y  1 |
            | b.x  b.y  1 |
            | c.x  c.y  1 |
            </remarks>
            <param name="a">Triangle point 1.</param>
            <param name="b">Triangle point 2.</param>
            <param name="c">Triangle point 3.</param>
            <returns>
            The oriented area of the triangle.
            If the returned value is positive -> the triplet is counter-clockwise oriented (CCW).
            If the returned value is negative -> the triplet is clockwise oriented (CW).
            If the returned value equals zero -> the triplet is collinear.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Determinant(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the oriented area of the triangle formed by the given points.
            </summary>
            <remarks>
            The oriented area of the triangle is calculated with the following determinant:
            | a.x  a.y  1 |
            | b.x  b.y  1 |
            | c.x  c.y  1 |
            </remarks>
            <param name="ax">X coordinate of point a.</param>
            <param name="ay">Y coordinate of point a.</param>
            <param name="bx">X coordinate of point b.</param>
            <param name="by">Y coordinate of point b.</param>
            <param name="cx">X coordinate of point c.</param>
            <param name="cy">Y coordinate of point c.</param>
            <returns>
            The oriented area of the triangle.
            If the returned value is positive -> the triplet is counter-clockwise oriented (CCW).
            If the returned value is negative -> the triplet is clockwise oriented (CW).
            If the returned value equals zero -> the triplet is collinear.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NGeometry2D.Intersects(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Checks whether two line segments intersect and returns the intersection point
            as an out parameter if they do.
            </summary>
            <param name="a1">The start point of the first line segment.</param>
            <param name="a2">The end point of the first line segment.</param>
            <param name="b1">The start point of the second line segment.</param>
            <param name="b2">The end point of the second line segment.</param>
            <param name="intersectionPoint">The resulting intersection point.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Graphics.NMargins">
            <summary>
            Represents margins as indents from the left, top, right and bottom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="leftRight"></param>
            <param name="topBottom"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Equals(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Checks whether this size is equal to the other size
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.ToString">
            <summary>
            Returns the string representation of this NMarginsF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.GetInnerRect(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Returns a the inner rectangle with applied margins from the left, top, right and bottom
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.GetOuterRect(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Returns a the outer rectangle with applied margins from the left, top, right and bottom
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Scale(System.Double)">
            <summary>
            Scales the margins with the specified scale factor
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Inflate(System.Double)">
            <summary>
            Inflates the margins with the specified inflate
            </summary>
            <param name="inflate"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Clamp(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Clamps the margins to the specified margins
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.FlipY">
            <summary>
            Returns vertically flipped margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.FlipX">
            <summary>
            Returns horizontally flipped margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.RotateClockwise">
            <summary>
            Returns clockwise rotated margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.RotateCounterClockwise">
            <summary>
            Returns counter-clockwise rotated margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Round">
            <summary>
            Rounds this margins.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMargins.Left">
            <summary>
            X margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMargins.Top">
            <summary>
            Y margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMargins.Right">
            <summary>
            Right margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMargins.Bottom">
            <summary>
            Bottom margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMargins.Zero">
            <summary>
            The empty (zero) margins.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.op_Addition(Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Arithmetic binary plus operator. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.op_Subtraction(Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Arithmetic binary minus operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.op_Equality(Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Checks whether the margins are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.op_Inequality(Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Checks whether the margins are different.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.op_UnaryNegation(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Unary minus operator
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMargins.Max(Nevron.Nov.Graphics.NMargins,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Gets such margins that:
            Left= Max(a.Left, b.Left), 
            Right= Max(a.Right, b.Right), 
            Top= Max(a.Top, b.Top), 
            Bottom= Max(a.Bottom, b.Bottom), 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMargins.IsZero">
            <summary>
            Checks if all components of this margin are zero.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMargins.AllSidesEqual">
            <summary>
            Returns true if all sides are equal - i.e. Top == Left == Right == Bottom
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NMatrix">
            <summary>
            Represents an affine transformation in 2D space (3x2 matrix).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new arbitrary matrix
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new translation matrix
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Constructs a new scale matrix, which scales around the specified pin.
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.#ctor(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Constructs a new rotation matrix, which rotates around the specified pin
            </summary>
            <param name="angle">angle (in radians)</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Equals(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Checks whether this matrix is equal to the matrix size
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Equals(System.Object)">
            <summary>
            Overriden to compare the matrix elements
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.ToString">
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Equality(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Inequality(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Addition(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Adds a with b
            </summary>
            <param name="a">matrix 1</param>
            <param name="b">matrix 2</param>
            <returns>resulting matrix</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Subtraction(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Subtracts b from a
            </summary>
            <param name="a">matrix 1</param>
            <param name="b">matrix 2</param>
            <returns>resulting matrix</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Multiply(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Multiplies a with b
            </summary>
            <param name="a">matrix 1</param>
            <param name="b">matrix 2</param>
            <returns>resulting matrix</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.op_Division(Nevron.Nov.Graphics.NMatrix,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Divides a by b
            </summary>
            <param name="a">matrix 1</param>
            <param name="b">matrix 2</param>
            <returns>resulting matrix</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Reset">
            <summary>
            Resets this matrix to have the elements of the identity matrix.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Invert">
            <summary>
            Inverts this matrix if it is invertible. Otherwise throws an exception.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Multiply(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Multiplies this matrix with the specified matrix and records the result in this matrix
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Divide(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Divides this matrix with the specified matrix and records the result in this matrix
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Translate(System.Double,System.Double)">
            <summary>
            Appends a translation matrix to this matrix.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Scale(System.Double,System.Double)">
            <summary>
            Appends a scaling matrix to this this matrix.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Scale(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Appends a scaling matrix preserves the location of the specified pin to this matrix.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Rotate(System.Double)">
            <summary>
            Applies a rotation around the 0, 0 point with specified angle.
            </summary>
            <remarks>
            Appends a rotation matrix to this matrix.
            </remarks>	
            <param name="angle">angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Rotate(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Applies a rotation around the specified pin point with specified angle.
            </summary>
            <param name="angle">angle (in radians)</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.Skew(System.Double,System.Double)">
            <summary>
            Appends a skew matrix to this matrix
            </summary>
            <param name="skewX">X skew (in radians)</param>
            <param name="skewY">Y skew (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependMultiply(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Multiplies the specified matrix with this matrix and record the result in this matrix
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependTranslate(System.Double,System.Double)">
            <summary>
            Prepends a translate matrix to this matrix.
            </summary>
            <param name="dx">translate X</param>
            <param name="dy">translate Y</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependScale(System.Double,System.Double)">
            <summary>
            Prepends a scale matrix to this matrix.
            </summary>
            <param name="scaleX">scale X</param>
            <param name="scaleY">scale Y</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependScale(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Prepends a scale matrix to this matrix.
            </summary>
            <param name="scaleX">scale X</param>
            <param name="scaleY">scale Y</param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependRotate(System.Double)">
            <summary>
            Prepends a rotation matrix to this matrix.
            </summary>
            <param name="angle">rotation angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependRotate(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Prepends a rotation matrix to this matrix.
            </summary>
            <param name="angle">Rotation angle (in radians).</param>
            <param name="pin">Rotation pin point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.PrependSkew(System.Double,System.Double)">
            <summary>
            Prepends a skew matrix to this matrix
            </summary>
            <param name="skewX">X skew (in radians)</param>
            <param name="skewY">Y skew (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoint(System.Double@,System.Double@)">
            <summary>
            Transforms the specified point coordinates
            </summary>
            <param name="rx"></param>
            <param name="ry"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms the specified point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoint(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Transforms the specified point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoints(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Transforms the specified points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoints(Nevron.Nov.Graphics.NPoint[],System.Int32)">
            <summary>
            Transforms the specified points
            </summary>
            <param name="points"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformPoints(System.Double[],System.Double[],System.Int32)">
            <summary>
            Transforms the specified point coordinates. The arrays lengths must match and the count must be less than or equal to the arrays length.
            </summary>
            <param name="arrX"></param>
            <param name="arrY"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.TransformBounds(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Transforms the specified bounds.
            This method transforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.InvertPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Applies the inverted transform to the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.InvertPoints(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Applies the inverted Transform to the specified points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.InvertRect(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Applies the inverted transform to the specified rectangle
            </summary>
            <remarks>
            This method should only be used for transformations, which have no rotation.
            It is faster than the InvertBounds method, since it only untransforms two points (LeftTop and RightBottom) 
            and constructs a new rectangle based on them.
            </remarks>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.InvertBounds(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Untransfrom the specified bounds
            </summary>
            <remarks>
            This method untransforms the corners of the specified bounds and then constructs the minimal rectangle, which contains them
            </remarks>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMatrix.Identity">
            <summary>
            The Identity matrix (all members are equal to 0, except M11 and M22 which are equal to 1)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NMatrix.Zero">
            <summary>
            The Zero matrix (all members are equal to 0)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateTranslationMatrix(System.Double,System.Double)">
            <summary>
            Creates a new translation matrix
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateScalingMatrix(System.Double,System.Double)">
            <summary>
            Creates a new scaling matrix
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateScalingMatrix(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a new scale and translation matrix that preserves the location of the specified pin (e.g. scales at pin)
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateRotationMatrix(System.Double)">
            <summary>
            Creates a new rotation matrix
            </summary>
            <param name="angle">in radians</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateRotationMatrixRounded(System.Double)">
            <summary>
            Creates a new rotation matrix
            </summary>
            <param name="angle">in radians</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateRotationMatrix(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a new rotation matrix
            </summary>
            <param name="angle">in radians</param>
            <param name="pin">pin around which to rotate</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateSkewMatrix(System.Double,System.Double)">
            <summary>
            Creates a skewing matrix
            </summary>
            <param name="skewX">X skew (in radians)</param>
            <param name="skewY">Y skew (in radians)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateBoundsStretchMatrix(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a matrix that transforms coordinates from one rectangle to another.
            </summary>
            <param name="oldBounds"></param>
            <param name="newBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NMatrix.CreateBoundsFitMatrix(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a matrix that fits the oldBounds into the newBounds, by preserving aspect ratio.
            </summary>
            <param name="oldBounds"></param>
            <param name="newBounds"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.IsZero">
            <summary>
            Determines whether this is the zero matrix
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.IsIdentity">
            <summary>
            Determines whether this is the identity matrix
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.IsInvertible">
            <summary>
            Determines whether this matrix is invertible
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.Determinant">
            <summary>
            Gets the determinant of this matrix 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.Rotation">
            <summary>
            Obtains the rotation (in radians).
            The rotatoin is calculated as the angle between the transformed (0, 0);(1, 0) vector and the X axis.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.ScaleX">
            <summary>
            Obtains the X scale.
            The X scale is calculated as the distance between the transformed (0, 0) and (1, 0) points.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.ScaleY">
            <summary>
            Obtains the Y scale.
            The Y scale is calculated as the distance between the transformed (0, 0) and (0, 1) points
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.M11">
            <summary>
            M11 matrix element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.M12">
            <summary>
            M12 matrix element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.M21">
            <summary>
            M21 matrix element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.M22">
            <summary>
            M22 matrix element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.DX">
            <summary>
            DX matrix element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NMatrix.DY">
            <summary>
            DY matrix element
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPointI">
            <summary>
            Represents a point in 2D space defined by it's X and Y coordinates, expressed with Int32 values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Equals(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Checks whether this point is equal to the other point
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.op_Equality(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.op_Inequality(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.op_Addition(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Adds b coordinates to a coordinates and returns the resulting point (binary +)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.op_Subtraction(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Subtracts b coordinates from a coordinates and returns the resulting point (binary -)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Rotate(System.Int32,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Rotates the point with the specified angle around the specified pin
            </summary>
            <param name="angle">angle (in radians)</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Rotate(System.Int32)">
            <summary>
            Rotates the point with the specified angle around the 0,0 point
            </summary>
            <param name="angle">angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Scale(System.Int32,System.Int32,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Scales the point around the specified pin with the specified scale factors
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
            <param name="pin">pin</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the point around the 0,0 point with the specified scale factors
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Translate(System.Int32,System.Int32)">
            <summary>
            Translates the point with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.Distance(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Measures the distance between this point and the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointI.ToNPoint">
            <summary>
            Converts this point to NPoint
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPointI.X">
            <summary>
            x coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPointI.Y">
            <summary>
            y coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPointI.Zero">
            <summary>
            The zero (0, 0) point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPointI.IsZero">
            <summary>
            Checks whether this is the zero point (i.e. x and y are 0).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPoint">
            <summary>
            Represents a point (or vector) in 2D space defined by its X and Y coordinates, expressed with Double values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.#ctor(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="point">A point to initialize from.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Equals(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Checks whether this point is equal to the other point
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Equality(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Inequality(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Addition(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Adds b coordinates to a coordinates and returns the resulting point (binary +)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Subtraction(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Subtracts b coordinates from a coordinates and returns the resulting point (binary -)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Division(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Divides the a coordinates by the specified divisor
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.op_Multiply(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Multiplies the a coordinates by the specified miltiplier
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Rotate(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Rotates the point with the specified angle around the specified pin
            </summary>
            <param name="angle">angle (in radians)</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Rotate(System.Double)">
            <summary>
            Rotates the point with the specified angle around the 0,0 point
            </summary>
            <param name="angle">angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Scale(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Scales the point around the specified pin with the specified scale factors
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
            <param name="pin">pin</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Scale(System.Double,System.Double)">
            <summary>
            Scales the point around the 0,0 point with the specified scale factors
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Translate(System.Double,System.Double)">
            <summary>
            Translates the point with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Multiply(System.Double)">
            <summary>
            Performs a scalar multiplication of this vector with the specified scalar and returns the resulting vector
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Divide(System.Double)">
            <summary>
            Performs a scalar division of a vector
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.DotProduct(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Computes the dot product of this vector with another vector.
            Geometrically the dot product is |a| * |b| * cos(angle), 
            where 
            angle - is the angle between the two vectors,
            |a| - is the length of this vector 
            |b| - is the length of the specified vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.PerpDotProduct(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Computes the perpendicular dot product of this vector with another vector
            Geometrically the perpendicular dot product is |a| * |b| * sin(angle), 
            where
            angle - is the angle between the two vectors, 
            |a| - is the length of this vector 
            |b| - is the length of the specified vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Normalize">
            <summary>
            Makes this vector the unit vector (e.g. its length becomes 1)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Inverse">
            <summary>
            Inverses this vector (e.g. makes this vector with oposite direction)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.GetCompassDirection(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the compass direction which corresponds to the vector formed by this point and the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Distance(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Measures the distance between this point and the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Clamp(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Clamps the point coordinates to the specified rect
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPoint.Round">
            <summary>
            Round this point
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPoint.X">
            <summary>
            The X coordinate of this point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPoint.Y">
            <summary>
            The Y coordinate of this point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPoint.Zero">
            <summary>
            The zero point (0, 0).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPoint.UnitX">
            <summary>
            Unit X point (1, 0).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NPoint.UnitY">
            <summary>
            Unit Y point (1, 0).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.IsZero">
            <summary>
            Checks whether this is the zero point (i.e. x and y are 0).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.IsNormalized">
            <summary>
            Determines whether the vector is the unit vector (e.g. Length == 1)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.Length">
            <summary>
            Gets the vector length
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.LengthSquare">
            <summary>
            Gets the vector length square (length * length)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.NormalVector">
            <summary>
            Gets a vector, which is perpendicular to this vector
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPoint.NormalUnitVector">
            <summary>
            Gets the unit vector (with length == 1), which is perpendicular to this vector
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPointList">
            <summary>
            Represents a list of NPoint values
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates a new list that holds the items of the specified array.
            Copies the content of the passed array.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.#ctor(Nevron.Nov.DataStructures.INIterator{Nevron.Nov.Graphics.NPoint})">
            <summary>
            Initializer constructor
            </summary>
            <param name="it">The initial content fo the collection</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.#ctor(Nevron.Nov.DataStructures.INIterable{Nevron.Nov.Graphics.NPoint})">
            <summary>
            Initializer constructor.
            </summary>
            <param name="iterable">An iterable object that provides the initial content for the collection.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.Translate(System.Double,System.Double)">
            <summary>
            Translates all points in the list with the specified x and y offsets.
            </summary>
            <param name="dx">X offset.</param>
            <param name="dy">Y offset.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.Rotate(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Rotates all points in the list around the specified point.
            </summary>
            <param name="angle">angle (in radians)</param>
            <param name="pin">pin point</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.Scale(System.Double,System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Scales all points in the list around the specified point.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.Transform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Transforms all points in the list with the specified transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.Transform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Transforms all points in the list with the specified transform
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPointList.GetNearestPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the point in the list, which is nearest to the specified point. If the list is empty returns the point itself
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPointList.Bounds">
            <summary>
            Gets the bounds of the points contained in this list.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPointList.BoundsRange">
            <summary>
            Gets the bounds range of the points contained in this list.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRangeI">
            <summary>
            Represents a 1D range with Int32 values for begin and end.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginValue"></param>
            <param name="endValue"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Combine(Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Combines the two ranges. 
            </summary>
            <remarks>
            Both ranges must be normalized.
            </remarks>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Inflate(System.Int32)">
            <summary>
            Inflates this range with the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Offset(System.Int32)">
            <summary>
            Moves the range with the specified offset.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetLength">
            <summary>
            Returns the absolute length of this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Contains(System.Int32)">
            <summary>
            Returns true if the range contains the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Contains(Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Returns true if the range contains the specified range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Normalize">
            <summary>
            Normalizes the range.
            </summary>
            <remarks>
            A normalized  range end value is bigger or equal to the begin value.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Invert">
            <summary>
            Changes the begin and end values of this range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.IsInverted">
            <summary>
            Returns true if the  range is inverted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetOffsetFromValue(System.Int32)">
            <summary>
            Returns the distance between the begin or end values of the  range. 
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            This function return 0 if the value is inside the  range.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.FitInRange(Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Tries to fit the passed range into this range.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetBeginValue">
            <summary>
            Gets the normalized begin value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetEndValue">
            <summary>
            Gets the normalized end value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetValueInRange(System.Int32)">
            <summary>
            Returns the nearest value that lies in this range.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Intersects(Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Checks if the ranges intersec each other
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Intersect(Nevron.Nov.Graphics.NRangeI,Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Interscects the range with another one
            </summary>
            <returns>True if intersection exists, false otherwise</returns>
            <remarks>Ranges must be normalized</remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRangeI.ToString">
            <summary>
            Returns the string representation of the range.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRangeI.Begin">
            <summary>
            The range begin (inclusive)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRangeI.End">
            <summary>
            The range end (non inclusive)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRangeI.Zero">
            <summary>
            The Zero range (Begin and End equal to zero)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRangeI.IsNormalized">
            <summary>
            Returns true if the range is normal.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRange">
            <summary>
            Represents a 1-dimensional range with begin and end stored as double precision floating-point values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginValue"></param>
            <param name="endValue"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Equals(Nevron.Nov.Graphics.NRange)">
            <summary>
            Checks whether this range is equal to the other range
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Combine(Nevron.Nov.Graphics.NRange)">
            <summary>
            Combines the two ranges. 
            </summary>
            <remarks>
            Both ranges must be normalized.
            </remarks>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Inflate(System.Double)">
            <summary>
            Inflates this range with the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Offset(System.Double)">
            <summary>
            Moves the range with the specified offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetLength">
            <summary>
            Returns the absolute length of this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Contains(System.Double)">
            <summary>
            Returns true if the range contains the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Contains(System.Double,System.Double)">
            <summary>
            Returns true if the range contains the specified value.
            </summary>
            <param name="value"></param>
            <param name="epsilon"></param>
            <returns></returns>
            <remarks>
            Value is checked agains the range [Begin - epsilon, End + epsilon]. Range must be normalized first
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Normalize">
            <summary>
            Normalizes the range.
            </summary>
            <remarks>
            A normalized  range end value is bigger or equal to the begin value.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Invert">
            <summary>
            Changes the begin and end values of this range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.IsInverted">
            <summary>
            Returns true if the  range is inverted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetOffsetFromValue(System.Double)">
            <summary>
            Returns the distance between the begin or end values of the  range. 
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            This function return 0 if the value is inside the  range.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.FitInRange(Nevron.Nov.Graphics.NRange)">
            <summary>
            Tries to fit the passed range into this range.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetBeginValue">
            <summary>
            Gets the normalized begin value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetEndValue">
            <summary>
            Gets the normalized end value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetValueInRange(System.Double)">
            <summary>
            Returns the nearest value that lies in this range.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetRangeDisposition(Nevron.Nov.Graphics.NRange)">
            <summary>
            Gets the range disposition of this range to another range
            </summary>
            <param name="range"></param>
            <returns></returns>
            <remarks>
            Ranges must be normalized
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Intersect(Nevron.Nov.Graphics.NRange,Nevron.Nov.Graphics.NRange@)">
            <summary>
            Calculates the intersection between two ranges
            </summary>
            <param name="range"></param>
            <param name="intersection"></param>
            <returns>True if intersection exists, False otherwise</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange.Begin">
            <summary>
            Begin value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange.End">
            <summary>
            End value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange.Zero">
            <summary>
            The Zero range (Begin and End equal to zero)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRange.IsNormalized">
            <summary>
            Returns true if the range is normal.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRange2D">
            <summary>
            Represents a 2-dimensional range defined by its min and max X and Y values (stored as double precision floating-point values).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializinc constructor.
            </summary>
            <param name="xmin"></param>
            <param name="xmax"></param>
            <param name="ymin"></param>
            <param name="ymax"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Equals(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Checks whether this range is equal to the other range
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the range contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Contains(System.Double,System.Double)">
            <summary>
            Determines whether the range contains the point with the specified coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Contains(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether the range contains the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Contains(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Determines whether this range contains the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.IntersectsWith(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Determines whether this range intersects with the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.IntersectsWith(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether this range intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.IntersectsWith(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether this range intersects with the specified line segment
            </summary>
            <param name="lineSegment"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.IntersectsWith(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether this range intersects with the specified circle
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.IntersectsWith(Nevron.Nov.Graphics.NPolyline)">
            <summary>
            Determines whether this range intersects with the specified polyline
            </summary>
            <param name="polyline"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Translate(System.Double,System.Double)">
            <summary>
            Translates (offsets) this range with the specified amounts.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Scale(System.Double,System.Double)">
            <summary>
            Scales this range with the specified factors.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.ToNRectangle">
            <summary>
            Creates an NRectangle structure from this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.ToNormalizedNRectangle">
            <summary>
            Creates a normalized NRectangle structure from this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Normalize">
            <summary>
            Ensures that xmin is less or equal to xmax and ymin is less or equal to ymax.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Inflate(System.Double)">
            <summary>
            Inflates this range with the specified value
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Union(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Computes the union of this NRange2D and the specified point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Union(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the union of this NRange2D and the specified rectangle.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Union(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Computes the union of this NRange2D and the specified NRange2D.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.FromTwoPoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a normalized 2D range from two points.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.FromTwoPoints(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a normalized 2D range from two points.
            </summary>
            <param name="x1">X coordinate of the first point.</param>
            <param name="y1">Y coordinate of the first point.</param>
            <param name="x2">X coordinate of the second point.</param>
            <param name="y2">Y coordinate of the second point.</param>
            <returns>Returns a normalized 2D range structure.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRange2D.Intersect(Nevron.Nov.Graphics.NRange2D,Nevron.Nov.Graphics.NRange2D,Nevron.Nov.Graphics.NRange2D@)">
            <summary>
            Calculates the intersection range of two ranges.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange2D.XMin">
            <summary>
            min x coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange2D.XMax">
            <summary>
            max x coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange2D.YMin">
            <summary>
            min y coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange2D.YMax">
            <summary>
            max y coordinate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRange2D.Zero">
            <summary>
            The empty range
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRange2D.IsEmpty">
            <summary>
            Gets if this range is empty.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRange2D.Width">
            <summary>
            Gets the width of the range.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRange2D.Height">
            <summary>
            Gets the height of the range.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRectangleI">
            <summary>
            Represents a rectangle in 2D space defined by it's location and size, both expressed with Int32 values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.#ctor(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.op_Equality(Nevron.Nov.Graphics.NRectangleI,Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.op_Inequality(Nevron.Nov.Graphics.NRectangleI,Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Translate(System.Int32,System.Int32)">
            <summary>
            Translates this rectangle with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the rectangle with the specified amounts
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Inflate(Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Inflates the rectangle with the specified size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the rectangle with the specified x and y amount.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the rectangle with the specified factors
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an outside point
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Contains(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Determines whether the rectangle contains the point with the specified coordinates.
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an outside point.
            </remarks>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Contains(Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Determines whether the rectangle contains the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.IncludePoint(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Includes the point in this rectangle
            </summary>
            <param name="point"></param>
            <returns></returns>
            <remarks>
            Returns the minimum rectangle that bounds the point and this rectangle
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.InclusiveContains(System.Int32,System.Int32)">
            <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an inside point
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.InclusiveIntersectsWith(Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.IntersectsWith(Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Normalize">
            <summary>
            Normalizes this rectangle 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.GetCompassPoint(Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.GetOppositeCompassPoint(Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.ToNRectangle">
            <summary>
            Converts this rectangle to RectangleF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.ToNRange2D">
            <summary>
            Converts this rectangle to an NRange2D.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangleI.X">
            <summary>
            X coordinate of the left top corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangleI.Y">
            <summary>
            Y coordinate of the left top corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangleI.Width">
            <summary>
            Rectangle width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangleI.Height">
            <summary>
            Rectangle height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.ResizeRectangle(Nevron.Nov.Graphics.NRectangleI,Nevron.Nov.Graphics.ENCompassDirection,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction
            </summary>
            <param name="rect">rectangle to resize</param>
            <param name="direction">compass direction of the handle, which is resized</param>
            <param name="dx">x handle change</param>
            <param name="dy">y handle change</param>
            <param name="canChangeAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
            <returns>resized rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.FitRectangle(Nevron.Nov.Graphics.NRectangleI,System.Double)">
            <summary>
            Returns the fitted rectangle with the specified orientation (in degrees)
            </summary>
            <param name="rect"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a rectangle from the coordinates of it's sides
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.FromTwoPoints(Nevron.Nov.Graphics.NPointI,Nevron.Nov.Graphics.NPointI)">
            <summary>
            Gets a normalized rectangle from two points
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.FromTwoPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a normalized rectangle from two points
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.FromCenterAndSize(Nevron.Nov.Graphics.NPointI,System.Int32,System.Int32)">
            <summary>
            Gets a rectangle from center and dimensions
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Union(Nevron.Nov.Graphics.NRectangleI,Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Creates the smallest possible third rectangle that can contain the two rectangles that form a union
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangleI.Intersection(Nevron.Nov.Graphics.NRectangleI,Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Returns a third rectangle that represents the intersection of two rectangles. If there is no intersection, the Zero rectangle is returned
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangleI.Zero">
            <summary>
            The empty rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Vertices">
            <summary>
            Gets an array with the rectangle vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Middles">
            <summary>
            Gets an array with the rectangle sides middle points
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.VerticesAndMiddles">
            <summary>
            Gets an array with the rectangle vertices and middles enumerated clockwise starting from the left-top vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Right">
            <summary>
            Gets the right side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Bottom">
            <summary>
            Gets the bottom side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Location">
            <summary>
            Gets or sets the rectangle location (left-top corner)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Size">
            <summary>
            Gets or sets the size of this rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.RightBottom">
            <summary>
            Gets the rectangle right bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.RightTop">
            <summary>
            Gets the rectangle right top corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.LeftBottom">
            <summary>
            Gets the rectangle left bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Center">
            <summary>
            Gets the rectangle center
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Area">
            <summary>
            Obtains the rectangle area (width * Height)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.Perimeter">
            <summary>
            Obtains the rectangle perimeter (2 * width) + (2 * Height)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.IsEmpty">
            <summary>
            Determines whether the rectangle is with zero width or Height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangleI.IsNormalized">
            <summary>
            Determines whether the rectangle is normalized (both width and height are not negative)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NSizeI">
            <summary>
            Represents a size measured with width and height, both expressed with Int32 values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.#ctor(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current object"/>.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.op_Equality(Nevron.Nov.Graphics.NSizeI,Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.op_Inequality(Nevron.Nov.Graphics.NSizeI,Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.op_Addition(Nevron.Nov.Graphics.NSizeI,Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Adds b size to a size and returns the resulting size (binary +)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.op_Subtraction(Nevron.Nov.Graphics.NSizeI,Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Subtracts b size from a size and returns the resulting size (binary -)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.ToNPoint">
            <summary>
            Converts this size to NPoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.ToNSize">
            <summary>
            Converts this size to SizeF
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSizeI.Flip">
            <summary>
            Flips the Width and Height values
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSizeI.Width">
            <summary>
            width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSizeI.Height">
            <summary>
            height
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSizeI.Zero">
            <summary>
            The zero size (0, 0)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NSizeI.IsEmpty">
            <summary>
            Determines whether this is an empty size (e.g. width and height are 0)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NSize">
            <summary>
            The NSize structure represents a size measured with width and height.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.#ctor(Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.#ctor(Nevron.Nov.Graphics.NPointI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Equals(Nevron.Nov.Graphics.NSize)">
            <summary>
            Checks whether this size is equal to the other size
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current object"/>.
            </returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.op_Equality(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.op_Inequality(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.op_Addition(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Adds b size to a size and returns the resulting size (binary +)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.op_Subtraction(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Subtracts b size from a size and returns the resulting size (binary -)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.ToNPoint">
            <summary>
            Converts this size to NPoint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Round">
            <summary>
            Round this size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Flip">
            <summary>
            Flips the Width and Height values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Inflate(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Inflates this size with the specified margins
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Deflate(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Deflates this size with the specified margins
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Scale(System.Double,System.Double)">
            <summary>
            Scales this size with the specified factors
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSize.Width">
            <summary>
            width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSize.Height">
            <summary>
            height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Union(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Returns a size whose width is the max of size1.Width and size2.Width, 
            and whose height is the max of size1.Height and size2.Height.
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NSize.Union(Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Returns a size whose width is the max of size1.Width, size2.Height and size3.Width, 
            and whose height is the max of size1.Height, size2.Height and size3.Height.
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <param name="size3"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NSize.Zero">
            <summary>
            The Zero size (0, 0).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NSize.IsEmpty">
            <summary>
            Determines whether this is an empty size (e.g. width and height are 0)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NSize.IsDefined">
            <summary>
            Checks whether both the Width and the Height of this size are defined (i.e. they are not Double.NaN).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPolygon">
            <summary>
            The NPolygon class represents a polygon in 2D space defined by it's vertices.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.#ctor(Nevron.Nov.Graphics.NPointList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.#ctor(Nevron.Nov.Graphics.NPolygon)">
            <summary>
            Copy constructor
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the polygon contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <remarks>
            This implementation uses an EvenOdd fill rule
            </remarks>
            <param name="point">point with which to test</param>
            <returns>true if the interior contains the point, oterwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <param name="point">point with which to test</param>
            <param name="fillRule">defines the way in which the polygon interior is filled</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.Contains(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Checks whether the interior of this polygon contains the given line segment.
            </summary>
            <param name="lineSegment"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.IntersectsWith(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether this polygon intersects with the specified line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this polygon with the specified line segment
            </summary>
            <param name="line">line segment with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method returned true</param>
            <returns>true if this polygon intersects with the line segment, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.IntersectsWith(Nevron.Nov.Graphics.NPolygon)">
            <summary>
            Determines whether this polygon intersects with the specified convex polygon
            </summary>
            <param name="convexPolygon"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.IntersectWith(Nevron.Nov.Graphics.NPolygon,Nevron.Nov.Graphics.NPolygon@)">
            <summary>
            Finds the intersection polygon between this polygon and the specified convex polygon
            </summary>
            <param name="convexPolygon"></param>
            <param name="intersection"></param>
            <returns>true if this polygon intersects with the specified convex polygon, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.GetLongestLine">
            <summary>
            Gets the longest horizontal inner line in the polygon.
            </summary>
            <remarks>
            The complexity of the algorithm is O(n * log2(n)).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.TryGetLongestLine(System.Double,System.Double,Nevron.Nov.Graphics.NLineSegment@)">
            <summary>
            Gets the longest horizontal inner line in the polygon that is at least at the
            specified distance from all sides. Returns false if no such line exists.
            </summary>
            <param name="step">The step with which the scan line jumps down.</param>
            <param name="minDistanceToSides">The minimum distance from the found line's center to the sides of the polygon.</param>
            <param name="longestLine">The resulting longest inner line.</param>
            <remarks>
            The complexity of the algorithm is O(n * log2(n)).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.GetContourPositionAndAngle(System.Double,Nevron.Nov.Graphics.NPoint@,System.Double@)">
            <summary>
            Tries to get the percent position and angle from the specified location factor.
            </summary>
            <param name="locationFactor"></param>
            <param name="point"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.GetNearestIntersection(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Gets the nearest intersection point to dirPoint 
            out of all intersections between this geometry and the centerPoint:dirPoint vector.
            All points are in shape local coordinates.
            </summary>
            <param name="dirPoint"></param>
            <param name="centerPoint"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolygon.ToPolyline">
            <summary>
            Creates a polyline from this polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolygon.Perimeter">
            <summary>
            Gets the perimeter of the polygon.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolygon.IsConvex">
            <summary>
            Determines whether this polygon is convex. 
            A polygon is convex if the perp dot product of each subsequent pair of edge vectors has the same sign.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NPolyline">
            <summary>
            The NPolyline class represents a polyline in 2D space defined by its vertices.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.#ctor(Nevron.Nov.Graphics.NPointList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.#ctor(Nevron.Nov.Graphics.NPolyline)">
            <summary>
            Copy constructor
            </summary>
            <param name="polyline"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Adds the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the polyline contains the specified point
            </summary>
            <param name="point"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.IntersectsWith(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether this polyline intersects with the specified line
            </summary>
            <param name="line"></param>
            <returns>true if this polyline intersects with the line segment, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this polyline with the specified line segment
            </summary>
            <param name="line">line segment with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method returned true</param>
            <returns>true if this polyline intersects with the line segment, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.GetContourPositionAndAngle(System.Double,Nevron.Nov.Graphics.NPoint@,System.Double@)">
            <summary>
            Tries to get the percent position and angle from the specified location factor.
            </summary>
            <param name="locationFactor"></param>
            <param name="point"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.GetNearestIntersection(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Gets the nearest intersection point to dirPoint 
            out of all intersections between this geometry and the centerPoint:dirPoint vector.
            All points are in shape local coordinates.
            </summary>
            <param name="dirPoint"></param>
            <param name="centerPoint"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NPolyline.ToPolygon">
            <summary>
            Creates a polyline from this polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolyline.StartPoint">
            <summary>
            Gets or sets the start point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolyline.EndPoint">
            <summary>
            Gets or sets the end point of the open figure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NPolyline.Length">
            <summary>
            Gets the polyline length
            </summary>
        </member>
        <member name="T:Nevron.Nov.Graphics.NRectangle">
            <summary>
            The NRectangle structure represents a rectangle in 2D space defined by it's location and size.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(Nevron.Nov.Graphics.NRectangleI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a new rectangle from margings
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.#ctor(Nevron.Nov.Graphics.NRange2D)">
            <summary>
            Creates a new rectangle from a range
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Translate(System.Double,System.Double)">
            <summary>
            Translates the primitive with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.AddToPath(Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Appends the primitive to the specified graphics path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ContainsOnOutline(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Determines whether the outline of the rectangle contains the specified point
            </summary>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Contains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the rectangle contains the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Contains(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENFillRule)">
            <summary>
            Determines whether the primitive interior contains the specified point
            </summary>
            <param name="point"></param>
            <param name="fillMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes the object state into the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag to serialize the object state into.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes the object state from the specified property bag.
            </summary>
            <param name="context"></param>
            <param name="propertyBag">The property bag that contains the serialized object state.</param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Equals(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Checks whether this size is equal to the other size
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.op_Equality(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.op_Inequality(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Inflate(System.Double)">
            <summary>
            Inflates the rectangle with the specified amount.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the rectangle with the specified amounts
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Inflate(Nevron.Nov.Graphics.NSize)">
            <summary>
            Inflates the rectangle with the specified size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Inflate(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Inflates the rectangle with the specified margins.
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Deflate(System.Double)">
            <summary>
            Deflates the rectangle with the specified amount
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Deflate(System.Double,System.Double)">
            <summary>
            Deflates the rectangle with the specified amounts.
            Expects a normalized rectangle. 
            Makes sure that the rectangle remains normalized (e.g. Width and Height remain positive or zero).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Deflate(Nevron.Nov.Graphics.NSize)">
            <summary>
            Deflates the rectangle with the specified size.
            Expects a normalized rectangle. 
            Makes sure that the rectangle remains normalized (e.g. Width and Height remain positive or zero).
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Deflate(Nevron.Nov.Graphics.NMargins)">
            <summary>
            Deflates the rectangle with the specified margins.
            Expects a normalized rectangle. 
            Makes sure that the rectangle remains normalized (e.g. Width and Height remain positive or zero).
            </summary>
            <param name="margins"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Scale(System.Double,System.Double)">
            <summary>
            Scales the rectangle with the specified factors
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an outside point
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Contains(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether the rectangle contains the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Contains(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether the rectangle contains the specified line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.InclusiveContains(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Determines whether the rectangle contains the point 
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an inside point
            </remarks>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.InclusiveContains(System.Double,System.Double)">
            <summary>
            Determines whether the rectangle contains the point with the specified coordinates
            </summary>
            <remarks>
            This method considers the a point on the right and and bottoms sides of the rectangle as an inside point
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.InclusiveIntersectsWith(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectsWith(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Determines whether this rectangle intersects with the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectsWith(Nevron.Nov.Graphics.NLineSegment)">
            <summary>
            Determines whether this rectangle intersects with the specified line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectsWith(Nevron.Nov.Graphics.NCircle)">
            <summary>
            Determines whether this rectangle intersects with the specified circle
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectWith(Nevron.Nov.Graphics.NLineSegment,Nevron.Nov.Graphics.NPointList@)">
            <summary>
            Intersects this rectangle with the specified line segment
            </summary>
            <param name="line">line segment with which to intersect</param>
            <param name="intersectionPoints">resulting intersection points (valid only if the method returned true</param>
            <returns>true if this rectangle intersects with the line segment, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectWithRadianLine(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint@,System.Int32@)">
            <summary>
            Intersects this rectangle with a line connecting the rectangle center and the specified point
            </summary>
            <param name="pt">point which forms a line with the rectangle center</param>
            <param name="intersectionPoint">resulting intersection point (if the method returned true)</param>
            <param name="sideIndex">resulting index of the crossed side (if the method returned true (enumeration is left, top, right, bottom)</param>
            <returns>true if the intersection was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.IntersectionArea(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Computes the intersection area of this rect with the specified rect
            </summary>
            <param name="rect"></param>
            <returns>zero if rects do not intersect, otherwise returns the intersection area</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.GetCompassPoint(Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified compass direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.GetOppositeCompassPoint(Nevron.Nov.Graphics.ENCompassDirection)">
            <summary>
            Obtains the point on the rectangle rim, which is oppisite to the point which corresponds to the specified compass direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.GetAlignedPoint(Nevron.Nov.ENHorizontalAlignment,Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Obtains the point on the rectangle rim, which corresponds to the specified alignments
            </summary>
            <param name="halign"></param>
            <param name="valign"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.GetAlignedRectangle(Nevron.Nov.ENContentAlignment,Nevron.Nov.Graphics.NSize,System.Boolean)">
            <summary>
            Gets a rectangle which is aligned to this rectangle according to the specified content alignment.
            If clip is true and the provided size is larger than the specified size, the returned rectangle 
            size is clampted to this rectangle size.
            </summary>
            <param name="contentAlignment"></param>
            <param name="size"></param>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Round">
            <summary>
            Rounds this rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Normalize">
            <summary>
            Makes sure that the Width and Height are positive values.
            If either is negative the X/Y respectively is subtracted with the Width/Height 
            and the Width/Height is set to its absolute positive value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ToNRange2D">
            <summary>
            Converts this rectangle to an NRange2D.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangle.X">
            <summary>
            X coordinate of the left top corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangle.Y">
            <summary>
            Y coordinate of the left top corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangle.Width">
            <summary>
            Rectangle width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangle.Height">
            <summary>
            Rectangle height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ResizeRectangle(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Double,System.Boolean,Nevron.Nov.Graphics.NSize)">
            <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction. 
            Does not allow the newly created rect size to exceed the specified minSize.
            </summary>
            <param name="rect">rectangle to resize</param>
            <param name="direction">compass direction of the handle, which is resized</param>
            <param name="dx">x handle change</param>
            <param name="dy">y handle change</param>
            <param name="preserveAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
            <param name="minSize">minimal size of the new rect</param>
            <returns>resized rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ResizeRectangle(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Double,System.Boolean,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NSize)">
            <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction. 
            Does not allow the newly created rect size to exceed the specified minSize.
            </summary>
            <param name="rect">rectangle to resize</param>
            <param name="direction">compass direction of the handle, which is resized</param>
            <param name="dx">x handle change</param>
            <param name="dy">y handle change</param>
            <param name="preserveAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
            <param name="minSize">minimal size of the new rect</param>
            <param name="maxSize">maximal size of the new rect</param>
            <returns>resized rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.ResizeRectangle(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Double,System.Boolean)">
            <summary>
            Computes a new rect for an expected resize of a rectangle in the specified compass direction
            </summary>
            <param name="rect">rectangle to resize</param>
            <param name="direction">compass direction of the handle, which is resized</param>
            <param name="dx">x handle change</param>
            <param name="dy">y handle change</param>
            <param name="preserveAspectRatio">indicates whether the change of the aspect ratio is allowed</param>
            <returns>resized rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FitRectangle(Nevron.Nov.Graphics.NRectangle,System.Double)">
            <summary>
            Returns the fitted rectangle with the specified orientation (in degrees)
            </summary>
            <param name="rect"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a rectangle from the coordinates of it's sides
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FromTwoPoints(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets a normalized rectangle from two points
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FromTwoPoints(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a normalized rectangle from two points
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FromCenterAndSize(Nevron.Nov.Graphics.NPoint,System.Double,System.Double)">
            <summary>
            Gets a rectangle from center and dimensions
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.FromCenterAndSize(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Gets a rectangle from center and dimensions
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.MiddleRect(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Gets the middle rectangle from two other rects.
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Union(Nevron.Nov.Graphics.NRectangle[])">
            <summary>
            Creates the smallest possible rectangle that can contain the specified rectangles
            </summary>
            <param name="rects"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Union(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates the smallest possible third rectangle that can contain the two rectangles that form a union
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Union(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Calculates the union of a point and a rectangle.
            </summary>
            <param name="a">rectangle</param>
            <param name="b">point</param>
            <returns>
            Returns the minimal rectangle that bounds the point and the rectangle.
            </returns>	
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Intersection(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Returns a third rectangle that represents the intersection of two rectangles. 
            If there is no intersection, the Zero rectangle is returned.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Graphics.NRectangle.Intersection(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Returns a third rectangle that represents the intersection of two rectangles.
            If there is no intersection, the method returns false.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Graphics.NRectangle.Zero">
            <summary>
            The Zero rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Bounds">
            <summary>
            Gets the minimal enclosing rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.BoundsRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Vertices">
            <summary>
            Gets an array with the rectangle vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Middles">
            <summary>
            Gets an array with the rectangle sides middle points
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.VerticesAndMiddles">
            <summary>
            Gets an array with the rectangle vertices and middles enumerated clockwise starting from the left-top vertex
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Left">
            <summary>
            Gets the left side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Top">
            <summary>
            Gets the top side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Right">
            <summary>
            Gets the right side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Bottom">
            <summary>
            Gets the bottom side of the rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Location">
            <summary>
            Gets or sets the rectangle location (left-top corner)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Size">
            <summary>
            Gets or sets the size of this rectangle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.LeftTop">
            <summary>
            Gets or sets the rectangle left-top corner (location)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.RightBottom">
            <summary>
            Gets the rectangle right bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.RightTop">
            <summary>
            Gets the rectangle right top corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.LeftBottom">
            <summary>
            Gets the rectangle left bottom corner
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.LeftCenter">
            <summary>
            Gets the left center point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.RightCenter">
            <summary>
            Gets the right center point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.TopCenter">
            <summary>
            Gets the top center point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.BottomCenter">
            <summary>
            Gets the bottom center point
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Center">
            <summary>
            Gets the rectangle center
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.CenterX">
            <summary>
            Gets the X center
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.CenterY">
            <summary>
            Gets the X center
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Area">
            <summary>
            Obtains the rectangle area (width * Height)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.Perimeter">
            <summary>
            Obtains the rectangle perimeter (2 * width) + (2 * Height)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.IsEmpty">
            <summary>
            Determines whether the rectangle is with zero Width or Height.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.IsValid">
            <summary>
            Indicates whether all fields of the rectangle are defined, i.e. whether X, Y,
            Width and Height are all different from Double.NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Graphics.NRectangle.IsNormalized">
            <summary>
            Determines whether the rectangle is normalized (both width and height are not negative)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBody1D">
            <summary>
            A body, which behaves like a line connecting 2D bodies.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody1D.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NBody1D.ToBody">
            <summary>
            Gets the 2D body at which the 1D body ends
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBoxBodyList">
            <summary>
            The NBoxBodyList class represents a typed list of NBoxBody instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBodyList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBodyList.#ctor(Nevron.Nov.DataStructures.INSet{Nevron.Nov.Layout.NBoxBody})">
            <summary>
            
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxBodyList.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.Layout.NStackLayout">
            <summary>
            Represents a directed box layout, which stacks the boxes in horizontal or vertical order.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NStackLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NStackLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Measures the desired size of the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NStackLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Layouts the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NStackLayout.NStackLayoutSchema">
            <summary>
            Schema associated with NStackLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NStackLayout.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NStackLayout.FitModeProperty">
            <summary>
            Reference to the FitMode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NStackLayout.FillMode">
            <summary>
            Gets or sets the mode in which the stack layout tries to fill the layout area, 
            when the desired size of the arranged items is smaller than the layout area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NStackLayout.FitMode">
            <summary>
            Gets or sets the mode in which the stack layout tries to fit into the layout area, 
            when the desired size of the arranged items is larger than the layout area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NStackLayout.NStackLayoutDesigner">
            <summary>
            The designer for box layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NStackLayout.NStackLayoutDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NDockLayout">
            <summary>
            The NDockLayout class represents a box layout, 
            which layouts the boxes by subsequently docking them to boxes defined docking areas.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.CreateBoxBody">
            <summary>
            Called in the boxes creation process to create a cell instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.MeasureBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Measures the desired size of the boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.ArrangeBoxes(Nevron.Nov.Layout.NBoxBodyList,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified boxes
            </summary>
            <param name="boxes"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Layout.NDockLayout.NDockLayoutSchema">
            <summary>
            Schema associated with NDockLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.NDockLayout.DockAreaPropertyEx">
            <summary>
            Reference to the DockArea extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.GetDockArea(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the value of the DockAreaPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Layout.NDockLayout.SetDockArea(Nevron.Nov.Dom.NNode,Nevron.Nov.Layout.ENDockArea)">
            <summary>
            Sets the value of the DockAreaPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Nov.Layout.NLayoutContext">
            <summary>
            The NLayoutContext class is used to abstract layouts from the actual types and relations between the objects they arrange. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayoutContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayoutContext.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Layout.NLayoutContext.GraphAdapter">
            <summary>
            Gets or sets the graph adapter. 
            It is used by layouts to determine the graph relationships of the arranged objects.
            </summary>
            <remarks>
            If a graph adapter is not provide, all arranged objects are by default considered as vertices by box layouts.
            That is why a graph adapter is typically not needed in these layouts.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Layout.NLayoutContext.BodyAdapter">
            <summary>
            Gets or sets the body adapter. 
            It is used by layouts to obtain a body representation of the arranged objects.
            Cannot be null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Layout.NLayoutContext.LayoutArea">
            <summary>
            Gets or sets the layout area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENHVOrientation">
            <summary>
            Defines the possible horizontal and vertical orientations
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVOrientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVOrientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENHVDirection">
            <summary>
            Defines the possible expand horizontal and vertical directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVDirection.TopToBottom">
            <summary>
            The layout is directed vertically, starting from the top and expanding downwards.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVDirection.BottomToTop">
            <summary>
            The layout is directed vertically, starting from the bottom and expanding upwards.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVDirection.LeftToRight">
            <summary>
            The layout is directed horizontally, starting from the left and expanding to the right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHVDirection.RightToLeft">
            <summary>
            The layout is directed horizontally, starting from the right and expanding to the left.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENUniformSize">
            <summary>
            Enumerates the possible ways in which cells can be resized by a box layout, so that all cells are having a uniform size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENUniformSize.None">
            <summary>
            The cells size in the respective dimension is not equal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENUniformSize.Max">
            <summary>
            The cells size in the respective dimension is equal to the max of all cells.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENLayoutRotation">
            <summary>
            Enumerates the allowed angles at which a layout can be rotated.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENLayoutRotation.None">
            <summary>
            Rotate to 0 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENLayoutRotation.Rotate90">
            <summary>
            Rotate to 90 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENLayoutRotation.Rotate180">
            <summary>
            Rotate to 180 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENLayoutRotation.Rotate270">
            <summary>
            Rotate to 270 degrees.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENHorizontalPlacement">
            <summary>
            Defines the ways, in which content can be placed horizontally within a content holder box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHorizontalPlacement.Left">
            <summary>
            The content is aligned to the left side of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHorizontalPlacement.Center">
            <summary>
            The content is aligned to the center of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHorizontalPlacement.Right">
            <summary>
            The content is aligned to the right side of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENHorizontalPlacement.Fit">
            <summary>
            The content is resized horizontally to the respective content holder size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENVerticalPlacement">
            <summary>
            Defines the ways, in which content can be placed vertically within a content holder box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENVerticalPlacement.Top">
            <summary>
            The content is aligned to the top side of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENVerticalPlacement.Center">
            <summary>
            The content is aligned to the center of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENVerticalPlacement.Bottom">
            <summary>
            The content is aligned to the bottom side of the content holder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENVerticalPlacement.Fit">
            <summary>
            The content is resized vertically to the respective content holder size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENDockArea">
            <summary>
            Enumerates the docking areas, in which the cells in a dock layout can be docked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENDockArea.Left">
            <summary>
            The cell is docked to the current left area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENDockArea.Right">
            <summary>
            The cell is docked to the current right area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENDockArea.Top">
            <summary>
            The cell is docked to the current top area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENDockArea.Bottom">
            <summary>
            The cell is docked to the current bottom area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENDockArea.Center">
            <summary>
            The cell is docked to the current center area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENStackFitMode">
            <summary>
            Enumerates the ways in which a stack attempts to fit into the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFitMode.None">
            <summary>
            The stack does not attempt to fit the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFitMode.Equal">
            <summary>
            The stack decreases the items size with equal amounts to fit the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFitMode.Proportional">
            <summary>
            The stack decreases the items size with proportional amounts to fit the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFitMode.First">
            <summary>
            The stack decreases the items size in forward order until the stack fits the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFitMode.Last">
            <summary>
            The stack decreases the items size in reverse order until the stack fits the available area. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.ENStackFillMode">
            <summary>
            Enumerates the ways in which a stack attempts to fill the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.None">
            <summary>
            The stack does not attempt to fill the available area.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.Equal">
            <summary>
            The stack increases the items size with equal amounts to fill the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.Proportional">
            <summary>
            The stack increases the items size with proportional amounts to fill the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.First">
            <summary>
            The stack increases the items size in forward order until the stack fills the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.Last">
            <summary>
            The stack increases the items size in reverse order until the stack fills the available area. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Layout.ENStackFillMode.Justify">
            <summary>
            The stack increases the spacing between the items to fill the available area.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NBoxLayoutEventArgs">
            <summary>
            The NBoxLayoutEventArgs class provides information about box layouts
            </summary>
        </member>
        <member name="T:Nevron.Nov.Layout.NLayoutEventArgs">
            <summary>
            The NLayoutEventArgs class serves as base class for all layout event arguments
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NLayoutEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Initializer constructor
            </summary>
            <param name="eventType"></param>
            <param name="targetNode"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Nov.Layout.NLayoutEventArgs.Context">
            <summary>
            Gets the layout context
            </summary>
        </member>
        <member name="M:Nevron.Nov.Layout.NBoxLayoutEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Layout.NLayoutContext,Nevron.Nov.Layout.NBoxBodyList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="cells"></param>
        </member>
        <member name="P:Nevron.Nov.Layout.NBoxLayoutEventArgs.Cells">
            <summary>
            Gets the cells subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Dom.NDomType">
            <summary>
            The NDomType class serves as a wrapper for a CLR type, and is used to define the actual type of the objects involved in the DOM.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.DeepClone">
            <summary>
            Creates a deep clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.ToString">
            <summary>
            Gets the string representation of this dom type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.DeepClone(System.Object,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates a deep clone of the specified object. The object must be of this dom type.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.CreateInstance">
            <summary>
            Creates an instance of this type. 
            Throws an exception if method failed. Possible causes are either that the DomType is abstract, or does not provide a default constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.IsAssignableFrom(Nevron.Nov.Dom.NDomType)">
            <summary>
            Determines if this DomType is either the same as specified type, or is its base type.
            </summary>
            <param name="domType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Dom.NDomType.FromType(System.Type)">
            <summary>
            Get the schema type associated with the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Boolean">
            <summary>
            Dom type for Boolean types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Byte">
            <summary>
            Dom type for Byte types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Char">
            <summary>
            Dom type for Char types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Double">
            <summary>
            Dom type for Double types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Int16">
            <summary>
            Dom type for Int16 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Int32">
            <summary>
            Dom type for Int32 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Int64">
            <summary>
            Dom type for Int64 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.SByte">
            <summary>
            Dom type for SByte types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Single">
            <summary>
            Dom type for Single types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.String">
            <summary>
            Dom type for string types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.UInt16">
            <summary>
            Dom type for UInt16 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.UInt32">
            <summary>
            Dom type for UInt32 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.UInt64">
            <summary>
            Dom type for UInt64 types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.Object">
            <summary>
            Dom type for Object types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.DateTime">
            <summary>
            Dom type for DateTime types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NNodeRef">
            <summary>
            Dom type for NNodeRef types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NPoint">
            <summary>
            DOM type associated with NPoint
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NSize">
            <summary>
            DOM type associated with NSize
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NRectangle">
            <summary>
            DOM type associated with NRectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NMargins">
            <summary>
            DOM type associated with NMarginsF
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NLength">
            <summary>
            DOM type associated with NLenght
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NAngle">
            <summary>
            DOM type associated with NAngle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NUnit">
            <summary>
            DOM type associated with NUnit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NColor">
            <summary>
            DOM type associated with NColor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NRange">
            <summary>
            DOM type associated with NRange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Dom.NDomType.NVariant">
            <summary>
            DOM type associated with NVariant
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomType.DomSurrogateSerializer">
            <summary>
            Gets a surrogate serializer for this object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomType.IsNodeType">
            <summary>
            Determines whether this type is a NNode derivate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomType.IsValueType">
            <summary>
            Determines whether this type is a value type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomType.IsDeeplyCloneable">
            <summary>
            Determines whether this type implements the INDeeplyCloneable interface
            </summary>
        </member>
        <member name="P:Nevron.Nov.Dom.NDomType.Type">
            <summary>
            System (CLR) type associated with this type
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENLogEntryType">
            <summary>
            Enumerates the log entry types
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLogEntryType.Warning">
            <summary>
            A warning message
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLogEntryType.Error">
            <summary>
            An error message
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLogEntryType.Message">
            <summary>
            A message
            </summary>
        </member>
        <member name="T:Nevron.Nov.INLog">
            <summary>
            Implemented by logs
            </summary>
        </member>
        <member name="M:Nevron.Nov.INLog.Clear">
            <summary>
            Clears the log
            </summary>
        </member>
        <member name="M:Nevron.Nov.INLog.LogMessage(System.String)">
            <summary>
            Logs a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.INLog.LogWarning(System.String)">
            <summary>
            Logs a warning
            </summary>
            <param name="warning"></param>
        </member>
        <member name="M:Nevron.Nov.INLog.LogError(System.String)">
            <summary>
            Logs an error
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:Nevron.Nov.INLog.Log">
            <summary>
            Gets the log contents
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NLog">
            <summary>
            Represents a generic log implementation
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLog.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLog.LogMessage(System.String)">
            <summary>
            Logs a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Nevron.Nov.NLog.LogWarning(System.String)">
            <summary>
            Logs a warning
            </summary>
            <param name="warning"></param>
        </member>
        <member name="M:Nevron.Nov.NLog.LogError(System.String)">
            <summary>
            Logs an error
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Nevron.Nov.NLog.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.NLog.Log">
            <summary>
            Gets the log contents
            </summary>
        </member>
        <member name="T:Nevron.Nov.NLogEntry">
            <summary>
            A log entry
            </summary>
        </member>
        <member name="M:Nevron.Nov.NLogEntry.#ctor(Nevron.Nov.ENLogEntryType,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.NLogEntry.Type">
            <summary>
            Gets the log entry type
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLogEntry.Text">
            <summary>
            Gets the text of the log entry
            </summary>
        </member>
        <member name="P:Nevron.Nov.NLogEntry.FormattedText">
            <summary>
            Get the entry formatted (type + text) text
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NArrayHelpers`1">
            <summary>
            Provides helper methods for working with generic arrays
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.CastAll``1(`0[])">
            <summary>
            Casts all items from the specified array to the specified type
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.CastAll``1(`0[],System.Int32)">
            <summary>
            Casts the items from the specified array to the specified type
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="arr"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.SafeArrayEquals(`0[],`0[])">
            <summary>
            Safe array equals check
            </summary>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.Clone(`0[])">
            <summary>
            Makes a new shallow clone array of the specified source array.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.Copy(`0[],`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NArrayHelpers`1.Copy(`0[],System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a count of items from the source array to the target array.
            </summary>
            <param name="source"></param>
            <param name="sourceIndex"></param>
            <param name="target"></param>
            <param name="targetIndex"></param>
            <param name="count"></param>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NAndFilter`1">
            <summary>
            A composite filter, which represents a boolean algebra AND expression between the contained filters
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAndFilter`1.#ctor(Nevron.Nov.DataStructures.INFilter{`0},Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Creates a new AND filter from the specified filters
            </summary>
            <param name="filter1"></param>
            <param name="filter2"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NAndFilter`1.Filter(`0)">
            <summary>
            Return true if all contained filters return true
            </summary>
            <param name="item">item to filter</param>
            <returns>true if all contained filters returned true, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAndFilter`1.Filter1">
            <summary>
            Gets or sets the first filter
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NAndFilter`1.Filter2">
            <summary>
            Gets or sets the second filter
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NFalseFilter`1">
            <summary>
            A constant FALSE filter. 
            You cannot create instances of this type and must always use the Instance singleton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NFalseFilter`1.Filter(`0)">
            <summary>
            Always returns false
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NNotFilter`1">
            <summary>
            Represents a boolean algebra NOT expression and is used to invert the result of the filter it contains
            </summary>
            <remarks>
            This filter inverts the result of the one and only filter it contains
            </remarks>	
        </member>
        <member name="M:Nevron.Nov.DataStructures.NNotFilter`1.#ctor(Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Creates a new NOT filter that inverts the result of the specified filter
            </summary>
            <param name="filter">filter to invert</param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NNotFilter`1.Filter(`0)">
            <summary>
            Inverts the result of the contained filter
            </summary>
            <param name="item">object to filter</param>
            <returns>true if the contained filter returned false, false if the contained filter returned true</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NNotFilter`1.InnerFilter">
            <summary>
            Gets or sets the contained filter
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NOrFilter`1">
            <summary>
            A composite filter, which represents a boolean algebra OR expression between the contained filters
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NOrFilter`1.#ctor(Nevron.Nov.DataStructures.INFilter{`0},Nevron.Nov.DataStructures.INFilter{`0})">
            <summary>
            Creates a new OR filter from the specified filters
            </summary>
            <param name="filter1"></param>
            <param name="filter2"></param>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NOrFilter`1.Filter(`0)">
            <summary>
            Return true if at least one contained filter returns true
            </summary>
            <param name="item">item to filter</param>
            <returns>true if all contained filters returned true, otherwise false</returns>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NOrFilter`1.Filter1">
            <summary>
            Gets or sets the first filter
            </summary>
        </member>
        <member name="P:Nevron.Nov.DataStructures.NOrFilter`1.Filter2">
            <summary>
            Gets or sets the second filter
            </summary>
        </member>
        <member name="T:Nevron.Nov.DataStructures.NTrueFilter`1">
            <summary>
            A constant TRUE filter. 
            You cannot create instances of this type and must always use the Instance singleton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.DataStructures.NTrueFilter`1.Filter(`0)">
            <summary>
            Always returns true
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Formulas.NLexicalException">
            <summary>
            The NLexicalException exception is thrown when an expression is broken into tokens. 
            It indicates a lexical (spelling) error.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Formulas.NGrammaticalException">
            <summary>
            The NGrammaticalException exception is thrown when the engine builds the expression tree. 
            It indicates a grammitical error. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Formulas.NEvaluationException">
            <summary>
            The NEvaluationException exception is thrown when the expression is evaluated. 
            It indicates a grammitical error or runtime evaluation error. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Formulas.NFormulaEngine">
            <summary>
            The NFormulaEngine class is used for the runtime parsing and evaluation of formulas.
            </summary>
            <remarks>
            A formula expression is string, which can be evaluated to a single variant value. 
            A valid formula expression is composed by elements of one of the following types.
            <para>
            <list type="bullet">
            <item>
            	<term>Numbers</term>
            	<descrption>
            	These are integer and floating point numbers. For example: 12, 0.1, 145.23, 7.5E-17, 8.234E+13 etc.
            	</descrption>
            </item>
            <item>
            	<term>Boolean values</term>
            	<descrption>
            	These are the true and false boolean constants, which in the expression can be represented by the 
            	following strings: true, false, True, False, TRUE and FALSE
            	</descrption>
            </item>
            <item>
            	<term>Strings</term>
            	<descrption>
            	In the formula expression, strings must are enclosed in " characters. 
            	For example: "hello", "world" etc.
            	</descrption>
            </item>
            <item>
            	<term>Operators</term>
            	<descrption>
            	Supported is a common set of binary and unary operators. For example: +, -, *. /, =  etc.
            	</descrption>
            </item>
            <item>
            	<term>Parenthesis</term>
            	<descrption>
            	The '(' and ')' characters can used to change the operators priviledge. 
            	</descrption>
            </item>	
            <item>
            	<term>Functions</term>
            	<descrption>
            	Supported is a large set of mathematical, logical, string, bitwise and date-time functions. 
            	For example: MIN, MAX, SIN, COS etc. Function arguments must be enclosed in parenthesis 
                and divided by commas. 
            	</descrption>
            </item>
            <item>
            	<term>Variables</term>
            	<descrption>
            	The recognized set of variables is dynamically resolved by the engine 
                through the currently specified VariableProvider.
            	</descrption>
            </item>	
            </list>
            </para>
            The following example evaluates a formula expression:
            <code>
            // create the formula engine
            NFormulaEngine engine = new NFormulaEngine();
            
            // create a variable dictionary
            NVariableDictionary vars = new NVariableDictionary();
            vars["a"] = new NVariant(10);
            vars["b"] = new NVariant(20);
            
            // assign the variable dictionary to the engine
            engine.VariableProvider = vars;
            
            // evaluate an expression (evaluates to 50)
            NVariant result = engine.Evaluate("a + b * 2");
            </code> 
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Formulas.NFormulaEngine.#ctor">
            <summary>
            Creates a new formula engine
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.NFormulaEngine.Evaluate(System.String)">
            <summary>
            Parses the specified formula and returns the result of its evaluation
            </summary>
            <param name="formula">formula to evaluate</param>
            <returns>result of the formula evaluation, or an empty variant if an empty formula was passed</returns>
        </member>
        <member name="P:Nevron.Nov.Formulas.NFormulaEngine.VariableProvider">
            <summary>
            Gets or sets the variable provider, which must be used
            </summary>
        </member>
        <member name="T:Nevron.Nov.Formulas.NVariableMap">
            <summary>
            Represents an implementation of the INVariableProvider
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.GetVariableIndex(System.String)">
            <summary>
            Gets a variable index for the specified string (used during parsing).
            Returns -1 if the specified string is not a valid variable name.
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.GetVariableValue(System.Int32)">
            <summary>
            Gets the variable value by a previously provided the variable index (used during evaluation).
            Throws an exception if the specified index is not valid.
            </summary>
            <param name="varIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.Set(System.String,Nevron.Nov.NVariant)">
            <summary>
            Sets a value for the specified name
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.Remove(System.String)">
            <summary>
            Removes a variable by name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Formulas.NVariableMap.Clear">
            <summary>
            Removes all variables
            </summary>
        </member>
        <member name="P:Nevron.Nov.Formulas.NVariableMap.Count">
            <summary>
            Gets the count of local variable names in this map.
            </summary>
        </member>
        <member name="T:Nevron.Nov.NVariant">
            <summary>
            Represents a value-type pair, which facilitates the type convertion of values, 
            as well as mathematical and logical operations with values of different type and measurement unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(Nevron.Nov.NVariant[])">
            <summary>
            Creates an array variant
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Boolean)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Byte)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Int16)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Int32)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Int64)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.UInt16)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.UInt32)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.UInt64)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Single)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Double)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Decimal)">
            <summary>
            Creates a new Real variant that is associated with the specified Value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.DateTime)">
            <summary>
            Creates a new DateTime variant that is associated with the specified Value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(Nevron.Nov.NLength)">
            <summary>
            Creates a new number variant that is associated with the specified length unit.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(Nevron.Nov.NAngle)">
            <summary>
            Creates a new number variant that is associated with the specified angle unit.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.Double,Nevron.Nov.NUnit)">
            <summary>
            Creates a new measure variant that is associated with the specified Value and Unit.
            </summary>
            <param name="val"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.#ctor(System.String)">
            <summary>
            Creates a variant that holds the specified value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.CompareTo(System.Object)">
            <summary>
            Compares this variant to the specified object. The object must be of NVariant type
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.CompareTo(Nevron.Nov.NVariant)">
            <summary>
            Compares this variant to the specified variant.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Int32 number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Int64 number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Single number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Double number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent string number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Boolean">
            <summary>
            Cast to Boolean
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Byte">
            <summary>
            Cast to Byte
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Int32">
            <summary>
            Cast to Int32
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Int64">
            <summary>
            Cast to Int64
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Single">
            <summary>
            Cast to Single
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Double">
            <summary>
            Cast to Double
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.Decimal">
            <summary>
            Cast to Decimal
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.DateTime">
            <summary>
            Cast to DateTime
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~System.String">
            <summary>
            Cast to string
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~Nevron.Nov.NLength">
            <summary>
            Cast to Length
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Explicit(Nevron.Nov.NVariant)~Nevron.Nov.NAngle">
            <summary>
            Cast to Angle
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_UnaryNegation(Nevron.Nov.NVariant)">
            <summary>
            Arithmetic unary minus operator (defined for signed numbers)
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_UnaryPlus(Nevron.Nov.NVariant)">
            <summary>
            Arithmetic unary plus operator operator (defined for numbers, lengths and angles)
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Addition(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Arithmetic binary plus operator (defined for numbers, lengths and angles)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Subtraction(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Arithmetic binary minus operator (defined for numbers, lengths and angles)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Multiply(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Arithmetic multiplication. Multiplies a with b. Applicable for all number types
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Division(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Arithmetic division. Divides a by b. Applicable for all number types
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_GreaterThan(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Greater Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_LessThan(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Less Than operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_GreaterThanOrEqual(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Greater Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_LessThanOrEqual(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Less Than Or Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Equality(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.op_Inequality(Nevron.Nov.NVariant,Nevron.Nov.NVariant)">
            <summary>
            Comparison Not Equal To operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.ToString">
            <summary>
            Overriden to return the value string representation, according to the English-US culture info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.Equals(System.Object)">
            <summary>
            Overriden because == operator was overriden
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetFirstValue">
            <summary>
            Gets the first non array variant contained in this variant.
            In case this variant is not array returns the variant itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetFirstValue(System.Boolean)">
            <summary>
            Gets the first non array variant contained in this variant.
            In case this variant is not array returns the variant itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetLastValue">
            <summary>
            Gets the last non array variant contained in this variant.
            In case this variant is not array returns the variant itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetLastValue(System.Boolean)">
            <summary>
            Gets the last non array variant contained in this variant.
            In case this variant is not array returns the variant itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetVariantCount">
            <summary>
            Gets the count of variants contained in this variant array.
            In case of a non array variant throws an exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetVariantAt(System.Int32)">
            <summary>
            Gets the value at the specified index. 
            In case of a non array variant throws an exception.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetMeasure(Nevron.Nov.NVariant@,Nevron.Nov.NUnit)">
            <summary>
            Gets the measure represented by this variant.
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.Parse(System.String,Nevron.Nov.ENVarType)">
            <summary>
            Creates a new variant object from the specified string and with the specified type 
            (parses the string according to the English-US culture info)
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NVariant.Empty">
            <summary>
            The empty variant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NVariant.True">
            <summary>
            The true variant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NVariant.False">
            <summary>
            The false variant
            </summary>
        </member>
        <member name="F:Nevron.Nov.NVariant.Zero">
            <summary>
            The Zero constant
            </summary>
        </member>
        <member name="M:Nevron.Nov.NVariant.CreateVariant(System.Object)">
            <summary>
            Creates a variant from the specified object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.CreateVariant(System.Type,System.Object)">
            <summary>
            Tries to create a variant from the specified object, by using the variant factory for the specfied type.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetVariantFactory(System.Type)">
            <summary>
            Given a source object type, tries to return a function that converts an object to a variant.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.SetVariantFactory(System.Type,Nevron.Nov.FunctionResult{Nevron.Nov.NVariant,System.Object})">
            <summary>
            Sets the function that converts objects to variants.
            </summary>
            <param name="type"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Nevron.Nov.NVariant.CreateValue(System.Type,Nevron.Nov.NVariant)">
            <summary>
            Tries to create an object from the specified variant, by using the object factory for the specified type.
            </summary>
            <param name="type"></param>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.GetObjectFactory(System.Type)">
            <summary>
            Given a target object type, tries to return a function that converts a variant to an object of the specified target type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NVariant.SetObjectFactory(System.Type,Nevron.Nov.FunctionResult{Nevron.Nov.NVariant,System.Object})">
            <summary>
            Sets the function that converts variants to objects of the specified type.
            </summary>
            <param name="type">target object type</param>
            <param name="factory">function that converts variants to objects of the specfied target type</param>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsEmpty">
            <summary>
            Determines whether this is an empty variant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsBoolean">
            <summary>
            Determines whether this is a boolean variant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsNumber">
            <summary>
            Determines whether this variant is a number (Real or Integer)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsMeasure">
            <summary> 
            Determines whether this variant is a measure (e.g. there is a unit associated with the number)
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsNumberOrMeasure">
            <summary>
            Determines whether this variant is a number or measure variant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsDateTime">
            <summary>
            Determines whether this variant is a date time variant
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsArray">
            <summary>
            Determines whether this variant is an array
            </summary>
        </member>
        <member name="P:Nevron.Nov.NVariant.IsString">
            <summary>
            Determines whether this variant is a string
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NCultureInfo">
            <summary>
            Static class for commonly used CultureInfo routines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NCultureInfo.GetEnglishLanguageName(System.String)">
            <summary>
            Gets the culture name in the format "&lt;languagefull> (&lt;country/regionfull>)" in English.
            Returns null if no language information is available for the given culture.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Globalization.NCultureInfo.GetNativeLanguageName(System.String)">
            <summary>
            Gets the culture name, consisting of the language, the country/region, and
            the optional script, that the culture is set to display. Returns null if no
            language information is available for the given culture.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Globalization.NCultureInfo.GetLcid(System.Globalization.CultureInfo)">
            <summary>
            Gets the culture identifier for the given culture info.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Globalization.NCultureInfo.EnglishUS">
            <summary>
            The English-US culture info.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENVarType">
            <summary>
            Enumerates the variant types (as 0 based ordinals)
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Boolean">
            <summary>
            A simple type representing Boolean values of true or false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Byte">
            <summary>
            An integral type representing unsigned 8-bit integers with values between 0 and 255.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Int32">
            <summary>
            An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Int64">
            <summary>
            An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Single">
            <summary>
            A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Double">
            <summary>
            A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Decimal">
            <summary>
            A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Measure">
            <summary>
            A type representing a physical measure in a certain dimension. Couples a Double value and a NUnit instance.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.DateTime">
            <summary>
            A type representing a date and time value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.String">
            <summary>
            A sealed class type representing Unicode character strings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Empty">
            <summary>
            The empty variant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Array">
            <summary>
            A type representing an array of other variant types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Var">
            <summary>
            The variant type itself.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVarType.Object">
            <summary>
            The object type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENMultiLengthUnit">
            <summary>
            Enumerates the units in a multi length
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENMultiLengthUnit.Percentage">
            <summary>
            Percentage from the parent block
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENMultiLengthUnit.Dip">
            <summary>
            Dips
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENLicenseDialogResult">
            <summary>
            Enumerates the license dialog results.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLicenseDialogResult.Evaluate">
            <summary>
            Indicates that the user has clicked the "Evaluate" button of the license dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLicenseDialogResult.Purchase">
            <summary>
            Indicates that the user has clicked the "Purchase" button of the license dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENLicenseDialogResult.Exit">
            <summary>
            Indicates that the user has clicked the "Exit" button of the license dialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENHorizontalAlignment">
            <summary>
            Specifies the horizonal alignment of objects within a container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENHorizontalAlignment.Center">
            <summary>
            The object is horizontally centered relative to the origin point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENHorizontalAlignment.Left">
            <summary>
            The object's left side is aligned with the origin point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENHorizontalAlignment.Right">
            <summary>
            The object's right side is aligned with the origin point.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENVerticalAlignment">
            <summary>
            Specifies the vertical alignment of objects within a container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVerticalAlignment.Center">
            <summary>
            The object is vertically centered relative to the origin point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVerticalAlignment.Top">
            <summary>
            The object is below the origin point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENVerticalAlignment.Bottom">
            <summary>
            The object is above the origin point.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENContentAlignment">
            <summary>
            Specifies the horizontal and vertical alignment of object within a container.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.TopCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.MiddleLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.MiddleCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.MiddleRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.BottomCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENContentAlignment.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENRelativeAlignment">
            <summary>
            Defines a relative alignment to some length
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENRelativeAlignment.Near">
            <summary>
            Near
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENRelativeAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENRelativeAlignment.Far">
            <summary>
            Far
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENDateTimeValueFormatInfo">
            <summary>
            Enumerates the predefined date / time format info
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormatInfo.Time">
            <summary>
            Raised if the predefined format contains time information
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormatInfo.Date">
            <summary>
            Raised if the predefined format contains date information
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormatInfo.DateTime">
            <summary>
            Mask for both
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENDateTimeValueFormat">
            <summary>
            Defines different formatting modes for DateTime values.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.Date">
            <summary>
            The value is formatted with the default locale short date format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongDate">
            <summary>
            The value is formatted with the default locale long date format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.Time">
            <summary>
            The value is formatted with the default locale time format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.DateTime">
            <summary>
            The value is formatted with the default locale date time format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.WeekDayFullName">
            <summary>
            The value is formatted with the day of the week full name e.g. Monday, Tuesday etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.WeekDayShortName">
            <summary>
            The value is formatted with the day of the week short name e.g. Mon, Tue etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongDateLongTime24Hour">
            <summary>
            The value is formatted with long date and long time in 24 hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongDateLongTimeAMPM">
            <summary>
            The value is formatted with long date and time in AM/PM format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongDateShortTime24Hour">
            <summary>
            The value if formatted with long date and short time (HH:mm)
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongDateShortTimeAMPM">
            <summary>
            The value if formatted with long date and short time in AM/PN format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.LongTime24Hour">
            <summary>
            Long time 24 hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.MonthFullName">
            <summary>
            The value is formatted by its month full name e.g. January, February etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.MonthNameAndDay">
            <summary>
            The value is formatted by its month full name and day 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.MonthNameYear2Digit">
            <summary>
            The value is formatted by its month full name and year with 2 digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.MonthShortName">
            <summary>
            The value is formatted by its month short name and day e.g Jan 15.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortDateLongTime24Hour">
            <summary>
            The value is formatted by its short date and long time in 24 hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortDateLongTimeAMPM">
            <summary>
            The value is formatted by its short date and long time in AM/PM hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortDateShortTime24Hour">
            <summary>
            The value is formatted by its short date and short time in 24 hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortDateShortTimeAMPM">
            <summary>
            The date is formatted by tis short date and short time in AM/PM hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortTime24Hour">
            <summary>
            The value is formatted by its short time 24 hour format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.ShortTimeAMPM">
            <summary>
            The value is formatted by its short time in AM/PM hour format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.Year4Digit">
            <summary>
            The value is formatted by its year expressed in four digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.Year2Digit">
            <summary>
            The value is formatted by its year expressed by two digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.QuarterYear2Digit">
            <summary>
            The value is formatted by its quarter and year expressed by two digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.QuarterYear4Digit">
            <summary>
            The value is formatted by its quarter and year expressed by four digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.YearAndMonthName">
            <summary>
            The value is formatted by its year and month name
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.WeekYear2Digit">
            <summary>
            The value is formatted by its week number in ISO and year by two digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.WeekYear4Digit">
            <summary>
            The value is formatted by its week number in ISO and year by four digits
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.MinuteSecond">
            <summary>
            The value is formatted by its minute and second (mm:ss)
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeValueFormat.SecondMillisecond">
            <summary>
            The value is formatted by its second an millisecond 
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENDateTimeUnit">
            <summary>
            Enumerates the supported date/time units
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Century">
            <summary>
            The century unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Decade">
            <summary>
            The decade unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Year">
            <summary>
            The year unit.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.HalfYear">
            <summary>
            Half year unit. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Quarter">
            <summary>
            The quarter of a year.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Month">
            <summary>
            A month.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Week">
            <summary>
            A week.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Day">
            <summary>
            A day.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.HalfDay">
            <summary>
            Half of a day.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Hour">
            <summary>
            An hour
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Minute">
            <summary>
            A minute.  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Second">
            <summary>
            A second
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Millisecond">
            <summary>
             A millisecond. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDateTimeUnit.Tick">
            <summary>
            Tick
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENNumericValueFormat">
            <summary>
            Defines different formatting modes for numeric values.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.General">
            <summary>
            The value is formatted with the default locale settings
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.LimitedPrecision3">
            <summary>
            The value is formatted using limited precision with up to three decimal places
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.LimitedPrecision6">
            <summary>
            The value is formatted using limited precision with up to six decimal places
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.Currency">
            <summary>
            The value is formatted with the default locale currency format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.Scientific">
            <summary>
            The value is formatted with the default locale scientific format
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.Percentage">
            <summary>
            The value is formatted as a percentage
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.Arabic">
            <summary>
            The value is formatted as arabic number
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.ArabicDash">
            <summary>
            The value is formatted as arabic number with dash
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.AlphaLower">
            <summary>
            The value is formatted with lower alpha numbers
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.AlphaUpper">
            <summary>
            The value is formatted with upper alpha numbers
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.RomanLower">
            <summary>
            The value is formatted with lower roman numbers
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.RomanUpper">
            <summary>
            The value is formatted with upper roman numbers
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.Ordinal">
            <summary>
            The value is formatted as ordinal
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.CardinalText">
            <summary>
            The value is formatted as cardinal text
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.OrdText">
            <summary>
            The value is formatted as oridinal text
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENNumericValueFormat.DollarText">
            <summary>
            The value is formatted as dollar text
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENUnitDimension">
            <summary>
            Enumerates the measurement unit dimension types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.None">
            <summary>
            The unit has no dimension
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.Length">
            <summary>
            The length dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.Time">
            <summary>
            The time dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.Mass">
            <summary>
            The mass dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.ThermodynamicTemperature">
            <summary>
            The temperature dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.ElectricCurrent">
            <summary>
            The ellectric current dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.AmountOfSubstance">
            <summary>
            The substance dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.Luminosity">
            <summary>
            The luminosity dimension 
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENUnitDimension.Derived">
            <summary>
            The derived dimension (e.g. a unit composed by other units)
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENEndianness">
            <summary>
            Endianness of a converter.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENEndianness.LittleEndian">
            <summary>
            Little endian - least significant byte first.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENEndianness.BigEndian">
            <summary>
            Big endian - most significant byte first.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENBoxSide">
            <summary>
            Enumerates the box sides.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxSide.Left">
            <summary>
            Left side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxSide.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxSide.Right">
            <summary>
            Right side.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxSide.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENBoxDirection">
            <summary>
            Enumerates the box move directions
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxDirection.Left">
            <summary>
            Left direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxDirection.Right">
            <summary>
            Right direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxDirection.Up">
            <summary>
            Up direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxDirection.Down">
            <summary>
            Down direction
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENBoxCorner">
            <summary>
            Enumerates the box corners.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxCorner.LeftTop">
            <summary>
            Left top corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxCorner.RightTop">
            <summary>
            Right top corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxCorner.LeftBottom">
            <summary>
            Left bottom corner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENBoxCorner.RightBottom">
            <summary>
            Right bottom corner.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENFileAttributes">
            <summary>
            Enumerates the attributes of files and dirrectories.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.System">
            <summary>
            The file is a system file. The file is part of the operating system or is used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Directory">
            <summary>
            The file is a directory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Archive">
            <summary>
            The file's archive status. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Device">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Normal">
            <summary>
            The file is normal and has no other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Temporary">
            <summary>
            The file is temporary. File systems attempt to keep all of the data in memory for quicker access rather
            than flushing the data back to mass storage. A temporary file should be deleted by the application as
            soon as it is no longer needed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.SparseFile">
            <summary>
            The file is a sparse file. Sparse files are typically large files whose data are mostly zeros.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.ReparsePoint">
            <summary>
            The file contains a reparse point, which is a block of user-defined data associated with a file or a directory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Compressed">
            <summary>
            The file is compressed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Offline">
            <summary>
            The file is offline. The data of the file is not immediately available.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.NotContentIndexed">
            <summary>
            The file will not be indexed by the operating system's content indexing service.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted.
            For a directory, this means that encryption is the default for newly created files and directories.</summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.IntegrityStream">
            <summary>
            The file or directory includes data integrity support. When this value is applied to a file,
            all data streams in the file have integrity support. When this value is applied to a directory,
            all new files and subdirectories within that directory, by default, include integrity support.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENFileAttributes.NoScrubData">
            <summary>
            The file or directory is excluded from the data integrity scan. When this value is applied to a directory,
            by default, all new files and subdirectories within that directory are excluded from data integrity.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENDirectoryScanMode">
            <summary>
            Enumerates the directory scan modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDirectoryScanMode.AllDirectories">
            <summary>
            Includes the current directory and all its subdirectories in a scan operation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENDirectoryScanMode.TopDirectory">
            <summary>
            Includes only the current directory in a scan operation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENComparisonOperator">
            <summary>
            Represents the comparion operators
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.Equals">
            <summary>
            The equals operator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.NotEquals">
            <summary>
            The not equals operator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.LessThan">
            <summary>
            The less than operator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.GreaterThan">
            <summary>
            The greater than operator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.LessThanOrEqualTo">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENComparisonOperator.GreaterThanOrEqualTo">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENPlatform">
            <summary>
            Enumerates the supported platforms.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENPlatform.None">
            <summary>
            None of the platforms.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENPlatform.WinForms">
            <summary>
            The Windows Forms platform.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENPlatform.WPF">
            <summary>
            The WPF platform.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENPlatform.Silverlight">
            <summary>
            The Silverlight platform.
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENPlatform.Mac">
            <summary>
            The Mac paltform.
            </summary>
        </member>
        <member name="T:Nevron.Nov.ENTransactionResultStatus">
            <summary>
            Defines the possible statuses of batch result
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENTransactionResultStatus.Succeeded">
            <summary>
            The batch succeeded
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENTransactionResultStatus.SucceededWithError">
            <summary>
            The batch succeeded, but was not able to apply all operations
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENTransactionResultStatus.FailedNotExecuted">
            <summary>
            The batch failed, bacause it was advised that the operations its performs will fail  
            </summary>
        </member>
        <member name="F:Nevron.Nov.ENTransactionResultStatus.FailedRolledback">
            <summary>
            The batch failed, during the operations executions and an attempt was made to rollback the associated transaction
            </summary>
        </member>
        <member name="T:Nevron.Nov.NKeyValuePair`2">
            <summary>
            Represents a pair of key and its value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NKeyValuePair`2.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NKeyValuePair`2.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to the specified one
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NKeyValuePair`2.ToString">
            <summary>
            Gets the string representation of this key/value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.NKeyValuePair`2.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="F:Nevron.Nov.NKeyValuePair`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Nevron.Nov.NMath">
            <summary>
            Static class for commonly used mathematical routines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMath.PI">
            <summary>
            The PI constant (180 degrees).
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMath.PI2">
            <summary>
            The PI * 2 constant (360 degrees)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMath.PIAndHalf">
            <summary>
            The PI * 3 / 2 constant (270 degrees)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMath.PIHalf">
            <summary>
            The PI / 2 constant (90 degrees)
            </summary>
        </member>
        <member name="F:Nevron.Nov.NMath.PIQuarter">
            <summary>
            The PI / 4 constant (45 degrees)
            </summary>
        </member>
        <member name="M:Nevron.Nov.NMath.Round(System.Double)">
            <summary>
            Rounds the specified value to the nearest int value.
            </summary>
            <param name="value">value to round</param>
            <returns>rounded value</returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value to the [min;max] range
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value to the [min;max] range
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the value to the [min;max] range
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.NMath.IsPowerOfTwo(System.UInt64)">
            <summary>
            Checks whether the specified number is exact power of 2.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.IsPrimeNumber(System.Int32)">
            <summary>
            Checks whether the specified number is a prime number
            </summary>
            <remarks>
            A natural number (i.e. 1, 2, 3, 4, 5, 6, etc.) is a prime number, if it is greater than 1 and has exactly two divisors - 1 and the number itself.
            This implementation uses the Trial-Division prime number check method, which can be quite slow for large numbers.
            </remarks>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int32,System.Int32)">
            <summary>
            Returns the min of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the min of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the min of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Returns the min of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the min of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the min of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int64,System.Int64)">
            <summary>
            Returns the min of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the min of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the min of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Double,System.Double)">
            <summary>
            Returns the min of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the min of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Min(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the min of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int32,System.Int32)">
            <summary>
            Returns the max of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the max of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the max of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Returns the max of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the max of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the max of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int64,System.Int64)">
            <summary>
            Returns the max of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the max of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the max of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Double,System.Double)">
            <summary>
            Returns the max of two numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Double,System.Double,System.Double)">
            <summary>
            Returns the max of three numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Max(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the max of four numbers
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.MinMax(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets the min and max from a set of four values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Nevron.Nov.NMath.Abs(System.Single)">
            <summary>
            Returns the absolute value of a value.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Abs(System.Double)">
            <summary>
            Returns the absolute value of a value.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a value.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Abs(System.Int64)">
            <summary>
            Returns the absolute value of a value.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Floor(System.Double,System.Double)">
            <summary>
            Rounds the value to the previous instance of multiple
            </summary>
            <param name="value"></param>
            <param name="multiple"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Ceiling(System.Double,System.Double)">
            <summary>
            Rounds the value to the next instance of multiple
            </summary>
            <param name="value"></param>
            <param name="multiple"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Int(System.Double)">
            <summary>
            Rounds the value to the adjacent integer that is closest to zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Int(System.Double,System.Double)">
            <summary>
            Rounds the value to the adjacent instance of multiple that is closest to zero.
            </summary>
            <param name="value"></param>
            <param name="multiple"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.IntUp(System.Double)">
            <summary>
            Rounds the value to the adjacent integer that is farest from zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.IntUp(System.Double,System.Double)">
            <summary>
            Rounds the value to the adjacent instance of multiple that is farest from zero.
            </summary>
            <param name="value"></param>
            <param name="multiple"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Round(System.Double,System.Int32)">
            <summary>
            Rounds a number to the precision represented by numDigits. 
            </summary>
            <remarks>
            If numOfDigits is greater than 0, number is rounded by numDigits to the right of the decimal. 
            If numOfDigits is 0, number is rounded to an integer. 
            If numOfDigits is less than 0, number is rounded by numDigits to the left of the decimal.
            </remarks>
            <param name="value"></param>
            <param name="numOfDigits"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Trunc(System.Double,System.Int32)">
            <summary>
            Truncates a number to the precision represented by numDigits. 
            </summary>
            <remarks>
            If numDigits is greater than 0, value is truncated to numDigits to the right of the decimal. 
            If numDigits is 0, value is truncated to an integer. 
            If numDigits is less than 0, value is truncated to numDigits to the left of the decimal.        
            </remarks>
            <param name="value"></param> 
            <param name="numOfDigits"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Modulus(System.Double,System.Double)">
            <summary>
            Returns the remainder (modulus) resulting when a number is divided by a divisor. 
            The result has the same sign as the divisor.
            </summary>
            <param name="value"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Logarithm(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the specified value with the specified base
            </summary>
            <param name="logbase">log base</param>
            <param name="value">value whose logarightm to compute</param>
            <returns>logarithm of the specified value with the specified base</returns>
        </member>
        <member name="M:Nevron.Nov.NMath.EqualsEpsilon(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if value1 equals value2 with epsilon.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.MaxNaN(System.Double,System.Double)">
            <summary>
            Returns the maximum of two values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <remarks>regards NaN values</remarks>
        </member>
        <member name="M:Nevron.Nov.NMath.MinNaN(System.Double,System.Double)">
            <summary>
            Returns the minimum of two values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <remarks>regards NaN values</remarks>
        </member>
        <member name="M:Nevron.Nov.NMath.Atan2Normalized(System.Double,System.Double)">
            <summary>
            Returns the angle that is formed by a vector with the specified y and x coordinates and the X-axis.
            </summary>
            <param name="y">Y coordinate of the vector.</param>
            <param name="x">X coordinate of the vector.</param>
            <returns>An angle (measured in radians) in range [0, 2*PI).</returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Floor(System.Decimal)">
            <summary>
            Returns the largest integer less than or equal to a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NMath.Ceiling(System.Decimal)">
            <summary>
            Returns the largest integer less than or equal to a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.NSystem">
            <summary>
            Static class for commonly used functions, related to the CLR.
            </summary>
        </member>
        <member name="M:Nevron.Nov.NSystem.SafeEquals(System.Object,System.Object)">
            <summary>
            Safely calls the Equals method on obj1, by passing obj2 as argument.
            If both obj1 and obj2 are null, returns true.
            If either obj1 or obj2 is null, returns false.
            In all other cases returns the result of the obj1.Equals(obj2) method call.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.SafeDeepEquals(Nevron.Nov.Dom.INDomDeepEquals,Nevron.Nov.Dom.INDomDeepEquals)">
            <summary>
            Safely calls the DeepEquals method on obj1, by passing obj2 as argument.
            If both obj1 and obj2 are null, returns true.
            If either obj1 or obj2 is null, returns false.
            In all other cases returns the result of the obj1.DeepEquals(obj2) method call.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.SafeGetHashCode(System.Object)">
            <summary>
            Safely gets the hash code of an object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.SafeDeepClone(Nevron.Nov.INDeeplyCloneable)">
            <summary>
            Safe deep clone
            </summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.NullEquals(System.Object,System.Object)">
            <summary>
            Returns true if both objects are null, or non null
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.ChangeMask(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="flag"></param>
            <param name="raise"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.NSystem.CreateCultureInfoFromName(System.String)">
            <summary>
            Creates a culture info from name. If a culture info with the given name does not
            exist or cannot be created, the culture used by the current thread is returned.
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:Nevron.Nov.NSystem.TrueBox">
            <summary>
            The boxed true value
            </summary>
        </member>
        <member name="F:Nevron.Nov.NSystem.FalseBox">
            <summary>
            The boxed false value
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTFont">
            <summary>
            Represents a font
            </summary>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTFontBase">
            <summary>
            The base for the Font and FontFace classes
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontBase.#ctor(Nevron.Nov.TrueType.NOTFontService)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fontService"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFont.#ctor(Nevron.Nov.TrueType.NOTFontService,Nevron.Nov.TrueType.NOTInstalledFont)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fontService"></param>
            <param name="installedFont"></param>
        </member>
        <member name="T:Nevron.Nov.TrueType.NOTFontService">
            <summary>
            The font service maintains a cache of fonts and faces that represent fonts at specific point size
            </summary>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontService.InstallFont(Nevron.Nov.TrueType.NOTInstalledFont)">
            <summary>
            Adds a font to the font service
            </summary>
            <param name="installedFont"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontService.UninstallFont(Nevron.Nov.TrueType.NOTInstalledFont)">
            <summary>
            Uninstalls the specified font
            </summary>
            <param name="installedFont"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontService.UninstallFont(Nevron.Nov.TrueType.NOTFontDescriptor)">
            <summary>
            Uninstalls the specified font.
            </summary>
            <param name="fontDescriptor"></param>
        </member>
        <member name="M:Nevron.Nov.TrueType.NOTFontService.IsFontInstalled(Nevron.Nov.TrueType.NOTFontDescriptor)">
            <summary>
            Returns true if the specified font is already installed
            </summary>
            <param name="fontDescriptor"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTFontService.FontFamilies">
            <summary>
            Returns the installed font families
            </summary>
        </member>
        <member name="P:Nevron.Nov.TrueType.NOTFontService.GammaTable">
            <summary>
            Gets or sets the gamma table used for gamma correction
            </summary>
        </member>
        <member name="T:Nevron.Nov.UI.NSelectEventArgs`1">
            <summary>
            Represents the event arguments associated with node selection events
            </summary>
        </member>
        <member name="M:Nevron.Nov.UI.NSelectEventArgs`1.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,`0)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="item"></param>
        </member>
        <member name="P:Nevron.Nov.UI.NSelectEventArgs`1.Item">
            <summary>
            Gets the item associated with the event
            </summary>
        </member>
    </members>
</doc>
